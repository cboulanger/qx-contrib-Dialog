{
  "className": "qx.log.Logger",
  "packageName": "qx.log",
  "name": "Logger",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 60,
        "column": 0
      },
      "end": {
        "line": 866,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nJohn Spackman (john.spackman@zenesis.com)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Main qooxdoo logging class.\n\nUsed as central logging feature by qx.core.Object.\n\nExtremely modular and lightweight to support logging at bootstrap and\nat shutdown as well.\n\n* Supports dynamic appenders to push the output to the user\n* Supports buffering of the last 50 messages (configurable)\n* Supports different debug levels (\"debug\", \"info\", \"warn\" or \"error\")\n* Simple data serialization for incoming messages\n\nTypical use of this class is via qx.core.MLogging which is included into most\nclasses, so you would use \"this.debug(...)\" etc, but qx.log.Logger.debug(),\n.warn(), .error(), .info(), and .trace() can be used directly for static code.\n\nThe first parameter is expected to be the context object, ie the object which\nis sending the log; this can be null but that will prevent the filtering from\nfiltering on class name so ideally it will be a real qx.core.Object derived\nobject.  Other parameters are any Javascript object which will be serialized\ninto the log message\n\n<pre class=\"javascript\">\nqx.log.Logger.warn(myObject, \"This is a message to log\", myParam, otherData);\n</pre>\n\n\nThe output of logging is controlled by \"appenders\", which are classes that\naccept a log message and output it somehow (see examples in qx.log.appender.*);\ntypical examples are qx.log.appender.Console which outputs to the browser\nconsole, or qx.log.appender.Native which outputs messages into a popup\nwindow as part of your Qooxdoo UI.\n\nWhile it's quick and easy to add logging calls to code as and when you need it,\nit is often convenient to control which logging calls output messages at runtime\nrather than having to edit code. @see qx.log.Logger#addFilter"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.dev.StackTrace"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__level": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCONFIGURATION\n---------------------------------------------------------------------------"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "setLevel": {
      "location": {
        "start": {
          "line": 78,
          "column": 4
        },
        "end": {
          "line": 80,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Configures the minimum log level required for new messages."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {String} One of \"debug\", \"info\", \"warn\" or \"error\".",
            "paramName": "value",
            "description": " One of \"debug\", \"info\", \"warn\" or \"error\".",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getLevel": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 91,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the currently configured minimum log level required for new\nmessages."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Debug level",
            "type": "Integer",
            "description": " Debug level"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setTreshold": {
      "location": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 101,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Configures the number of messages to be kept in the buffer."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {Integer} Any positive integer",
            "paramName": "value",
            "description": " Any positive integer",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTreshold": {
      "location": {
        "start": {
          "line": 110,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the currently configured number of messages to be kept in the\nbuffer."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Treshold value",
            "type": "Integer",
            "description": " Treshold value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__appenders": {
      "location": {
        "start": {
          "line": 125,
          "column": 4
        },
        "end": {
          "line": 125,
          "column": 20
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nAPPENDER MANAGEMENT\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Map of all known appenders by ID"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__appendersByName": {
      "location": {
        "start": {
          "line": 129,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Map of all known appenders by name"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__filters": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 17
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Array} Array of filters to apply when selecting appenders to append to"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__id": {
      "location": {
        "start": {
          "line": 137,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 12
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Last free appender ID"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "register": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Registers the given appender and inserts the last cached messages."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "appender {Class} A static appender class supporting at\nleast a <code>process()</code> method to handle incoming messages.",
            "paramName": "appender",
            "description": " A static appender class supporting at\nleast a <code>process()</code> method to handle incoming messages.",
            "type": "Class"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unregister": {
      "location": {
        "start": {
          "line": 176,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Unregisters the given appender"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "appender {Class} A static appender class",
            "paramName": "appender",
            "description": " A static appender class",
            "type": "Class"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addFilter": {
      "location": {
        "start": {
          "line": 229,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a filter that specifies the appenders to use for a given logger name (classname).\n\nBy default, every log entry is output to all appenders but you can change this\nbehaviour by calling qx.log.Logger.addFilter; every log message is associated\nwith a class and a logging level (ie debug, warn, info, error, etc) and you can\napply a filter on either one.\n\nFor example, to restrict the output to only allow qx.ui.* classes to output debug\nlogging information you would use this:\n\n<pre class=\"javascript\">\nqx.log.Logger.addFilter(/^qx\\.ui/, null, \"debug\");\n</pre>\n\nNote that while the default is to log everything, as soon as you apply one filter\nyou are specifying an exhaustive list of classes; so if you use the above example,\nthe ONLY classes that will be able to log is qx.ui.*.  If you want to use multiple\nclasses to the output, just add more addFilter calls.\n\nThe logging level (eg \"debug\", \"error\", etc) is greater than or equal to - so in\nthe above example, debug, error, warn, and info will be output but trace will not.\n\nThe second parameter to addFilter is the classname of the appender to use; this\nallows you to specify that log messages only go to one destination; for example:\n\n<pre class=\"javascript\">\nqx.log.Logger.addFilter(/^qx\\.ui/, \"qx.log.appender.Console\", \"warn\");\nqx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Native\", \"debug\");\nqx.log.Logger.addFilter(/^qx\\.io/, \"qx.log.appender.Console\", \"error\");\n</pre>\n\nIn this example, qx.ui.* will only go to the Console appender and only if a warning\nis issued; qx.io.* will go to Native for debug, error, warn, and info and to\nConsole for error, warn, and info"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "logger {String|RegExp} the pattern to match in the logger name",
            "paramName": "logger",
            "description": " the pattern to match in the logger name",
            "type": [
              "String",
              "RegExp"
            ]
          },
          {
            "name": "@param",
            "body": "appenderName {String?} the name of the appender class, if undefined then all appenders",
            "paramName": "appenderName",
            "description": " the name of the appender class, if undefined then all appenders",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "level {String?} the minimum logging level to use the appender, if undefined the default level is used",
            "paramName": "level",
            "description": " the minimum logging level to use the appender, if undefined the default level is used",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "resetFilters": {
      "location": {
        "start": {
          "line": 239,
          "column": 4
        },
        "end": {
          "line": 241,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Reset all filters"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "debug": {
      "location": {
        "start": {
          "line": 259,
          "column": 4
        },
        "end": {
          "line": 261,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nUSER METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Sending a message at level \"debug\" to the logger."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "info": {
      "location": {
        "start": {
          "line": 272,
          "column": 4
        },
        "end": {
          "line": 274,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sending a message at level \"info\" to the logger."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "warn": {
      "location": {
        "start": {
          "line": 285,
          "column": 4
        },
        "end": {
          "line": 287,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sending a message at level \"warn\" to the logger."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "error": {
      "location": {
        "start": {
          "line": 298,
          "column": 4
        },
        "end": {
          "line": 300,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sending a message at level \"error\" to the logger."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trace": {
      "location": {
        "start": {
          "line": 311,
          "column": 4
        },
        "end": {
          "line": 318,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prints the current stack trace at level \"info\""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object?} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "optional": true,
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deprecatedMethodWarning": {
      "location": {
        "start": {
          "line": 329,
          "column": 4
        },
        "end": {
          "line": 340,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prints a method deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fcn {Function} reference to the deprecated function. This is\narguments.callee if the calling method is to be deprecated.",
            "paramName": "fcn",
            "description": " reference to the deprecated function. This is\narguments.callee if the calling method is to be deprecated.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "msg {String?} Optional message to be printed.",
            "paramName": "msg",
            "description": " Optional message to be printed.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deprecatedClassWarning": {
      "location": {
        "start": {
          "line": 350,
          "column": 4
        },
        "end": {
          "line": 361,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prints a class deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} reference to the deprecated class.",
            "paramName": "clazz",
            "description": " reference to the deprecated class.",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Optional message to be printed.",
            "paramName": "msg",
            "description": " Optional message to be printed.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deprecatedEventWarning": {
      "location": {
        "start": {
          "line": 372,
          "column": 4
        },
        "end": {
          "line": 383,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prints an event deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} reference to the deprecated class.",
            "paramName": "clazz",
            "description": " reference to the deprecated class.",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "event {String} deprecated event name.",
            "paramName": "event",
            "description": " deprecated event name.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String?} Optional message to be printed.",
            "paramName": "msg",
            "description": " Optional message to be printed.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deprecatedMixinWarning": {
      "location": {
        "start": {
          "line": 393,
          "column": 4
        },
        "end": {
          "line": 404,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prints a mixin deprecation warning and a stack trace if the setting\n<code>qx.debug</code> is set to <code>true</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} reference to the deprecated mixin.",
            "paramName": "clazz",
            "description": " reference to the deprecated mixin.",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "msg {String?} Optional message to be printed.",
            "paramName": "msg",
            "description": " Optional message to be printed.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deprecatedConstantWarning": {
      "location": {
        "start": {
          "line": 416,
          "column": 4
        },
        "end": {
          "line": 434,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prints a constant deprecation warning and a stacktrace if the setting\n<code>qx.debug</code> is set to <code>true</code> AND the browser supports\n__defineGetter__!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} The class the constant is attached to.",
            "paramName": "clazz",
            "description": " The class the constant is attached to.",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "constant {String} The name of the constant as string.",
            "paramName": "constant",
            "description": " The name of the constant as string.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String} Optional message to be printed.",
            "paramName": "msg",
            "description": " Optional message to be printed.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "deprecateMethodOverriding": {
      "location": {
        "start": {
          "line": 448,
          "column": 4
        },
        "end": {
          "line": 469,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prints a deprecation warning and a stacktrace when a subclass overrides\nthe passed method name. The deprecation is only printed if the setting\n<code>qx.debug</code> is set to <code>true</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {qx.core.Object} Instance to check for overriding.",
            "paramName": "object",
            "description": " Instance to check for overriding.",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "baseclass {Class} The baseclass as starting point.",
            "paramName": "baseclass",
            "description": " The baseclass as starting point.",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "methodName {String} The method name which is deprecated for overriding.",
            "paramName": "methodName",
            "description": " The method name which is deprecated for overriding.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "msg {String?} Optional message to be printed.",
            "paramName": "msg",
            "description": " Optional message to be printed.",
            "optional": true,
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "clear": {
      "location": {
        "start": {
          "line": 477,
          "column": 4
        },
        "end": {
          "line": 479,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Deletes the current buffer. Does not influence message handling of the\nconnected appenders."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__buffer": {
      "location": {
        "start": {
          "line": 491,
          "column": 4
        },
        "end": {
          "line": 491,
          "column": 49
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINTERNAL LOGGING IMPLEMENTATION\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{qx.log.appender.RingBuffer} Message buffer of previously fired messages."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__levels": {
      "location": {
        "start": {
          "line": 495,
          "column": 4
        },
        "end": {
          "line": 502,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Numeric translation of log levels"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__appendersCache": {
      "location": {
        "start": {
          "line": 505,
          "column": 4
        },
        "end": {
          "line": 505,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} cache of appenders for a given logger and level"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__getLoggerName": {
      "location": {
        "start": {
          "line": 514,
          "column": 4
        },
        "end": {
          "line": 524,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects the name of the logger to use for an object"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Logger name",
            "type": "String",
            "description": " Logger name"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "isLoggerEnabled": {
      "location": {
        "start": {
          "line": 534,
          "column": 4
        },
        "end": {
          "line": 538,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects whether a logger level is enabled for an object"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "level {String} One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"",
            "paramName": "level",
            "description": " One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} True if the logger is enabled",
            "type": "Boolean",
            "description": " True if the logger is enabled"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__log": {
      "location": {
        "start": {
          "line": 548,
          "column": 4
        },
        "end": {
          "line": 599,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal logging main routine."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "level {String} One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"",
            "paramName": "level",
            "description": " One of \"trace\", \"debug\", \"info\", \"warn\" or \"error\"",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Array} List of other arguments, where the first is\ntaken as the context object.",
            "paramName": "args",
            "description": " List of other arguments, where the first is\ntaken as the context object.",
            "type": "Array"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getAppenders": {
      "location": {
        "start": {
          "line": 609,
          "column": 4
        },
        "end": {
          "line": 654,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Finds the appenders for a given classname"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "className {String} Name of the class",
            "paramName": "className",
            "description": " Name of the class",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "level {String} the minimum logging level to use the appender",
            "paramName": "level",
            "description": " the minimum logging level to use the appender",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} list of appenders",
            "type": "Array",
            "description": " list of appenders"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__detect": {
      "location": {
        "start": {
          "line": 667,
          "column": 4
        },
        "end": {
          "line": 708,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects the type of the variable given."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Incoming value",
            "paramName": "value",
            "description": " Incoming value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Type of the incoming value. Possible values:\n\"undefined\", \"null\", \"boolean\", \"number\", \"string\",\n\"function\", \"array\", \"error\", \"map\",\n\"class\", \"instance\", \"node\", \"stringify\", \"unknown\"",
            "type": "String",
            "description": " Type of the incoming value. Possible values:\n\"undefined\", \"null\", \"boolean\", \"number\", \"string\",\n\"function\", \"array\", \"error\", \"map\",\n\"class\", \"instance\", \"node\", \"stringify\", \"unknown\""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__serialize": {
      "location": {
        "start": {
          "line": 722,
          "column": 4
        },
        "end": {
          "line": 849,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Serializes the incoming value. If it is a singular value, the result is\na simple string. For an array or a map the result can also be a\nserialized string of a limited number of individual items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Incoming value",
            "paramName": "value",
            "description": " Incoming value",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "deep {Boolean?false} Whether arrays and maps should be\nserialized for a limited number of items",
            "paramName": "deep",
            "description": " Whether arrays and maps should be\nserialized for a limited number of items",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Contains the keys <code>type</code>, <code>text</code> and\n<code>trace</code>.",
            "type": "Map",
            "description": " Contains the keys <code>type</code>, <code>text</code> and\n<code>trace</code>."
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 853,
        "column": 2
      },
      "end": {
        "line": 865,
        "column": 3
      }
    }
  },
  "descendants": []
}