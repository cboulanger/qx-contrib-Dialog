{
  "className": "qx.ui.table.selection.Model",
  "packageName": "qx.ui.table.selection",
  "name": "Model",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 666,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2006 STZ-IDA, Germany, http://www.stz-ida.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nTil Schneider (til132)\nDavid Perez Carmona (david-perez)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A selection model."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 36,
        "column": 2
      },
      "end": {
        "line": 45,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "events": {
    "changeSelection": {
      "location": {
        "start": {
          "line": 57,
          "column": 4
        },
        "end": {
          "line": 57,
          "column": 45
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the selection has changed."
          }
        ]
      },
      "name": "changeSelection",
      "type": "qx.event.type.Event"
    }
  },
  "statics": {
    "NO_SELECTION": {
      "location": {
        "start": {
          "line": 72,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{int} The selection mode \"none\". Nothing can ever be selected."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SINGLE_SELECTION": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{int} The selection mode \"single\". This mode only allows one selected item."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SINGLE_INTERVAL_SELECTION": {
      "location": {
        "start": {
          "line": 82,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{int} The selection mode \"single interval\". This mode only allows one\ncontinuous interval of selected items."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "MULTIPLE_INTERVAL_SELECTION": {
      "location": {
        "start": {
          "line": 89,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{int} The selection mode \"multiple interval\". This mode only allows any\nselection."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "MULTIPLE_INTERVAL_SELECTION_TOGGLE": {
      "location": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 99,
          "column": 42
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{int} The selection mode \"multiple interval\". This mode only allows any\nselection. The difference with the previous one, is that multiple\nselection is eased. A tap on an item, toggles its selection state.\nOn the other hand, MULTIPLE_INTERVAL_SELECTION does this behavior only\nwhen Ctrl-tapping an item."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "properties": {
    "selectionMode": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 124,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the selection mode. Valid values are {@link #NO_SELECTION},\n{@link #SINGLE_SELECTION}, {@link #SINGLE_INTERVAL_SELECTION},\n{@link #MULTIPLE_INTERVAL_SELECTION} and\n{@link #MULTIPLE_INTERVAL_SELECTION_TOGGLE}."
          }
        ]
      },
      "name": "selectionMode",
      "propertyType": "new",
      "apply": "_applySelectionMode",
      "init": 2,
      "possibleValues": [
        1,
        2,
        3,
        4,
        5
      ],
      "defaultValue": 2
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__hadChangeEventInBatchMode": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 138,
          "column": 38
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__anchorSelectionIndex": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 139,
          "column": 33
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__leadSelectionIndex": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 140,
          "column": 31
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__selectedRangeArr": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_applySelectionMode": {
      "location": {
        "start": {
          "line": 145,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "selectionMode property modifier"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "selectionMode"
      ]
    },
    "setBatchMode": {
      "location": {
        "start": {
          "line": 164,
          "column": 4
        },
        "end": {
          "line": 185,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Activates / Deactivates batch mode. In batch mode, no change events will be thrown but\nwill be collected instead. When batch mode is turned off again and any events have\nbeen collected, one event is thrown to inform the listeners.\n\nThis method supports nested calling, i. e. batch mode can be turned more than once.\nIn this case, batch mode will not end until it has been turned off once for each\nturning on."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "batchMode {Boolean} true to activate batch mode, false to deactivate",
            "paramName": "batchMode",
            "description": " true to activate batch mode, false to deactivate",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if batch mode is active, false otherwise",
            "type": "Boolean",
            "description": " true if batch mode is active, false otherwise"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if batch mode is turned off once more than it has been turned on",
            "type": "Error",
            "description": " if batch mode is turned off once more than it has been turned on"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasBatchMode": {
      "location": {
        "start": {
          "line": 194,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether batch mode is active. See setter for a description of batch mode."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if batch mode is active, false otherwise",
            "type": "Boolean",
            "description": " true if batch mode is active, false otherwise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getAnchorSelectionIndex": {
      "location": {
        "start": {
          "line": 205,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the first argument of the last call to {@link #setSelectionInterval()},\n{@link #addSelectionInterval()} or {@link #removeSelectionInterval()}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the anchor selection index.",
            "type": "Integer",
            "description": " the anchor selection index."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_setAnchorSelectionIndex": {
      "location": {
        "start": {
          "line": 216,
          "column": 4
        },
        "end": {
          "line": 218,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the anchor selection index. Only use this function, if you want manipulate\nthe selection manually."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} the index to set.",
            "paramName": "index",
            "description": " the index to set.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getLeadSelectionIndex": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the second argument of the last call to {@link #setSelectionInterval()},\n{@link #addSelectionInterval()} or {@link #removeSelectionInterval()}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the lead selection index.",
            "type": "Integer",
            "description": " the lead selection index."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_setLeadSelectionIndex": {
      "location": {
        "start": {
          "line": 238,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the lead selection index. Only use this function, if you want manipulate\nthe selection manually."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} the index to set.",
            "paramName": "index",
            "description": " the index to set.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getSelectedRangeArr": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns an array that holds all the selected ranges of the table. Each\nentry is a map holding information about the \"minIndex\" and \"maxIndex\" of the\nselection range."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} array with all the selected ranges.",
            "type": "Map[]",
            "description": " array with all the selected ranges."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "resetSelection": {
      "location": {
        "start": {
          "line": 258,
          "column": 4
        },
        "end": {
          "line": 265,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets (clears) the selection."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isSelectionEmpty": {
      "location": {
        "start": {
          "line": 273,
          "column": 4
        },
        "end": {
          "line": 275,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the selection is empty."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the selection is empty.",
            "type": "Boolean",
            "description": " whether the selection is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSelectedCount": {
      "location": {
        "start": {
          "line": 283,
          "column": 4
        },
        "end": {
          "line": 294,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the number of selected items."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the number of selected items.",
            "type": "Integer",
            "description": " the number of selected items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isSelectedIndex": {
      "location": {
        "start": {
          "line": 303,
          "column": 4
        },
        "end": {
          "line": 315,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether an index is selected."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} the index to check.",
            "paramName": "index",
            "description": " the index to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the index is selected.",
            "type": "Boolean",
            "description": " whether the index is selected."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSelectedRanges": {
      "location": {
        "start": {
          "line": 324,
          "column": 4
        },
        "end": {
          "line": 340,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the selected ranges as an array. Each array element has a\n<code>minIndex</code> and a <code>maxIndex</code> property."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} the selected ranges.",
            "type": "Map[]",
            "description": " the selected ranges."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "iterateSelection": {
      "location": {
        "start": {
          "line": 359,
          "column": 4
        },
        "end": {
          "line": 367,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Calls an iterator function for each selected index.\n\nUsage Example:\n<pre class='javascript'>\nvar selectedRowData = [];\nmySelectionModel.iterateSelection(function(index) {\nselectedRowData.push(myTableModel.getRowData(index));\n});\n</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "iterator {Function} the function to call for each selected index.\nGets the current index as parameter.",
            "paramName": "iterator",
            "description": " the function to call for each selected index.\nGets the current index as parameter.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "object {var ? null} the object to use when calling the handler.\n(this object will be available via \"this\" in the iterator)",
            "paramName": "object",
            "description": " the object to use when calling the handler.\n(this object will be available via \"this\" in the iterator)",
            "optional": true,
            "defaultValue": "null",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setSelectionInterval": {
      "location": {
        "start": {
          "line": 376,
          "column": 4
        },
        "end": {
          "line": 424,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the selected interval. This will clear the former selection."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromIndex {Integer} the first index of the selection (including).",
            "paramName": "fromIndex",
            "description": " the first index of the selection (including).",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "toIndex {Integer} the last index of the selection (including).",
            "paramName": "toIndex",
            "description": " the last index of the selection (including).",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addSelectionInterval": {
      "location": {
        "start": {
          "line": 433,
          "column": 4
        },
        "end": {
          "line": 452,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a selection interval to the current selection."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromIndex {Integer} the first index of the selection (including).",
            "paramName": "fromIndex",
            "description": " the first index of the selection (including).",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "toIndex {Integer} the last index of the selection (including).",
            "paramName": "toIndex",
            "description": " the last index of the selection (including).",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeSelectionInterval": {
      "location": {
        "start": {
          "line": 463,
          "column": 4
        },
        "end": {
          "line": 542,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes an interval from the current selection."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromIndex {Integer} the first index of the interval (including).",
            "paramName": "fromIndex",
            "description": " the first index of the interval (including).",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "toIndex {Integer} the last index of the interval (including).",
            "paramName": "toIndex",
            "description": " the last index of the interval (including).",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowsRemoved {Boolean?} rows were removed that caused this selection to change.\nIf rows were removed, move the selections over so the same rows are selected as before.",
            "paramName": "rowsRemoved",
            "description": " rows were removed that caused this selection to change.\nIf rows were removed, move the selections over so the same rows are selected as before.",
            "optional": true,
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_resetSelection": {
      "location": {
        "start": {
          "line": 548,
          "column": 4
        },
        "end": {
          "line": 553,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets (clears) the selection, but doesn't inform the listeners."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_addSelectionInterval": {
      "location": {
        "start": {
          "line": 563,
          "column": 4
        },
        "end": {
          "line": 613,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a selection interval to the current selection, but doesn't inform\nthe listeners."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fromIndex {Integer} the first index of the selection (including).",
            "paramName": "fromIndex",
            "description": " the first index of the selection (including).",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "toIndex {Integer} the last index of the selection (including).",
            "paramName": "toIndex",
            "description": " the last index of the selection (including).",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_dumpRanges": {
      "location": {
        "start": {
          "line": 620,
          "column": 4
        },
        "end": {
          "line": 631,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "this._dumpRanges();"
          },
          {
            "name": "@description",
            "body": "Logs the current ranges for debug purposes."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_fireChangeSelection": {
      "location": {
        "start": {
          "line": 639,
          "column": 4
        },
        "end": {
          "line": 651,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fires the \"changeSelection\" event to all registered listeners. If the selection model\ncurrently is in batch mode, only one event will be thrown when batch mode is ended."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getSelectionMode": {
      "type": "function",
      "name": "getSelectionMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>selectionMode</code>.\n\nFor further details take a look at the property definition: {@link #selectionMode}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for selectionMode"
          }
        ]
      }
    },
    "setSelectionMode": {
      "type": "function",
      "name": "setSelectionMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>selectionMode</code>.\n\nFor further details take a look at the property definition: {@link #selectionMode}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for selectionMode"
          }
        ]
      }
    },
    "resetSelectionMode": {
      "type": "function",
      "name": "resetSelectionMode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>selectionMode</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #selectionMode}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 663,
        "column": 2
      },
      "end": {
        "line": 665,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}