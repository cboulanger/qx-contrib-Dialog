{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/columnmodel/Basic.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__overallColumnArr",
    "__visibleColumnArr",
    "events",
    "statics",
    "DEFAULT_WIDTH",
    "DEFAULT_HEADER_RENDERER",
    "ui",
    "table",
    "headerrenderer",
    "Default",
    "DEFAULT_DATA_RENDERER",
    "cellrenderer",
    "DEFAULT_EDITOR_FACTORY",
    "celleditor",
    "TextField",
    "members",
    "__internalChange",
    "__colToXPosMap",
    "__columnDataArr",
    "__headerRenderer",
    "__dataRenderer",
    "__editorFactory",
    "init",
    "colCount",
    "assertInteger",
    "width",
    "columnmodel",
    "Basic",
    "headerRenderer",
    "dataRenderer",
    "editorFactory",
    "initiallyHiddenColumns",
    "getInitiallyHiddenColumns",
    "col",
    "hidden",
    "length",
    "setColumnVisible",
    "data",
    "visible",
    "isColumnVisible",
    "fireDataEvent",
    "getVisibleColumns",
    "setColumnWidth",
    "isPointerAction",
    "assertNotUndefined",
    "oldWidth",
    "newWidth",
    "getColumnWidth",
    "setHeaderCellRenderer",
    "renderer",
    "assertInterface",
    "IHeaderRenderer",
    "oldRenderer",
    "dispose",
    "getHeaderCellRenderer",
    "setDataCellRenderer",
    "ICellRenderer",
    "getDataCellRenderer",
    "setCellEditorFactory",
    "factory",
    "ICellEditorFactory",
    "oldFactory",
    "getCellEditorFactory",
    "_getColToXPosMap",
    "overX",
    "visX",
    "getVisibleColumnCount",
    "getVisibleColumnAtX",
    "visXPos",
    "getVisibleX",
    "getOverallColumnCount",
    "getOverallColumnAtX",
    "overXPos",
    "getOverallX",
    "assertBoolean",
    "colToXPosMap",
    "Error",
    "nextVisX",
    "x",
    "currCol",
    "currVisX",
    "splice",
    "moveColumn",
    "fromOverXPos",
    "toOverXPos",
    "setColumnsOrder",
    "newPositions",
    "assertArray",
    "isVisible",
    "Array",
    "colIdx",
    "lang",
    "clone",
    "destruct",
    "i",
    "_disposeObjects"
  ],
  "mappings": "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",
  "file": "Basic.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A model that contains all meta data about columns, such as width, renderer,\n * visibility and order.\n *\n * @see qx.ui.table.ITableModel\n */\nqx.Class.define(\"qx.ui.table.columnmodel.Basic\",\n{\n  extend : qx.core.Object,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__overallColumnArr = [];\n    this.__visibleColumnArr = [];\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events : {\n\n    /**\n     * Fired when the width of a column has changed. The data property of the event is\n     * a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column the width of which has changed.</li>\n     *   <li>newWidth: The new width of the column in pixels.</li>\n     *   <li>oldWidth: The old width of the column in pixels.</li>\n     * </ul>\n     */\n    \"widthChanged\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when the visibility of a column has changed. This event is equal to\n      * \"visibilityChanged\", but is fired right before.\n     */\n    \"visibilityChangedPre\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when the visibility of a column has changed. The data property of the\n     * event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column the visibility of which has changed.</li>\n     *   <li>visible: Whether the column is now visible.</li>\n     * </ul>\n     */\n    \"visibilityChanged\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when the column order has changed. The data property of the\n     * event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column that was moved.</li>\n     *   <li>fromOverXPos: The old overall x position of the column.</li>\n     *   <li>toOverXPos: The new overall x position of the column.</li>\n     * </ul>\n     */\n    \"orderChanged\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when the cell renderer of a column has changed.\n     * The data property of the event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column that was moved.</li>\n     * </ul>\n     */\n    \"headerCellRendererChanged\" : \"qx.event.type.Data\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n\n    /** @type {Integer} the default width of a column in pixels. */\n    DEFAULT_WIDTH           : 100,\n\n    /** @type {qx.ui.table.headerrenderer.Default} the default header cell renderer. */\n    DEFAULT_HEADER_RENDERER : qx.ui.table.headerrenderer.Default,\n\n    /** @type {qx.ui.table.cellrenderer.Default} the default data cell renderer. */\n    DEFAULT_DATA_RENDERER   : qx.ui.table.cellrenderer.Default,\n\n    /** @type {qx.ui.table.celleditor.TextField} the default editor factory. */\n    DEFAULT_EDITOR_FACTORY  : qx.ui.table.celleditor.TextField\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __internalChange : null,\n    __colToXPosMap : null,\n    __visibleColumnArr : null,\n    __overallColumnArr : null,\n    __columnDataArr : null,\n\n    __headerRenderer : null,\n    __dataRenderer : null,\n    __editorFactory : null,\n\n\n    /**\n     * Initializes the column model.\n     *\n     * @param colCount {Integer}\n     *   The number of columns the model should have.\n     *\n     * @param table {qx.ui.table.Table}\n     *   The table to which this column model is attached.\n     */\n    init : function(colCount, table)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(colCount, \"Invalid argument 'colCount'.\");\n      }\n\n      this.__columnDataArr = [];\n\n      var width = qx.ui.table.columnmodel.Basic.DEFAULT_WIDTH;\n      var headerRenderer = this.__headerRenderer ||  (this.__headerRenderer = new qx.ui.table.columnmodel.Basic.DEFAULT_HEADER_RENDERER());\n      var dataRenderer = this.__dataRenderer || (this.__dataRenderer = new qx.ui.table.columnmodel.Basic.DEFAULT_DATA_RENDERER());\n      var editorFactory = this.__editorFactory || (this.__editorFactory = new qx.ui.table.columnmodel.Basic.DEFAULT_EDITOR_FACTORY());\n      this.__overallColumnArr = [];\n      this.__visibleColumnArr = [];\n\n      // Get the initially hidden column array, if one was provided. Older\n      // subclasses may not provide the 'table' argument, so we treat them\n      // traditionally with no initially hidden columns.\n      var initiallyHiddenColumns;\n\n      // Was a table provided to us?\n      if (table)\n      {\n        // Yup. Get its list of initially hidden columns, if the user provided\n        // such a list.\n        initiallyHiddenColumns = table.getInitiallyHiddenColumns();\n      }\n\n      // If no table was specified, or if the user didn't provide a list of\n      // initially hidden columns, use an empty list.\n      initiallyHiddenColumns = initiallyHiddenColumns || [];\n\n\n      for (var col=0; col<colCount; col++)\n      {\n        this.__columnDataArr[col] =\n        {\n          width          : width,\n          headerRenderer : headerRenderer,\n          dataRenderer   : dataRenderer,\n          editorFactory  : editorFactory\n        };\n\n        this.__overallColumnArr[col] = col;\n        this.__visibleColumnArr[col] = col;\n      }\n\n      this.__colToXPosMap = null;\n\n      // If any columns are initially hidden, hide them now. Make it an\n      // internal change so that events are not generated.\n      this.__internalChange = true;\n      for (var hidden=0; hidden<initiallyHiddenColumns.length; hidden++)\n      {\n        this.setColumnVisible(initiallyHiddenColumns[hidden], false);\n      }\n      this.__internalChange = false;\n\n      for (col=0; col<colCount; col++)\n      {\n        var data =\n        {\n          col     : col,\n          visible : this.isColumnVisible(col)\n        };\n\n        this.fireDataEvent(\"visibilityChangedPre\", data);\n        this.fireDataEvent(\"visibilityChanged\", data);\n      }\n    },\n\n\n    /**\n     * Return the array of visible columns\n     *\n     * @return {Array} List of all visible columns\n     */\n    getVisibleColumns : function() {\n      return this.__visibleColumnArr != null ? this.__visibleColumnArr : [];\n    },\n\n\n    /**\n     * Sets the width of a column.\n     *\n     * @param col {Integer}\n     *   The model index of the column.\n     *\n     * @param width {Integer}\n     *   The new width the column should get in pixels.\n     *\n     * @param isPointerAction {Boolean}\n     *   <i>true</i> if the column width is being changed as a result of a\n     *   pointer drag in the header; false or undefined otherwise.\n     *\n     */\n    setColumnWidth : function(col, width, isPointerAction)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInteger(width, \"Invalid argument 'width'.\");\n        this.assertNotUndefined(this.__columnDataArr[col], \"Column not found in table model\");\n      }\n\n      var oldWidth = this.__columnDataArr[col].width;\n\n      if (oldWidth != width)\n      {\n        this.__columnDataArr[col].width = width;\n\n        var data =\n        {\n          col           : col,\n          newWidth      : width,\n          oldWidth      : oldWidth,\n          isPointerAction : isPointerAction || false\n        };\n\n        this.fireDataEvent(\"widthChanged\", data);\n      }\n    },\n\n\n    /**\n     * Returns the width of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the width of the column in pixels.\n     */\n    getColumnWidth : function(col)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(this.__columnDataArr[col], \"Column not found in table model\");\n      }\n\n      return this.__columnDataArr[col].width;\n    },\n\n\n    /**\n     * Sets the header renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param renderer {qx.ui.table.IHeaderRenderer} the new header renderer the column\n     *      should get.\n     */\n    setHeaderCellRenderer : function(col, renderer)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(renderer, qx.ui.table.IHeaderRenderer, \"Invalid argument 'renderer'.\");\n        this.assertNotUndefined(this.__columnDataArr[col], \"Column not found in table model\");\n      }\n\n      var oldRenderer = this.__columnDataArr[col].headerRenderer;\n      if (oldRenderer !== this.__headerRenderer) {\n        oldRenderer.dispose();\n      }\n\n      this.__columnDataArr[col].headerRenderer = renderer;\n      this.fireDataEvent(\"headerCellRendererChanged\", {col:col});\n    },\n\n\n    /**\n     * Returns the header renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.IHeaderRenderer} the header renderer of the column.\n     */\n    getHeaderCellRenderer : function(col)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(this.__columnDataArr[col], \"Column not found in table model\");\n      }\n\n      return this.__columnDataArr[col].headerRenderer;\n    },\n\n\n    /**\n     * Sets the data renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param renderer {qx.ui.table.ICellRenderer} the new data renderer\n     *   the column should get.\n     * @return {qx.ui.table.ICellRenderer?null} If an old renderer was set and\n     *   it was not the default renderer, the old renderer is returned for\n     *   pooling or disposing.\n     */\n    setDataCellRenderer : function(col, renderer)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(renderer, qx.ui.table.ICellRenderer, \"Invalid argument 'renderer'.\");\n        this.assertNotUndefined(this.__columnDataArr[col], \"Column not found in table model\");\n      }\n\n      var oldRenderer = this.__columnDataArr[col].dataRenderer;\n      this.__columnDataArr[col].dataRenderer = renderer;\n\n      if (oldRenderer !== this.__dataRenderer) {\n        return oldRenderer;\n      }\n      return null;\n    },\n\n\n    /**\n     * Returns the data renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.ICellRenderer} the data renderer of the column.\n     */\n    getDataCellRenderer : function(col)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(this.__columnDataArr[col], \"Column not found in table model\");\n      }\n\n      return this.__columnDataArr[col].dataRenderer;\n    },\n\n\n    /**\n     * Sets the cell editor factory of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param factory {qx.ui.table.ICellEditorFactory} the new cell editor factory the column should get.\n     */\n    setCellEditorFactory : function(col, factory)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(factory, qx.ui.table.ICellEditorFactory, \"Invalid argument 'factory'.\");\n        this.assertNotUndefined(this.__columnDataArr[col], \"Column not found in table model\");\n      }\n\n      var oldFactory = this.__columnDataArr[col].editorFactory;\n      if (oldFactory === factory) {\n        return;\n      }\n      if (oldFactory !== this.__editorFactory) {\n        oldFactory.dispose();\n      }\n\n      this.__columnDataArr[col].editorFactory = factory;\n    },\n\n\n    /**\n     * Returns the cell editor factory of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.ICellEditorFactory} the cell editor factory of the column.\n     */\n    getCellEditorFactory : function(col)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(this.__columnDataArr[col], \"Column not found in table model\");\n      }\n\n      return this.__columnDataArr[col].editorFactory;\n    },\n\n\n    /**\n     * Returns the map that translates model indexes to x positions.\n     *\n     * The returned map contains for a model index (int) a map having two\n     * properties: overX (the overall x position of the column, int) and\n     * visX (the visible x position of the column, int). visX is missing for\n     * hidden columns.\n     *\n     * @return {Map} the \"column to x position\" map.\n     */\n    _getColToXPosMap : function()\n    {\n      if (this.__colToXPosMap == null)\n      {\n        this.__colToXPosMap = {};\n\n        for (var overX=0; overX<this.__overallColumnArr.length; overX++)\n        {\n          var col = this.__overallColumnArr[overX];\n          this.__colToXPosMap[col] = { overX : overX };\n        }\n\n        for (var visX=0; visX<this.__visibleColumnArr.length; visX++)\n        {\n          var col = this.__visibleColumnArr[visX];\n          this.__colToXPosMap[col].visX = visX;\n        }\n      }\n\n      return this.__colToXPosMap;\n    },\n\n\n    /**\n     * Returns the number of visible columns.\n     *\n     * @return {Integer} the number of visible columns.\n     */\n    getVisibleColumnCount : function() {\n      return this.__visibleColumnArr != null ? this.__visibleColumnArr.length : 0;\n    },\n\n\n    /**\n     * Returns the model index of a column at a certain visible x position.\n     *\n     * @param visXPos {Integer} the visible x position of the column.\n     * @return {Integer} the model index of the column.\n     */\n    getVisibleColumnAtX : function(visXPos)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(visXPos, \"Invalid argument 'visXPos'.\");\n      }\n\n      return this.__visibleColumnArr[visXPos];\n    },\n\n\n    /**\n     * Returns the visible x position of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the visible x position of the column.\n     */\n    getVisibleX : function(col)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return this._getColToXPosMap()[col].visX;\n    },\n\n\n    /**\n     * Returns the overall number of columns (including hidden columns).\n     *\n     * @return {Integer} the overall number of columns.\n     */\n    getOverallColumnCount : function() {\n      return this.__overallColumnArr.length;\n    },\n\n\n    /**\n     * Returns the model index of a column at a certain overall x position.\n     *\n     * @param overXPos {Integer} the overall x position of the column.\n     * @return {Integer} the model index of the column.\n     */\n    getOverallColumnAtX : function(overXPos)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(overXPos, \"Invalid argument 'overXPos'.\");\n      }\n\n      return this.__overallColumnArr[overXPos];\n    },\n\n\n    /**\n     * Returns the overall x position of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the overall x position of the column.\n     */\n    getOverallX : function(col)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return this._getColToXPosMap()[col].overX;\n    },\n\n\n    /**\n     * Returns whether a certain column is visible.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Boolean} whether the column is visible.\n     */\n    isColumnVisible : function(col)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return (this._getColToXPosMap()[col].visX != null);\n    },\n\n\n    /**\n     * Sets whether a certain column is visible.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param visible {Boolean} whether the column should be visible.\n     */\n    setColumnVisible : function(col, visible)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertBoolean(visible, \"Invalid argument 'visible'.\");\n      }\n\n      if (visible != this.isColumnVisible(col))\n      {\n        if (visible)\n        {\n          var colToXPosMap = this._getColToXPosMap();\n\n          var overX = colToXPosMap[col].overX;\n\n          if (overX == null) {\n            throw new Error(\"Showing column failed: \" + col + \". The column is not added to this TablePaneModel.\");\n          }\n\n          // get the visX of the next visible column after the column to show\n          var nextVisX;\n\n          for (var x=overX+1; x<this.__overallColumnArr.length; x++)\n          {\n            var currCol = this.__overallColumnArr[x];\n            var currVisX = colToXPosMap[currCol].visX;\n\n            if (currVisX != null)\n            {\n              nextVisX = currVisX;\n              break;\n            }\n          }\n\n          // If there comes no visible column any more, then show the column\n          // at the end\n          if (nextVisX == null) {\n            nextVisX = this.__visibleColumnArr.length;\n          }\n\n          // Add the column to the visible columns\n          this.__visibleColumnArr.splice(nextVisX, 0, col);\n        }\n        else\n        {\n          var visX = this.getVisibleX(col);\n          this.__visibleColumnArr.splice(visX, 1);\n        }\n\n        // Invalidate the __colToXPosMap\n        this.__colToXPosMap = null;\n\n        // Inform the listeners\n        if (!this.__internalChange)\n        {\n          var data =\n          {\n            col     : col,\n            visible : visible\n          };\n\n          this.fireDataEvent(\"visibilityChangedPre\", data);\n          this.fireDataEvent(\"visibilityChanged\", data);\n        }\n      }\n    },\n\n\n    /**\n     * Moves a column.\n     *\n     * @param fromOverXPos {Integer} the overall x position of the column to move.\n     * @param toOverXPos {Integer} the overall x position of where the column should be\n     *      moved to.\n     */\n    moveColumn : function(fromOverXPos, toOverXPos)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertInteger(fromOverXPos, \"Invalid argument 'fromOverXPos'.\");\n        this.assertInteger(toOverXPos, \"Invalid argument 'toOverXPos'.\");\n      }\n\n      this.__internalChange = true;\n\n      var col = this.__overallColumnArr[fromOverXPos];\n      var visible = this.isColumnVisible(col);\n\n      if (visible) {\n        this.setColumnVisible(col, false);\n      }\n\n      this.__overallColumnArr.splice(fromOverXPos, 1);\n      this.__overallColumnArr.splice(toOverXPos, 0, col);\n\n      // Invalidate the __colToXPosMap\n      this.__colToXPosMap = null;\n\n      if (visible) {\n        this.setColumnVisible(col, true);\n      }\n      this.__internalChange = false;\n\n      // Inform the listeners\n      var data =\n      {\n        col          : col,\n        fromOverXPos : fromOverXPos,\n        toOverXPos   : toOverXPos\n      };\n\n      this.fireDataEvent(\"orderChanged\", data);\n    },\n\n\n    /**\n     * Reorders all columns to new overall positions. Will fire one \"orderChanged\" event\n     * without data afterwards\n     *\n     * @param newPositions {Integer[]} Array mapping the index of a column in table model to its wanted overall\n     *                            position on screen (both zero based). If the table models holds\n     *                            col0, col1, col2 and col3 and you give [1,3,2,0], the new column order\n     *                            will be col3, col0, col2, col1\n     */\n    setColumnsOrder : function(newPositions)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArray(newPositions, \"Invalid argument 'newPositions'.\");\n      }\n\n      if (newPositions.length == this.__overallColumnArr.length)\n      {\n        this.__internalChange = true;\n\n        // Go through each column an switch visible ones to invisible. Reason is unknown,\n        // this just mimicks the behaviour of moveColumn. Possibly useful because setting\n        // a column visible later updates a map with its screen coords.\n        var isVisible = new Array(newPositions.length);\n        for (var colIdx = 0; colIdx < this.__overallColumnArr.length; colIdx++)\n        {\n          var visible = this.isColumnVisible(colIdx);\n          isVisible[colIdx] = visible; //Remember, as this relies on this.__colToXPosMap which is cleared below\n          if (visible){\n            this.setColumnVisible(colIdx, false);\n          }\n        }\n\n        // Store new position values\n        this.__overallColumnArr = qx.lang.Array.clone(newPositions);\n\n        // Invalidate the __colToXPosMap\n        this.__colToXPosMap = null;\n\n        // Go through each column an switch invisible ones back to visible\n        for (var colIdx = 0; colIdx < this.__overallColumnArr.length; colIdx++){\n          if (isVisible[colIdx]) {\n            this.setColumnVisible(colIdx, true);\n          }\n        }\n        this.__internalChange = false;\n\n        // Inform the listeners. Do not add data as all known listeners in qooxdoo\n        // only take this event to mean \"total repaint necesscary\". Fabian will look\n        // after deprecating the data part of the orderChanged - event\n        this.fireDataEvent(\"orderChanged\");\n\n      } else {\n        throw new Error(\"setColumnsOrder: Invalid number of column positions given, expected \"\n                        + this.__overallColumnArr.length + \", got \" + newPositions.length);\n      }\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    for (var i=0; i< this.__columnDataArr.length; i++)\n    {\n      this.__columnDataArr[i].headerRenderer.dispose();\n      this.__columnDataArr[i].dataRenderer.dispose();\n      this.__columnDataArr[i].editorFactory.dispose();\n    }\n\n    this.__overallColumnArr = this.__visibleColumnArr =\n      this.__columnDataArr = this.__colToXPosMap = null;\n\n    this._disposeObjects(\n      \"__headerRenderer\",\n      \"__dataRenderer\",\n      \"__editorFactory\"\n    );\n  }\n});\n"
  ]
}