{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/pane/Pane.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "construct",
    "paneScroller",
    "__paneScroller",
    "__lastColCount",
    "__lastRowCount",
    "__rowCache",
    "events",
    "properties",
    "firstVisibleRow",
    "check",
    "init",
    "apply",
    "visibleRowCount",
    "maxCacheLines",
    "allowShrinkX",
    "refine",
    "members",
    "__tableContainer",
    "__focusedRow",
    "__focusedCol",
    "__rowCacheCount",
    "_applyFirstVisibleRow",
    "value",
    "old",
    "updateContent",
    "_applyVisibleRowCount",
    "_getContentHint",
    "width",
    "getPaneScroller",
    "getTablePaneModel",
    "getTotalWidth",
    "height",
    "getTable",
    "setFocusedCell",
    "col",
    "row",
    "massUpdate",
    "oldRow",
    "onSelectionChanged",
    "onFocusChanged",
    "setColumnWidth",
    "onColOrderChanged",
    "onPaneModelChanged",
    "onTableModelDataChanged",
    "firstRow",
    "lastRow",
    "firstColumn",
    "lastColumn",
    "__rowCacheClear",
    "paneFirstRow",
    "getFirstVisibleRow",
    "rowCount",
    "getVisibleRowCount",
    "onTableModelMetaDataChanged",
    "_applyMaxCacheLines",
    "__rowCacheGet",
    "selected",
    "focused",
    "__rowCacheSet",
    "rowString",
    "getMaxCacheLines",
    "completeUpdate",
    "scrollOffset",
    "onlyRow",
    "onlySelectionOrFocusChanged",
    "Math",
    "abs",
    "min",
    "_scrollContent",
    "getAlwaysUpdateCells",
    "_updateRowStyles",
    "_updateAllRows",
    "elem",
    "getContentElement",
    "getDomElement",
    "firstChild",
    "table",
    "selectionModel",
    "getSelectionModel",
    "tableModel",
    "getTableModel",
    "rowRenderer",
    "getDataRowRenderer",
    "rowNodes",
    "childNodes",
    "cellInfo",
    "y",
    "end",
    "length",
    "offset",
    "isSelectedIndex",
    "focusedRow",
    "rowData",
    "getRowData",
    "updateDataRowElement",
    "_getRowsHtml",
    "columnModel",
    "getTableColumnModel",
    "paneModel",
    "prefetchRows",
    "rowHeight",
    "getRowHeight",
    "colCount",
    "getColumnCount",
    "left",
    "cols",
    "x",
    "getColumnAtX",
    "cellWidth",
    "getColumnWidth",
    "push",
    "xPos",
    "editable",
    "isColumnEditable",
    "focusedCol",
    "styleLeft",
    "styleWidth",
    "rowsArr",
    "paneReloadsData",
    "cachedRow",
    "rowHtml",
    "styleHeight",
    "rowAttributes",
    "getRowAttributes",
    "rowClass",
    "getRowClass",
    "rowStyle",
    "createRowStyle",
    "getRowHeightStyle",
    "stopLoop",
    "col_def",
    "attr",
    "getValue",
    "cellRenderer",
    "getDataCellRenderer",
    "style",
    "getDefaultCellStyle",
    "createDataCellHtml",
    "join",
    "fireDataEvent",
    "rowOffset",
    "el",
    "tableBody",
    "tableChildNodes",
    "tabelModel",
    "modelRowCount",
    "getRowCount",
    "removeRowBase",
    "addRowBase",
    "i",
    "rowElem",
    "removeChild",
    "exp",
    "document",
    "createElement",
    "tableDummy",
    "innerHTML",
    "newTableRows",
    "appendChild",
    "insertBefore",
    "fireEvent",
    "addListenerOnce",
    "max",
    "rowWidth",
    "htmlArr",
    "getForceLineHeight",
    "data",
    "setWidth",
    "destruct",
    "removeListener",
    "_onTrack",
    "pane",
    "Pane"
  ],
  "mappings": "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",
  "file": "Pane.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The table pane that shows a certain section from a table. This class handles\n * the display of the data part of a table and is therefore the base for virtual\n * scrolling.\n */\nqx.Class.define(\"qx.ui.table.pane.Pane\",\n{\n  extend : qx.ui.core.Widget,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param paneScroller {qx.ui.table.pane.Scroller} the TablePaneScroller the header belongs to.\n   */\n  construct : function(paneScroller)\n  {\n    this.base(arguments);\n\n    this.__paneScroller = paneScroller;\n\n    this.__lastColCount = 0;\n    this.__lastRowCount = 0;\n\n    this.__rowCache = [];\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n\n  events :\n  {\n    /**\n     * Whether the current view port of the pane has not loaded data.\n     * The data object of the event indicates if the table pane has to reload\n     * data or not. Can be used to give the user feedback of the loading state\n     * of the rows.\n     */\n    \"paneReloadsData\" : \"qx.event.type.Data\",\n\n    /**\n     * Whenever the content of the table pane has been updated (rendered)\n     * trigger a paneUpdated event. This allows the canvas cellrenderer to act\n     * once the new cells have been integrated in the dom.\n     */\n    \"paneUpdated\" : \"qx.event.type.Event\"\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The index of the first row to show. */\n    firstVisibleRow :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_applyFirstVisibleRow\"\n    },\n\n\n    /** The number of rows to show. */\n    visibleRowCount :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_applyVisibleRowCount\"\n    },\n\n\n    /**\n     * Maximum number of cached rows. If the value is <code>-1</code> the cache\n     * size is unlimited\n     */\n    maxCacheLines :\n    {\n      check : \"Number\",\n      init : 1000,\n      apply : \"_applyMaxCacheLines\"\n    },\n\n    // overridden\n    allowShrinkX :\n    {\n      refine : true,\n      init : false\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __lastRowCount : null,\n    __lastColCount : null,\n\n    __paneScroller : null,\n    __tableContainer : null,\n\n    __focusedRow : null,\n    __focusedCol : null,\n\n    // sparse array to cache rendered rows\n    __rowCache : null,\n    __rowCacheCount : 0,\n\n\n    // property modifier\n    _applyFirstVisibleRow : function(value, old) {\n      this.updateContent(false, value-old);\n    },\n\n\n    // property modifier\n    _applyVisibleRowCount : function(value, old) {\n      this.updateContent(true);\n    },\n\n\n    // overridden\n    _getContentHint : function()\n    {\n      // the preferred height is 400 pixel. We don't use rowCount * rowHeight\n      // because this is typically too large.\n      return {\n        width: this.getPaneScroller().getTablePaneModel().getTotalWidth(),\n        height: 400\n      };\n    },\n\n\n    /**\n     * Returns the TablePaneScroller this pane belongs to.\n     *\n     * @return {qx.ui.table.pane.Scroller} the TablePaneScroller.\n     */\n    getPaneScroller : function() {\n      return this.__paneScroller;\n    },\n\n\n    /**\n     * Returns the table this pane belongs to.\n     *\n     * @return {qx.ui.table.Table} the table.\n     */\n    getTable : function() {\n      return this.__paneScroller.getTable();\n    },\n\n\n    /**\n     * Sets the currently focused cell.\n     *\n     * @param col {Integer?null} the model index of the focused cell's column.\n     * @param row {Integer?null} the model index of the focused cell's row.\n     * @param massUpdate {Boolean ? false} Whether other updates are planned as well.\n     *          If true, no repaint will be done.\n     */\n    setFocusedCell : function(col, row, massUpdate)\n    {\n      if (col != this.__focusedCol || row != this.__focusedRow)\n      {\n        var oldRow = this.__focusedRow;\n        this.__focusedCol = col;\n        this.__focusedRow = row;\n\n        // Update the focused row background\n        if (row != oldRow && !massUpdate)\n        {\n          if (oldRow !== null) {\n            this.updateContent(false, null, oldRow, true);\n          }\n          if (row !== null) {\n            this.updateContent(false, null, row, true);\n          }\n        }\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the selection has changed.\n     */\n    onSelectionChanged : function() {\n      this.updateContent(false, null, null, true);\n    },\n\n\n    /**\n     * Event handler. Called when the table gets or looses the focus.\n     */\n    onFocusChanged : function() {\n      this.updateContent(false, null, null, true);\n    },\n\n\n    /**\n     * Sets the column width.\n     *\n     * @param col {Integer} the column to change the width for.\n     * @param width {Integer} the new width.\n     */\n    setColumnWidth : function(col, width) {\n      this.updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called the column order has changed.\n     *\n     */\n    onColOrderChanged : function() {\n      this.updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called when the pane model has changed.\n     */\n    onPaneModelChanged : function() {\n      this.updateContent(true);\n    },\n\n\n    /**\n     * Event handler. Called when the table model data has changed.\n     *\n     * @param firstRow {Integer} The index of the first row that has changed.\n     * @param lastRow {Integer} The index of the last row that has changed.\n     * @param firstColumn {Integer} The model index of the first column that has changed.\n     * @param lastColumn {Integer} The model index of the last column that has changed.\n     */\n    onTableModelDataChanged : function(firstRow, lastRow, firstColumn, lastColumn)\n    {\n      this.__rowCacheClear();\n\n      var paneFirstRow = this.getFirstVisibleRow();\n      var rowCount = this.getVisibleRowCount();\n\n      if (lastRow == -1 || lastRow >= paneFirstRow && firstRow < paneFirstRow + rowCount)\n      {\n        // The change intersects this pane\n        this.updateContent();\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the table model meta data has changed.\n     *\n     */\n    onTableModelMetaDataChanged : function() {\n      this.updateContent(true);\n    },\n\n\n    // property apply method\n    _applyMaxCacheLines : function(value, old)\n    {\n      if (this.__rowCacheCount >= value && value !== -1) {\n        this.__rowCacheClear();\n      }\n    },\n\n\n    /**\n     * Clear the row cache\n     */\n    __rowCacheClear : function()\n    {\n      this.__rowCache = [];\n      this.__rowCacheCount = 0;\n    },\n\n\n    /**\n     * Get a line from the row cache.\n     *\n     * @param row {Integer} Row index to get\n     * @param selected {Boolean} Whether the row is currently selected\n     * @param focused {Boolean} Whether the row is currently focused\n     * @return {String|null} The cached row or null if a row with the given\n     *     index is not cached.\n     */\n    __rowCacheGet : function(row, selected, focused)\n    {\n      if (!selected && !focused && this.__rowCache[row]) {\n        return this.__rowCache[row];\n      } else {\n        return null;\n      }\n    },\n\n\n    /**\n     * Add a line to the row cache.\n     *\n     * @param row {Integer} Row index to set\n     * @param rowString {String} computed row string to cache\n     * @param selected {Boolean} Whether the row is currently selected\n     * @param focused {Boolean} Whether the row is currently focused\n     */\n    __rowCacheSet : function(row, rowString, selected, focused)\n    {\n      var maxCacheLines = this.getMaxCacheLines();\n      if (\n        !selected &&\n        !focused &&\n        !this.__rowCache[row] &&\n        maxCacheLines > 0\n      ) {\n        this._applyMaxCacheLines(maxCacheLines);\n        this.__rowCache[row] = rowString;\n        this.__rowCacheCount += 1;\n      }\n    },\n\n\n    /**\n     * Updates the content of the pane.\n     *\n     * @param completeUpdate {Boolean ? false} if true a complete update is performed.\n     *      On a complete update all cell widgets are recreated.\n     * @param scrollOffset {Integer ? null} If set specifies how many rows to scroll.\n     * @param onlyRow {Integer ? null} if set only the specified row will be updated.\n     * @param onlySelectionOrFocusChanged {Boolean ? false} if true, cell values won't\n     *          be updated. Only the row background will.\n     */\n    updateContent : function(completeUpdate, scrollOffset, onlyRow, onlySelectionOrFocusChanged)\n    {\n      if (completeUpdate) {\n        this.__rowCacheClear();\n      }\n\n      if (scrollOffset && Math.abs(scrollOffset) <= Math.min(10, this.getVisibleRowCount())) {\n        this._scrollContent(scrollOffset);\n      } else if (onlySelectionOrFocusChanged && !this.getTable().getAlwaysUpdateCells()) {\n        this._updateRowStyles(onlyRow);\n      } else {\n        this._updateAllRows();\n      }\n    },\n\n\n    /**\n     * If only focus or selection changes it is sufficient to only update the\n     * row styles. This method updates the row styles of all visible rows or\n     * of just one row.\n     *\n     * @param onlyRow {Integer|null ? null} If this parameter is set only the row\n     *     with this index is updated.\n     */\n    _updateRowStyles : function(onlyRow)\n    {\n      var elem = this.getContentElement().getDomElement();\n\n      if (!elem || !elem.firstChild) {\n        this._updateAllRows();\n        return;\n      }\n\n      var table = this.getTable();\n      var selectionModel = table.getSelectionModel();\n      var tableModel = table.getTableModel();\n      var rowRenderer = table.getDataRowRenderer();\n      var rowNodes = elem.firstChild.childNodes;\n      var cellInfo = { table : table };\n\n      // We don't want to execute the row loop below more than necessary. If\n      // onlyRow is not null, we want to do the loop only for that row.\n      // In that case, we start at (set the \"row\" variable to) that row, and\n      // stop at (set the \"end\" variable to the offset of) the next row.\n      var row = this.getFirstVisibleRow();\n      var y = 0;\n\n      // How many rows do we need to update?\n      var end = rowNodes.length;\n\n      if (onlyRow != null)\n      {\n        // How many rows are we skipping?\n        var offset = onlyRow - row;\n        if (offset >= 0 && offset < end)\n        {\n          row = onlyRow;\n          y = offset;\n          end = offset + 1;\n        } else\n        {\n          return;\n        }\n      }\n\n      for (; y<end; y++, row++)\n      {\n        cellInfo.row = row;\n        cellInfo.selected = selectionModel.isSelectedIndex(row);\n        cellInfo.focusedRow = (this.__focusedRow == row);\n        cellInfo.rowData = tableModel.getRowData(row);\n\n        rowRenderer.updateDataRowElement(cellInfo, rowNodes[y]);\n      };\n    },\n\n\n    /**\n     * Get the HTML table fragment for the given row range.\n     *\n     * @param firstRow {Integer} Index of the first row\n     * @param rowCount {Integer} Number of rows\n     * @return {String} The HTML table fragment for the given row range.\n     */\n    _getRowsHtml : function(firstRow, rowCount)\n    {\n      var table = this.getTable();\n\n      var selectionModel = table.getSelectionModel();\n      var tableModel = table.getTableModel();\n      var columnModel = table.getTableColumnModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n      var rowRenderer = table.getDataRowRenderer();\n\n      tableModel.prefetchRows(firstRow, firstRow + rowCount - 1);\n\n      var rowHeight = table.getRowHeight();\n      var colCount = paneModel.getColumnCount();\n      var left = 0;\n      var cols = [];\n\n      // precompute column properties\n      for (var x=0; x<colCount; x++)\n      {\n        var col = paneModel.getColumnAtX(x);\n        var cellWidth = columnModel.getColumnWidth(col);\n        cols.push({\n          col: col,\n          xPos: x,\n          editable: tableModel.isColumnEditable(col),\n          focusedCol: this.__focusedCol == col,\n          styleLeft: left,\n          styleWidth: cellWidth\n        });\n\n        left += cellWidth;\n      }\n\n      var rowsArr = [];\n      var paneReloadsData = false;\n      for (var row=firstRow; row < firstRow + rowCount; row++)\n      {\n        var selected = selectionModel.isSelectedIndex(row);\n        var focusedRow = (this.__focusedRow == row);\n\n        var cachedRow = this.__rowCacheGet(row, selected, focusedRow);\n        if (cachedRow) {\n          rowsArr.push(cachedRow);\n          continue;\n        }\n\n        var rowHtml = [];\n\n        var cellInfo = { table : table };\n        cellInfo.styleHeight = rowHeight;\n\n        cellInfo.row = row;\n        cellInfo.selected = selected;\n        cellInfo.focusedRow = focusedRow;\n        cellInfo.rowData = tableModel.getRowData(row);\n\n        if (!cellInfo.rowData) {\n          paneReloadsData = true;\n        }\n\n        rowHtml.push('<div ');\n\n        var rowAttributes = rowRenderer.getRowAttributes(cellInfo);\n        if (rowAttributes) {\n          rowHtml.push(rowAttributes);\n        }\n\n        var rowClass = rowRenderer.getRowClass(cellInfo);\n        if (rowClass) {\n          rowHtml.push('class=\"', rowClass, '\" ');\n        }\n\n        var rowStyle = rowRenderer.createRowStyle(cellInfo);\n        rowStyle += \";position:relative;\" + rowRenderer.getRowHeightStyle(rowHeight)+ \"width:100%;\";\n        if (rowStyle) {\n          rowHtml.push('style=\"', rowStyle, '\" ');\n        }\n        rowHtml.push('>');\n\n        var stopLoop = false;\n        for (x=0; x<colCount && !stopLoop; x++)\n        {\n          var col_def = cols[x];\n          for (var attr in col_def) {\n            cellInfo[attr] = col_def[attr];\n          }\n          var col = cellInfo.col;\n\n          // Use the \"getValue\" method of the tableModel to get the cell's\n          // value working directly on the \"rowData\" object\n          // (-> cellInfo.rowData[col];) is not a solution because you can't\n          // work with the columnIndex -> you have to use the columnId of the\n          // columnIndex This is exactly what the method \"getValue\" does\n          cellInfo.value = tableModel.getValue(col, row);\n          var cellRenderer = columnModel.getDataCellRenderer(col);\n\n          // Retrieve the current default cell style for this column.\n          cellInfo.style = cellRenderer.getDefaultCellStyle();\n\n          // Allow a cell renderer to tell us not to draw any further cells in\n          // the row. Older, or traditional cell renderers don't return a\n          // value, however, from createDataCellHtml, so assume those are\n          // returning false.\n          //\n          // Tested with http://tinyurl.com/333hyhv\n          stopLoop =\n            cellRenderer.createDataCellHtml(cellInfo, rowHtml) || false;\n        }\n        rowHtml.push('</div>');\n\n        var rowString = rowHtml.join(\"\");\n\n        this.__rowCacheSet(row, rowString, selected, focusedRow);\n        rowsArr.push(rowString);\n      }\n      this.fireDataEvent(\"paneReloadsData\", paneReloadsData);\n      return rowsArr.join(\"\");\n    },\n\n\n    /**\n     * Scrolls the pane's contents by the given offset.\n     *\n     * @param rowOffset {Integer} Number of lines to scroll. Scrolling up is\n     *     represented by a negative offset.\n     */\n    _scrollContent : function(rowOffset)\n    {\n      var el = this.getContentElement().getDomElement();\n      if (!(el && el.firstChild)) {\n        this._updateAllRows();\n        return;\n      }\n\n      var tableBody = el.firstChild;\n      var tableChildNodes = tableBody.childNodes;\n      var rowCount = this.getVisibleRowCount();\n      var firstRow = this.getFirstVisibleRow();\n\n      var tabelModel = this.getTable().getTableModel();\n      var modelRowCount = 0;\n\n      modelRowCount = tabelModel.getRowCount();\n\n      // don't handle this special case here\n      if (firstRow + rowCount > modelRowCount) {\n        this._updateAllRows();\n        return;\n      }\n\n      // remove old lines\n      var removeRowBase = rowOffset < 0 ? rowCount + rowOffset : 0;\n      var addRowBase = rowOffset < 0 ? 0: rowCount - rowOffset;\n\n      for (var i=Math.abs(rowOffset)-1; i>=0; i--)\n      {\n        var rowElem = tableChildNodes[removeRowBase];\n        try {\n          tableBody.removeChild(rowElem);\n        } catch(exp) {\n          break;\n        }\n      }\n\n      // render new lines\n      if (!this.__tableContainer) {\n        this.__tableContainer = document.createElement(\"div\");\n      }\n      var tableDummy = '<div>';\n      tableDummy += this._getRowsHtml(firstRow + addRowBase, Math.abs(rowOffset));\n      tableDummy += '</div>';\n      this.__tableContainer.innerHTML = tableDummy;\n      var newTableRows = this.__tableContainer.firstChild.childNodes;\n\n      // append new lines\n      if (rowOffset > 0)\n      {\n        for (var i=newTableRows.length-1; i>=0; i--)\n        {\n          var rowElem = newTableRows[0];\n          tableBody.appendChild(rowElem);\n        }\n      }\n      else\n      {\n        for (var i=newTableRows.length-1; i>=0; i--)\n        {\n          var rowElem = newTableRows[newTableRows.length-1];\n          tableBody.insertBefore(rowElem, tableBody.firstChild);\n        }\n      }\n\n      // update focus indicator\n      if (this.__focusedRow !== null)\n      {\n        this._updateRowStyles(this.__focusedRow - rowOffset);\n        this._updateRowStyles(this.__focusedRow);\n      }\n      this.fireEvent(\"paneUpdated\");\n    },\n\n\n    /**\n     * Updates the content of the pane (implemented using array joins).\n     */\n    _updateAllRows : function()\n    {\n      var elem = this.getContentElement().getDomElement();\n      if (!elem) {\n        // pane has not yet been rendered\n        this.addListenerOnce(\"appear\", this._updateAllRows, this);\n        return;\n      }\n\n      var table = this.getTable();\n\n      var tableModel = table.getTableModel();\n      var paneModel = this.getPaneScroller().getTablePaneModel();\n\n      var colCount = paneModel.getColumnCount();\n      var rowHeight = table.getRowHeight();\n      var firstRow = this.getFirstVisibleRow();\n\n      var rowCount = this.getVisibleRowCount();\n      var modelRowCount = tableModel.getRowCount();\n\n      if (firstRow + rowCount > modelRowCount) {\n        rowCount = Math.max(0, modelRowCount - firstRow);\n      }\n\n      var rowWidth = paneModel.getTotalWidth();\n      var htmlArr;\n\n      // If there are any rows...\n      if (rowCount > 0)\n      {\n        // ... then create a div for them and add the rows to it.\n        htmlArr =\n          [\n            \"<div style='\",\n            \"width: 100%;\",\n            (table.getForceLineHeight()\n             ? \"line-height: \" + rowHeight + \"px;\"\n             : \"\"),\n            \"overflow: hidden;\",\n            \"'>\",\n            this._getRowsHtml(firstRow, rowCount),\n            \"</div>\"\n          ];\n      }\n      else\n      {\n        // Otherwise, don't create the div, as even an empty div creates a\n        // white row in IE.\n        htmlArr = [];\n      }\n\n      var data = htmlArr.join(\"\");\n      elem.innerHTML = data;\n      this.setWidth(rowWidth);\n\n      this.__lastColCount = colCount;\n      this.__lastRowCount = rowCount;\n      this.fireEvent(\"paneUpdated\");\n    }\n\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__tableContainer = this.__paneScroller = this.__rowCache = null;\n    this.removeListener(\"track\", this._onTrack, this);\n  }\n});\n"
  ]
}