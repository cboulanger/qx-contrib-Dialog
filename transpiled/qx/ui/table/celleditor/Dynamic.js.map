{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/celleditor/Dynamic.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ICellEditorFactory",
    "construct",
    "cellEditorFactoryFunction",
    "setCellEditorFactoryFunction",
    "__infos",
    "properties",
    "check",
    "nullable",
    "init",
    "members",
    "__cellEditorFactory",
    "createCellEditor",
    "cellInfo",
    "getCellEditorFactoryFunction",
    "assertFunction",
    "cellEditor",
    "toHashCode",
    "getCellEditorValue",
    "value",
    "destruct",
    "celleditor",
    "Dynamic"
  ],
  "mappings": ";;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA0BAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,gCAAhB,EACA;AACEC,YAASN,GAAGO,IAAH,CAAQC,MADnB;AAEEC,eAAYT,GAAGU,EAAH,CAAMC,KAAN,CAAYC,kBAF1B;;AAKE;;;;;;AAMA;;;;AAIAC,eAAY,mBAASC,yBAAT,EACZ;AACE;AACA,UAAIA,yBAAJ,EACA;AACE,aAAKC,4BAAL,CAAkCD,yBAAlC;AACD;;AAED,WAAKE,OAAL,GAAe,EAAf;AACD,KAxBH;;AA2BE;;;;;;AAMAC,gBACA;;AAEE;;;;;;;;;;;;;;;AAeAH,iCACA;AACEI,eAAQ,UADV;AAEEC,kBAAW,IAFb;AAGEC,cAAO;AAHT;AAlBF,KAlCF;;AA2DE;;;;;;AAMAC,aACA;AACEC,2BAAsB,IADxB;AAEEN,eAAU,IAFZ;;AAKE;;;;;;;;;AASAO,wBAAmB,0BAASC,QAAT,EACnB;AACE,YAAIV,4BAA4B,KAAKW,4BAAL,EAAhC;;AAEyC;AACvC,eAAKC,cAAL,CAAoBZ,yBAApB,EAA+C,iCAA/C;AACD;;AAED,aAAKQ,mBAAL,GAA2BR,0BAA0BU,QAA1B,CAA3B;AACA,YAAIG,aAAa,KAAKL,mBAAL,CAAyBC,gBAAzB,CAA0CC,QAA1C,CAAjB;;AAEA;AACA,aAAKR,OAAL,CAAaW,WAAWC,UAAX,EAAb,IAAwCJ,QAAxC;;AAEA,eAAOG,UAAP;AACD,OA7BH;;AAgCE;AACAE,0BAAqB,4BAASF,UAAT,EACrB;AACE,YAAIb,4BAA4B,KAAKW,4BAAL,EAAhC;;AAEyC;AACvC,eAAKC,cAAL,CAAoBZ,yBAApB,EAA+C,iCAA/C;AACD;;AAED,YAAIU,WAAW,KAAKR,OAAL,CAAaW,WAAWC,UAAX,EAAb,CAAf;AACA;AACA,aAAKN,mBAAL,GAA2BR,0BAA0BU,QAA1B,CAA3B;AACA,YAAIM,QAAQ,KAAKR,mBAAL,CAAyBO,kBAAzB,CAA4CF,UAA5C,CAAZ;AACA,eAAOG,KAAP;AACD;AA9CH,KAlEF;;AAmHE;;;;;;AAMAC,cAAW,oBAAW;AACpB,WAAKT,mBAAL,GAA2B,IAA3B;AACD;AA3HH,GADA,C;AA1BAtB,KAAGU,EAAH,CAAMC,KAAN,CAAYqB,UAAZ,CAAuBC,OAAvB,CAA+B9B,aAA/B,GAA+CA,aAA/C",
  "file": "Dynamic.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Boulanger (cboulanger)\n\n************************************************************************ */\n\n/**\n * A cell editor factory which can dynamically exchange the cell editor\n * based on information retrieved at runtime. This is useful when different\n * rows in a column should have different cellEditors based on cell content\n * or row meta data. A typical example would be a spreadsheet that has different\n * kind of data in one column.\n *\n */\nqx.Class.define(\"qx.ui.table.celleditor.Dynamic\",\n{\n  extend : qx.core.Object,\n  implement : qx.ui.table.ICellEditorFactory,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param cellEditorFactoryFunction {Function?null} the factory function\n   *    {@link #cellEditorFactoryFunction}.\n   */\n  construct : function(cellEditorFactoryFunction)\n  {\n    this.base(arguments);\n    if (cellEditorFactoryFunction)\n    {\n      this.setCellEditorFactoryFunction(cellEditorFactoryFunction);\n    }\n\n    this.__infos = {};\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /**\n     * Function that returns a cellEditorFactory instance which will be\n     * used for the row that is currently being edited. The function is\n     * defined like this:\n     * <pre class=\"javascript\">\n     * myTable.getTableColumnModel().setCellEditorFactory(function(cellInfo){\n     *   // based on the cellInfo map or other information, return the\n     *   // appropriate cellEditorFactory\n     *   if (cellInfo.row == 5)\n     *     return new qx.ui.table.celleditor.CheckBox;\n     *   else\n     *     return new qx.ui.table.celleditor.TextField;\n     * });\n     * </pre>\n     **/\n    cellEditorFactoryFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __cellEditorFactory : null,\n    __infos : null,\n\n\n    /**\n     * Creates the cell editor based on the cellEditorFactory instance\n     * returned by the function stored in the cellEditorFactoryFunction\n     * property. Passes the cellInfo map to the function.\n     *\n     * @param cellInfo {Map} A map containing the information about the cell to\n     *      create.\n     * @return {qx.ui.core.Widget}\n     */\n    createCellEditor : function(cellInfo)\n    {\n      var cellEditorFactoryFunction = this.getCellEditorFactoryFunction();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFunction(cellEditorFactoryFunction, \"No function provided! Aborting.\");\n      }\n\n      this.__cellEditorFactory = cellEditorFactoryFunction(cellInfo);\n      var cellEditor = this.__cellEditorFactory.createCellEditor(cellInfo);\n\n      // save the cell info to the editor (needed for getting the value)\n      this.__infos[cellEditor.toHashCode()] = cellInfo;\n\n      return cellEditor;\n    },\n\n\n    // interface implementation\n    getCellEditorValue : function(cellEditor)\n    {\n      var cellEditorFactoryFunction = this.getCellEditorFactoryFunction();\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertFunction(cellEditorFactoryFunction, \"No function provided! Aborting.\");\n      }\n\n      var cellInfo = this.__infos[cellEditor.toHashCode()];\n      // update the propper factory\n      this.__cellEditorFactory = cellEditorFactoryFunction(cellInfo);\n      var value = this.__cellEditorFactory.getCellEditorValue(cellEditor);\n      return value;\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__cellEditorFactory = null;\n  }\n});\n"
  ]
}