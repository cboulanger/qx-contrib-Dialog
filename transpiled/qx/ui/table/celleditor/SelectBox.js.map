{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/celleditor/SelectBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ICellEditorFactory",
    "properties",
    "validationFunction",
    "check",
    "nullable",
    "init",
    "listData",
    "members",
    "createCellEditor",
    "cellInfo",
    "cellEditor",
    "form",
    "SelectBox",
    "set",
    "appearance",
    "value",
    "originalValue",
    "cellRenderer",
    "getTableColumnModel",
    "getDataCellRenderer",
    "col",
    "label",
    "_getContentHtml",
    "list",
    "getListData",
    "item",
    "i",
    "l",
    "length",
    "row",
    "Array",
    "ListItem",
    "setUserData",
    "add",
    "itemToSelect",
    "getChildrenContainer",
    "findItem",
    "setSelection",
    "resetSelection",
    "addListener",
    "open",
    "getCellEditorValue",
    "selection",
    "getSelection",
    "userValue",
    "getUserData",
    "undefined",
    "getLabel",
    "validationFunc",
    "getValidationFunction",
    "parseFloat",
    "celleditor"
  ],
  "mappings": "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",
  "file": "SelectBox.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 Christian Boulanger\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A cell editor factory creating select boxes.\n */\nqx.Class.define(\"qx.ui.table.celleditor.SelectBox\",\n{\n  extend : qx.core.Object,\n  implement : qx.ui.table.ICellEditorFactory,\n\n\n  properties :\n  {\n    /**\n     * function that validates the result\n     * the function will be called with the new value and the old value and is\n     * supposed to return the value that is set as the table value.\n     **/\n    validationFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    },\n\n    /** array of data to construct ListItem widgets with */\n    listData :\n    {\n      check : \"Array\",\n      init : null,\n      nullable : true\n    }\n\n  },\n\n\n  members :\n  {\n    // interface implementation\n    createCellEditor : function(cellInfo)\n    {\n      var cellEditor = new qx.ui.form.SelectBox().set({\n        appearance: \"table-editor-selectbox\"\n      });\n\n      var value = cellInfo.value;\n      cellEditor.originalValue = value;\n\n      // check if renderer does something with value\n      var cellRenderer = cellInfo.table.getTableColumnModel().getDataCellRenderer(cellInfo.col);\n      var label = cellRenderer._getContentHtml(cellInfo);\n      if ( value != label ) {\n        value = label;\n      }\n\n      // replace null values\n      if ( value === null ) {\n        value = \"\";\n      }\n\n      var list = this.getListData();\n      if (list)\n      {\n        var item;\n\n        for (var i=0,l=list.length; i<l; i++)\n        {\n          var row = list[i];\n          if ( row instanceof Array ) {\n            item = new qx.ui.form.ListItem(row[0], row[1]);\n            item.setUserData(\"row\", row[2]);\n            if (value == row[2]) {\n              label = row[0];\n            }\n          } else {\n            item = new qx.ui.form.ListItem(row, null);\n            item.setUserData(\"row\", row);\n          }\n          cellEditor.add(item);\n        };\n      }\n\n      if (label != null) {\n        var itemToSelect = cellEditor.getChildrenContainer().findItem(label + \"\");\n      }\n\n      if (itemToSelect) {\n        cellEditor.setSelection([itemToSelect]);\n      } else {\n        cellEditor.resetSelection();\n      }\n      cellEditor.addListener(\"appear\", function() {\n        cellEditor.open();\n      });\n\n      return cellEditor;\n    },\n\n\n    // interface implementation\n    getCellEditorValue : function(cellEditor)\n    {\n      var selection = cellEditor.getSelection();\n      var value = \"\";\n\n      if (selection && selection[0]) {\n        var userValue = selection[0].getUserData(\"row\");\n        value = userValue === undefined ? selection[0].getLabel() : userValue;\n      }\n\n      // validation function will be called with new and old value\n      var validationFunc = this.getValidationFunction();\n      if (validationFunc ) {\n         value = validationFunc( value, cellEditor.originalValue );\n      }\n\n      if (typeof cellEditor.originalValue == \"number\") {\n        value = parseFloat(value);\n      }\n\n      return value;\n    }\n  }\n});\n"
  ]
}