{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/celleditor/AbstractField.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "table",
    "ICellEditorFactory",
    "type",
    "properties",
    "validationFunction",
    "check",
    "nullable",
    "init",
    "members",
    "_createEditor",
    "Error",
    "createCellEditor",
    "cellInfo",
    "cellEditor",
    "originalValue",
    "value",
    "undefined",
    "setValue",
    "addListener",
    "selectAllText",
    "getCellEditorValue",
    "getValue",
    "validationFunc",
    "getValidationFunction",
    "parseFloat",
    "celleditor",
    "AbstractField"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAsBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,sCAAhB,EACA;AACEC,YAASN,GAAGO,IAAH,CAAQC,MADnB;AAEEC,eAAYT,GAAGU,EAAH,CAAMC,KAAN,CAAYC,kBAF1B;AAGEC,UAAO,UAHT;;AAMEC,gBACA;AACE;;;;;AAKAC,0BACA;AACEC,eAAQ,UADV;AAEEC,kBAAW,IAFb;AAGEC,cAAO;AAHT;AAPF,KAPF;;AAsBEC,aACA;AACE;;;;;AAKAC,qBAAgB,yBAAW;AACzB,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD,OARH;;AAWE;AACAC,wBAAmB,0BAASC,QAAT,EACnB;AACE,YAAIC,aAAa,KAAKJ,aAAL,EAAjB;;AAEAI,mBAAWC,aAAX,GAA2BF,SAASG,KAApC;AACA,YAAIH,SAASG,KAAT,KAAmB,IAAnB,IAA2BH,SAASG,KAAT,KAAmBC,SAAlD,EAA6D;AAC3DJ,mBAASG,KAAT,GAAiB,EAAjB;AACD;AACDF,mBAAWI,QAAX,CAAoB,KAAKL,SAASG,KAAlC;;AAEAF,mBAAWK,WAAX,CAAuB,QAAvB,EAAiC,YAAW;AAC1CL,qBAAWM,aAAX;AACD,SAFD;;AAIA,eAAON,UAAP;AACD,OA3BH;;AA8BE;AACAO,0BAAqB,4BAASP,UAAT,EACrB;AACE,YAAIE,QAAQF,WAAWQ,QAAX,EAAZ;;AAEA;AACA,YAAIC,iBAAiB,KAAKC,qBAAL,EAArB;AACA,YAAID,cAAJ,EAAqB;AACnBP,kBAAQO,eAAgBP,KAAhB,EAAuBF,WAAWC,aAAlC,CAAR;AACD;;AAED,YAAI,OAAOD,WAAWC,aAAlB,IAAmC,QAAvC,EAAiD;AAC/CC,kBAAQS,WAAWT,KAAX,CAAR;AACD;;AAED,eAAOA,KAAP;AACD;AA9CH;AAvBF,GADA,C;AAtBA1B,KAAGU,EAAH,CAAMC,KAAN,CAAYyB,UAAZ,CAAuBC,aAAvB,CAAqClC,aAArC,GAAqDA,aAArD",
  "file": "AbstractField.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * An abstract cell editor factory creating text/password/spinner/... fields.\n */\nqx.Class.define(\"qx.ui.table.celleditor.AbstractField\",\n{\n  extend : qx.core.Object,\n  implement : qx.ui.table.ICellEditorFactory,\n  type : \"abstract\",\n\n\n  properties :\n  {\n    /**\n     * function that validates the result\n     * the function will be called with the new value and the old value and is\n     * supposed to return the value that is set as the table value.\n     **/\n    validationFunction :\n    {\n      check : \"Function\",\n      nullable : true,\n      init : null\n    }\n  },\n\n\n  members :\n  {\n    /**\n     * Factory to create the editor widget\n     *\n     * @return {qx.ui.core.Widget} The editor widget\n     */\n    _createEditor : function() {\n      throw new Error(\"Abstract method call!\");\n    },\n\n\n    // interface implementation\n    createCellEditor : function(cellInfo)\n    {\n      var cellEditor = this._createEditor();\n\n      cellEditor.originalValue = cellInfo.value;\n      if (cellInfo.value === null || cellInfo.value === undefined) {\n        cellInfo.value = \"\";\n      }\n      cellEditor.setValue(\"\" + cellInfo.value);\n\n      cellEditor.addListener(\"appear\", function() {\n        cellEditor.selectAllText();\n      });\n\n      return cellEditor;\n    },\n\n\n    // interface implementation\n    getCellEditorValue : function(cellEditor)\n    {\n      var value = cellEditor.getValue();\n\n      // validation function will be called with new and old value\n      var validationFunc = this.getValidationFunction();\n      if (validationFunc ) {\n        value = validationFunc( value, cellEditor.originalValue );\n      }\n\n      if (typeof cellEditor.originalValue == \"number\") {\n        value = parseFloat(value);\n      }\n\n      return value;\n    }\n  }\n});\n"
  ]
}