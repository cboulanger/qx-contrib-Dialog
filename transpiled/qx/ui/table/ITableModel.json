{
  "className": "qx.ui.table.ITableModel",
  "packageName": "qx.ui.table",
  "name": "ITableModel",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 234,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2006 STZ-IDA, Germany, http://www.stz-ida.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nTil Schneider (til132)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The data model of a table."
        }
      ]
    }
  },
  "type": "interface",
  "events": {
    "dataChanged": {
      "location": {
        "start": {
          "line": 41,
          "column": 4
        },
        "end": {
          "line": 41,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the table data changed (the stuff shown in the table body).\nThe data property of the event may be null or a map having the following attributes:\n<ul>\n<li>firstRow: The index of the first row that has changed.</li>\n<li>lastRow: The index of the last row that has changed.</li>\n<li>firstColumn: The model index of the first column that has changed.</li>\n<li>lastColumn: The model index of the last column that has changed.</li>\n</ul>"
          }
        ]
      },
      "name": "dataChanged",
      "type": "qx.event.type.Data"
    },
    "metaDataChanged": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 46,
          "column": 45
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the meta data changed (the stuff shown in the table header)."
          }
        ]
      },
      "name": "metaDataChanged",
      "type": "qx.event.type.Event"
    },
    "sorted": {
      "location": {
        "start": {
          "line": 51,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired after the table is sorted (but before the metaDataChanged event)"
          }
        ]
      },
      "name": "sorted",
      "type": "qx.event.type.Data"
    }
  },
  "members": {
    "getRowCount": {
      "location": {
        "start": {
          "line": 69,
          "column": 4
        },
        "end": {
          "line": 69,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the number of rows in the model."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the number of rows.",
            "type": "Integer",
            "description": " the number of rows."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRowData": {
      "location": {
        "start": {
          "line": 86,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 38
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the data of one row. This function may be overridden by models which hold\nall data of a row in one object. By using this function, clients have a way of\nquickly retrieving the entire row data.\n\n<b>Important:</b>Models which do not have their row data accessible in one object\nmay return null."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "rowIndex {Integer} the model index of the row.",
            "paramName": "rowIndex",
            "description": " the model index of the row.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the row data as an object or null if the model does not support row data\nobjects. The details on the object returned are determined by the model\nimplementation only.",
            "type": "Object",
            "description": " the row data as an object or null if the model does not support row data\nobjects. The details on the object returned are determined by the model\nimplementation only."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnCount": {
      "location": {
        "start": {
          "line": 95,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the number of columns in the model."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the number of columns.",
            "type": "Integer",
            "description": " the number of columns."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnId": {
      "location": {
        "start": {
          "line": 107,
          "column": 4
        },
        "end": {
          "line": 107,
          "column": 42
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the ID of column. The ID may be used to identify columns\nindependent from their index in the model. E.g. for being aware of added\ncolumns when saving the width of a column."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the index of the column.",
            "paramName": "columnIndex",
            "description": " the index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the ID of the column.",
            "type": "String",
            "description": " the ID of the column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnIndexById": {
      "location": {
        "start": {
          "line": 117,
          "column": 4
        },
        "end": {
          "line": 117,
          "column": 46
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index of a column."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnId {String} the ID of the column.",
            "paramName": "columnId",
            "description": " the ID of the column.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the index of the column.",
            "type": "Integer",
            "description": " the index of the column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getColumnName": {
      "location": {
        "start": {
          "line": 128,
          "column": 4
        },
        "end": {
          "line": 128,
          "column": 44
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the name of a column. This name will be shown to the user in the\ntable header."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the index of the column.",
            "paramName": "columnIndex",
            "description": " the index of the column.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the name of the column.",
            "type": "String",
            "description": " the name of the column."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isColumnEditable": {
      "location": {
        "start": {
          "line": 137,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 47
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether a column is editable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to check.",
            "paramName": "columnIndex",
            "description": " the column to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the column is editable.",
            "type": "Boolean",
            "description": " whether the column is editable."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isColumnSortable": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 47
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether a column is sortable."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to check.",
            "paramName": "columnIndex",
            "description": " the column to check.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the column is sortable.",
            "type": "Boolean",
            "description": " whether the column is sortable."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sortByColumn": {
      "location": {
        "start": {
          "line": 155,
          "column": 4
        },
        "end": {
          "line": 155,
          "column": 54
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sorts the model by a column."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the column to sort by.",
            "paramName": "columnIndex",
            "description": " the column to sort by.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "ascending {Boolean} whether to sort ascending.",
            "paramName": "ascending",
            "description": " whether to sort ascending.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSortColumnIndex": {
      "location": {
        "start": {
          "line": 164,
          "column": 4
        },
        "end": {
          "line": 164,
          "column": 38
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the column index the model is sorted by. If the model is not sorted\n-1 is returned."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} the column index the model is sorted by.",
            "type": "Integer",
            "description": " the column index the model is sorted by."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isSortAscending": {
      "location": {
        "start": {
          "line": 172,
          "column": 4
        },
        "end": {
          "line": 172,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the model is sorted ascending."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the model is sorted ascending.",
            "type": "Boolean",
            "description": " whether the model is sorted ascending."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "prefetchRows": {
      "location": {
        "start": {
          "line": 182,
          "column": 4
        },
        "end": {
          "line": 182,
          "column": 59
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prefetches some rows. This is a hint to the model that the specified rows\nwill be read soon."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "firstRowIndex {Integer} the index of first row.",
            "paramName": "firstRowIndex",
            "description": " the index of first row.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "lastRowIndex {Integer} the index of last row.",
            "paramName": "lastRowIndex",
            "description": " the index of last row.",
            "type": "Integer"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getValue": {
      "location": {
        "start": {
          "line": 194,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 49
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a cell value by column index."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} the index of the column.",
            "paramName": "columnIndex",
            "description": " the index of the column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} the index of the row.",
            "paramName": "rowIndex",
            "description": " the index of the row.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the cell.",
            "type": "var",
            "description": " The value of the cell."
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#getValueById"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getValueById": {
      "location": {
        "start": {
          "line": 207,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 50
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a cell value by column ID.\n\nWhenever you have the choice, use {@link #getValue()} instead,\nbecause this should be faster."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnId {String} the ID of the column.",
            "paramName": "columnId",
            "description": " the ID of the column.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} the index of the row.",
            "paramName": "rowIndex",
            "description": " the index of the row.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the value of the cell.",
            "type": "var",
            "description": " the value of the cell."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setValue": {
      "location": {
        "start": {
          "line": 219,
          "column": 4
        },
        "end": {
          "line": 219,
          "column": 56
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets a cell value by column index."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnIndex {Integer} The index of the column.",
            "paramName": "columnIndex",
            "description": " The index of the column.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} the index of the row.",
            "paramName": "rowIndex",
            "description": " the index of the row.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value {var} The new value.",
            "paramName": "value",
            "description": " The new value.",
            "type": "var"
          }
        ],
        "@see": [
          {
            "name": "@see",
            "body": "#setValueById"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setValueById": {
      "location": {
        "start": {
          "line": 232,
          "column": 4
        },
        "end": {
          "line": 232,
          "column": 57
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets a cell value by column ID.\n\nWhenever you have the choice, use {@link #setValue()} instead,\nbecause this should be faster."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "columnId {String} The ID of the column.",
            "paramName": "columnId",
            "description": " The ID of the column.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "rowIndex {Integer} The index of the row.",
            "paramName": "rowIndex",
            "description": " The index of the row.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "value {var} The new value.",
            "paramName": "value",
            "description": " The new value.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}