{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/MTableContextMenu.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "addListener",
    "e",
    "contextMenu",
    "getContextMenu",
    "isDisposed",
    "hide",
    "setContextMenu",
    "getApplicationRoot",
    "remove",
    "dispose",
    "col",
    "getColumn",
    "contextMenuHandler",
    "getContextMenuHandler",
    "handlerContext",
    "__contextMenuHandlerContext",
    "tableModel",
    "getTableModel",
    "ui",
    "menu",
    "Menu",
    "preventDefault",
    "addListenerOnce",
    "bShowContextMenu",
    "call",
    "getRow",
    "__contextMenuHandler",
    "members",
    "setContextMenuHandler",
    "handler",
    "context",
    "destruct",
    "table",
    "MTableContextMenu"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAqBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,+BAAhB,EACA;AACEC,eAAY,qBACZ;AACE;AACA;AACA;AACA,WAAKC,WAAL,CACE,iBADF,EAEE,UAASC,CAAT,EACA;AACE,YAAIC,cAAc,KAAKC,cAAL,EAAlB;;AAEA;AACA,YAAID,eAAe,CAAEA,YAAYE,UAAZ,EAArB,EACA;AACE;AACAF,sBAAYG,IAAZ;AACA,eAAKC,cAAL,CAAoB,IAApB;AACA,eAAKC,kBAAL,GAA0BC,MAA1B,CAAiCN,WAAjC;AACAA,sBAAYO,OAAZ;AACAP,wBAAc,IAAd;AACD;;AAED;AACA;AACA,YAAIQ,MAAMT,EAAEU,SAAF,EAAV;AACA,YAAIC,qBAAqB,KAAKC,qBAAL,CAA2BH,GAA3B,CAAzB;;AAEA;AACA;AACA,YAAI,OAAOE,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C;AACD;;AAED;AACA,YAAIE,iBAAiB,KAAKC,2BAAL,CAAiCL,GAAjC,CAArB;;AAEA;AACA,YAAIM,aAAa,KAAKC,aAAL,EAAjB;;AAEA;AACAf,sBAAc,IAAIT,GAAGyB,EAAH,CAAMC,IAAN,CAAWC,IAAf,EAAd;;AAEA;AACAlB,oBAAYF,WAAZ,CAAwB,aAAxB,EAAuC,UAASC,CAAT,EAAY;AACjDA,YAAEoB,cAAF;AACD,SAFD;;AAIA;AACAnB,oBAAYoB,eAAZ,CAA4B,WAA5B,EAAyC,YAAW;AAClD,eAAKhB,cAAL,CAAoB,IAApB;AACD,SAFD,EAEG,IAFH;;AAIA;AACA,YAAIiB,mBAAmBX,mBAAmBY,IAAnB,CAAwBV,cAAxB,EACrBJ,GADqB,EAErBT,EAAEwB,MAAF,EAFqB,EAGrB,IAHqB,EAIrBT,UAJqB,EAKrBd,WALqB,CAAvB;;AAQA;AACA,YAAI,CAAEqB,gBAAN,EACA;AACE;AACArB,sBAAYO,OAAZ;AACA;AACD;;AAED;AACA,aAAKH,cAAL,CAAoBJ,WAApB;AACD,OAlEH,EAmEE,IAnEF;;AAqEA;AACA;AACA,WAAKwB,oBAAL,GAA4B,EAA5B;AACA,WAAKX,2BAAL,GAAmC,EAAnC;AACD,KA/EH;;AAiFEY,aACA;AACED,4BAAuB,IADzB;AAEEX,mCAA8B,IAFhC;;AAIE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CAa,6BAAwB,+BAASlB,GAAT,EAAcmB,OAAd,EAAuBC,OAAvB,EACxB;AACE,aAAKJ,oBAAL,CAA0BhB,GAA1B,IAAiCmB,OAAjC;AACA,aAAKd,2BAAL,CAAiCL,GAAjC,IAAwCoB,WAAW,IAAnD;AACD,OAnDH;;AAqDE;;;;;;;;;;;AAWAjB,6BAAwB,+BAASH,GAAT,EACxB;AACE,eAAO,KAAKgB,oBAAL,CAA0BhB,GAA1B,CAAP;AACD;AAnEH,KAlFF;;AAwJE;;;;;;AAMAqB,cAAW,oBACX;AACE,WAAKL,oBAAL,GAA4B,IAA5B;AACA,WAAKX,2BAAL,GAAmC,IAAnC;AACD;AAlKH,GADA,C;AArBAtB,KAAGyB,EAAH,CAAMc,KAAN,CAAYC,iBAAZ,CAA8BrC,aAA9B,GAA8CA,aAA9C",
  "file": "MTableContextMenu.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006-2009 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * This mixin allows easily adding handlers for context menus on table columns.\n */\nqx.Mixin.define(\"qx.ui.table.MTableContextMenu\",\n{\n  construct : function()\n  {\n    // Add an event listener to handle context menu events.  The actual menu\n    // is built by a function registered with a call to\n    // setContextMenuHandler(col, handler).\n    this.addListener(\n      \"cellContextmenu\",\n      function(e)\n      {\n        var contextMenu = this.getContextMenu();\n\n        // Dispose of any previously existing context menu\n        if (contextMenu && ! contextMenu.isDisposed())\n        {\n          // Dispose of the context menu.\n          contextMenu.hide();\n          this.setContextMenu(null);\n          this.getApplicationRoot().remove(contextMenu);\n          contextMenu.dispose();\n          contextMenu = null;\n        }\n\n        // Get the context menu handler for the column on which the context\n        // menu request was issued.\n        var col = e.getColumn();\n        var contextMenuHandler = this.getContextMenuHandler(col);\n\n        // If there's no context menu handler for this column, we have nothing\n        // to do.\n        if (typeof contextMenuHandler !== \"function\") {\n          return;\n        }\n\n        // Get the context object for the handler function\n        var handlerContext = this.__contextMenuHandlerContext[col];\n\n        // Get the data model\n        var tableModel = this.getTableModel();\n\n        // Create a context menu for this tree.\n        contextMenu = new qx.ui.menu.Menu();\n\n        // Don't display context menus from the context menu\n        contextMenu.addListener(\"contextmenu\", function(e) {\n          e.preventDefault();\n        });\n\n        // This prevents the display of context menu on table header cells\n        contextMenu.addListenerOnce(\"disappear\", function() {\n          this.setContextMenu(null);\n        }, this);\n\n        // Call the context menu handler for this column.\n        var bShowContextMenu = contextMenuHandler.call(handlerContext,\n          col,\n          e.getRow(),\n          this,\n          tableModel,\n          contextMenu\n        );\n\n        // If we were told not to display the context menu...\n        if (! bShowContextMenu)\n        {\n          // ... then we're all done here.\n          contextMenu.dispose();\n          return;\n        }\n\n        // Set the context menu\n        this.setContextMenu(contextMenu);\n      },\n      this);\n\n    // Provide an array in which context menu handlers will be stored.  The\n    // array is indexed by column number.\n    this.__contextMenuHandler = [ ];\n    this.__contextMenuHandlerContext = [ ];\n  },\n\n  members :\n  {\n    __contextMenuHandler : null,\n    __contextMenuHandlerContext : null,\n\n    /**\n     * Add a handler for a context menu which is initiated in a specific\n     * column.\n     *\n     * @param col {Integer}\n     *   The column number in which the context menu request originated\n     *\n     * @param handler {Function}\n     *   The function to call when a context menu request originates in the\n     *   specified column. The handler is called with the following arguments:\n     *   <ul>\n     *     <li>\n     *       <b>column</b>: (Integer)\n     *       The number of the column in which the right click was issued\n     *     </li>\n     *     <li>\n     *       <b>row</b>: (Integer)\n     *       The number of the row in which the right click was issued\n     *     </li>\n     *     <li>\n     *       <b>table</b>: {@link qx.ui.table.Table}\n     *       The table in which the right click was issued\n     *     </li>\n     *     <li>\n     *       <b>dataModel</b>: {@link qx.ui.table.model.Abstract}\n     *       Complete data model of the table\n     *     </li>\n     *     <li>\n     *       <b>contextMenu</b>: {@link qx.ui.menu.Menu}\n     *       Menu in which buttons can be added to implement this context menu\n     *     </li>\n     *   </ul>\n     *   The function must return a (Boolean), indicating whether the context\n     *   menu should be shown or not. The context menu will be shown when the\n     *   handler function returns <code>true</code>. When the handler function\n     *   returns <code>false</code> the context menu will <b>not</b> be shown.\n     *\n     * @param context {Object?this}\n     *   Optional execution context for the callback (i.e. \"this\").\n     *   If not provided, the {@link qx.ui.table.Table} object this mixin is\n     *   applied to is used.\n     *\n     */\n    setContextMenuHandler : function(col, handler, context)\n    {\n      this.__contextMenuHandler[col] = handler;\n      this.__contextMenuHandlerContext[col] = context || this;\n    },\n\n    /**\n     * Return the registered context menu handler for a column.\n     *\n     * @param col {Integer}\n     *   The column number for which the context menu handler is requested\n     *\n     * @return {Function}\n     *   The handler function which has been registered for the specified\n     *   column. The arguments of the handler is documented in\n     *   {@link #setContextMenuHandler}.\n     */\n    getContextMenuHandler : function(col)\n    {\n      return this.__contextMenuHandler[col];\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__contextMenuHandler = null;\n    this.__contextMenuHandlerContext = null;\n  }\n});\n"
  ]
}