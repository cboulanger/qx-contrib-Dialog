{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/cellrenderer/Default.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Abstract",
    "statics",
    "STYLEFLAG_ALIGN_RIGHT",
    "STYLEFLAG_BOLD",
    "STYLEFLAG_ITALIC",
    "_numberFormat",
    "properties",
    "useAutoAlign",
    "check",
    "init",
    "members",
    "_getStyleFlags",
    "cellInfo",
    "getUseAutoAlign",
    "value",
    "Default",
    "_getCellClass",
    "cellClass",
    "stylesToApply",
    "_getContentHtml",
    "bom",
    "String",
    "escape",
    "_formatValue",
    "res",
    "util",
    "format",
    "NumberFormat",
    "setMaximumFractionDigits",
    "Date",
    "DateFormat",
    "getDateInstance",
    "toString"
  ],
  "mappings": "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",
  "file": "Default.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * The default data cell renderer.\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.Default\",\n{\n  extend : qx.ui.table.cellrenderer.Abstract,\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    STYLEFLAG_ALIGN_RIGHT : 1,\n    STYLEFLAG_BOLD : 2,\n    STYLEFLAG_ITALIC : 4,\n    _numberFormat : null\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Whether the alignment should automatically be set according to the cell value.\n     * If true numbers will be right-aligned.\n     */\n    useAutoAlign :\n    {\n      check : \"Boolean\",\n      init : true\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Determines the styles to apply to the cell\n     *\n     * @param cellInfo {Map} cellInfo of the cell\n     *     See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {Integer} the sum of any of the STYLEFLAGS defined below\n     */\n    _getStyleFlags : function(cellInfo)\n    {\n      if (this.getUseAutoAlign())\n      {\n        if (typeof cellInfo.value == \"number\") {\n          return qx.ui.table.cellrenderer.Default.STYLEFLAG_ALIGN_RIGHT;\n        }\n      }\n      return 0;\n    },\n\n\n    // overridden\n    _getCellClass : function(cellInfo)\n    {\n      var cellClass = this.base(arguments, cellInfo);\n      if (!cellClass) {\n        return \"\";\n      }\n\n      var stylesToApply = this._getStyleFlags(cellInfo);\n\n      if (stylesToApply & qx.ui.table.cellrenderer.Default.STYLEFLAG_ALIGN_RIGHT) {\n        cellClass += \" qooxdoo-table-cell-right\";\n      }\n\n      if (stylesToApply & qx.ui.table.cellrenderer.Default.STYLEFLAG_BOLD) {\n        cellClass += \" qooxdoo-table-cell-bold\";\n      }\n\n      if (stylesToApply & qx.ui.table.cellrenderer.Default.STYLEFLAG_ITALIC) {\n        cellClass += \" qooxdoo-table-cell-italic\";\n      }\n\n      return cellClass;\n    },\n\n\n    // overridden\n    _getContentHtml : function(cellInfo) {\n      return qx.bom.String.escape(this._formatValue(cellInfo));\n    },\n\n\n    /**\n     * Formats a value.\n     *\n     * @param cellInfo {Map} A map containing the information about the cell to\n     *          create. This map has the same structure as in\n     *          {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {String} the formatted value.\n     */\n    _formatValue : function(cellInfo)\n    {\n      var value = cellInfo.value;\n      var res;\n\n      if (value == null) {\n        return \"\";\n      }\n\n      if (typeof value == \"string\") {\n        return value;\n      }\n      else if (typeof value == \"number\")\n      {\n        if (!qx.ui.table.cellrenderer.Default._numberFormat)\n        {\n          qx.ui.table.cellrenderer.Default._numberFormat = new qx.util.format.NumberFormat();\n          qx.ui.table.cellrenderer.Default._numberFormat.setMaximumFractionDigits(2);\n        }\n\n        res = qx.ui.table.cellrenderer.Default._numberFormat.format(value);\n      }\n      else if (value instanceof Date)\n      {\n        res = qx.util.format.DateFormat.getDateInstance().format(value);\n      }\n      else\n      {\n        res = value.toString();\n      }\n\n      return res;\n    }\n\n  }\n});\n"
  ]
}