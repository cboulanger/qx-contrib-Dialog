{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/cellrenderer/Number.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Conditional",
    "properties",
    "numberFormat",
    "check",
    "init",
    "nullable",
    "members",
    "_getContentHtml",
    "cellInfo",
    "nf",
    "getNumberFormat",
    "value",
    "format",
    "_getCellClass",
    "Number"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAqBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,iCAAhB,EACA;AACEC,YAASN,GAAGO,EAAH,CAAMC,KAAN,CAAYC,YAAZ,CAAyBC,WADpC;;AAIE;;;;;;AAMAC,gBACA;AACE;;;;;;AAMAC,oBACA;AACEC,eAAQ,6BADV;AAEEC,cAAO,IAFT;AAGEC,kBAAW;AAHb;AARF,KAXF;;AA2BE;;;;;;AAMAC,aACA;AACEC,uBAAkB,yBAASC,QAAT,EAClB;AACE,YAAIC,KAAK,KAAKC,eAAL,EAAT;;AAEA,YAAID,EAAJ,EACA;AACE,cAAID,SAASG,KAAT,IAAkBH,SAASG,KAAT,IAAkB,CAAxC,EAA2C;AACzC;AACA;AACA;AACA;AACA;AACA,mBAAOF,GAAGG,MAAH,CAAUJ,SAASG,KAAnB,CAAP;AACD,WAPD,MAOO;AACL,mBAAO,EAAP;AACD;AACF,SAZD,MAcA;AACE,iBAAOH,SAASG,KAAT,IAAkB,CAAlB,GAAsB,GAAtB,GAA6BH,SAASG,KAAT,IAAkB,EAAtD;AACD;AACF,OAtBH;;AAyBE;AACAE,qBAAgB,uBAASL,QAAT,EAAmB;AACjC,eAAO,6CAAP;AACD;AA5BH;AAlCF,GADA,C;AArBAlB,KAAGO,EAAH,CAAMC,KAAN,CAAYC,YAAZ,CAAyBe,MAAzB,CAAgCrB,aAAhC,GAAgDA,aAAhD",
  "file": "Number.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 OpenHex SPRL, http://www.openhex.org\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Gaetan de Menten (ged)\n\n************************************************************************ */\n\n/**\n * Specific data cell renderer for numbers.\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.Number\",\n{\n  extend : qx.ui.table.cellrenderer.Conditional,\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * NumberFormat used to format data. If the numberFormat contains a\n     * prefix and/or postfix containing characters which needs to be escaped,\n     * those need to be given to the numberFormat in their escaped form\n     * because no escaping happens at the cellrenderer level.\n     */\n    numberFormat :\n    {\n      check : \"qx.util.format.NumberFormat\",\n      init : null,\n      nullable : true\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    _getContentHtml : function(cellInfo)\n    {\n      var nf = this.getNumberFormat();\n\n      if (nf)\n      {\n        if (cellInfo.value || cellInfo.value == 0) {\n          // I don't think we need to escape the resulting string, as I\n          // don't know of any decimal or separator which use a character\n          // which needs escaping. It is much more plausible to have a\n          // prefix, postfix containing such characters but those can be\n          // (should be) added in their escaped form to the number format.\n          return nf.format(cellInfo.value);\n        } else {\n          return \"\";\n        }\n      }\n      else\n      {\n        return cellInfo.value == 0 ? \"0\" : (cellInfo.value || \"\");\n      }\n    },\n\n\n    // overridden\n    _getCellClass : function(cellInfo) {\n      return \"qooxdoo-table-cell qooxdoo-table-cell-right\";\n    }\n  }\n});\n"
  ]
}