{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/cellrenderer/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "implement",
    "ui",
    "table",
    "ICellRenderer",
    "extend",
    "core",
    "Object",
    "construct",
    "cr",
    "cellrenderer",
    "Abstract",
    "__clazz",
    "_createStyleSheet",
    "theme",
    "manager",
    "Meta",
    "getInstance",
    "addListener",
    "_onChangeTheme",
    "properties",
    "defaultCellStyle",
    "init",
    "check",
    "nullable",
    "members",
    "bom",
    "Stylesheet",
    "removeAllRules",
    "stylesheet",
    "_insetX",
    "_insetY",
    "colorMgr",
    "Color",
    "element",
    "Style",
    "compile",
    "position",
    "top",
    "overflow",
    "whiteSpace",
    "borderRight",
    "resolve",
    "padding",
    "cursor",
    "textOverflow",
    "userSelect",
    "Environment",
    "get",
    "BoxSizing",
    "createElement",
    "_getCellClass",
    "cellInfo",
    "_getCellStyle",
    "style",
    "_getCellAttributes",
    "_getContentHtml",
    "value",
    "_getCellSizeStyle",
    "width",
    "height",
    "insetX",
    "insetY",
    "Math",
    "max",
    "createDataCellHtml",
    "htmlArr",
    "push",
    "styleLeft",
    "styleWidth",
    "styleHeight",
    "destruct",
    "removeListener"
  ],
  "mappings": "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",
  "file": "Abstract.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * An abstract data cell renderer that does the basic coloring\n * (borders, selected look, ...).\n *\n * @require(qx.bom.Stylesheet)\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.Abstract\",\n{\n  type : \"abstract\",\n  implement : qx.ui.table.ICellRenderer,\n  extend : qx.core.Object,\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    var cr = qx.ui.table.cellrenderer.Abstract;\n    if (!cr.__clazz)\n    {\n      cr.__clazz = this.self(arguments);\n      this._createStyleSheet();\n\n      // add dynamic theme listener\n      if (qx.core.Environment.get(\"qx.dyntheme\")) {\n        qx.theme.manager.Meta.getInstance().addListener(\n          \"changeTheme\", this._onChangeTheme, this\n        );\n      }\n    }\n  },\n\n\n  properties :\n  {\n    /**\n     * The default cell style. The value of this property will be provided\n     * to the cell renderer as cellInfo.style.\n     */\n    defaultCellStyle :\n    {\n      init : null,\n      check : \"String\",\n      nullable : true\n    }\n  },\n\n\n  members :\n  {\n    /**\n     * Handler for the theme change.\n     * @signature function()\n     */\n    _onChangeTheme : qx.core.Environment.select(\"qx.dyntheme\",\n    {\n      \"true\" : function() {\n        qx.bom.Stylesheet.removeAllRules(\n          qx.ui.table.cellrenderer.Abstract.__clazz.stylesheet\n        );\n        this._createStyleSheet();\n      },\n      \"false\" : null\n    }),\n\n\n    /**\n     * the sum of the horizontal insets. This is needed to compute the box model\n     * independent size\n     */\n    _insetX : 6+6+1, // paddingLeft + paddingRight + borderRight\n\n    /**\n     * the sum of the vertical insets. This is needed to compute the box model\n     * independent size\n     */\n    _insetY : 0,\n\n\n    /**\n     * Creates the style sheet used for the table cells.\n     */\n    _createStyleSheet : function() {\n      var colorMgr = qx.theme.manager.Color.getInstance();\n      var stylesheet =\n        \".qooxdoo-table-cell {\" +\n        qx.bom.element.Style.compile(\n        {\n          position : \"absolute\",\n          top: \"0px\",\n          overflow: \"hidden\",\n          whiteSpace : \"nowrap\",\n          borderRight : \"1px solid \" + colorMgr.resolve(\"table-column-line\"),\n          padding : \"0px 6px\",\n          cursor : \"default\",\n          textOverflow : \"ellipsis\",\n          userSelect : \"none\"\n        }) +\n        \"} \" +\n        \".qooxdoo-table-cell-right { text-align:right } \" +\n        \".qooxdoo-table-cell-italic { font-style:italic} \" +\n        \".qooxdoo-table-cell-bold { font-weight:bold } \";\n\n      if (qx.core.Environment.get(\"css.boxsizing\")) {\n        stylesheet += \".qooxdoo-table-cell {\" + qx.bom.element.BoxSizing.compile(\"content-box\") + \"}\";\n      }\n\n      qx.ui.table.cellrenderer.Abstract.__clazz.stylesheet =\n        qx.bom.Stylesheet.createElement(stylesheet);\n    },\n\n\n    /**\n     * Get a string of the cell element's HTML classes.\n     *\n     * This method may be overridden by sub classes.\n     *\n     * @param cellInfo {Map} cellInfo of the cell\n     * @return {String} The table cell HTML classes as string.\n     */\n    _getCellClass : function(cellInfo) {\n      return \"qooxdoo-table-cell\";\n    },\n\n\n    /**\n     * Returns the CSS styles that should be applied to the main div of this\n     * cell.\n     *\n     * This method may be overridden by sub classes.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {var} the CSS styles of the main div.\n     */\n    _getCellStyle : function(cellInfo) {\n      return cellInfo.style || \"\";\n    },\n\n\n   /**\n     * Retrieve any extra attributes the cell renderer wants applied to this\n     * cell.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @return {String}\n     *   The extra attributes to be applied to this cell.\n     */\n    _getCellAttributes : function(cellInfo)\n    {\n      return \"\";\n    },\n\n\n    /**\n     * Returns the HTML that should be used inside the main div of this cell.\n     *\n     * This method may be overridden by sub classes.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {String} the inner HTML of the cell.\n     */\n    _getContentHtml : function(cellInfo) {\n      return cellInfo.value || \"\";\n    },\n\n\n    /**\n     * Get the cell size taking the box model into account\n     *\n     * @param width {Integer} The cell's (border-box) width in pixel\n     * @param height {Integer} The cell's (border-box) height in pixel\n     * @param insetX {Integer} The cell's horizontal insets, i.e. the sum of\n     *    horizontal paddings and borders\n     * @param insetY {Integer} The cell's vertical insets, i.e. the sum of\n     *    vertical paddings and borders\n     * @return {String} The CSS style string for the cell size\n     */\n    _getCellSizeStyle : function(width, height, insetX, insetY)\n    {\n      var style = \"\";\n      if (qx.core.Environment.get(\"css.boxmodel\") == \"content\")\n      {\n        width -= insetX;\n        height -= insetY;\n      }\n\n      style += \"width:\" + Math.max(width, 0) + \"px;\";\n      style += \"height:\" + Math.max(height, 0) + \"px;\";\n\n      return style;\n    },\n\n\n    // interface implementation\n    createDataCellHtml : function(cellInfo, htmlArr)\n    {\n      htmlArr.push(\n        '<div class=\"',\n        this._getCellClass(cellInfo),\n        '\" style=\"',\n        'left:', cellInfo.styleLeft, 'px;',\n        this._getCellSizeStyle(cellInfo.styleWidth, cellInfo.styleHeight, this._insetX, this._insetY),\n        this._getCellStyle(cellInfo), '\" ',\n        this._getCellAttributes(cellInfo),\n        '>' +\n        this._getContentHtml(cellInfo),\n        '</div>'\n      );\n    }\n\n  },\n\n\n  destruct : function() {\n    // remove dynamic theme listener\n    if (qx.core.Environment.get(\"qx.dyntheme\")) {\n      qx.theme.manager.Meta.getInstance().removeListener(\n        \"changeTheme\", this._onChangeTheme, this\n      );\n    }\n  }\n});\n"
  ]
}