{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/table/cellrenderer/AbstractImage.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Abstract",
    "type",
    "construct",
    "clazz",
    "stylesheet",
    "bom",
    "Stylesheet",
    "createElement",
    "properties",
    "repeat",
    "check",
    "value",
    "valid",
    "includes",
    "init",
    "members",
    "__defaultWidth",
    "__defaultHeight",
    "__imageData",
    "_insetY",
    "_identifyImage",
    "cellInfo",
    "Error",
    "_getImageInfos",
    "imageData",
    "url",
    "tooltip",
    "imageWidth",
    "imageHeight",
    "sizes",
    "__getImageSize",
    "width",
    "height",
    "source",
    "ResourceManager",
    "util",
    "getInstance",
    "ImageLoader",
    "io",
    "has",
    "getImageWidth",
    "getImageHeight",
    "isLoaded",
    "getWidth",
    "getHeight",
    "createDataCellHtml",
    "htmlArr",
    "_getCellClass",
    "_getContentHtml",
    "content",
    "srcUrl",
    "highResolutionSource",
    "findHighResolutionSource",
    "style",
    "display",
    "core",
    "Environment",
    "get",
    "verticalAlign",
    "position",
    "getCombinedFormat",
    "element",
    "Decoration",
    "create",
    "getRepeat",
    "_getCellAttributes",
    "destruct",
    "AbstractImage"
  ],
  "mappings": "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",
  "file": "AbstractImage.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Carsten Lergenmueller (carstenl)\n\n************************************************************************ */\n\n/**\n * A template class for cell renderer, which display images. Concrete\n * implementations must implement the method {@link #_identifyImage}.\n */\nqx.Class.define(\"qx.ui.table.cellrenderer.AbstractImage\",\n{\n  extend : qx.ui.table.cellrenderer.Abstract,\n  type : \"abstract\",\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    var clazz = this.self(arguments);\n    if (!clazz.stylesheet)\n    {\n      clazz.stylesheet = qx.bom.Stylesheet.createElement(\n        \".qooxdoo-table-cell-icon {\" +\n        \"  text-align:center;\" +\n        \"  padding-top:1px;\" +\n        \"}\"\n      );\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n  properties :\n  {\n    /**\n     * Whether to repeat or scale the image.\n     *\n     * @param repeat {String}\n     *   One of\n     *     <code>scale</code>,\n     *     <code>scale-x</code>,\n     *     <code>scale-y</code>,\n     *     <code>repeat</code>,\n     *     <code>repeat-x</code>,\n     *     <code>repeat-y</code>,\n     *     <code>no-repeat</code>\n    */\n    repeat :\n    {\n      check : function(value)\n      {\n        var valid =\n          [\n            \"scale\",\n            \"scale-x\",\n            \"scale-y\",\n            \"repeat\",\n            \"repeat-x\",\n            \"repeat-y\",\n            \"no-repeat\"\n          ];\n        return valid.includes(value);\n      },\n      init  : \"no-repeat\"\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __defaultWidth : 16,\n    __defaultHeight : 16,\n    __imageData : null,\n\n    // overridden\n    _insetY : 2,\n\n    /**\n     * Identifies the Image to show. This is a template method, which must be\n     * implemented by sub classes.\n     *\n     * @abstract\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {Map} A map having the following attributes:\n     *           <ul>\n     *           <li>\n     *             \"url\": (type string) must be the URL of the image to show.\n     *             The url given must either be managed by the {@link qx.util.ResourceManager}\n     *             or pre-loaded with {@link qx.io.ImageLoader}. This is to make sure that\n     *             the renderer knows the dimensions and the format of the image.\n     *           </li>\n     *           <li>\"imageWidth\": (type int) the width of the image in pixels.</li>\n     *           <li>\"imageHeight\": (type int) the height of the image in pixels.</li>\n     *           <li>\"tooltip\": (type string) must be the image tooltip text.</li>\n     *           </ul>\n     * @throws {Error} the abstract function warning.\n     */\n    _identifyImage : function(cellInfo) {\n      throw new Error(\"_identifyImage is abstract\");\n    },\n\n\n    /**\n     * Retrieves the image infos.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *          See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     * @return {Map} Map with an \"url\" attribute (type string)\n     *                 holding the URL of the image to show\n     *                 and a \"tooltip\" attribute\n     *                 (type string) being the tooltip text (or null if none was specified)\n     */\n    _getImageInfos : function(cellInfo)\n    {\n      // Query the subclass about image and tooltip\n      var imageData = this._identifyImage(cellInfo);\n\n      // If subclass refuses to give map, construct it with required properties\n      // If no map is given, but instead a string, assume that this string is\n      // the URL of the image [BUG #4289]\n      if (imageData == null || typeof imageData == \"string\")\n      {\n        imageData =\n        {\n          url : imageData,\n          tooltip : null\n        };\n      }\n\n      // If sizes are not included in map given by subclass,\n      // fall-back to calculated image size\n      if (!imageData.imageWidth || !imageData.imageHeight)\n      {\n        var sizes = this.__getImageSize(imageData.url);\n\n        imageData.imageWidth = sizes.width;\n        imageData.imageHeight = sizes.height;\n      }\n\n      // Add width and height keys to map [BUG #4289]\n      // - [width|height] is read by _getContentHtml()\n      // - [imageWidth|imageHeight] is possibly read in legacy applications\n      imageData.width = imageData.imageWidth;\n      imageData.height = imageData.imageHeight;\n\n      return imageData;\n    },\n\n\n    /**\n     * Compute the size of the given image\n     *\n     * @param source {String} the image URL\n     * @return {Map} A map containing the image's <code>width</code> and\n     *    <code>height</code>\n     */\n    __getImageSize : function(source)\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      var ImageLoader = qx.io.ImageLoader;\n      var width, height;\n\n      // Detect if the image registry knows this image\n      if (ResourceManager.has(source))\n      {\n        width = ResourceManager.getImageWidth(source);\n        height = ResourceManager.getImageHeight(source);\n      }\n      else if (ImageLoader.isLoaded(source))\n      {\n        width = ImageLoader.getWidth(source);\n        height = ImageLoader.getHeight(source);\n      }\n      else\n      {\n        width = this.__defaultWidth;\n        height = this.__defaultHeight;\n      }\n\n      return {width : width, height : height};\n    },\n\n\n    // overridden\n    createDataCellHtml : function(cellInfo, htmlArr)\n    {\n      this.__imageData = this._getImageInfos(cellInfo);\n      return this.base(arguments, cellInfo, htmlArr);\n    },\n\n\n    // overridden\n    _getCellClass : function(cellInfo) {\n      return this.base(arguments) + \" qooxdoo-table-cell-icon\";\n    },\n\n\n    // overridden\n    _getContentHtml : function(cellInfo) {\n      var content = \"<div></div>\";\n      // set image\n      if (this.__imageData.url) {\n        var srcUrl = this.__imageData.url;\n        var highResolutionSource = qx.util.ResourceManager.getInstance().findHighResolutionSource(this.__imageData.url);\n        if (highResolutionSource) {\n          srcUrl = highResolutionSource;\n        }\n        var style = {\n          width: this.__imageData.width + \"px\",\n          height: this.__imageData.height + \"px\",\n          display: qx.core.Environment.get(\"css.inlineblock\"),\n          verticalAlign: \"top\",\n          position: \"static\"\n        }\n        if (qx.util.ResourceManager.getInstance().getCombinedFormat(this.__imageData.url) === \"\") {\n          // background size is critical for high-resolution images but breaks combined images\n          style[\"background-size\"] = this.__imageData.width + \"px \" + this.__imageData.height + \"px\";\n        }\n        content = qx.bom.element.Decoration.create(srcUrl, this.getRepeat(), style);\n      }\n      return content;\n    },\n\n\n    // overridden\n    _getCellAttributes : function(cellInfo)\n    {\n      var tooltip = this.__imageData.tooltip;\n\n      if (tooltip) {\n        return \"title='\" + tooltip + \"'\";\n      } else {\n        return \"\";\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.__imageData = null;\n  }\n});\n"
  ]
}