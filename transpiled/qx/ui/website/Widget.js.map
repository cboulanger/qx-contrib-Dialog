{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/website/Widget.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "qxWeb",
    "implement",
    "core",
    "IDisposable",
    "statics",
    "widget",
    "ui",
    "website",
    "Widget",
    "init",
    "create",
    "html",
    "initWidgets",
    "selector",
    "elements",
    "filter",
    "_forEachElementWrapped",
    "toWidgetCollection",
    "args",
    "toArray",
    "map",
    "el",
    "Array",
    "prototype",
    "unshift",
    "call",
    "Temp",
    "Wrapper",
    "bind",
    "apply",
    "construct",
    "context",
    "col",
    "length",
    "Error",
    "push",
    "slice",
    "members",
    "__cssPrefix",
    "getProperty",
    "setAttribute",
    "classname",
    "addClass",
    "getCssPrefix",
    "setProperty",
    "$widget",
    "split",
    "toLowerCase",
    "setEnabled",
    "value",
    "find",
    "getEnabled",
    "getAttribute",
    "setTemplate",
    "name",
    "template",
    "_setData",
    "setConfig",
    "config",
    "type",
    "data",
    "getTemplate",
    "_getData",
    "getConfig",
    "storage",
    "item",
    "undefined",
    "attribName",
    "string",
    "firstUp",
    "getData",
    "dataset",
    "JSON",
    "parse",
    "e",
    "constructor",
    "render",
    "dispose",
    "removeAttribute",
    "contextProperty",
    "replace",
    "removeClass",
    "$$events",
    "allOff",
    "$init",
    "defer",
    "$attach",
    "$attachStatic"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA8BAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,sBAApB,EAA4C;AAC1CC,YAASC,KADiC;;AAG1CC,eAAW,CAAEP,GAAGQ,IAAH,CAAQC,WAAV,CAH+B;;AAK1CC,aAAU;;AAER;;;;;;;;AAQAC,cAAS,kBAAW;AAClB,YAAIA,SAAS,IAAIX,GAAGY,EAAH,CAAMC,OAAN,CAAcC,MAAlB,CAAyB,IAAzB,CAAb;AACAH,eAAOI,IAAP;AACA,eAAOJ,MAAP;AACD,OAdO;;AAiBR;;;;;;;AAOAK,cAAS,gBAASC,IAAT,EAAe;AACtB,eAAO,IAAIjB,GAAGY,EAAH,CAAMC,OAAN,CAAcC,MAAlB,CAAyBR,MAAMU,MAAN,CAAaC,IAAb,CAAzB,CAAP;AACD,OA1BO;;AA6BR;;;;;;;;;AASAC,mBAAc,qBAASC,QAAT,EAAmB;AAC/B,YAAIC,WAAWd,MAAM,kBAAN,CAAf;AACA,YAAIa,QAAJ,EAAc;AACZC,qBAAWA,SAASC,MAAT,CAAgBF,QAAhB,CAAX;AACD;AACDC,iBAASE,sBAAT,CAAgC,UAASX,MAAT,EAAiB;AAC/CA,iBAAOI,IAAP;AACD,SAFD;AAGD,OA9CO;;AAiDR;;;;;;;;AAQAQ,0BAAoB,8BAAW;AAC7B,YAAIC,OAAO,KAAKC,OAAL,GAAeC,GAAf,CAAmB,UAASC,EAAT,EAAa;AAAE,iBAAOrB,MAAMqB,EAAN,CAAP;AAAmB,SAArD,CAAX;;AAEA;AACAC,cAAMC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BP,IAA7B,EAAmC,IAAnC;AACA;AACA,YAAIQ,OAAOhC,GAAGQ,IAAH,CAAQyB,OAAR,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2BnC,GAAGQ,IAAH,CAAQyB,OAAnC,EAA4CT,IAA5C,CAAX;;AAEA,eAAO,IAAIQ,IAAJ,EAAP;AACD;AAlEO,KALgC;;AA2E1CI,eAAY,mBAASjB,QAAT,EAAmBkB,OAAnB,EAA4B;AACtC,UAAIC,mCAA2BnB,QAA3B,EAAqCkB,OAArC,CAAJ;AACA,UAAIC,IAAIC,MAAJ,GAAa,CAAjB,EAAoB;AAClB,cAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACD;AACDZ,YAAMC,SAAN,CAAgBY,IAAhB,CAAqBN,KAArB,CAA2B,IAA3B,EAAiCP,MAAMC,SAAN,CAAgBa,KAAhB,CAAsBX,IAAtB,CAA2BO,GAA3B,EAAgC,CAAhC,EAAmCA,IAAIC,MAAvC,CAAjC;AACD,KAjFyC;;AAoF1CI,aAAU;AACRC,mBAAc,IADN;;AAIR;;;;;AAKA7B,YAAO,gBAAW;AAChB,YAAI,KAAK8B,WAAL,CAAiB,yBAAjB,CAAJ,EAAiD;AAC/C,iBAAO,KAAP;AACD;AACD,aAAKC,YAAL,CAAkB,eAAlB,EAAmC,KAAKC,SAAxC;AACA,aAAKC,QAAL,CAAc,WAAd;AACA,aAAKA,QAAL,CAAc,KAAKC,YAAL,EAAd;AACA,aAAKC,WAAL,CAAiB,yBAAjB,EAA4C,IAA5C;AACA,YAAG,KAAK,CAAL,CAAH,EAAY;AACV,eAAK,CAAL,EAAQC,OAAR,GAAkB,IAAlB;AACD;AACD,eAAO,IAAP;AACD,OArBO;;AAwBR;;;;;;AAMAF,oBAAe,wBAAW;AACxB,YAAI,CAAC,KAAKL,WAAV,EAAuB;AACrB,cAAIQ,QAAQ,KAAKL,SAAL,CAAeK,KAAf,CAAqB,GAArB,CAAZ;AACA,eAAKR,WAAL,GAAmB,QAAQQ,MAAMA,MAAMb,MAAN,GAAe,CAArB,EAAwBc,WAAxB,EAA3B;AACD;AACD,eAAO,KAAKT,WAAZ;AACD,OApCO;;AAuCR;;;;;;;;AAQAU,kBAAa,oBAASC,KAAT,EAAgB;AAC3B,aAAKT,YAAL,CAAkB,UAAlB,EAA8B,CAACS,KAA/B;AACA,aAAKC,IAAL,CAAU,GAAV,EAAeV,YAAf,CAA4B,UAA5B,EAAwC,CAACS,KAAzC;AACA,eAAO,IAAP;AACD,OAnDO;;AAsDR;;;;;AAKAE,kBAAa,sBAAW;AACtB,eAAO,CAAC,KAAKC,YAAL,CAAkB,UAAlB,CAAR;AACD,OA7DO;;AAgER;;;;;;;;;;;;;;AAcAC,mBAAc,qBAASC,IAAT,EAAeC,QAAf,EAAyB;AACrC,eAAO,KAAKC,QAAL,CAAc,WAAd,EAA2BF,IAA3B,EAAiCC,QAAjC,CAAP;AACD,OAhFO;;AAmFR;;;;;;;;;;;;;AAaAE,iBAAY,mBAASH,IAAT,EAAeI,MAAf,EAAuB;AACjC,eAAO,KAAKF,QAAL,CAAc,QAAd,EAAwBF,IAAxB,EAA8BI,MAA9B,CAAP;AACD,OAlGO;;AAqGR;;;;;;;;AAQAF,gBAAW,kBAASG,IAAT,EAAeL,IAAf,EAAqBM,IAArB,EAA2B;AACpC,YAAI,CAAC,KAAK,eAAeD,IAApB,CAAL,EAAgC;AAC9B,eAAK,eAAeA,IAApB,IAA4B,EAA5B;AACD;AACD,aAAK,eAAeA,IAApB,EAA0BL,IAA1B,IAAkCM,IAAlC;;AAEA,eAAO,IAAP;AACD,OApHO;;AAuHR;;;;;;;AAOAC,mBAAc,qBAASP,IAAT,EAAe;AAC3B,eAAO,KAAKQ,QAAL,CAAc,WAAd,EAA2BR,IAA3B,CAAP;AACD,OAhIO;;AAmIR;;;;;;;;;AASAS,iBAAY,mBAAST,IAAT,EAAe;AACzB,eAAO,KAAKQ,QAAL,CAAc,QAAd,EAAwBR,IAAxB,CAAP;AACD,OA9IO;;AAiJR;;;;;;;;;AASAQ,gBAAW,kBAASH,IAAT,EAAeL,IAAf,EAAqB;AAC9B,YAAIU,UAAU,KAAK,eAAeL,IAApB,CAAd;AACA,YAAIM,IAAJ;;AAEA,YAAID,OAAJ,EAAa;AACXC,iBAAOD,QAAQV,IAAR,CAAP;AACD;;AAED,YAAIW,SAASC,SAAT,IAAsBP,QAAQ,QAAlC,EAA4C;AAC1C,cAAIQ,aAAa,OAAOnE,MAAMoE,MAAN,CAAaC,OAAb,CAAqBV,IAArB,CAAP,GACf3D,MAAMoE,MAAN,CAAaC,OAAb,CAAqBf,IAArB,CADF;AAEAW,iBAAO,KAAKK,OAAL,CAAaH,UAAb,CAAP;;AAEA;AACA,cAAI,CAAC,KAAK,CAAL,CAAD,IAAa,CAAC,KAAK,CAAL,EAAQI,OAAT,IAAoBN,SAAS,IAA9C,EAAqD;AACnDA,mBAAOC,SAAP;AACD;;AAED,cAAI;AACFD,mBAAOO,KAAKC,KAAL,CAAWR,IAAX,CAAP;AACD,WAFD,CAEE,OAAMS,CAAN,EAAS,CAAE;AACd;;AAED,YAAIT,SAASC,SAAT,IAAsB,KAAKS,WAAL,CAAiB,MAAMhB,IAAvB,CAA1B,EAAwD;AACtD,iBAAO,KAAKgB,WAAL,CAAiB,MAAMhB,IAAvB,EAA6BL,IAA7B,CAAP;AACD;;AAED,eAAOW,IAAP;AACD,OAtLO;;AAyLR;;;;;;;AAOAW,cAAS,kBAAW;AAClB;AACA,eAAO,IAAP;AACD,OAnMO;;AAsMR;;;;;;AAMAC,eAAU,mBAAW;AACnB,aAAKC,eAAL,CAAqB,eAArB;AACA,aAAKlC,WAAL,CAAiB,QAAjB,EAA2BsB,SAA3B;AACA,aAAKtB,WAAL,CAAiB,WAAjB,EAA8BsB,SAA9B;AACA,YAAIa,kBAAkB,KAAKtC,SAAL,CAAeuC,OAAf,CAAuB,KAAvB,EAA8B,GAA9B,IAAqC,UAA3D;AACA,aAAKpC,WAAL,CAAiBmC,eAAjB,EAAkCb,SAAlC;AACA,aAAKtB,WAAL,CAAiB,yBAAjB,EAA4CsB,SAA5C;AACA,aAAKe,WAAL,CAAiB,WAAjB;AACA,aAAKA,WAAL,CAAiB,KAAKtC,YAAL,EAAjB;;AAEA,aAAK,IAAIW,IAAT,IAAiB,KAAKqB,WAAL,CAAiBO,QAAlC,EAA4C;AAC1C,eAAKC,MAAL,CAAY7B,IAAZ;AACD;;AAED,aAAK,CAAL,EAAQT,OAAR,GAAkB,IAAlB;;AAEA,eAAO7C,MAAMoF,KAAN,CAAY,IAAZ,EAAkBpF,KAAlB,CAAP;AACD;AA7NO,KApFgC;;AAqT1CqF,WAAQ,eAASjF,OAAT,EAAkB;AACxBJ,YAAMsF,OAAN,CAAc;AACZjF,gBAAQD,QAAQC,MADJ;AAEZY,4BAAqBb,QAAQa;AAFjB,OAAd;AAIAjB,YAAMuF,aAAN,CAAoB;AAClB3E,qBAAcR,QAAQQ;AADJ,OAApB;AAGD;AA7TyC,GAA5C,C;AA9BAlB,KAAGY,EAAH,CAAMC,OAAN,CAAcC,MAAd,CAAqBX,aAArB,GAAqCA,aAArC",
  "file": "Widget.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * This is the base collection for all widgets and offers a good foundation\n * for all widgets including enabled state handling, config and template storage\n * and event handling to name a few key features.\n *\n * @require(qx.module.Dataset)\n * @require(qx.module.util.String)\n * @require(qx.module.event.Native)\n *\n * @group (Widget)\n */\nqx.Bootstrap.define(\"qx.ui.website.Widget\", {\n  extend : qxWeb,\n  \n  implement: [ qx.core.IDisposable ],\n\n  statics : {\n\n    /**\n     * Factory method for the widget which converts a standard\n     * collection into a collection of widgets.\n     *\n     * @return {qx.ui.website.Widget} A widget.\n     *\n     * @attach {qxWeb}\n     */\n    widget : function() {\n      var widget = new qx.ui.website.Widget(this);\n      widget.init();\n      return widget;\n    },\n\n\n    /**\n     * Creates a new collection from the given argument. This can either be an\n     * HTML string, a single DOM element or an array of elements\n     *\n     * @param html {String|Element[]} HTML string or DOM element(s)\n     * @return {qxWeb} Collection of elements\n     */\n    create : function(html) {\n      return new qx.ui.website.Widget(qxWeb.create(html));\n    },\n\n\n    /**\n     * Fetches elements with a data attribute named <code>data-qx-class</code>\n     * containing the class name of the desired widget and initializes them as\n     * widgets.\n     *\n     * @param selector {String?} Optional selector expression or filter function to\n     * restrict the list of elements\n     * @attachStatic {qxWeb}\n     */\n    initWidgets : function(selector) {\n      var elements = qxWeb(\"*[data-qx-class]\");\n      if (selector) {\n        elements = elements.filter(selector);\n      }\n      elements._forEachElementWrapped(function(widget) {\n        widget.init();\n      });\n    },\n\n\n    /**\n     * Returns a wrapper Array that maps the widget API available on\n     * the first item in the current collection to all items in the\n     * collection.\n     *\n     * @attach {qxWeb}\n     * @return {qxWeb[]} Collection of widgets\n     */\n    toWidgetCollection: function() {\n      var args = this.toArray().map(function(el) { return qxWeb(el); });\n\n      // Set the context for the 'bind' call (will be replaced by new)\n      Array.prototype.unshift.call(args, null);\n      // Create temporary constructor with bound arguments\n      var Temp = qx.core.Wrapper.bind.apply(qx.core.Wrapper, args);\n\n      return new Temp();\n    }\n  },\n\n\n  construct : function(selector, context) {\n    var col = this.base(arguments, selector, context);\n    if (col.length > 1) {\n      throw new Error(\"The collection must not contain more than one element.\");\n    }\n    Array.prototype.push.apply(this, Array.prototype.slice.call(col, 0, col.length));\n  },\n\n\n  members : {\n    __cssPrefix : null,\n\n\n    /**\n     * Responsible for initializing of the widget. This checks for the data attribute\n     * named <code>data-qx-class</code> and initializes the widget if necessary.\n     * @return {Boolean} <code>true</code> if the widget has been initialized\n     */\n    init : function() {\n      if (this.getProperty(\"$$qx-widget-initialized\")) {\n        return false;\n      }\n      this.setAttribute(\"data-qx-class\", this.classname);\n      this.addClass(\"qx-widget\");\n      this.addClass(this.getCssPrefix());\n      this.setProperty(\"$$qx-widget-initialized\", true);\n      if(this[0]) {\n        this[0].$widget = this;\n      }\n      return true;\n    },\n\n\n    /**\n     * Return the proper CSS prefix for the current widget. This prefix is\n     * based on the current classname.\n     *\n     * @return {String} The CSS prefix for the current object.\n     */\n    getCssPrefix : function() {\n      if (!this.__cssPrefix) {\n        var split = this.classname.split(\".\");\n        this.__cssPrefix = \"qx-\" + split[split.length - 1].toLowerCase();\n      }\n      return this.__cssPrefix;\n    },\n\n\n    /**\n     * Changes the enabled state of the current collection, which means all\n     * widgets in the collection. This sets the disabled attribute on the\n     * elements and all its children.\n     *\n     * @param value {Boolean} The enabled value.\n     * @return {qx.ui.website.Widget} The collection for chaining\n     */\n    setEnabled : function(value) {\n      this.setAttribute(\"disabled\", !value);\n      this.find(\"*\").setAttribute(\"disabled\", !value);\n      return this;\n    },\n\n\n    /**\n     * Returns weather the first widget in the collection is enabled or not.\n     *\n     * @return {Boolean} The enabled state of the collection.\n     */\n    getEnabled : function() {\n      return !this.getAttribute(\"disabled\");\n    },\n\n\n    /**\n     * Setter for the widget-specific templates. The available templates can\n     * be found in the documentation of the corresponding widget. The templates\n     * will be rendered using\n     * <a href='https://github.com/janl/mustache.js/'>mustache.js</a>.\n     *\n     * Please keep in mind to call {@link #render} after you change any\n     * template or config setting.\n     *\n     * @param name {String} The name of the template.\n     * @param template {String} The template string.\n     *\n     * @return {qx.ui.website.Widget} The widget instance for chaining.\n     */\n    setTemplate : function(name, template) {\n      return this._setData(\"templates\", name, template);\n    },\n\n\n    /**\n     * Setter for the widget-specific config. The available config settings can\n     * be found in the documentation of the corresponding widget. Each config\n     * setting can be set in the markup as data-attribute, prefixed with\n     * <code>data-qx</code> e.g. <code>data-qx-length=\"5\"</code>.\n     *\n     * Please keep in mind to call {@link #render} after you change any\n     * template or config setting.\n     *\n     * @param name {String} The name of the config setting.\n     * @param config {var} The value of the config setting.\n     * @return {qx.ui.website.Widget} The widget instance for chaining.\n     */\n    setConfig : function(name, config) {\n      return this._setData(\"config\", name, config);\n    },\n\n\n    /**\n     * Helper to set either config or template values.\n     *\n     * @param type {String} Either <code>templates</code> or <code>config</code>.\n     * @param name {String} The name for the value to store.\n     * @param data {var} The data to store.\n     * @return {qx.ui.website.Widget} The widget instance for chaining.\n     */\n    _setData : function(type, name, data) {\n      if (!this[\"$$storage_\" + type]) {\n        this[\"$$storage_\" + type] = {};\n      }\n      this[\"$$storage_\" + type][name] = data;\n\n      return this;\n    },\n\n\n    /**\n     * Returns the used template. This includes custom templates\n     * as the default templates defined by the widgets.\n     *\n     * @param name {String} The name of the template.\n     * @return {String} The template string or <code>undefined</code>.\n     */\n    getTemplate : function(name) {\n      return this._getData(\"templates\", name);\n    },\n\n\n    /**\n     * Returns the config setting currently in use for the given widget.\n     * This can either be the user set config value, the value set in\n     * the markup via data-attribute, the widgets default config value or\n     * <code>undefined</code>, if non is set.\n     *\n     * @param name {String} The name of the config.\n     * @return {var} The value of the config or <code>undefined</code>.\n     */\n    getConfig : function(name) {\n      return this._getData(\"config\", name);\n    },\n\n\n    /**\n     * Internal helper for querying the values for templates and configs. In the\n     * case of a config value, the method also reads the corresponding data-attribute\n     * for possible values.\n     *\n     * @param type {String} Either <code>templates</code> or <code>config</code>.\n     * @param name {String} The name for the value to fetch.\n     * @return {var} The value store for the given arguments.\n     */\n    _getData : function(type, name) {\n      var storage = this[\"$$storage_\" + type];\n      var item;\n\n      if (storage) {\n        item = storage[name];\n      }\n\n      if (item === undefined && type == \"config\") {\n        var attribName = \"qx\" + qxWeb.string.firstUp(type) +\n          qxWeb.string.firstUp(name);\n        item = this.getData(attribName);\n\n        // not defined HTML attributes result in 'null' values\n        if (!this[0] || (!this[0].dataset && item === null)) {\n          item = undefined;\n        }\n\n        try {\n          item = JSON.parse(item);\n        } catch(e) {}\n      }\n\n      if (item === undefined && this.constructor[\"_\" + type]) {\n        return this.constructor[\"_\" + type][name];\n      }\n\n      return item;\n    },\n\n\n    /**\n     * The render method is responsible for applying changed config\n     * and template settings. This method is usually overridden and specified\n     * by the subclassing widgets like the slider or tabs.\n     *\n     * @return {qx.ui.website.Widget} The widget collection for chaining.\n     */\n    render : function() {\n      // empty method\n      return this;\n    },\n\n\n    /**\n     * Dispose the widget, making sure all objects are ready for\n     * garbage collection. This mainly means deleting connections to the\n     * DOM including event listeners.\n     * @return {qxWeb} Plain qxWeb collection\n     */\n    dispose : function() {\n      this.removeAttribute(\"data-qx-class\");\n      this.setProperty(\"config\", undefined);\n      this.setProperty(\"templates\", undefined);\n      var contextProperty = this.classname.replace(/\\./g, \"-\") + \"-context\";\n      this.setProperty(contextProperty, undefined);\n      this.setProperty(\"$$qx-widget-initialized\", undefined);\n      this.removeClass(\"qx-widget\");\n      this.removeClass(this.getCssPrefix());\n\n      for (var name in this.constructor.$$events) {\n        this.allOff(name);\n      }\n\n      this[0].$widget = null;\n\n      return qxWeb.$init(this, qxWeb);\n    }\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attach({\n      widget: statics.widget,\n      toWidgetCollection : statics.toWidgetCollection\n    });\n    qxWeb.$attachStatic({\n      initWidgets : statics.initWidgets\n    });\n  }\n});\n"
  ]
}