{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/website/Table.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "ui",
    "website",
    "Widget",
    "construct",
    "selector",
    "context",
    "events",
    "statics",
    "_config",
    "caseSensitive",
    "rowSelection",
    "sortable",
    "_templates",
    "table",
    "model",
    "Table",
    "__model",
    "init",
    "__isNumber",
    "n",
    "Object",
    "prototype",
    "toString",
    "call",
    "isNaN",
    "parseFloat",
    "isFinite",
    "replace",
    "__isDate",
    "val",
    "d",
    "Date",
    "valueOf",
    "__getIndex",
    "htmlCollection",
    "htmlElement",
    "index",
    "i",
    "l",
    "length",
    "item",
    "__getUID",
    "getTime",
    "Math",
    "floor",
    "random",
    "substr",
    "__selectionTypes",
    "__internalCellClass",
    "__internalHeaderClass",
    "__internalSelectionClass",
    "__internalInputClass",
    "__allColumnSelector",
    "__dataColName",
    "__dataColType",
    "__dataSortingKey",
    "__modelSortingKey",
    "__inputLabelClass",
    "__selectedRowClass",
    "__ascSortingClass",
    "__descSortingClass",
    "members",
    "__columnMeta",
    "__sortingFunction",
    "__filterFunction",
    "__filterFunc",
    "__filters",
    "__inputName",
    "__hovered",
    "__sortingData",
    "qxWeb",
    "getNodeName",
    "toUpperCase",
    "Error",
    "tHead",
    "find",
    "addClass",
    "__getColumnMetaData",
    "setModel",
    "setSortingFunction",
    "__defaultColumnSort",
    "__registerEvents",
    "lang",
    "Type",
    "isArray",
    "emit",
    "setColumnType",
    "columnName",
    "type",
    "__checkColumnExistance",
    "getColumnType",
    "eq",
    "getCell",
    "row",
    "col",
    "__getRoot",
    "rows",
    "cells",
    "getRows",
    "setCompareFunction",
    "compareFunc",
    "string",
    "firstUp",
    "setProperty",
    "unsetCompareFunction",
    "_compareString",
    "getCompareFunction",
    "getProperty",
    "func",
    "unsetSortingFunction",
    "setFilterFunction",
    "unsetFilterFunction",
    "__defaultColumnFilter",
    "setColumnFilter",
    "getColumnFilter",
    "setRowFilter",
    "getRowFilter",
    "sort",
    "dir",
    "setSortingClass",
    "__sortDOM",
    "__sort",
    "columName",
    "direction",
    "filter",
    "keyword",
    "resetFilter",
    "appendChild",
    "document",
    "createDocumentFragment",
    "__filterDom",
    "filters",
    "setContent",
    "tableData",
    "__extractTableRows",
    "tbody",
    "empty",
    "appendTo",
    "render",
    "appendContent",
    "data",
    "markup",
    "create",
    "isNode",
    "nodeName",
    "colIndex",
    "__getColumnIndex",
    "filterFunc",
    "__getDataRows",
    "columnIndex",
    "cell",
    "bind",
    "getSortingData",
    "sortingData",
    "getConfig",
    "__applyTemplate",
    "indexOf",
    "__processSelectionInputs",
    "remove",
    "__createInputs",
    "__createInput",
    "__getHeaderRow",
    "getElementsByTagName",
    "cssPrefix",
    "getCssPrefix",
    "clazz",
    "headerInput",
    "selectionMode",
    "checked",
    "inputName",
    "className",
    "currentInput",
    "id",
    "inputNode",
    "insertBefore",
    "tHeadOrFoot",
    "__addClassToHeaderAndFooter",
    "tFoot",
    "colName",
    "headerRow",
    "__getColumName",
    "getAttribute",
    "setAttribute",
    "name",
    "footOrHead",
    "hasClass",
    "dataRows",
    "insertAfter",
    "on",
    "__detectClickedCell",
    "__cellHover",
    "__cellOut",
    "__selectionRendered",
    "__processSelection",
    "inputs",
    "clickedInput",
    "selection",
    "toArray",
    "array",
    "input",
    "push",
    "selectedRows",
    "map",
    "elem",
    "parentNode",
    "removeClass",
    "__fireEvent",
    "eventType",
    "target",
    "colNumber",
    "headCell",
    "e",
    "getTarget",
    "classname",
    "getParents",
    "window",
    "setTimeout",
    "hovered",
    "getClosest",
    "relatedTarget",
    "getRelatedTarget",
    "isChildOf",
    "createdRow",
    "colMeta",
    "renderedRow",
    "inputType",
    "__deleteRows",
    "renderedColIndex",
    "templateApplied",
    "coltemplate",
    "getTemplate",
    "rowCount",
    "__isRowRendered",
    "insertRow",
    "j",
    "colCount",
    "__getDataForColumn",
    "template",
    "__isCellRendered",
    "replaceChild",
    "value",
    "renderedRows",
    "deleteRow",
    "tBodies",
    "rowIndex",
    "__addSortingClassToCol",
    "HeaderOrFooter",
    "removeClasses",
    "meta",
    "columnType",
    "a",
    "b",
    "x",
    "__getSortingKey",
    "y",
    "_compareNumber",
    "Number",
    "headerCell",
    "_compareDate",
    "toLowerCase",
    "__getCellValue",
    "textContent",
    "innerText",
    "len",
    "sortedData",
    "cellValue",
    "defer",
    "$attach"
  ],
  "mappings": "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",
  "file": "Table.js",
  "sourcesContent": [
    "\n/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Romeo Kenfack Tsakem (rkenfack)\n\n************************************************************************ */\n\n/**\n * This is a widget that enhances an HTML table with some basic features like\n * Sorting and Filtering.\n *\n * EXPERIMENTAL - NOT READY FOR PRODUCTION\n *\n * <h2>CSS Classes</h2>\n * <table>\n *   <thead>\n *     <tr>\n *       <td>Class Name</td>\n *       <td>Applied to</td>\n *       <td>Description</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td><code>qx-table</code></td>\n *       <td>Table element</td>\n *       <td>Identifies the Table widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-cell</code></td>\n *       <td>Table cell (<code>td</code>)</td>\n *       <td>Identifies and styles a cell of the widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-header</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles a header of the table widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-row-selection</code></td>\n *       <td>Table cell (<code>td</code>)</td>\n *       <td>Identifies and styles the cells containing the inputs for the row selection</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-selection-input</code></td>\n *       <td><code>input</code></td>\n *       <td>Identifies and styles input element to select a table row</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-input-label</code></td>\n *       <td>Label element (<code>label</code>)</td>\n *       <td>Identifies and styles label contained in the selection cell. This label can be used to create custom inputs</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-row-selected</code></td>\n *       <td>Selected row (<code>tr</code>)</td>\n *       <td>Identifies and styles the selected table rows</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-sort-asc</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles the header of the current ascendant sorted column</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-table-sort-desc</code></td>\n *       <td>Table header (<code>th</code>)</td>\n *       <td>Identifies and styles the header of the current descendant sorted column</td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * @group (Widget)\n *\n */\nqx.Bootstrap.define(\"qx.ui.website.Table\", {\n\n  extend : qx.ui.website.Widget,\n\n  construct : function(selector, context) {\n    this.base(arguments, selector, context);\n  },\n\n  events : {\n    /** Fires at each model change */\n    \"modelChange\" : \"Array\",\n    /** Fires at each selection change */\n    \"selectionChange\" : \"qxWeb\",\n    /** Fires each time a cell of the widget is clicked */\n    \"cellClick\" : \"Object\",\n    /** Fires each time a cell of the widget is hovered */\n    \"cellHover\" : \"Object\",\n     /** Fires each time the mouse leave a cell of the table widget */\n    \"cellOut\" : \"Object\",\n    /** Fires after the model has been applied to the widget */\n    \"modelApplied\" : \"Array\",\n    /** Fires each time the value of a cell is rendered into the cell */\n    \"cellRender\" : \"Object\",\n    /** Fires after the table rows have been sorted */\n    \"sort\" : \"Object\",\n    /** Fires after the table rows have been filtered */\n    \"filter\" : \"Object\"\n  },\n\n\n  statics : {\n\n    /**\n    * *caseSensitive*\n    * Determines if the string sorting/filtering should be case sensitive or not. Default value : <code>false</code>.\n    *\n    * *rowSelection*\n    * Defines the row selection type. Possible values are : 'none', 'single', 'multiple'. Default value : <code>none</code>.\n    *\n    */\n    _config : {\n      caseSensitive : false,\n      rowSelection : \"none\",\n      sortable : false\n    },\n\n\n    /**\n    * *columnDefault*\n    * The Default cell template for all the table columns. Default value :\n    *\n    * <pre>\n    *   <td class='qx-table-cell' data-qx-table-cell-key='{{ cellKey }}'>\n    *     <div class='qx-table-cell-wrapper'>\n    *       <label>{{& value }}</label>\n    *     </div>\n    *   <td>\"\n    * </pre>\n    *\n    * To define a custom template for a specific name use <code>setTemplate('colname', template)</code> or use <br>\n    * <code>setTemplate('columnDefault', template)</code> to set one template for all your table columns.\n    *\n    */\n    _templates : {\n\n      \"columnDefault\" : \"<td class='qx-table-cell' data-qx-table-cell-key='{{ cellKey }}'>\"+\n                          \"<div class='qx-table-cell-wrapper'>\"+\n                            \"<label>{{& value }}</label>\"+\n                          \"</div>\"+\n                        \"<td>\"\n    },\n\n    /**\n     * Factory method which converts the current collection into a collection of\n     * table widgets.\n     * @param model {Array} The model of the widgets in the collection\n     * @return {qx.ui.website.Table} A new table collection.\n     * @attach {qxWeb}\n     */\n    table : function(model) {\n      var table = new qx.ui.website.Table(this);\n      table.__model = model;\n      table.init();\n      return table;\n    },\n\n    /**\n     * Checks if a given string is a number\n     * @param n {String} The String to check the type for\n     * @return {Boolean} The result of the check\n     */\n    __isNumber : function(n) {\n      return (Object.prototype.toString.call(n) === '[object Number]' ||\n        Object.prototype.toString.call(n) === '[object String]') && !isNaN(parseFloat(n)) && isFinite(n.toString().replace(/^-/, ''));\n    },\n\n    /**\n     * Checks if a given string is a Date\n     * @param val {String} The String to check the type for\n     * @return {Boolean} The result of the check\n     */\n    __isDate : function(val) {\n      var d = new Date(val);\n      return !isNaN(d.valueOf());\n    },\n\n    /**\n     * Gets the index of an HTMLElement inside of an HTMLCollection\n     * @param htmlCollection {HTMLCollection} The HTMLCollection\n     * @param htmlElement {HTMLElement} The HTMLElement\n     * @return {Integer} The position of the htmlElement or -1\n     */\n    __getIndex : function(htmlCollection, htmlElement) {\n      var index = -1;\n      for (var i = 0, l = htmlCollection.length; i < l; i++) {\n        if (htmlCollection.item(i) == htmlElement) {\n          index = i;\n          break;\n        }\n      }\n      return index;\n    },\n\n    /**\n    * Generates an unique id\n    * @return {String} The generated id\n    */\n    __getUID : function() {\n      return ((new Date()).getTime() + \"\" + Math.floor(Math.random() * 1000000)).substr(0, 18);\n    },\n\n\n    /** */\n    __selectionTypes : [\"single\", \"multiple\", \"none\"],\n    /** */\n    __internalCellClass : \"qx-table-cell\",\n    /** */\n    __internalHeaderClass : \"qx-table-header\",\n    /** */\n    __internalSelectionClass : \"qx-table-row-selection\",\n    /** */\n    __internalInputClass : \"qx-table-selection-input\",\n    /** */\n    __allColumnSelector : \"qx-table-all-columns\",\n    /** */\n    __dataColName : \"data-qx-table-col-name\",\n    /** */\n    __dataColType : \"data-qx-table-col-type\",\n    /** */\n    __dataSortingKey : \"data-qx-table-cell-key\",\n    /** */\n    __modelSortingKey : \"cellKey\",\n    /** */\n    __inputLabelClass : \"qx-table-input-label\",\n    /** */\n    __selectedRowClass : \"qx-table-row-selected\",\n    /** */\n    __ascSortingClass : \"qx-table-sort-asc\",\n    /** */\n    __descSortingClass :  \"qqx-table-sort-desc\"\n\n  },\n\n\n\n  members : {\n\n    __model: null,\n    __columnMeta: null,\n    __sortingFunction: null,\n    __filterFunction: null,\n    __filterFunc: null,\n    __filters: null,\n    __inputName: null,\n    __hovered: null,\n    __sortingData: null,\n\n    // overridden\n    init : function() {\n\n      if (!this.base(arguments)) {\n        return false;\n      }\n\n      var model = this.__model;\n\n      if (qxWeb.getNodeName(this).toUpperCase() !== \"TABLE\") {\n        throw new Error(\"collection should contains only table elements !!\");\n      }\n\n      if(!this[0].tHead){\n        throw new Error(\"A Table header element is required for this widget.\");\n      }\n\n      this.find(\"tbody td\").addClass(\"qx-table-cell\");\n\n      this.__inputName = \"input\" + qx.ui.website.Table.__getUID();\n      this.__getColumnMetaData(model);\n      this.setModel(model);\n      this.setSortingFunction(this.__defaultColumnSort);\n\n      this.__registerEvents();\n\n      this.__hovered = null;\n\n      return true;\n    },\n\n\n    /**\n     * Sets the given model to the widgets in the collection\n     *\n     * @param model {Array} The model to be set\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setModel : function(model) {\n      if (typeof model != \"undefined\") {\n        if (qx.lang.Type.isArray(model)) {\n          this.__model = model;\n          this.emit(\"modelChange\", model);\n        } else {\n          throw new Error(\"model must be an Array !!\");\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Set the column types for the table widgets in the collection\n     * @param columnName {String} The column name\n     * @param type {String} The type of the column\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setColumnType : function(columnName, type) {\n      this.__checkColumnExistance(columnName);\n      this.__columnMeta[columnName].type = type;\n\n      return this;\n    },\n\n\n\n\n    /**\n     * Returns the type of the specified column\n     * @param columnName {String} The column name\n     * @return {String} The type of the specified column\n     */\n    getColumnType : function(columnName) {\n      this.eq(0).__checkColumnExistance(columnName);\n      return this.eq(0).__columnMeta[columnName].type;\n    },\n\n\n    /**\n     * Returns the cell at the given position for the first widget in the collection\n     * @param row {Integer} The row number\n     * @param col {Integer} The column number\n     * @return {qxWeb} The cell found at the given position\n     */\n    getCell : function(row, col) {\n      return qxWeb(this.eq(0).__getRoot().rows.item(row).cells.item(col));\n    },\n\n\n    /**\n    * Returns a collection containing the rows of the first table in the collection.\n    * @return {qxWeb} The collection containing the table rows\n    */\n    getRows : function() {\n      return qxWeb(this.eq(0).__getRoot().rows);\n    },\n\n\n    /**\n     * Defines the comparison function to use to sort columns of the given type\n     * @param type {String} The type to define the function for\n     * @param compareFunc {Function} The comparison function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setCompareFunction : function(type, compareFunc) {\n      type = qxWeb.string.firstUp(type);\n      this.setProperty([\"_compare\" + type], compareFunc);\n      return this;\n    },\n\n\n    /**\n     * Unset the compare function for the given type\n     *\n     * @param type {String} The type to unset the function for\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetCompareFunction : function(type) {\n      type = qxWeb.string.firstUp(type);\n      var compareFunc = this[\"_compare\" + type] || this._compareString;\n      this.setProperty([\"_compare\" + type], compareFunc);\n      return this;\n    },\n\n\n    /**\n     * Returns the comparison function for the given type\n     * @param type {String} The type to get the comparison function for\n     * @return {Function} The comparison function\n     */\n    getCompareFunction : function(type) {\n      type = qxWeb.string.firstUp(type);\n      return this.getProperty(\"_compare\" + type) || this[\"_compare\" + type];\n    },\n\n\n    /**\n     * Set the function that control the sorting process\n     * @param func {Function} The sorting function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setSortingFunction : function(func) {\n      func = func || function() {};\n      this.__sortingFunction = func;\n\n      return this;\n    },\n\n\n    /**\n     * Unset the function that control the sorting process\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetSortingFunction : function() {\n      this.__sortingFunction = this.__defaultColumnSort;\n\n      return this;\n    },\n\n    /**\n     * Set the function that will be used to process the column filtering\n     * @param func {Function} The filter function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    setFilterFunction : function(func) {\n      this.__filterFunction = func;\n\n      return this;\n    },\n\n\n    /**\n     * Unset the filter function\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    unsetFilterFunction : function() {\n      this.__filterFunction = this.__defaultColumnFilter;\n\n      return this;\n    },\n\n\n    /**\n    * Set the filter function to use to filter a specific column\n    * @param columnName {String} The name of the column\n    * @param func {Function} The filter\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    *\n    */\n    setColumnFilter : function(columnName, func) {\n      this.__checkColumnExistance(columnName);\n      if(!this.__filterFunc) {\n        this.__filterFunc = {};\n      }\n      this.__filterFunc[columnName] = func;\n\n      return this;\n    },\n\n\n    /**\n    * Returns the filter function set on a specific column\n    *\n    * @param columnName {String} The name of the column\n    * @return {Function} The filter function\n    *\n    */\n    getColumnFilter : function(columnName) {\n      if(this.__filterFunc){\n        return this.__filterFunc[columnName];\n      }\n      return null;\n    },\n\n\n    /**\n    * Set the filter function to use to filter the table rows\n    * @param func {Function} The filter\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    setRowFilter : function(func) {\n      if(!this.__filterFunc) {\n        this.__filterFunc = {};\n      }\n      this.__filterFunc.row = func;\n\n      return this;\n    },\n\n\n    /**\n    * Returns the filter function set on a specific column\n    * @return {Function} The filter function\n    *\n    */\n    getRowFilter : function() {\n      if(this.__filterFunc) {\n        return this.__filterFunc.row;\n      }\n      return null;\n    },\n\n\n    /**\n     * Sort the column with the given name according to the specified direction\n     * @param columnName {String} The name of the column to sort\n     * @param dir {String} The sorting direction (asc or desc)\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    sort : function(columnName, dir) {\n      this.__checkColumnExistance(columnName);\n\n      this.setSortingClass(columnName, dir);\n      this.__sortDOM(this.__sort(columnName, dir));\n\n      this.emit(\"sort\", {columName : columnName, direction : dir});\n\n      return this;\n    },\n\n\n    /**\n    * Filters rows or columns according to the given parameters\n    * @param keyword {String} The keyword to use to filter\n    * @param columnName {String ?} The column name\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    filter : function(keyword, columnName) {\n      if (columnName) {\n        this.__checkColumnExistance(columnName);\n        if (keyword == \"\") {\n          this.resetFilter(columnName);\n        }\n      } else {\n        columnName = qx.ui.website.Table.__allColumnSelector;\n      }\n\n      if (!this.__filters) {\n        this.__filters = {};\n      }\n\n      if (this.__filters[columnName]) {\n        this.__filters[columnName].keyword = keyword;\n        this.__getRoot().appendChild(this.__filters[columnName].rows);\n      } else {\n        this.__filters[columnName] = { keyword : keyword, rows : document.createDocumentFragment() };\n      }\n\n      this.__filterDom(keyword, columnName);\n\n      this.emit(\"filter\", {columName : columnName, keyword : keyword});\n\n      return this;\n    },\n\n\n    /**\n    * Resets the filter applied on a specific column\n    * @param columnName {String ?} The column name\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    resetFilter : function(columnName) {\n\n      var filters = null;\n      filters = this.__filters;\n      if (filters) {\n        if (columnName) {\n          this.__getRoot().appendChild(filters[columnName].rows);\n        } else {\n          for (var col in filters) {\n            this.__getRoot().appendChild(filters[col].rows);\n          }\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n    * Removes the rows of in the table body\n    * @param tableData {String|qxWeb} Html string or collection containing the rows to be added\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    setContent : function(tableData) {\n      var rows = this.__extractTableRows(tableData);\n      var tbody = this.find('tbody');\n      tbody.empty();\n      rows.appendTo(tbody);\n      this.render();\n      return this;\n    },\n\n\n    /**\n    * Appends new rows to the table\n    * @param tableData {String|qxWeb} Html string or collection containing the rows to be appended\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    appendContent : function(tableData) {\n      var rows = this.__extractTableRows(tableData);\n      var tbody = this.find('tbody');\n      rows.appendTo(tbody);\n      this.render();\n      return this;\n    },\n\n\n    /**\n    * Extracts table rows from a given HTML String or qxWeb collection\n    * @param data {qxWeb|String} Data containing the rows to be extracted\n    * @return {qxWeb} Collection containing extracted rows\n    */\n    __extractTableRows : function(data) {\n      var rows = qxWeb();\n      if (typeof data == \"string\") {\n        var markup = data;\n        data = qxWeb.create(data);\n        if (qxWeb.getNodeName(data) != \"table\") {\n          data = qxWeb.create(\"<table>\" + markup + \"</table>\");\n        }\n        rows = data.find(\"tbody tr\");\n      } else if (qxWeb.isNode(data) || (data instanceof qxWeb)) {\n        data = qxWeb(data);\n        var nodeName = qxWeb.getNodeName(data);\n        switch (nodeName) {\n          case \"table\":\n            rows = qxWeb(data).find(\"tbody tr\");\n            break;\n          case \"tr\":\n            rows = data;\n            break;\n          case \"tbody\":\n            rows = qxWeb(data).find(\"tr\");\n            break;\n        }\n      }\n      return rows;\n    },\n\n\n    /**\n    * Filters the rendered table cells\n    * @param keyword {String} The keyword to use to filter\n    * @param columnName {String ?} The column name\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    __filterDom : function(keyword, columnName) {\n\n      var colIndex = this.__getColumnIndex(columnName);\n      var filterFunc = columnName == qx.ui.website.Table.__allColumnSelector ? this.getRowFilter() : this.getColumnFilter(columnName);\n      filterFunc = filterFunc || this.__defaultColumnFilter;\n\n      var rows = this.__getDataRows(), data = {};\n\n      for (var i = 0; i < rows.length; i++) {\n\n        data = {\n          columnName : columnName,\n          columnIndex : colIndex,\n          cell : colIndex > -1 ? qxWeb(rows[i].cells.item(colIndex)) : null,\n          row : qxWeb(rows[i]),\n          keyword : keyword\n        };\n\n        if (!filterFunc.bind(this)(data)) {\n          this.__filters[columnName].rows.appendChild(rows[i]);\n        }\n\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Get the current column sorting information for the first widget in the collection\n     * @return {Map} The map containing the current sorting information\n     */\n    getSortingData : function() {\n      return this.__sortingData;\n    },\n\n\n    //overridden\n    render : function() {\n      var sortingData = this.getSortingData();\n      var rowSelection = this.getConfig(\"rowSelection\");\n\n      this.__applyTemplate(this.__model);\n\n      if (qx.ui.website.Table.__selectionTypes.indexOf(rowSelection) != -1) {\n\n        this.__processSelectionInputs(rowSelection);\n      }\n\n      if (sortingData) {\n        this.__sortDOM(this.__sort(sortingData.columnName, sortingData.direction));\n      }\n\n      return this;\n\n    },\n\n\n    //Private API\n\n    /**\n    * Renders or removes the selection inputs according to the specified widget selection mode\n    * @param rowSelection {String} The selection mode\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    __processSelectionInputs : function(rowSelection) {\n      switch (rowSelection) {\n\n        case \"none\":\n          qxWeb(\".\" + qx.ui.website.Table.__internalSelectionClass).remove();\n          break;\n        case \"multiple\": case \"single\":\n          this.__createInputs(\"checkbox\");\n          break;\n\n        case \"single\":\n          this.__createInputs(\"radio\");\n          break;\n      }\n      return this;\n\n    },\n\n\n    /**\n     * Creates input nodes for the row selection\n     * @param type {String} The type of the inputs to creates\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __createInputs : function(type) {\n      this.__createInput(this.__getHeaderRow(), type);\n      var rows = this.find(\"tbody\")[0].getElementsByTagName(\"tr\");\n      for (var i = 0; i < rows.length; i++) {\n        this.__createInput(rows.item(i), type);\n      }\n      return this;\n    },\n\n\n    /**\n    * Creates an input an input node for a specific row\n    * @param row {HTMLTableRowElement} The row to create the input for\n    * @param type {String} The type of the input tom create (radio or checkbox)\n    * @param nodeName {String} The nodename of the table cell that will contain the input\n    */\n    __createInput : function(row, type, nodeName) {\n\n      var cssPrefix = this.getCssPrefix();\n\n      var clazz = qx.ui.website.Table;\n      var headerInput = qxWeb(\".\" + clazz.__internalHeaderClass + \" input\");\n      var selectionMode = this.getConfig(\"rowSelection\");\n\n      var checked = \"\";\n      if(headerInput.length > 0) {\n        checked = (selectionMode == \"multiple\") && headerInput[0].checked ? \"checked\" : \"\";\n      }\n\n      if (typeof nodeName == \"undefined\") {\n        nodeName = qxWeb.getNodeName(qxWeb(row.cells.item(0)));\n      }\n\n      var inputName = this.__inputName;\n      var className = (nodeName == \"th\") ? clazz.__internalSelectionClass + \" \" + clazz.__internalHeaderClass : clazz.__internalSelectionClass;\n\n      var currentInput = qxWeb(row).find(\".\"+clazz.__internalSelectionClass);\n\n      if(currentInput.length > 0) {\n        if(currentInput[0].type != type) {\n          currentInput[0].type = type;\n        }\n      } else {\n\n        var id = qx.ui.website.Table.__getUID();\n        var inputNode = qxWeb.create(\"<\" + nodeName + \" class='\" + className + \"'><input id='\"+id+\"' name='\" + inputName + \"' \"+checked+\" class='\"+cssPrefix+\"-\"+type+\" \"+ clazz.__internalInputClass + \"' type='\" + type + \"' /><label class='\"+clazz.__inputLabelClass+\"' for='\"+id+\"'></label></\" + nodeName + \">\");\n        if (row.cells.item(0)) {\n          inputNode.insertBefore(qxWeb(row.cells.item(0)));\n        } else {\n          inputNode.appendTo(qxWeb(row));\n        }\n      }\n\n    },\n\n\n    /**\n    * Checks if a column with the specified name exists\n    * @param columnName {String} The name of the column to check\n    */\n    __checkColumnExistance : function(columnName) {\n      var data = this.__columnMeta;\n      if (data && !data[columnName]) {\n        throw new Error(\"Column \" + columnName + \" does not exists !\");\n      }\n    },\n\n\n    /**\n    * Returns the row containing the cells with the column names\n    * @return {HTMLTableRowElement} The row with meta information\n    */\n    __getHeaderRow : function() {\n      var tHeadOrFoot = this[0].tHead;\n      if (!tHeadOrFoot) {\n        throw new Error(\"A Table header element is required for this widget.\");\n      }\n      var rows = tHeadOrFoot.rows;\n      if(rows.length == 1) {\n        return rows.item(0);\n      } else {\n        rows = qxWeb(\".qx-table-header-row\");\n        if(rows.length > 0) {\n          return rows[0];\n        }\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Initializes columns metadata\n     * @param model {Array} The widget's model\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __getColumnMetaData : function(model) {\n\n      this.__addClassToHeaderAndFooter(this[0].tHead);\n      this.__addClassToHeaderAndFooter(this[0].tFoot);\n\n      var data = {}, cells = null, colName = null, cell = null;\n      var headerRow = this.__getHeaderRow();\n\n      cells = headerRow.cells;\n\n      for (var i = 0, l = cells.length; i < l; i++) {\n\n        cell = qxWeb(cells.item(i));\n        colName = this.__getColumName(cell[0]) || qx.ui.website.Table.__getUID();\n        if(!cell[0].getAttribute(qx.ui.website.Table.__dataColName)){\n          cell.setAttribute(qx.ui.website.Table.__dataColName, colName);\n        }\n\n        data[colName] = {\n          type: cell[0].getAttribute(qx.ui.website.Table.__dataColType) || \"String\",\n          name: colName\n        };\n\n      }\n\n      this.__columnMeta = data;\n\n      return this;\n    },\n\n\n    /**\n     * Adds the internal css class to the header and footer cells\n     * @param footOrHead {HTMLElement} Html element representing the header or footer of the table\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __addClassToHeaderAndFooter : function(footOrHead) {\n      if (footOrHead && footOrHead.rows.length > 0) {\n        if (footOrHead.rows.item(0).cells.length > 0) {\n          var row = this.__getHeaderRow();\n          if (!qxWeb(row.cells.item(0)).hasClass(qx.ui.website.Table.__internalHeaderClass)) {\n            qxWeb(row.cells).addClass(qx.ui.website.Table.__internalHeaderClass);\n          }\n        }\n      }\n      return this;\n    },\n\n\n    /**\n     * Sorts the rows of the table widget\n     * @param dataRows {Array} Array containing the sorted rows\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __sortDOM : function(dataRows) {\n      for (var i = 0, l = dataRows.length; i < l; i++) {\n        if (i) {\n          qxWeb(dataRows[i]).insertAfter(dataRows[i - 1]);\n        } else {\n          qxWeb(dataRows[i]).insertBefore(qxWeb(this.__getRoot().rows.item(0)));\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n     * registers global events\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __registerEvents : function() {\n\n      this.on(\"tap\", this.__detectClickedCell);\n\n      this.on(\"cellClick\", function(data) {\n        if(data.cell && data.cell.hasClass(qx.ui.website.Table.__internalHeaderClass)){\n          this.__sortingFunction.bind(this)(data);\n        }\n      }, this);\n\n      this.on(\"pointerover\", this.__cellHover, this);\n      this.on(\"pointerout\", this.__cellOut, this);\n\n      return this;\n    },\n\n\n    /**\n    * Checks if the selection inputs are already rendered\n    * @return {Boolean} True if the inputs are rendered and false otherwise\n    */\n    __selectionRendered : function() {\n      return qxWeb(\".\" + qx.ui.website.Table.__internalSelectionClass).length > 0;\n    },\n\n\n    /**\n    * Handles clicks that happen on the selection inputs\n    * @param cell {qxWeb} The table cell containing the clicked input\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    __processSelection : function(cell) {\n\n      var clazz = qx.ui.website.Table;\n      var inputs = qxWeb(\".\" + clazz.__internalInputClass);\n      var clickedInput = cell.find(\"input\");\n      var selectionMode = this.getConfig(\"rowSelection\");\n      var headerInput = qxWeb(\".\" + clazz.__internalHeaderClass + \" input\");\n      var selection = [];\n\n      if (selectionMode == \"multiple\") {\n\n        if (cell.hasClass(clazz.__internalHeaderClass)) {\n          inputs.setAttribute(\"checked\", clickedInput[0].checked);\n        }\n\n        var checked = true;\n        for (var i = 0; i < inputs.length; i++) {\n          if ((inputs[i] != headerInput[0]) && (!inputs[i].checked)) {\n            checked = false;\n            break;\n          }\n        }\n\n        headerInput.setAttribute(\"checked\", checked);\n        inputs = inputs.toArray();\n\n        if (checked) {\n          qxWeb.array.remove(inputs, headerInput[0]);\n          selection = inputs;\n        } else {\n          selection = inputs.filter(function(input) {\n            return input.checked;\n          });\n        }\n      } else {\n        if (clickedInput[0] != headerInput[0]) {\n          selection.push(clickedInput[0]);\n        }\n      }\n\n      var selectedRows = selection.map(function(elem) {\n        return elem.parentNode.parentNode;\n      });\n\n      selectedRows = qxWeb(selectedRows);\n      qxWeb(\".\"+clazz.__selectedRowClass).removeClass(clazz.__selectedRowClass);\n      selectedRows.addClass(clazz.__selectedRowClass);\n\n      this.emit(\"selectionChange\", {rows : qxWeb(selectedRows)});\n\n      return this;\n    },\n\n\n    /**\n    * Fires a custom table events\n    * @param eventType {String} The event type\n    * @param cell {HTMLTableCellElement} The event target\n    * @param target {HTMLElement} The native event target\n    * @return {Map} Map containing the event data\n    */\n    __fireEvent : function(eventType, cell, target) {\n      var row = cell[0].parentNode, cells = row.cells;\n      var colNumber = qx.ui.website.Table.__getIndex(cells, cell[0]);\n      var tHead = this.__getHeaderRow();\n      var headCell = tHead.cells.item(colNumber);\n      var colName = this.__getColumName(headCell);\n      var columnIndex = this.getConfig(\"rowSelection\") != \"none\" ? this.__getColumnIndex(colName) -1 : this.__getColumnIndex(colName);\n\n      var data = {\n        cell : qxWeb(cell),\n        row : qxWeb(row),\n        target : target,\n        columnIndex : columnIndex,\n        columnName : colName\n      };\n\n      this.emit(eventType, data);\n\n      return data;\n\n    },\n\n\n    /**\n     * Click callback\n     *\n     * @param e {Event} The native click event.\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __detectClickedCell : function(e) {\n\n      var target = e.getTarget();\n\n      var cell = qxWeb(target);\n      var clazz = qx.ui.website.Table;\n\n      while (!(cell.hasClass(clazz.__internalCellClass) || cell.hasClass(clazz.__internalHeaderClass) || cell.hasClass(clazz.__internalSelectionClass))) {\n        if (cell.hasClass(this.classname)) {\n          cell = null;\n          break;\n        }\n        cell = cell.getParents().eq(0);\n      }\n\n      if (cell.hasClass(clazz.__internalSelectionClass)) {\n\n        window.setTimeout(function(){\n          this.__processSelection(cell);\n        }.bind(this), 5);\n\n      }else{\n\n        if (cell && cell.length > 0) {\n          this.__fireEvent(\"cellClick\", cell, target);\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n    * Pointerover callback\n    *\n    * @param e {Event} The native over event.\n    */\n    __cellHover : function(e) {\n\n      var target = e.getTarget();\n      var cell = qxWeb(target);\n      var hovered = this.__hovered;\n\n      if(!cell.hasClass(\"qx-table-cell\") && !cell.hasClass(\"qx-table-header\")) {\n        cell = cell.getClosest(\".qx-table-cell, .qx-table-header\");\n      }\n\n      if(cell && (cell.length > 0) && ((hovered && (hovered.cell[0] != cell[0])) || (!hovered)) && !cell.hasClass(\"qx-table-row-selection\")) {\n\n        if(hovered) {\n          this.emit(\"cellOut\", hovered);\n        }\n\n        this.__hovered = this.__fireEvent(\"cellHover\", cell, target);\n      }\n\n    },\n\n\n    /**\n    * pointerout callback\n    *\n    * @param e {Event} The native over event.\n    */\n    __cellOut : function(e) {\n\n      var relatedTarget = e.getRelatedTarget();\n      var cell = qxWeb(relatedTarget);\n\n      if(this.__hovered) {\n\n        if(!cell.isChildOf(this)) {\n\n          this.emit(\"cellOut\", this.__hovered);\n          this.__hovered = null;\n\n        }else {\n\n          if(!cell.hasClass(\"qx-table-cell\") && !cell.hasClass(\"qx-table-header\")) {\n            cell = cell.getClosest(\".qx-table-cell, .qx-table-header\");\n            if(cell.hasClass(\"qx-table-row-selection\")) {\n              this.emit(\"cellOut\", this.__hovered);\n              this.__hovered = null;\n            }\n          }\n\n        }\n      }\n\n    },\n\n\n    /**\n     * Applies the given model to the table cells depending on\n     * the mustache template specified before\n     * @param model {Array} The model to apply\n     * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n     */\n    __applyTemplate : function(model) {\n\n      if(model && model.length > 0) {\n        var cell, row;\n        var tHead = this.__getHeaderRow();\n        var createdRow = null, colMeta = null;\n        var renderedRow = null;\n\n        var inputType = (this.getConfig(\"rowSelection\") == \"single\") ? \"radio\" : \"checkbox\";\n\n        if (this.__getRoot().rows.length > model.length) {\n          this.__deleteRows(model.length);\n        }\n\n        var renderedColIndex = 0, templateApplied = false;\n        var coltemplate = this.getTemplate(\"columnDefault\");\n        var colName = null;\n\n        for (var i = 0, rowCount = model.length; i < rowCount; i++) {\n\n          row = model[i];\n\n          if (!this.__isRowRendered(i)) {\n            createdRow = this.__getRoot().insertRow(i);\n            if (this.__selectionRendered()) {\n              this.__createInput(createdRow, inputType, \"td\");\n            }\n          }\n\n          for (var j = 0, colCount = row.length; j < colCount; j++) {\n\n            renderedColIndex = this.__selectionRendered() ? j + 1 : j;\n            colName = this.__getColumName(tHead.cells.item(renderedColIndex));\n            colMeta = this.__getDataForColumn(colName);\n            coltemplate = this.getTemplate(colName) || coltemplate;\n            renderedRow = this.__getRoot().rows.item(i);\n            cell = qxWeb.create(qxWeb.template.render(coltemplate, model[i][j]))[0];\n\n            if(cell.nodeName.toUpperCase() != \"TD\") {\n              break;\n            }\n\n            if (!this.__isCellRendered(i, renderedColIndex)) {\n              renderedRow.appendChild(cell);\n            }else {\n              renderedRow.replaceChild(cell, this.getCell(i, renderedColIndex)[0]);\n            }\n            this.emit(\"cellRender\", {cell : cell, row : i, col : j, value : model[i][j]});\n          }\n\n          if(i == rowCount-1) {\n            templateApplied = true;\n          }\n\n        }\n\n        if (templateApplied) {\n          this.emit(\"modelApplied\", model);\n        }\n      }\n\n      return this;\n    },\n\n\n    /**\n    * Removes row from the DOM starting from the specified index\n    * @param  rowCount {Integer} The number of rows the kept\n    * @return {qx.ui.website.Table} <code>this</code> reference for chaining.\n    */\n    __deleteRows : function(rowCount) {\n      var renderedRows = this.__getRoot().rows;\n      while(renderedRows.length > rowCount){\n        this[0].deleteRow(renderedRows.length);\n      }\n      return this;\n    },\n\n\n    /**\n    * Gets the metadata of the column width the specified name\n    * @param columName {String} The name of the column to get the metadata for\n    * @return {Map} Map containing the metadata\n    */\n    __getDataForColumn : function(columName) {\n      return this.__columnMeta[columName];\n    },\n\n\n    /**\n     * Gets the Root element containing the data rows\n     * @return {HTMLElement} The element containing the data rows\n     */\n    __getRoot : function() {\n      return this[0].tBodies.item(0) || this[0];\n    },\n\n\n    /**\n     * Checks if the row with the given index is rendered\n     * @param index {Integer} The index of the row to check\n     * @return {Boolean} The result of the check\n     */\n    __isRowRendered : function(index) {\n      if (this.__getRoot().rows.item(index)) {\n        return true;\n      }\n      return false;\n    },\n\n\n    /**\n     * Checks if the cell with the given row and column indexes is rendered\n     * @param rowIndex {Integer} The index of the row to check\n     * @param colIndex {Integer} The index of the column\n     * @return {Boolean} The result of the check\n     */\n    __isCellRendered : function(rowIndex, colIndex) {\n      if (!this.__isRowRendered(rowIndex)) {\n        return false;\n      }\n      if (this.__getRoot().rows.item(rowIndex).cells.item(colIndex)) {\n        return true;\n      }\n      return false;\n    },\n\n\n    /**\n     * Adds a class to the head and footer of the current sorted column\n     * @param columnName {String} The name of the sorted column\n     * @param dir {String} The sorting direction\n     */\n    setSortingClass : function(columnName, dir) {\n\n      var data = {\n        columnName: columnName,\n        direction: dir\n      };\n\n      this.__sortingData = data;\n      this.__addSortingClassToCol(this[0].tHead, columnName, dir);\n    },\n\n\n    /**\n     * Adds a class to the head or footer of the current sorted column\n     * @param HeaderOrFooter {Node} The n\n     * @param columnName {String} The name of the sorted column\n     * @param dir {String} The sorting direction\n     */\n    __addSortingClassToCol : function(HeaderOrFooter, columnName, dir) {\n      var rows = this.__getHeaderRow();\n      if (HeaderOrFooter && rows) {\n        qxWeb(rows.cells).removeClasses([\"qx-table-sort-asc\", \"qx-table-sort-desc\"]);\n        var cell = qxWeb(\"[\"+qx.ui.website.Table.__dataColName+\"='\" + columnName + \"'], #\" + columnName);\n        cell.addClass(\"qx-table-sort-\" + dir);\n      }\n    },\n\n\n    /**\n     * Sorts the table rows for the given row and direction\n     * @param columnName {String} The name of the column to be sorted\n     * @param direction {String} The sorting direction\n     * @return {Array} Array containing the sorted rows\n     */\n    __sort : function(columnName, direction) {\n\n      var meta = this.__getDataForColumn(columnName);\n      var columnType = qxWeb.string.firstUp(meta.type);\n\n      if(!this[\"_compare\" + columnType] && !this.getProperty(\"_compare\"+ columnType)) {\n        columnType = \"String\";\n      }\n\n      var compareFunc = this.getCompareFunction(columnType).bind(this);\n      var model = this.__getDataRows();\n      var columnIndex = this.__getColumnIndex(columnName);\n\n      return model.sort(function(a, b) {\n        var x = this.__getSortingKey(qxWeb(a.cells.item(columnIndex)));\n        var y = this.__getSortingKey(qxWeb(b.cells.item(columnIndex)));\n        return compareFunc(x, y, direction);\n      }.bind(this));\n\n    },\n\n\n    /**\n     * Compares two number\n     * @param x {String} The String value of the first number to compare\n     * @param y {String} The String value of the second number to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareNumber : function(x, y, direction) {\n      x = qx.ui.website.Table.__isNumber(x) ? Number(x) : 0;\n      y = qx.ui.website.Table.__isNumber(y) ? Number(y) : 0;\n      if (direction == \"asc\") {\n        return x - y;\n      } else if (direction == \"desc\") {\n        return y - x;\n      }\n      return 0;\n    },\n\n\n    /**\n    * Gets the name of the column containing the given cell\n    * @param headerCell {HTMLTableCellElement} The cell to get the column name for\n    * @return {String} The column name\n    */\n    __getColumName : function(headerCell) {\n      return headerCell.getAttribute(qx.ui.website.Table.__dataColName) || headerCell.getAttribute(\"id\");\n    },\n\n\n    /**\n     * Compares two Dates\n     * @param x {String} The String value of the first date to compare\n     * @param y {String} The String value of the second date to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareDate : function(x, y, direction) {\n\n      x = qx.ui.website.Table.__isDate(x) ? new Date(x) : new Date(0);\n      y = qx.ui.website.Table.__isDate(y) ? new Date(y) : new Date(0);\n\n      if (direction == \"asc\") {\n        return x - y;\n      } else if (direction == \"desc\") {\n        return y - x;\n      }\n      return 0;\n    },\n\n\n    /**\n     * Compares two Strings\n     * @param x {String} The first string to compare\n     * @param y {String} The second string to compare\n     * @param direction {String} The sorting direction\n     * @return {Integer} The result of the comparison\n     */\n    _compareString : function(x, y, direction) {\n      if (!this.getConfig(\"caseSensitive\")) {\n        x = x.toLowerCase();\n        y = y.toLowerCase();\n      }\n      if (direction == \"asc\") {\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n      } else if (direction == \"desc\") {\n        return ((x > y) ? -1 : ((x < y) ? 1 : 0));\n      }\n      return 0;\n    },\n\n\n    /**\n    * Returns the value of the cell to use for sorting\n    * @param cell {qxWeb} The cell to get the value of.\n    * @return {String} The sorting key\n    */\n    __getSortingKey : function(cell) {\n      return cell.getAttribute(qx.ui.website.Table.__dataSortingKey) || this.__getCellValue(cell);\n    },\n\n\n    /**\n     * Returns the value of the cell that will be used for sorting\n     * @param cell {qxWeb} The cell to get the value of\n     * @return {String} The text content of the cell\n     */\n    __getCellValue : function(cell) {\n      return cell[0].textContent || cell[0].innerText || \"\";\n    },\n\n\n    /**\n     * Gets the table's data rows from the DOM\n     * @return {Array} Array containing the rows of the table\n     */\n    __getDataRows : function() {\n\n      var rows = this.find(\"tbody\")[0].rows, model = [], cell=null,  cells = [];\n\n      for (var i = 0, l = rows.length; i < l; i++) {\n        cells = rows.item(i).cells;\n        if ((cells.length > 0) && (cells[0].nodeName.toUpperCase() != \"TD\")) {\n          continue;\n        }\n\n        for (var j = 0, len = cells.length; j < len; j++) {\n          cell = qxWeb(cells[j]);\n          if (!cell.hasClass(qx.ui.website.Table.__internalCellClass)) {\n            cell.addClass(qx.ui.website.Table.__internalCellClass);\n          }\n        }\n\n        model.push(rows.item(i));\n      }\n      return model;\n    },\n\n\n    /**\n     * Default sorting processing\n     * @param data {Map} Sorting data\n     */\n    __defaultColumnSort : function(data) {\n      var dir = \"asc\";\n      var sortedData = this.getSortingData();\n\n      if (sortedData) {\n        if (data.columnName == sortedData.columnName) {\n          if (sortedData.direction == dir) {\n            dir = \"desc\";\n          }\n        }\n      }\n      if (data.cell.hasClass(\"qx-table-header\")) {\n        this.sort(data.columnName, dir);\n      }\n    },\n\n\n    /**\n    * Default column filter function\n    * @param data {Map} Map containing the filter data\n    * @return {Boolean} True wenn the row containing the current cell should be kept\n    */\n    __defaultColumnFilter : function(data) {\n\n      var caseSensitive = this.getConfig(\"caseSensitive\");\n      var cell = data.columnName == qx.ui.website.Table.__allColumnSelector ? data.row : data.cell;\n      var cellValue = this.__getCellValue(cell);\n\n      if(caseSensitive){\n        return cellValue.indexOf(data.keyword) != -1;\n      }else{\n        return cellValue.toLowerCase().indexOf(data.keyword.toLowerCase()) != -1;\n      }\n\n    },\n\n\n    /**\n     * Gets the index of the column with the specified name\n     * @param columnName {String} The colukn name\n     * @return {Integer} The index of the column or -1 if the column doesn't exists\n     */\n    __getColumnIndex : function(columnName) {\n      var tHead = this.__getHeaderRow();\n      var cells = tHead.cells;\n      for (var i = 0; i < cells.length; i++) {\n        if (columnName == this.__getColumName(cells.item(i))) {\n          return i;\n        }\n      }\n      return -1;\n    }\n\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attach({\n      table: statics.table\n    });\n  }\n\n});\n"
  ]
}