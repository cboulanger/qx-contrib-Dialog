{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/website/Slider.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "ui",
    "website",
    "Widget",
    "statics",
    "_config",
    "minimum",
    "maximum",
    "offset",
    "step",
    "_templates",
    "knobContent",
    "slider",
    "value",
    "Slider",
    "init",
    "setConfig",
    "setValue",
    "getConfig",
    "construct",
    "selector",
    "context",
    "events",
    "members",
    "__dragMode",
    "_value",
    "cssPrefix",
    "getCssPrefix",
    "getValue",
    "defaultVal",
    "qxWeb",
    "type",
    "get",
    "on",
    "_onSliderPointerUp",
    "_onSliderFocus",
    "setStyle",
    "document",
    "_onDocPointerUp",
    "window",
    "_onWindowResize",
    "getChildren",
    "length",
    "append",
    "create",
    "addClass",
    "setAttributes",
    "setHtml",
    "_getKnobContent",
    "_onPointerDown",
    "_onDragStart",
    "_onKnobFocus",
    "_onKnobBlur",
    "render",
    "Error",
    "min",
    "max",
    "Math",
    "round",
    "indexOf",
    "__valueToPosition",
    "emit",
    "_getPixels",
    "template",
    "getTemplate",
    "_getHalfKnobWidth",
    "knobWidth",
    "getWidth",
    "parseFloat",
    "_getDragBoundaries",
    "paddingLeft",
    "ceil",
    "getStyle",
    "paddingRight",
    "getOffset",
    "left",
    "dragBoundaries",
    "pixel",
    "push",
    "lastIndex",
    "usedWidth",
    "stepWidth",
    "stepCount",
    "i",
    "j",
    "_getNearestValue",
    "position",
    "pixels",
    "availableWidth",
    "relativePosition",
    "fraction",
    "result",
    "currentIndex",
    "before",
    "after",
    "abs",
    "e",
    "getDocumentLeft",
    "getDocumentTop",
    "getEnabled",
    "documentElement",
    "_onPointerMove",
    "stopPropagation",
    "off",
    "preventDefault",
    "dragPosition",
    "positionKnob",
    "_setKnobPosition",
    "focus",
    "_onKeyDown",
    "newValue",
    "currentValue",
    "stepType",
    "key",
    "getKeyIdentifier",
    "idx",
    "undefined",
    "x",
    "knob",
    "env",
    "translate",
    "valueToPixel",
    "range",
    "dispose",
    "defer",
    "$attach"
  ],
  "mappings": "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",
  "file": "Slider.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * The Slider control is used to select a numerical value from a given range.\n * It supports custom minimum/maximum values, step sizes and offsets (which limit\n * the knob's range).\n *\n * <h2>Markup</h2>\n * The Slider contains a single button element (the knob), which will be\n * created if it's not already present.\n *\n * <h2>CSS Classes</h2>\n * <table>\n *   <thead>\n *     <tr>\n *       <td>Class Name</td>\n *       <td>Applied to</td>\n *       <td>Description</td>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td><code>qx-slider</code></td>\n *       <td>Container element</td>\n *       <td>Identifies the Slider widget</td>\n *     </tr>\n *     <tr>\n *       <td><code>qx-slider-knob</code></td>\n *       <td>Slider knob (button)</td>\n *       <td>Identifies and styles the Slider's draggable knob</td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * <h2 class=\"widget-markup\">Generated DOM Structure</h2>\n *\n * @require(qx.module.event.Pointer)\n * @require(qx.module.Transform)\n * @require(qx.module.Template)\n * @require(qx.module.util.Type)\n *\n *\n * @group (Widget)\n */\nqx.Bootstrap.define(\"qx.ui.website.Slider\",\n{\n  extend : qx.ui.website.Widget,\n\n  statics : {\n    /**\n     * *step*\n     *\n     * The steps can be either a number or an array of predefined steps. In the\n     * case of a number, it defines the amount of each step. In the case of an\n     * array, the values of the array will be used as step values.\n     *\n     * Default value: <pre>1</pre>\n     *\n     *\n     * *minimum*\n     *\n     * The minimum value of the slider. This will only be used if no explicit\n     * steps are given.\n     *\n     * Default value: <pre>0 </pre>\n     *\n     *\n     * *maximum*\n     *\n     * The maximum value of the slider. This will only be used if no explicit\n     * steps are given.\n     *\n     * Default value: <pre>100</pre>\n     *\n     *\n     * *offset*\n     *\n     * The amount of pixel the slider should be position away from its left and\n     * right border.\n     *\n     * Default value: <pre>0 </pre>\n     */\n    _config : {\n      minimum : 0,\n      maximum : 100,\n      offset : 0,\n      step : 1\n    },\n\n\n    /**\n     * *knobContent*\n     *\n     * The content of the knob element.\n     *\n     * Default value: <pre>{{value}}</pre>\n     */\n    _templates : {\n      knobContent : \"{{value}}\"\n    },\n\n\n    /**\n     * Factory method which converts the current collection into a collection of\n     * slider widgets.\n     *\n     * @param value {Number?} The initial value of each slider widget\n     * @param step {Number|Array?} The step config value to configure the step\n     * width or the steps as array of numbers.\n     * @return {qx.ui.website.Slider} A new Slider collection.\n     * @attach {qxWeb}\n     */\n    slider : function(value, step) {\n      var slider = new qx.ui.website.Slider(this);\n      slider.init();\n      if (typeof step !== \"undefined\") {\n        slider.setConfig(\"step\", step);\n      }\n      if (typeof value !== \"undefined\") {\n        slider.setValue(value);\n      } else {\n        slider.setValue(slider.getConfig(\"minimum\"));\n      }\n\n      return slider;\n    }\n  },\n\n  construct : function(selector, context) {\n    this.base(arguments, selector, context);\n  },\n\n  events :\n  {\n    /** Fired at each value change */\n    \"changeValue\" : \"Number\",\n\n    /** Fired with each pointer move event */\n    \"changePosition\" : \"Number\"\n  },\n\n\n  members :\n  {\n    __dragMode : null,\n    _value : 0,\n\n    init : function() {\n      if (!this.base(arguments)) {\n        return false;\n      }\n\n      var cssPrefix = this.getCssPrefix();\n\n      if (!this.getValue()) {\n        var step = this.getConfig(\"step\");\n        var defaultVal= qxWeb.type.get(step) == \"Array\" ? step[0] : this.getConfig(\"minimum\");\n        this._value = defaultVal;\n      }\n\n      this.on(\"pointerup\", this._onSliderPointerUp, this)\n      .on(\"focus\", this._onSliderFocus, this)\n      .setStyle(\"touch-action\", \"pan-y\");\n      qxWeb(document).on(\"pointerup\", this._onDocPointerUp, this);\n      qxWeb(window).on(\"resize\", this._onWindowResize, this);\n\n      if (this.getChildren(\".\" + cssPrefix + \"-knob\").length === 0) {\n        this.append(qx.ui.website.Widget.create(\"<button>\")\n        .addClass(cssPrefix + \"-knob\"));\n      }\n\n      this.getChildren(\".\" + cssPrefix + \"-knob\")\n      .setAttributes({\n        \"draggable\": \"false\",\n        \"unselectable\": \"true\"\n      })\n      .setHtml(this._getKnobContent())\n      .on(\"pointerdown\", this._onPointerDown, this)\n      .on(\"dragstart\", this._onDragStart, this)\n      .on(\"focus\", this._onKnobFocus, this)\n      .on(\"blur\", this._onKnobBlur, this);\n      this.render();\n\n      return true;\n    },\n\n\n    /**\n     * Returns the current value of the slider\n     *\n     * @return {Integer} slider value\n     */\n    getValue : function() {\n      return this._value;\n    },\n\n    /**\n     * Sets the current value of the slider.\n     *\n     * @param value {Integer} new value of the slider\n     *\n     * @return {qx.ui.website.Slider} The collection for chaining\n     */\n    setValue : function(value)\n    {\n      if (qxWeb.type.get(value) != \"Number\") {\n        throw Error(\"Please provide a Number value for 'value'!\");\n      }\n\n      var step = this.getConfig(\"step\");\n      if (qxWeb.type.get(step) != \"Array\") {\n        var min = this.getConfig(\"minimum\");\n        var max = this.getConfig(\"maximum\");\n        if (value < min) {\n          value = min;\n        }\n        if (value > max) {\n          value = max;\n        }\n        if (qxWeb.type.get(step) == \"Number\") {\n          value = Math.round(value / step) * step;\n        }\n      }\n\n      this._value = value;\n\n      if (qxWeb.type.get(step) != \"Array\" || step.indexOf(value) != -1) {\n        this.__valueToPosition(value);\n        this.getChildren(\".\" + this.getCssPrefix() + \"-knob\")\n          .setHtml(this._getKnobContent());\n        this.emit(\"changeValue\", value);\n      }\n\n      return this;\n    },\n\n\n    render : function() {\n      var step = this.getConfig(\"step\");\n      if (qxWeb.type.get(step) == \"Array\") {\n        this._getPixels();\n        if (step.indexOf(this.getValue()) == -1) {\n          this.setValue(step[0]);\n        } else {\n          this.setValue(this.getValue());\n        }\n      } else if (qxWeb.type.get(step) == \"Number\") {\n        this.setValue(Math.round(this.getValue() / step) * step);\n      } else {\n        this.setValue(this.getValue());\n      }\n      this.getChildren(\".\" + this.getCssPrefix() + \"-knob\")\n        .setHtml(this._getKnobContent());\n\n      return this;\n    },\n\n\n    /**\n     * Returns the content that should be displayed in the knob\n     * @return {String} knob content\n     */\n    _getKnobContent : function() {\n      return qxWeb.template.render(\n        this.getTemplate(\"knobContent\"), {value: this.getValue()}\n      );\n    },\n\n\n    /**\n     * Returns half of the slider knob's width, used for positioning\n     * @return {Integer} half knob width\n     */\n    _getHalfKnobWidth : function() {\n      var knobWidth = this.getChildren(\".\" + this.getCssPrefix() + \"-knob\").getWidth();\n      return Math.round(parseFloat(knobWidth / 2));\n    },\n\n\n    /**\n     * Returns the boundaries (in pixels) of the slider's range of motion\n     * @return {Map} a map with the keys <code>min</code> and <code>max</code>\n     */\n    _getDragBoundaries : function()\n    {\n      var paddingLeft = Math.ceil(parseFloat(this.getStyle(\"paddingLeft\")) || 0);\n      var paddingRight = Math.ceil(parseFloat(this.getStyle(\"paddingRight\")) || 0);\n      var offset = this.getConfig(\"offset\");\n      return {\n        min : this.getOffset().left + offset + paddingLeft,\n        max : this.getOffset().left + this.getWidth() - offset - paddingRight\n      };\n    },\n\n\n    /**\n     * Creates a lookup table to get the pixel values for each slider step\n     * and computes the \"breakpoint\" between two steps in pixel.\n     *\n     * @return {Integer[]} list of pixel values\n     */\n    _getPixels : function()\n    {\n      var step = this.getConfig(\"step\");\n      if (qxWeb.type.get(step) != \"Array\") {\n        return [];\n      }\n\n      var dragBoundaries = this._getDragBoundaries();\n      var pixel = [];\n\n      // First pixel value is fixed\n      pixel.push(dragBoundaries.min);\n\n      var lastIndex = step.length-1;\n\n      var paddingLeft = Math.ceil(parseFloat(this.getStyle(\"paddingLeft\")) || 0);\n      var paddingRight = Math.ceil(parseFloat(this.getStyle(\"paddingRight\")) || 0);\n\n      //The width really used by the slider (drag area)\n      var usedWidth = this.getWidth() - (this.getConfig(\"offset\") * 2) - paddingLeft - paddingRight;\n\n      //The width of a single slider step\n      var stepWidth = usedWidth/(step[lastIndex] - step[0]);\n\n      var stepCount = 0;\n\n      for(var i=1, j=step.length-1; i<j; i++){\n        stepCount = step[i] - step[0];\n        pixel.push(Math.round(stepCount*stepWidth) + dragBoundaries.min);\n      }\n\n      // Last pixel value is fixed\n      pixel.push(dragBoundaries.max);\n\n      return pixel;\n    },\n\n\n    /**\n    * Returns the nearest existing slider value according to he position of the knob element.\n    * @param position {Integer} The current knob position in pixels\n    * @return {Integer} The next position to snap to\n    */\n    _getNearestValue : function(position) {\n      var pixels = this._getPixels();\n      if (pixels.length === 0) {\n\n        var dragBoundaries = this._getDragBoundaries();\n        var availableWidth = dragBoundaries.max - dragBoundaries.min;\n        var relativePosition = position - dragBoundaries.min;\n        var fraction = relativePosition / availableWidth;\n        var min = this.getConfig(\"minimum\");\n        var max = this.getConfig(\"maximum\");\n        var result = (max - min) * fraction + min;\n        if (result < min) {\n          result = min;\n        }\n        if (result > max) {\n          result = max;\n        }\n        var step = this.getConfig(\"step\");\n        if (qxWeb.type.get(step) == \"Number\") {\n          result = Math.round(result / step) * step;\n        }\n        return result;\n      }\n\n      var currentIndex = 0, before = 0, after = 0;\n      for (var i=0, j=pixels.length; i<j; i++) {\n        if (position >= pixels[i]) {\n          currentIndex = i;\n          before = pixels[i];\n          after = pixels[i+1] || before;\n        } else {\n          break;\n        }\n      }\n\n      currentIndex = Math.abs(position - before) <=  Math.abs(position - after) ? currentIndex : currentIndex + 1;\n\n      return this.getConfig(\"step\")[currentIndex];\n    },\n\n\n    /**\n     * Reads the pointer's position and sets slider value to the nearest step.\n     *\n     * @param e {qx.event.Emitter} Incoming event object\n     */\n    _onSliderPointerUp : function(e) {\n      if ((e.getDocumentLeft() === 0 && e.getDocumentTop() === 0) ||\n        !this.getEnabled()) {\n        return;\n      }\n      this.setValue(this._getNearestValue(e.getDocumentLeft()));\n    },\n\n\n    /**\n     * Listener for the pointerdown event. Initializes drag or tracking mode.\n     *\n     * @param e {qx.event.Emitter} Incoming event object\n     */\n    _onPointerDown : function(e) {\n      // this can happen if the user releases the button while dragging outside\n      // of the browser viewport\n      if (this.__dragMode) {\n        return;\n      }\n\n      this.__dragMode = true;\n\n      qxWeb(document.documentElement).on(\"pointermove\", this._onPointerMove, this)\n      .setStyle(\"cursor\", \"pointer\");\n\n      e.stopPropagation();\n    },\n\n\n    /**\n     * Listener for the pointerup event. Used for cleanup of previously\n     * initialized modes.\n     *\n     * @param e {qx.event.Emitter} Incoming event object\n     */\n    _onDocPointerUp : function(e) {\n      if (this.__dragMode === true) {\n        // Cleanup status flags\n        delete this.__dragMode;\n\n        this.__valueToPosition(this.getValue());\n\n        qxWeb(document.documentElement).off(\"pointermove\", this._onPointerMove, this)\n        .setStyle(\"cursor\", \"auto\");\n        e.stopPropagation();\n      }\n    },\n\n\n    /**\n     * Listener for the pointermove event for the knob. Only used in drag mode.\n     *\n     * @param e {qx.event.Emitter} Incoming event object\n     */\n    _onPointerMove : function(e) {\n      e.preventDefault();\n\n      if (this.__dragMode) {\n        var dragPosition = e.getDocumentLeft();\n        var dragBoundaries = this._getDragBoundaries();\n        var paddingLeft = Math.ceil(parseFloat(this.getStyle(\"paddingLeft\")) || 0);\n        var positionKnob = dragPosition - this.getOffset().left - this._getHalfKnobWidth() - paddingLeft;\n\n        if (dragPosition >= dragBoundaries.min && dragPosition <= dragBoundaries.max) {\n          this.setValue(this._getNearestValue(dragPosition));\n          if (positionKnob > 0) {\n            this._setKnobPosition(positionKnob);\n            this.emit(\"changePosition\", positionKnob);\n          }\n        }\n        e.stopPropagation();\n      }\n    },\n\n\n    /**\n     * Prevents drag event propagation\n     * @param e {Event} e drag start event\n     */\n    _onDragStart : function(e) {\n      e.stopPropagation();\n      e.preventDefault();\n    },\n\n\n    /**\n     * Delegates the Slider's focus to the knob\n     * @param e {Event} focus event\n     */\n    _onSliderFocus : function(e) {\n      this.getChildren(\".\" + this.getCssPrefix() + \"-knob\").focus();\n    },\n\n\n    /**\n     * Attaches the event listener for keyboard support to the knob on focus\n     * @param e {Event} focus event\n     */\n    _onKnobFocus : function(e) {\n      this.getChildren(\".\" + this.getCssPrefix() + \"-knob\")\n        .on(\"keydown\", this._onKeyDown, this);\n    },\n\n\n    /**\n     * Removes the event listener for keyboard support from the knob on blur\n     * @param e {Event} blur event\n     */\n    _onKnobBlur : function(e) {\n      this.getChildren(\".\" + this.getCssPrefix() + \"-knob\")\n        .off(\"keydown\", this._onKeyDown, this);\n    },\n\n\n    /**\n     * Moves the knob if the left or right arrow key is pressed\n     * @param e {Event} keydown event\n     */\n    _onKeyDown : function(e) {\n      var newValue;\n      var currentValue = this.getValue();\n      var step = this.getConfig(\"step\");\n      var stepType = qxWeb.type.get(step);\n      var key = e.getKeyIdentifier();\n      var idx;\n      if (key == \"Right\") {\n        if (stepType === \"Array\") {\n          idx = step.indexOf(currentValue);\n          if (idx !== undefined) {\n            newValue = step[idx + 1] || currentValue;\n          }\n        } else if (stepType === \"Number\") {\n          newValue = currentValue + step;\n        }\n        else {\n          newValue = currentValue + 1;\n        }\n      }\n      else if (key == \"Left\") {\n        if (stepType === \"Array\") {\n          idx = step.indexOf(currentValue);\n          if (idx !== undefined) {\n            newValue = step[idx - 1] || currentValue;\n          }\n        } else if (stepType === \"Number\") {\n          newValue = currentValue - step;\n        }\n        else {\n          newValue = currentValue - 1;\n        }\n      } else {\n        return;\n      }\n\n      this.setValue(newValue);\n    },\n\n\n    /**\n    * Applies the horizontal position\n    * @param x {Integer} the position to move to\n    */\n    _setKnobPosition : function(x) {\n      var knob = this.getChildren(\".\" + this.getCssPrefix() + \"-knob\");\n      if (qxWeb.env.get(\"css.transform\")) {\n        knob.translate([x + \"px\", 0, 0]);\n      } else {\n        knob.setStyle(\"left\", x + \"px\");\n      }\n    },\n\n\n    /**\n     * Listener for window resize events. This listener method resets the\n     * calculated values which are used to position the slider knob.\n     */\n    _onWindowResize : function() {\n      if (qxWeb.type.get(this.getConfig(\"step\")) == \"Array\") {\n        this._getPixels();\n      }\n      this.__valueToPosition(this._value);\n    },\n\n\n    /**\n     * Positions the slider knob to the given value and fires the \"changePosition\"\n     * event with the current position as integer.\n     *\n     * @param value {Integer} slider step value\n     */\n    __valueToPosition : function(value)\n    {\n      var pixels = this._getPixels();\n      var paddingLeft = Math.ceil(parseFloat(this.getStyle(\"paddingLeft\")) || 0);\n      var valueToPixel;\n      if (pixels.length > 0) {\n        // Get the pixel value of the current step value\n        valueToPixel = pixels[this.getConfig(\"step\").indexOf(value)] - paddingLeft;\n      } else {\n        var dragBoundaries = this._getDragBoundaries();\n        var availableWidth = dragBoundaries.max - dragBoundaries.min;\n        var range = this.getConfig(\"maximum\") - this.getConfig(\"minimum\");\n        var fraction = (value - this.getConfig(\"minimum\")) / range;\n        valueToPixel = (availableWidth * fraction) + dragBoundaries.min - paddingLeft;\n      }\n\n      // relative position is necessary here\n      var position = valueToPixel - this.getOffset().left - this._getHalfKnobWidth();\n      this._setKnobPosition(position);\n\n      this.emit(\"changePosition\", position);\n    },\n\n\n    dispose : function()\n    {\n      qxWeb(document).off(\"pointerup\", this._onDocPointerUp, this);\n      qxWeb(window).off(\"resize\", this._onWindowResize, this);\n      this.off(\"pointerup\", this._onSliderPointerUp, this)\n      .off(\"focus\", this._onSliderFocus, this);\n      this.getChildren(\".\" + this.getCssPrefix() + \"-knob\")\n      .off(\"pointerdown\", this._onPointerDown, this)\n      .off(\"dragstart\", this._onDragStart, this)\n      .off(\"focus\", this._onKnobFocus, this)\n      .off(\"blur\", this._onKnobBlur, this)\n      .off(\"keydown\", this._onKeyDown, this);\n\n      this.setHtml(\"\");\n\n      return this.base(arguments);\n    }\n  },\n\n\n  // Make the slider widget available as a qxWeb module\n  defer : function(statics) {\n    qxWeb.$attach({slider : statics.slider});\n  }\n});\n"
  ]
}