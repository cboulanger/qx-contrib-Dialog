{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/window/MDesktop.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "activeWindow",
    "check",
    "apply",
    "event",
    "init",
    "nullable",
    "events",
    "windowAdded",
    "windowRemoved",
    "members",
    "__windows",
    "__manager",
    "getWindowManager",
    "setWindowManager",
    "ui",
    "window",
    "Window",
    "DEFAULT_MANAGER_CLASS",
    "supportsMaximize",
    "manager",
    "setDesktop",
    "_onChangeActive",
    "e",
    "getData",
    "setActiveWindow",
    "getTarget",
    "getActiveWindow",
    "_applyActiveWindow",
    "value",
    "old",
    "changeActiveWindow",
    "updateStack",
    "_onChangeModal",
    "_onChangeVisibility",
    "_afterAddChild",
    "win",
    "Class",
    "isDefined",
    "_addWindow",
    "getWindows",
    "includes",
    "push",
    "fireDataEvent",
    "addListener",
    "getActive",
    "_afterRemoveChild",
    "_removeWindow",
    "lang",
    "Array",
    "remove",
    "removeListener",
    "destruct",
    "_disposeArray",
    "_disposeObjects",
    "MDesktop"
  ],
  "mappings": "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",
  "file": "MDesktop.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This mixin implements the key methods of the {@link qx.ui.window.IDesktop}.\n *\n * @ignore(qx.ui.window.Window)\n * @ignore(qx.ui.window.Window.*)\n */\nqx.Mixin.define(\"qx.ui.window.MDesktop\",\n{\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The currently active window\n     */\n    activeWindow :\n    {\n      check : \"qx.ui.window.Window\",\n      apply : \"_applyActiveWindow\",\n      event : \"changeActiveWindow\",\n      init  : null,\n      nullable : true\n    }\n  },\n\n\n  events:\n  {\n    /**\n     * Fired when a window was added.\n     */\n    windowAdded: \"qx.event.type.Data\",\n\n    /**\n     * Fired when a window was removed.\n     */\n    windowRemoved: \"qx.event.type.Data\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __windows : null,\n    __manager: null,\n\n\n    /**\n     * Get the desktop's window manager. Each desktop must have a window manager.\n     * If none is configured the default window manager {@link qx.ui.window.Window#DEFAULT_MANAGER_CLASS}\n     * is used.\n     *\n     * @return {qx.ui.window.IWindowManager} The desktop's window manager\n     */\n    getWindowManager : function()\n    {\n      if (!this.__manager) {\n        this.setWindowManager(new qx.ui.window.Window.DEFAULT_MANAGER_CLASS());\n      }\n      return this.__manager;\n    },\n\n\n    /**\n     * Whether the configured layout supports a maximized window\n     * e.g. is a Canvas.\n     *\n     * @return {Boolean} Whether the layout supports maximized windows\n     */\n    supportsMaximize : function() {\n      return true;\n    },\n\n    /**\n     * Sets the desktop's window manager\n     *\n     * @param manager {qx.ui.window.IWindowManager} The window manager\n     */\n    setWindowManager : function(manager)\n    {\n      if (this.__manager) {\n        this.__manager.setDesktop(null);\n      }\n\n      manager.setDesktop(this);\n      this.__manager = manager;\n    },\n\n\n    /**\n     * Event handler. Called if one of the managed windows changes its active\n     * state.\n     *\n     * @param e {qx.event.type.Event} the event object.\n     */\n    _onChangeActive : function(e)\n    {\n      if (e.getData()) {\n        this.setActiveWindow(e.getTarget());\n      } else if (this.getActiveWindow() == e.getTarget()) {\n        this.setActiveWindow(null);\n      }\n    },\n\n\n    // property apply\n    _applyActiveWindow : function(value, old) {\n      this.getWindowManager().changeActiveWindow(value, old);\n      this.getWindowManager().updateStack();\n    },\n\n\n    /**\n     * Event handler. Called if one of the managed windows changes its modality\n     *\n     * @param e {qx.event.type.Event} the event object.\n     */\n    _onChangeModal : function(e) {\n      this.getWindowManager().updateStack();\n    },\n\n\n    /**\n     * Event handler. Called if one of the managed windows changes its visibility\n     * state.\n     */\n    _onChangeVisibility : function() {\n      this.getWindowManager().updateStack();\n    },\n\n\n    /**\n     * Overrides the method {@link qx.ui.core.Widget#_afterAddChild}\n     *\n     * @param win {qx.ui.core.Widget} added widget\n     */\n    _afterAddChild : function(win)\n    {\n      if (qx.Class.isDefined(\"qx.ui.window.Window\") && win instanceof qx.ui.window.Window) {\n        this._addWindow(win);\n      }\n    },\n\n\n    /**\n     * Handles the case, when a window is added to the desktop.\n     *\n     * @param win {qx.ui.window.Window} Window, which has been added\n     */\n    _addWindow : function(win)\n    {\n      if (!this.getWindows().includes(win))\n      {\n        this.getWindows().push(win);\n\n        this.fireDataEvent(\"windowAdded\", win);\n\n        win.addListener(\"changeActive\", this._onChangeActive, this);\n        win.addListener(\"changeModal\", this._onChangeModal, this);\n        win.addListener(\"changeVisibility\", this._onChangeVisibility, this);\n      }\n\n      if (win.getActive()) {\n        this.setActiveWindow(win);\n      }\n\n      this.getWindowManager().updateStack();\n    },\n\n\n    /**\n     * Overrides the method {@link qx.ui.core.Widget#_afterRemoveChild}\n     *\n     * @param win {qx.ui.core.Widget} removed widget\n     */\n    _afterRemoveChild : function(win)\n    {\n      if (qx.Class.isDefined(\"qx.ui.window.Window\") && win instanceof qx.ui.window.Window) {\n        this._removeWindow(win);\n      }\n    },\n\n\n    /**\n     * Handles the case, when a window is removed from the desktop.\n     *\n     * @param win {qx.ui.window.Window} Window, which has been removed\n     */\n    _removeWindow : function(win)\n    {\n      if (this.getWindows().includes(win))\n      {\n        qx.lang.Array.remove(this.getWindows(), win);\n\n        this.fireDataEvent(\"windowRemoved\", win);\n\n        win.removeListener(\"changeActive\", this._onChangeActive, this);\n        win.removeListener(\"changeModal\", this._onChangeModal, this);\n        win.removeListener(\"changeVisibility\", this._onChangeVisibility, this);\n\n        this.getWindowManager().updateStack();\n      }\n    },\n\n\n    /**\n     * Get a list of all windows added to the desktop (including hidden windows)\n     *\n     * @return {qx.ui.window.Window[]} Array of managed windows\n     */\n    getWindows : function()\n    {\n      if (!this.__windows) {\n        this.__windows = [];\n      }\n      return this.__windows;\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._disposeArray(\"__windows\");\n    this._disposeObjects(\"__manager\");\n  }\n});\n"
  ]
}