{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/window/Window.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MRemoteChildrenHandling",
    "MRemoteLayoutHandling",
    "MResizable",
    "MMovable",
    "MContentPadding",
    "construct",
    "caption",
    "icon",
    "_setLayout",
    "layout",
    "VBox",
    "_createChildControl",
    "setIcon",
    "setCaption",
    "_updateCaptionBar",
    "addListener",
    "_onWindowPointerDown",
    "_onWindowFocusOut",
    "Init",
    "getApplication",
    "getRoot",
    "add",
    "initVisibility",
    "FocusHandler",
    "getInstance",
    "addRoot",
    "_getResizeFrame",
    "setAppearance",
    "statics",
    "DEFAULT_MANAGER_CLASS",
    "window",
    "Manager",
    "events",
    "properties",
    "appearance",
    "refine",
    "init",
    "visibility",
    "focusable",
    "active",
    "check",
    "apply",
    "event",
    "alwaysOnTop",
    "modal",
    "nullable",
    "themeable",
    "status",
    "showClose",
    "showMaximize",
    "showMinimize",
    "allowClose",
    "allowMaximize",
    "allowMinimize",
    "showStatusbar",
    "centerOnAppear",
    "centerOnContainerResize",
    "autoDestroy",
    "members",
    "__restoredTop",
    "__restoredLeft",
    "__centeringAppearId",
    "__centeringResizeId",
    "getChildrenContainer",
    "getChildControl",
    "_forwardStates",
    "maximized",
    "setLayoutParent",
    "parent",
    "oldParent",
    "assertInterface",
    "IDesktop",
    "getLayoutParent",
    "removeListenerById",
    "getCenterOnContainerResize",
    "center",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "container",
    "Composite",
    "HBox",
    "_add",
    "basic",
    "Label",
    "setValue",
    "getStatus",
    "flex",
    "Grid",
    "setRowFlex",
    "setColumnFlex",
    "_onCaptionPointerDblTap",
    "_activateMoveHandle",
    "Image",
    "getIcon",
    "row",
    "column",
    "getCaption",
    "setWidth",
    "setAllowGrowX",
    "captionBar",
    "form",
    "Button",
    "setFocusable",
    "_onMinimizeButtonTap",
    "_onRestoreButtonTap",
    "_onMaximizeButtonTap",
    "_onCloseButtonTap",
    "btn",
    "setSource",
    "_showChildControl",
    "_excludeChildControl",
    "getShowMinimize",
    "getAllowMinimize",
    "resetEnabled",
    "setEnabled",
    "getShowMaximize",
    "isMaximized",
    "getAllowMaximize",
    "getShowClose",
    "getAllowClose",
    "close",
    "getAutoDestroy",
    "isVisible",
    "fireNonBubblingEvent",
    "type",
    "Event",
    "hide",
    "fireEvent",
    "dispose",
    "open",
    "show",
    "setActive",
    "focus",
    "bounds",
    "getBounds",
    "hint",
    "getSizeHint",
    "left",
    "Math",
    "round",
    "width",
    "top",
    "height",
    "moveTo",
    "warn",
    "maximize",
    "supportsMaximize",
    "props",
    "getLayoutProperties",
    "undefined",
    "setLayoutProperties",
    "edge",
    "addState",
    "minimize",
    "removeState",
    "restore",
    "getMode",
    "hasState",
    "_applyActive",
    "value",
    "old",
    "_applyModal",
    "_getContentPaddingTarget",
    "_applyShowStatusbar",
    "resizeFrame",
    "_applyCaptionBarChange",
    "_applyStatus",
    "label",
    "_applyFocusable",
    "Environment",
    "get",
    "_applyCenterOnAppear",
    "_applyCenterOnContainerResize",
    "_onWindowEventStop",
    "e",
    "stopPropagation",
    "getModal",
    "current",
    "getRelatedTarget",
    "contains",
    "reset",
    "destruct",
    "removeRoot",
    "remove",
    "Window"
  ],
  "mappings": "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",
  "file": "Window.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * A window widget\n *\n * More information can be found in the package description {@link qx.ui.window}.\n *\n * @childControl statusbar {qx.ui.container.Composite} statusbar container which shows the statusbar text\n * @childControl statusbar-text {qx.ui.basic.Label} text of the statusbar\n * @childControl pane {qx.ui.container.Composite} window pane which holds the content\n * @childControl captionbar {qx.ui.container.Composite} Container for all widgets inside the captionbar\n * @childControl icon {qx.ui.basic.Image} icon at the left of the captionbar\n * @childControl title {qx.ui.basic.Label} caption of the window\n * @childControl minimize-button {qx.ui.form.Button} button to minimize the window\n * @childControl restore-button {qx.ui.form.Button} button to restore the window\n * @childControl maximize-button {qx.ui.form.Button} button to maximize the window\n * @childControl close-button {qx.ui.form.Button} button to close the window\n */\nqx.Class.define(\"qx.ui.window.Window\",\n{\n  extend : qx.ui.core.Widget,\n\n  include :\n  [\n    qx.ui.core.MRemoteChildrenHandling,\n    qx.ui.core.MRemoteLayoutHandling,\n    qx.ui.core.MResizable,\n    qx.ui.core.MMovable,\n    qx.ui.core.MContentPadding\n  ],\n\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param caption {String?} The caption text\n   * @param icon {String?} The URL of the caption bar icon\n   */\n  construct : function(caption, icon)\n  {\n    this.base(arguments);\n\n    // configure internal layout\n    this._setLayout(new qx.ui.layout.VBox());\n\n    // force creation of captionbar\n    this._createChildControl(\"captionbar\");\n    this._createChildControl(\"pane\");\n\n    // apply constructor parameters\n    if (icon != null) {\n      this.setIcon(icon);\n    }\n\n    if (caption != null) {\n      this.setCaption(caption);\n    }\n\n    // Update captionbar\n    this._updateCaptionBar();\n\n    // Activation listener\n    this.addListener(\"pointerdown\", this._onWindowPointerDown, this, true);\n\n    // Focusout listener\n    this.addListener(\"focusout\", this._onWindowFocusOut, this);\n\n    // Automatically add to application root.\n    qx.core.Init.getApplication().getRoot().add(this);\n\n    // Initialize visibility\n    this.initVisibility();\n\n    // Register as root for the focus handler\n    qx.ui.core.FocusHandler.getInstance().addRoot(this);\n\n    // Change the resize frames appearance\n    this._getResizeFrame().setAppearance(\"window-resize-frame\");\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Class} The default window manager class. */\n    DEFAULT_MANAGER_CLASS : qx.ui.window.Manager\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /**\n     * Fired before the window is closed.\n     *\n     * The close action can be prevented by calling\n     * {@link qx.event.type.Event#preventDefault} on the event object\n     */\n    \"beforeClose\" : \"qx.event.type.Event\",\n\n    /** Fired if the window is closed */\n    \"close\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired before the window is minimize.\n     *\n     * The minimize action can be prevented by calling\n     * {@link qx.event.type.Event#preventDefault} on the event object\n     */\n    \"beforeMinimize\" : \"qx.event.type.Event\",\n\n    /** Fired if the window is minimized */\n    \"minimize\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired before the window is maximize.\n     *\n     * The maximize action can be prevented by calling\n     * {@link qx.event.type.Event#preventDefault} on the event object\n     */\n    \"beforeMaximize\" : \"qx.event.type.Event\",\n\n    /** Fired if the window is maximized */\n    \"maximize\" : \"qx.event.type.Event\",\n\n    /**\n     * Fired before the window is restored from a minimized or maximized state.\n     *\n     * The restored action can be prevented by calling\n     * {@link qx.event.type.Event#preventDefault} on the event object\n     */\n    \"beforeRestore\" : \"qx.event.type.Event\",\n\n    /** Fired if the window is restored from a minimized or maximized state */\n    \"restore\" : \"qx.event.type.Event\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL OPTIONS\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"window\"\n    },\n\n\n    // overridden\n    visibility :\n    {\n      refine : true,\n      init : \"excluded\"\n    },\n\n\n    // overridden\n    focusable :\n    {\n      refine : true,\n      init : true\n    },\n\n\n    /**\n     * If the window is active, only one window in a single qx.ui.window.Manager could\n     *  have set this to true at the same time.\n     */\n    active :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyActive\",\n      event : \"changeActive\"\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      BASIC OPTIONS\n    ---------------------------------------------------------------------------\n    */\n\n    /** Should the window be always on top */\n    alwaysOnTop :\n    {\n      check : \"Boolean\",\n      init : false,\n      event : \"changeAlwaysOnTop\"\n    },\n\n    /** Should the window be modal (this disables minimize and maximize buttons) */\n    modal :\n    {\n      check : \"Boolean\",\n      init : false,\n      event : \"changeModal\",\n      apply : \"_applyModal\"\n    },\n\n\n    /** The text of the caption */\n    caption :\n    {\n      apply : \"_applyCaptionBarChange\",\n      event : \"changeCaption\",\n      nullable : true\n    },\n\n\n    /** The icon of the caption */\n    icon :\n    {\n      check : \"String\",\n      nullable : true,\n      apply : \"_applyCaptionBarChange\",\n      event : \"changeIcon\",\n      themeable : true\n    },\n\n\n    /** The text of the statusbar */\n    status :\n    {\n      check : \"String\",\n      nullable : true,\n      apply : \"_applyStatus\",\n      event :\"changeStatus\"\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HIDE CAPTIONBAR FEATURES\n    ---------------------------------------------------------------------------\n    */\n\n    /** Should the close button be shown */\n    showClose :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyCaptionBarChange\",\n      themeable : true\n    },\n\n\n    /** Should the maximize button be shown */\n    showMaximize :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyCaptionBarChange\",\n      themeable : true\n    },\n\n\n    /** Should the minimize button be shown */\n    showMinimize :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyCaptionBarChange\",\n      themeable : true\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      DISABLE CAPTIONBAR FEATURES\n    ---------------------------------------------------------------------------\n    */\n\n    /** Should the user have the ability to close the window */\n    allowClose :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyCaptionBarChange\"\n    },\n\n\n    /** Should the user have the ability to maximize the window */\n    allowMaximize :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyCaptionBarChange\"\n    },\n\n\n    /** Should the user have the ability to minimize the window */\n    allowMinimize :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyCaptionBarChange\"\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      STATUSBAR CONFIG\n    ---------------------------------------------------------------------------\n    */\n\n    /** Should the statusbar be shown */\n    showStatusbar :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyShowStatusbar\"\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      WHEN TO AUTOMATICALY CENTER\n    ---------------------------------------------------------------------------\n    */\n\n    /** Whether this window should be automatically centered when it appears */\n    centerOnAppear :\n    {\n      init  : false,\n      check : \"Boolean\",\n      apply : \"_applyCenterOnAppear\"\n    },\n\n    /** \n     * Whether this window should be automatically centered when its container\n     * is resized.\n     */\n    centerOnContainerResize :\n    {\n      init  : false,\n      check : \"Boolean\",\n      apply : \"_applyCenterOnContainerResize\"\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CLOSE BEHAVIOR\n    ---------------------------------------------------------------------------\n    */\n\n    /** \n     * Should the window be automatically destroyed when it is closed.\n     *\n     * When false, closing the window behaves like hiding the window.\n     * \n     * When true, the window is removed from its container (the root), all\n     * listeners are removed, the window's widgets are removed, and the window\n     * is destroyed.\n     *\n     * NOTE: If any widgets that were added to this window require special\n     * clean-up, you should listen on the 'close' event and remove and clean\n     * up those widgets there.\n     */\n    autoDestroy :\n    {\n      check : \"Boolean\",\n      init : false\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /** @type {Integer} Original top value before maximation had occurred */\n    __restoredTop : null,\n\n    /** @type {Integer} Original left value before maximation had occurred */\n    __restoredLeft : null,\n\n    /** @type {Integer} Listener ID for centering on appear */\n    __centeringAppearId : null,\n\n    /** @type {Integer} Listener ID for centering on resize */\n    __centeringResizeId : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * The children container needed by the {@link qx.ui.core.MRemoteChildrenHandling}\n     * mixin\n     *\n     * @return {qx.ui.container.Composite} pane sub widget\n     */\n    getChildrenContainer : function() {\n      return this.getChildControl(\"pane\");\n    },\n\n\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates :\n    {\n      active : true,\n      maximized : true,\n      showStatusbar : true,\n      modal : true\n    },\n\n\n    // overridden\n    setLayoutParent : function(parent)\n    {\n      var             oldParent;\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        parent && this.assertInterface(\n          parent, qx.ui.window.IDesktop,\n          \"Windows can only be added to widgets, which implement the interface \"+\n          \"qx.ui.window.IDesktop. All root widgets implement this interface.\"\n        );\n      }\n\n      // Before changing the parent, if there's a prior one, remove our resize\n      // listener\n      oldParent = this.getLayoutParent();\n      if (oldParent && this.__centeringResizeId) {\n        oldParent.removeListenerById(this.__centeringResizeId);\n        this.__centeringResizeId = null;\n      }\n\n      // Call the superclass\n      this.base(arguments, parent);\n\n      // Re-add a listener for resize, if required\n      if (parent && this.getCenterOnContainerResize())\n      {\n        this.__centeringResizeId =\n          parent.addListener(\"resize\", this.center, this);\n      }\n    },\n\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"statusbar\":\n          control = new qx.ui.container.Composite(new qx.ui.layout.HBox());\n          this._add(control);\n          control.add(this.getChildControl(\"statusbar-text\"));\n          break;\n\n        case \"statusbar-text\":\n          control = new qx.ui.basic.Label();\n          control.setValue(this.getStatus());\n          break;\n\n        case \"pane\":\n          control = new qx.ui.container.Composite();\n          this._add(control, {flex: 1});\n          break;\n\n        case \"captionbar\":\n          // captionbar\n          var layout = new qx.ui.layout.Grid();\n          layout.setRowFlex(0, 1);\n          layout.setColumnFlex(1, 1);\n          control = new qx.ui.container.Composite(layout);\n          this._add(control);\n\n          // captionbar events\n          control.addListener(\"dbltap\", this._onCaptionPointerDblTap, this);\n\n          // register as move handle\n          this._activateMoveHandle(control);\n          break;\n\n        case \"icon\":\n          control = new qx.ui.basic.Image(this.getIcon());\n          this.getChildControl(\"captionbar\").add(control, {row: 0, column:0});\n          break;\n\n        case \"title\":\n          control = new qx.ui.basic.Label(this.getCaption());\n          control.setWidth(0);\n          control.setAllowGrowX(true);\n\n          var captionBar = this.getChildControl(\"captionbar\");\n          captionBar.add(control, {row: 0, column:1});\n          break;\n\n        case \"minimize-button\":\n          control = new qx.ui.form.Button();\n          control.setFocusable(false);\n          control.addListener(\"execute\", this._onMinimizeButtonTap, this);\n\n          this.getChildControl(\"captionbar\").add(control, {row: 0, column:2});\n          break;\n\n        case \"restore-button\":\n          control = new qx.ui.form.Button();\n          control.setFocusable(false);\n          control.addListener(\"execute\", this._onRestoreButtonTap, this);\n\n          this.getChildControl(\"captionbar\").add(control, {row: 0, column:3});\n          break;\n\n        case \"maximize-button\":\n          control = new qx.ui.form.Button();\n          control.setFocusable(false);\n          control.addListener(\"execute\", this._onMaximizeButtonTap, this);\n\n          this.getChildControl(\"captionbar\").add(control, {row: 0, column:4});\n          break;\n\n        case \"close-button\":\n          control = new qx.ui.form.Button();\n          control.setFocusable(false);\n          control.addListener(\"execute\", this._onCloseButtonTap, this);\n\n          this.getChildControl(\"captionbar\").add(control, {row: 0, column:6});\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CAPTIONBAR INTERNALS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Updates the status and the visibility of each element of the captionbar.\n     */\n    _updateCaptionBar : function()\n    {\n      var btn;\n\n      var icon = this.getIcon();\n      if (icon) {\n        this.getChildControl(\"icon\").setSource(icon);\n        this._showChildControl(\"icon\");\n      } else {\n        this._excludeChildControl(\"icon\");\n      }\n\n      var caption = this.getCaption();\n      if (caption) {\n        this.getChildControl(\"title\").setValue(caption);\n        this._showChildControl(\"title\");\n      } else {\n        this._excludeChildControl(\"title\");\n      }\n\n      if (this.getShowMinimize())\n      {\n        this._showChildControl(\"minimize-button\");\n\n        btn = this.getChildControl(\"minimize-button\");\n        this.getAllowMinimize() ? btn.resetEnabled() : btn.setEnabled(false);\n      }\n      else\n      {\n        this._excludeChildControl(\"minimize-button\");\n      }\n\n      if (this.getShowMaximize())\n      {\n        if (this.isMaximized())\n        {\n          this._showChildControl(\"restore-button\");\n          this._excludeChildControl(\"maximize-button\");\n        }\n        else\n        {\n          this._showChildControl(\"maximize-button\");\n          this._excludeChildControl(\"restore-button\");\n        }\n\n        btn = this.getChildControl(\"maximize-button\");\n        this.getAllowMaximize() ? btn.resetEnabled() : btn.setEnabled(false);\n      }\n      else\n      {\n        this._excludeChildControl(\"maximize-button\");\n        this._excludeChildControl(\"restore-button\");\n      }\n\n      if (this.getShowClose())\n      {\n        this._showChildControl(\"close-button\");\n\n        btn = this.getChildControl(\"close-button\");\n        this.getAllowClose() ? btn.resetEnabled() : btn.setEnabled(false);\n      }\n      else\n      {\n        this._excludeChildControl(\"close-button\");\n      }\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      USER API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Close the current window instance.\n     *\n     * Simply calls the {@link qx.ui.core.Widget#hide} method if the\n     * {@link qx.ui.win.Window#autoDestroy} property is false; otherwise \n     * removes and destroys the window.\n     */\n    close : function()\n    {\n      if (!this.getAutoDestroy() && !this.isVisible()) {\n        return;\n      }\n\n      if (this.fireNonBubblingEvent(\"beforeClose\", qx.event.type.Event, [false, true]))\n      {\n        this.hide();\n        this.fireEvent(\"close\");\n      }\n\n      // If automatically destroying the window upon close was requested, do\n      // so now. (Note that we explicitly re-obtain the autoDestroy property\n      // value, allowing the user's close handler to enable/disable it before\n      // here.)\n      if (this.getAutoDestroy())\n      {\n        this.dispose();\n      }\n    },\n\n\n    /**\n     * Open the window.\n     */\n    open : function()\n    {\n      this.show();\n      this.setActive(true);\n      this.focus();\n    },\n\n\n    /**\n     * Centers the window to the parent.\n     *\n     * This call works with the size of the parent widget and the size of\n     * the window as calculated in the last layout flush. It is best to call\n     * this method just after rendering the window in the \"resize\" event:\n     * <pre class='javascript'>\n     *   win.addListenerOnce(\"resize\", this.center, this);\n     * </pre>\n     */\n    center : function()\n    {\n      var parent = this.getLayoutParent();\n      if (parent)\n      {\n        var bounds = parent.getBounds();\n        if (bounds)\n        {\n          var hint = this.getSizeHint();\n\n          var left = Math.round((bounds.width - hint.width) / 2);\n          var top = Math.round((bounds.height - hint.height) / 2);\n\n          if (top < 0) {\n            top = 0;\n          }\n\n          this.moveTo(left, top);\n\n          return;\n        }\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.warn(\"Centering depends on parent bounds!\");\n      }\n    },\n\n\n    /**\n     * Maximize the window.\n     */\n    maximize : function()\n    {\n      // If the window is already maximized -> return\n      if (this.isMaximized()) {\n        return;\n      }\n\n      // First check if the parent uses a canvas layout\n      // Otherwise maximize() is not possible\n      var parent = this.getLayoutParent();\n      if (parent != null && parent.supportsMaximize())\n      {\n        if (this.fireNonBubblingEvent(\"beforeMaximize\", qx.event.type.Event, [false, true]))\n        {\n          if (!this.isVisible()) {\n            this.open();\n          }\n\n          // store current dimension and location\n          var props = this.getLayoutProperties();\n          this.__restoredLeft = props.left === undefined ? 0 : props.left;\n          this.__restoredTop = props.top === undefined ? 0 : props.top;\n\n          // Update layout properties\n          this.setLayoutProperties({\n            left: null,\n            top: null,\n            edge: 0\n          });\n\n          // Add state\n          this.addState(\"maximized\");\n\n          // Update captionbar\n          this._updateCaptionBar();\n\n          // Fire user event\n          this.fireEvent(\"maximize\");\n        }\n      }\n    },\n\n\n    /**\n     * Minimized the window.\n     */\n    minimize : function()\n    {\n      if (!this.isVisible()) {\n        return;\n      }\n\n      if (this.fireNonBubblingEvent(\"beforeMinimize\", qx.event.type.Event, [false, true]))\n      {\n        // store current dimension and location\n        var props = this.getLayoutProperties();\n        this.__restoredLeft = props.left === undefined ? 0 : props.left;\n        this.__restoredTop = props.top === undefined ? 0 : props.top;\n\n        this.removeState(\"maximized\");\n        this.hide();\n        this.fireEvent(\"minimize\");\n      }\n    },\n\n\n    /**\n     * Restore the window to <code>\"normal\"</code>, if it is\n     * <code>\"maximized\"</code> or <code>\"minimized\"</code>.\n     */\n    restore : function()\n    {\n      if (this.getMode() === \"normal\") {\n        return;\n      }\n\n      if (this.fireNonBubblingEvent(\"beforeRestore\", qx.event.type.Event, [false, true]))\n      {\n        if (!this.isVisible()) {\n          this.open();\n        }\n\n        // Restore old properties\n        var left = this.__restoredLeft;\n        var top = this.__restoredTop;\n\n        this.setLayoutProperties({\n          edge : null,\n          left : left,\n          top : top\n        });\n\n        // Remove maximized state\n        this.removeState(\"maximized\");\n\n        // Update captionbar\n        this._updateCaptionBar();\n\n        // Fire user event\n        this.fireEvent(\"restore\");\n      }\n    },\n\n\n    /**\n     * Set the window's position relative to its parent\n     *\n     * @param left {Integer} The left position\n     * @param top {Integer} The top position\n     */\n    moveTo : function(left, top)\n    {\n      if (this.isMaximized()) {\n        return;\n      }\n\n      this.setLayoutProperties({\n        left : left,\n        top : top\n      });\n    },\n\n    /**\n     * Return <code>true</code> if the window is in maximized state,\n     * but note that the window in maximized state could also be invisible, this\n     * is equivalent to minimized. So use the {@link qx.ui.window.Window#getMode}\n     * to get the window mode.\n     *\n     * @return {Boolean} <code>true</code> if the window is maximized,\n     *   <code>false</code> otherwise.\n     */\n    isMaximized : function()\n    {\n      return this.hasState(\"maximized\");\n    },\n\n    /**\n     * Return the window mode as <code>String</code>:\n     * <code>\"maximized\"</code>, <code>\"normal\"</code> or <code>\"minimized\"</code>.\n     *\n     * @return {String} The window mode as <code>String</code> value.\n     */\n    getMode : function()\n    {\n      if(!this.isVisible()) {\n        return \"minimized\";\n      } else {\n        if(this.isMaximized()) {\n          return \"maximized\";\n        } else {\n          return \"normal\";\n        }\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyActive : function(value, old)\n    {\n      if (old) {\n        this.removeState(\"active\");\n      } else {\n        this.addState(\"active\");\n      }\n    },\n\n\n    // property apply\n    _applyModal : function(value, old)\n    {\n      if (old) {\n        this.removeState(\"modal\");\n      } else {\n        this.addState(\"modal\");\n      }\n    },\n\n\n    /**\n     * Returns the element, to which the content padding should be applied.\n     *\n     * @return {qx.ui.core.Widget} The content padding target.\n     */\n    _getContentPaddingTarget : function() {\n      return this.getChildControl(\"pane\");\n    },\n\n\n    // property apply\n    _applyShowStatusbar : function(value, old)\n    {\n      // store the state if the status bar is shown\n      var resizeFrame = this._getResizeFrame();\n      if (value) {\n        this.addState(\"showStatusbar\");\n        resizeFrame.addState(\"showStatusbar\");\n      } else {\n        this.removeState(\"showStatusbar\");\n        resizeFrame.removeState(\"showStatusbar\");\n      }\n\n      if (value) {\n        this._showChildControl(\"statusbar\");\n      } else {\n        this._excludeChildControl(\"statusbar\");\n      }\n    },\n\n\n    // property apply\n    _applyCaptionBarChange : function(value, old) {\n      this._updateCaptionBar();\n    },\n\n\n    // property apply\n    _applyStatus : function(value, old)\n    {\n      var label = this.getChildControl(\"statusbar-text\", true);\n      if (label) {\n        label.setValue(value);\n      }\n    },\n\n\n    // overridden\n    _applyFocusable : function(value, old)\n    {\n      // Workaround for bug #7581: Don't set the tabIndex\n      // to prevent native scrolling on focus in IE\n      if (qx.core.Environment.get(\"engine.name\") !== \"mshtml\") {\n        this.base(arguments, value, old);\n      }\n    },\n\n    _applyCenterOnAppear : function(value, old)\n    {\n      // Remove prior listener for centering on appear\n      if (this.__centeringAppearId !== null) {\n        this.removeListenerById(this.__centeringAppearId);\n        this.__centeringAppearId = null;\n      }\n\n      // If we are to center on appear, arrange to do so\n      if (value) {\n        this.__centeringAppearId =\n          this.addListener(\"appear\", this.center, this);\n      }\n    },\n\n    _applyCenterOnContainerResize : function(value, old)\n    {\n      var             parent = this.getLayoutParent();\n\n      // Remove prior listener for centering on resize\n      if (this.__centeringResizeId !== null) {\n        parent.removeListenerById(this.__centeringResizeId);\n        this.__centeringResizeId = null;\n      }\n\n      // If we are to center on resize, arrange to do so\n      if (value) {\n        if (parent) {\n          this.__centeringResizeId =\n            parent.addListener(\"resize\", this.center, this);\n          \n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      BASIC EVENT HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Stops every event\n     *\n     * @param e {qx.event.type.Event} any event\n     */\n    _onWindowEventStop : function(e) {\n      e.stopPropagation();\n    },\n\n\n    /**\n     * Focuses the window instance.\n     *\n     * @param e {qx.event.type.Pointer} pointer down event\n     */\n    _onWindowPointerDown : function(e) {\n      this.setActive(true);\n    },\n\n\n    /**\n     * Listens to the \"focusout\" event to deactivate the window (if the\n     * currently focused widget is not a child of the window)\n     *\n     * @param e {qx.event.type.Focus} focus event\n     */\n    _onWindowFocusOut : function(e) {\n      // only needed for non-modal windows\n      if (this.getModal())\n      {\n        return;\n      }\n\n      // get the current focused widget and check if it is a child\n      var current = e.getRelatedTarget();\n      if (current != null && !qx.ui.core.Widget.contains(this, current))\n      {\n        this.setActive(false);\n      }\n    },\n\n\n    /**\n     * Maximizes the window or restores it if it is already\n     * maximized.\n     *\n     * @param e {qx.event.type.Pointer} double tap event\n     */\n    _onCaptionPointerDblTap : function(e)\n    {\n      if (this.getAllowMaximize()) {\n        this.isMaximized() ? this.restore() : this.maximize();\n      }\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENTS FOR CAPTIONBAR BUTTONS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Minimizes the window, removes all states from the minimize button and\n     * stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).\n     *\n     * @param e {qx.event.type.Pointer} pointer tap event\n     */\n    _onMinimizeButtonTap : function(e)\n    {\n      this.minimize();\n      this.getChildControl(\"minimize-button\").reset();\n    },\n\n\n    /**\n     * Restores the window, removes all states from the restore button and\n     * stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).\n     *\n     * @param e {qx.event.type.Pointer} pointer pointer event\n     */\n    _onRestoreButtonTap : function(e)\n    {\n      this.restore();\n      this.getChildControl(\"restore-button\").reset();\n    },\n\n\n    /**\n     * Maximizes the window, removes all states from the maximize button and\n     * stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).\n     *\n     * @param e {qx.event.type.Pointer} pointer pointer event\n     */\n    _onMaximizeButtonTap : function(e)\n    {\n      this.maximize();\n      this.getChildControl(\"maximize-button\").reset();\n    },\n\n\n    /**\n     * Closes the window, removes all states from the close button and\n     * stops the further propagation of the event (calling {@link qx.event.type.Event#stopPropagation}).\n     *\n     * @param e {qx.event.type.Pointer} pointer pointer event\n     */\n    _onCloseButtonTap : function(e)\n    {\n      this.close();\n      this.getChildControl(\"close-button\").reset();\n    }\n  },\n\n  destruct : function()\n  {\n    var id;\n    var parent;\n\n    // Remove ourselves from the focus handler\n    qx.ui.core.FocusHandler.getInstance().removeRoot(this);\n\n    // If we haven't been removed from our parent, clean it up too.\n    parent = this.getLayoutParent();\n    if (parent) {\n      // Remove the listener for resize, if there is one\n      id = this.__centeringResizeId;\n      id && parent.removeListenerById(id);\n\n      // Remove ourself from our parent\n      parent.remove(this);\n    }\n  }\n});\n"
  ]
}