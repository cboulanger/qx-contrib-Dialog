{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/decoration/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "ui",
    "decoration",
    "IDecorator",
    "type",
    "members",
    "__insets",
    "_getDefaultInsets",
    "Error",
    "_isInitialized",
    "_resetInsets",
    "getInsets",
    "destruct",
    "Abstract"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAwBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,2BAAhB,EACA;AACEC,YAAQN,GAAGO,IAAH,CAAQC,MADlB;AAEEC,eAAY,CAACT,GAAGU,EAAH,CAAMC,UAAN,CAAiBC,UAAlB,CAFd;AAGEC,UAAM,UAHR;;AAMEC,aACA;AACEC,gBAAW,IADb;;AAIE;;;;;;;;;;;;;AAaAC,yBAAoB,6BAAW;AAC7B,cAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACD,OAnBH;;AAsBE;;;;;AAKAC,sBAAgB,0BAAW;AACzB,cAAM,IAAID,KAAJ,CAAU,yBAAV,CAAN;AACD,OA7BH;;AAgCE;;;AAGAE,oBAAc,wBAAW;AACvB,aAAKJ,QAAL,GAAgB,IAAhB;AACD,OArCH;;AAwCE;AACAK,iBAAY,qBACZ;AACE,YAAI,CAAC,KAAKL,QAAV,EAAoB;AAClB,eAAKA,QAAL,GAAgB,KAAKC,iBAAL,EAAhB;AACD;;AAED,eAAO,KAAKD,QAAZ;AACD;AAhDH,KAPF;;AA2DE;;;;;;AAMCM,cAAW,oBAAW;AACpB,WAAKN,QAAL,GAAgB,IAAhB;AACD;AAnEJ,GADA,C;AAxBAf,KAAGU,EAAH,CAAMC,UAAN,CAAiBW,QAAjB,CAA0BnB,aAA1B,GAA0CA,aAA1C",
  "file": "Abstract.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n/**\n * This class acts as abstract class for all decorators. It offers the\n * properties for the insets handling. Each decorator has to define its own\n * default insets by implementing the template method\n * (http://en.wikipedia.org/wiki/Template_Method) <code>_getDefaultInsets</code>\n */\nqx.Class.define(\"qx.ui.decoration.Abstract\",\n{\n  extend: qx.core.Object,\n  implement : [qx.ui.decoration.IDecorator],\n  type: \"abstract\",\n\n\n  members :\n  {\n    __insets : null,\n\n\n    /**\n     * Abstract method. Should return a map containing the default insets of\n     * the decorator. This could look like this:\n     * <pre>\n     * return {\n     *   top : 0,\n     *   right : 0,\n     *   bottom : 0,\n     *   left : 0\n     * };\n     * </pre>\n     * @return {Map} Map containing the insets.\n     */\n    _getDefaultInsets : function() {\n      throw new Error(\"Abstract method called.\");\n    },\n\n\n    /**\n     * Abstract method. Should return an boolean value if the decorator is\n     * already initialized or not.\n     * @return {Boolean} True, if the decorator is initialized.\n     */\n    _isInitialized: function() {\n      throw new Error(\"Abstract method called.\");\n    },\n\n\n    /**\n     * Resets the insets.\n     */\n    _resetInsets: function() {\n      this.__insets = null;\n    },\n\n\n    // interface implementation\n    getInsets : function()\n    {\n      if (!this.__insets) {\n        this.__insets = this._getDefaultInsets();\n      }\n\n      return this.__insets;\n    }\n  },\n\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n   destruct : function() {\n     this.__insets = null;\n   }\n});\n"
  ]
}