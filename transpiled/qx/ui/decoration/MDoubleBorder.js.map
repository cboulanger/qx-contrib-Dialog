{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/decoration/MDoubleBorder.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "include",
    "ui",
    "decoration",
    "MSingleBorder",
    "MBackgroundImage",
    "construct",
    "_getDefaultInsetsForBorder",
    "__getDefaultInsetsForDoubleBorder",
    "_styleBorder",
    "__styleDoubleBorder",
    "properties",
    "innerWidthTop",
    "check",
    "init",
    "apply",
    "innerWidthRight",
    "innerWidthBottom",
    "innerWidthLeft",
    "innerWidth",
    "group",
    "mode",
    "innerColorTop",
    "nullable",
    "innerColorRight",
    "innerColorBottom",
    "innerColorLeft",
    "innerColor",
    "innerOpacity",
    "members",
    "styles",
    "propName",
    "core",
    "Environment",
    "get",
    "color",
    "Color",
    "theme",
    "manager",
    "getInstance",
    "top",
    "resolve",
    "getColorTop",
    "right",
    "getColorRight",
    "bottom",
    "getColorBottom",
    "left",
    "getColorLeft",
    "getInnerColorTop",
    "getInnerColorRight",
    "getInnerColorBottom",
    "getInnerColorLeft",
    "getInnerWidthTop",
    "getInnerWidthRight",
    "getInnerWidthBottom",
    "getInnerWidthLeft",
    "width",
    "getWidthTop",
    "getStyleTop",
    "getWidthRight",
    "getStyleRight",
    "getWidthBottom",
    "getStyleBottom",
    "getWidthLeft",
    "getStyleLeft",
    "getInnerOpacity",
    "__processInnerOpacity",
    "borderTop",
    "borderRight",
    "borderBottom",
    "borderLeft",
    "boxSizingKey",
    "bom",
    "Style",
    "getCssName",
    "borderRadiusKey",
    "shadowStyle",
    "push",
    "length",
    "join",
    "border",
    "log",
    "Logger",
    "warn",
    "edge",
    "rgb",
    "util",
    "ColorUtil",
    "stringToRgb",
    "rgbString",
    "rgbToRgbString",
    "_applyDoubleBorder",
    "_isInitialized",
    "Error",
    "MDoubleBorder"
  ],
  "mappings": "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",
  "file": "MDoubleBorder.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * Border implementation with two CSS borders. Both borders can be styled\n * independent of each other.\n * This mixin is usually used by {@link qx.ui.decoration.Decorator}.\n */\nqx.Mixin.define(\"qx.ui.decoration.MDoubleBorder\",\n{\n  include : [qx.ui.decoration.MSingleBorder, qx.ui.decoration.MBackgroundImage],\n\n  construct : function() {\n    // override the methods of single border and background image\n    this._getDefaultInsetsForBorder = this.__getDefaultInsetsForDoubleBorder;\n    this._styleBorder = this.__styleDoubleBorder;\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY: INNER WIDTH\n    ---------------------------------------------------------------------------\n    */\n\n    /** top width of border */\n    innerWidthTop :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_applyDoubleBorder\"\n    },\n\n    /** right width of border */\n    innerWidthRight :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_applyDoubleBorder\"\n    },\n\n    /** bottom width of border */\n    innerWidthBottom :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_applyDoubleBorder\"\n    },\n\n    /** left width of border */\n    innerWidthLeft :\n    {\n      check : \"Number\",\n      init : 0,\n      apply : \"_applyDoubleBorder\"\n    },\n\n    /** Property group to set the inner border width of all sides */\n    innerWidth :\n    {\n      group : [ \"innerWidthTop\", \"innerWidthRight\", \"innerWidthBottom\", \"innerWidthLeft\" ],\n      mode : \"shorthand\"\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY: INNER COLOR\n    ---------------------------------------------------------------------------\n    */\n\n    /** top inner color of border */\n    innerColorTop :\n    {\n      nullable : true,\n      check : \"Color\",\n      apply : \"_applyDoubleBorder\"\n    },\n\n    /** right inner color of border */\n    innerColorRight :\n    {\n      nullable : true,\n      check : \"Color\",\n      apply : \"_applyDoubleBorder\"\n    },\n\n    /** bottom inner color of border */\n    innerColorBottom :\n    {\n      nullable : true,\n      check : \"Color\",\n      apply : \"_applyDoubleBorder\"\n    },\n\n    /** left inner color of border */\n    innerColorLeft :\n    {\n      nullable : true,\n      check : \"Color\",\n      apply : \"_applyDoubleBorder\"\n    },\n\n    /**\n     * Property group for the inner color properties.\n     */\n    innerColor :\n    {\n      group : [ \"innerColorTop\", \"innerColorRight\", \"innerColorBottom\", \"innerColorLeft\" ],\n      mode : \"shorthand\"\n    },\n\n    /**\n     * The opacity of the inner border.\n     */\n    innerOpacity :\n    {\n      check : \"Number\",\n      init : 1,\n      apply : \"_applyDoubleBorder\"\n    }\n  },\n\n\n  members :\n  {\n\n    /**\n     * Takes a styles map and adds the outer border styles in place\n     * to the given map. This is the needed behavior for\n     * {@link qx.ui.decoration.Decorator}.\n     *\n     * @param styles {Map} A map to add the styles.\n     */\n    __styleDoubleBorder : function(styles)\n    {\n      var propName = qx.core.Environment.get(\"css.boxshadow\");\n\n      var color,\n          innerColor,\n          innerWidth;\n      if (qx.core.Environment.get(\"qx.theme\"))\n      {\n        var Color = qx.theme.manager.Color.getInstance();\n\n        color = {\n          top : Color.resolve(this.getColorTop()),\n          right : Color.resolve(this.getColorRight()),\n          bottom : Color.resolve(this.getColorBottom()),\n          left : Color.resolve(this.getColorLeft())\n        };\n\n        innerColor = {\n          top : Color.resolve(this.getInnerColorTop()),\n          right : Color.resolve(this.getInnerColorRight()),\n          bottom : Color.resolve(this.getInnerColorBottom()),\n          left : Color.resolve(this.getInnerColorLeft())\n        };\n      }\n      else\n      {\n        color = {\n          top : this.getColorTop(),\n          right : this.getColorRight(),\n          bottom : this.getColorBottom(),\n          left : this.getColorLeft()\n        };\n\n        innerColor = {\n          top : this.getInnerColorTop(),\n          right : this.getInnerColorRight(),\n          bottom : this.getInnerColorBottom(),\n          left : this.getInnerColorLeft()\n        };\n      }\n\n      innerWidth = {\n        top : this.getInnerWidthTop(),\n        right : this.getInnerWidthRight(),\n        bottom : this.getInnerWidthBottom(),\n        left : this.getInnerWidthLeft()\n      };\n\n      // Add outer borders\n      var width = this.getWidthTop();\n      if (width > 0) {\n        styles[\"border-top\"] = width + \"px \" + this.getStyleTop() + \" \" + color.top;\n      }\n\n      width = this.getWidthRight();\n      if (width > 0) {\n        styles[\"border-right\"] = width + \"px \" + this.getStyleRight() + \" \" + color.right;\n      }\n\n      width = this.getWidthBottom();\n      if (width > 0) {\n        styles[\"border-bottom\"] = width + \"px \" + this.getStyleBottom() + \" \" + color.bottom;\n      }\n\n      width = this.getWidthLeft();\n      if (width > 0) {\n        styles[\"border-left\"] = width + \"px \" + this.getStyleLeft() + \" \" + color.left;\n      }\n\n      var innerOpacity = this.getInnerOpacity();\n\n      if (innerOpacity < 1) {\n        this.__processInnerOpacity(innerColor, innerOpacity);\n      }\n\n\n      // inner border\n      if (\n        innerWidth.top > 0 ||\n        innerWidth.right > 0 ||\n        innerWidth.bottom > 0 ||\n        innerWidth.left > 0\n      ) {\n\n        var borderTop = (innerWidth.top || 0) + \"px solid \" + innerColor.top;\n        var borderRight = (innerWidth.right || 0) + \"px solid \" + innerColor.right;\n        var borderBottom = (innerWidth.bottom || 0) + \"px solid \" + innerColor.bottom;\n        var borderLeft = (innerWidth.left || 0) + \"px solid \" + innerColor.left;\n\n        styles[\":before\"] = {\n          \"width\" : \"100%\",\n          \"height\" : \"100%\",\n          \"position\" : \"absolute\",\n          \"content\" : '\"\"',\n          \"border-top\" : borderTop,\n          \"border-right\" : borderRight,\n          \"border-bottom\" : borderBottom,\n          \"border-left\" : borderLeft,\n          \"left\": 0,\n          \"top\" : 0\n        };\n        var boxSizingKey = qx.bom.Style.getCssName(qx.core.Environment.get(\"css.boxsizing\"));\n        styles[\":before\"][boxSizingKey] = \"border-box\";\n\n        // make sure to apply the border radius as well\n        var borderRadiusKey = qx.core.Environment.get(\"css.borderradius\");\n        if (borderRadiusKey) {\n          borderRadiusKey = qx.bom.Style.getCssName(borderRadiusKey);\n          styles[\":before\"][borderRadiusKey] = \"inherit\";\n        }\n\n        // Add inner borders as shadows\n        var shadowStyle = [];\n\n        if (innerColor.top && innerWidth.top &&\n            innerColor.top == innerColor.bottom &&\n            innerColor.top == innerColor.right &&\n            innerColor.top == innerColor.left &&\n            innerWidth.top == innerWidth.bottom &&\n            innerWidth.top == innerWidth.right &&\n            innerWidth.top == innerWidth.left)\n        {\n          shadowStyle.push(\"inset 0 0 0 \" + innerWidth.top + \"px \" + innerColor.top);\n        }\n        else {\n          if (innerColor.top) {\n            shadowStyle.push(\"inset 0 \" + (innerWidth.top || 0) + \"px \" + innerColor.top);\n          }\n          if (innerColor.right) {\n            shadowStyle.push(\"inset -\" + (innerWidth.right || 0) + \"px 0 \" + innerColor.right);\n          }\n          if (innerColor.bottom) {\n            shadowStyle.push(\"inset 0 -\" + (innerWidth.bottom || 0) + \"px \" + innerColor.bottom);\n          }\n          if (innerColor.left) {\n            shadowStyle.push(\"inset \" + (innerWidth.left || 0) + \"px 0 \" + innerColor.left);\n          }\n        }\n\n        // apply or append the box shadow styles\n        if (shadowStyle.length > 0 && propName) {\n          propName = qx.bom.Style.getCssName(propName);\n          if (!styles[propName]) {\n            styles[propName] = shadowStyle.join(\",\");\n          } else {\n            styles[propName] += \",\" + shadowStyle.join(\",\");\n          }\n        }\n      } else {\n        styles[\":before\"] = {\n          border: 0\n        };\n      }\n    },\n\n\n    /**\n     * Converts the inner border's colors to rgba.\n     *\n     * @param innerColor {Map} map of top, right, bottom and left colors\n     * @param innerOpacity {Number} alpha value\n     */\n    __processInnerOpacity : function(innerColor, innerOpacity)\n    {\n      if (!qx.core.Environment.get(\"css.rgba\")) {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.log.Logger.warn(\"innerOpacity is configured but the browser doesn't support RGBA colors.\");\n        }\n        return;\n      }\n\n      for (var edge in innerColor) {\n        var rgb = qx.util.ColorUtil.stringToRgb(innerColor[edge]);\n        rgb.push(innerOpacity);\n        var rgbString = qx.util.ColorUtil.rgbToRgbString(rgb);\n        innerColor[edge] = rgbString;\n      }\n    },\n\n\n    _applyDoubleBorder : function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (this._isInitialized()) {\n          throw new Error(\"This decorator is already in-use. Modification is not possible anymore!\");\n        }\n      }\n    },\n\n\n   /**\n    * Implementation of the interface for the double border.\n    *\n    * @return {Map} A map containing the default insets.\n    *   (top, right, bottom, left)\n    */\n    __getDefaultInsetsForDoubleBorder : function()\n    {\n      return {\n        top : this.getWidthTop() + this.getInnerWidthTop(),\n        right : this.getWidthRight() + this.getInnerWidthRight(),\n        bottom : this.getWidthBottom() + this.getInnerWidthBottom(),\n        left : this.getWidthLeft() + this.getInnerWidthLeft()\n      };\n    }\n  }\n});\n"
  ]
}