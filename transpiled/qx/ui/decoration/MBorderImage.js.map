{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/decoration/MBorderImage.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "borderImage",
    "check",
    "nullable",
    "apply",
    "sliceTop",
    "init",
    "sliceRight",
    "sliceBottom",
    "sliceLeft",
    "slice",
    "group",
    "mode",
    "repeatX",
    "repeatY",
    "repeat",
    "fill",
    "borderImageMode",
    "members",
    "_styleBorderImage",
    "styles",
    "getBorderImage",
    "resolvedImage",
    "util",
    "AliasManager",
    "getInstance",
    "resolve",
    "source",
    "ResourceManager",
    "toUri",
    "computedSlices",
    "_getDefaultInsetsForBorderImage",
    "top",
    "right",
    "bottom",
    "left",
    "getRepeatX",
    "getRepeatY",
    "join",
    "getFill",
    "core",
    "Environment",
    "get",
    "styleName",
    "bom",
    "Style",
    "getPropertyName",
    "cssName",
    "getCssName",
    "__getSlices",
    "getSliceTop",
    "getSliceRight",
    "getSliceBottom",
    "getSliceLeft",
    "_applyBorderImage",
    "_isInitialized",
    "Error",
    "baseImage",
    "getBorderImageMode",
    "topSlice",
    "rightSlice",
    "bottomSlice",
    "leftSlice",
    "split",
    "exec",
    "prefix",
    "ext",
    "getImageHeight",
    "getImageWidth",
    "ui",
    "decoration",
    "MBorderImage"
  ],
  "mappings": "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",
  "file": "MBorderImage.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Decorator which uses the CSS3 border image properties.\n */\nqx.Mixin.define(\"qx.ui.decoration.MBorderImage\", {\n\n  properties :\n  {\n    /**\n     * Base image URL.\n     */\n    borderImage :\n    {\n      check : \"String\",\n      nullable : true,\n      apply : \"_applyBorderImage\"\n    },\n\n\n    /**\n     * The top slice line of the base image. The slice properties divide the\n     * image into nine regions, which define the corner, edge and the center\n     * images.\n     */\n    sliceTop :\n    {\n      check : \"Integer\",\n      nullable : true,\n      init : null,\n      apply : \"_applyBorderImage\"\n    },\n\n    /**\n     * The right slice line of the base image. The slice properties divide the\n     * image into nine regions, which define the corner, edge and the center\n     * images.\n     */\n    sliceRight :\n    {\n      check : \"Integer\",\n      nullable : true,\n      init : null,\n      apply : \"_applyBorderImage\"\n    },\n\n\n    /**\n     * The bottom slice line of the base image. The slice properties divide the\n     * image into nine regions, which define the corner, edge and the center\n     * images.\n     */\n    sliceBottom :\n    {\n      check : \"Integer\",\n      nullable : true,\n      init : null,\n      apply : \"_applyBorderImage\"\n    },\n\n\n    /**\n     * The left slice line of the base image. The slice properties divide the\n     * image into nine regions, which define the corner, edge and the center\n     * images.\n     */\n    sliceLeft :\n    {\n      check : \"Integer\",\n      nullable : true,\n      init : null,\n      apply : \"_applyBorderImage\"\n    },\n\n\n    /**\n     * The slice properties divide the image into nine regions, which define the\n     * corner, edge and the center images.\n     */\n    slice :\n    {\n      group : [ \"sliceTop\", \"sliceRight\", \"sliceBottom\", \"sliceLeft\" ],\n      mode : \"shorthand\"\n    },\n\n\n    /**\n     * This property specifies how the images for the sides and the middle part\n     * of the border image are scaled and tiled horizontally.\n     *\n     * Values have the following meanings:\n     * <ul>\n     *   <li><strong>stretch</strong>: The image is stretched to fill the area.</li>\n     *   <li><strong>repeat</strong>: The image is tiled (repeated) to fill the area.</li>\n     *   <li><strong>round</strong>: The image is tiled (repeated) to fill the area. If it does not\n     *    fill the area with a whole number of tiles, the image is rescaled so\n     *    that it does.</li>\n     * </ul>\n     */\n    repeatX :\n    {\n      check : [\"stretch\", \"repeat\", \"round\"],\n      init : \"stretch\",\n      apply : \"_applyBorderImage\"\n    },\n\n\n    /**\n     * This property specifies how the images for the sides and the middle part\n     * of the border image are scaled and tiled vertically.\n     *\n     * Values have the following meanings:\n     * <ul>\n     *   <li><strong>stretch</strong>: The image is stretched to fill the area.</li>\n     *   <li><strong>repeat</strong>: The image is tiled (repeated) to fill the area.</li>\n     *   <li><strong>round</strong>: The image is tiled (repeated) to fill the area. If it does not\n     *    fill the area with a whole number of tiles, the image is rescaled so\n     *    that it does.</li>\n     * </ul>\n     */\n    repeatY :\n    {\n      check : [\"stretch\", \"repeat\", \"round\"],\n      init : \"stretch\",\n      apply : \"_applyBorderImage\"\n    },\n\n\n    /**\n     * This property specifies how the images for the sides and the middle part\n     * of the border image are scaled and tiled.\n     */\n    repeat :\n    {\n      group : [\"repeatX\", \"repeatY\"],\n      mode : \"shorthand\"\n    },\n\n\n    /**\n     * If set to <code>false</code>, the center image will be omitted and only\n     * the border will be drawn.\n     */\n    fill :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyBorderImage\"\n    },\n\n\n    /**\n     * Configures the border image mode. Supported values:\n     * <ul>\n     *   <li>horizontal: left and right border images</li>\n     *   <li>vertical: top and bottom border images</li>\n     *   <li>grid: border images for all edges</li>\n     * </ul>\n     */\n    borderImageMode :\n    {\n      check : [\"horizontal\", \"vertical\", \"grid\"],\n      init : \"grid\"\n    }\n  },\n\n  members :\n  {\n    /**\n     * Adds the border-image styles to the given map\n     * @param styles {Map} CSS style map\n     */\n    _styleBorderImage : function(styles)\n    {\n      if (!this.getBorderImage()) {\n        return;\n      }\n      var resolvedImage = qx.util.AliasManager.getInstance().resolve(this.getBorderImage());\n      var source = qx.util.ResourceManager.getInstance().toUri(resolvedImage);\n\n      var computedSlices = this._getDefaultInsetsForBorderImage();\n\n      var slice = [\n        computedSlices.top,\n        computedSlices.right,\n        computedSlices.bottom,\n        computedSlices.left\n      ];\n\n      var repeat = [\n        this.getRepeatX(),\n        this.getRepeatY()\n      ].join(\" \");\n\n      var fill = this.getFill() &&\n        qx.core.Environment.get(\"css.borderimage.standardsyntax\") ? \" fill\" : \"\";\n\n      var styleName = qx.bom.Style.getPropertyName(\"borderImage\");\n      if (styleName) {\n        var cssName = qx.bom.Style.getCssName(styleName);\n        styles[cssName] = 'url(\"' + source + '\") ' + slice.join(\" \") + fill + \" \" + repeat;\n      }\n      // Apply border styles even if we couldn't determine the borderImage property name\n      // (e.g. because the browser doesn't support it). This is needed to keep\n      // the layout intact.\n      styles[\"border-style\"] = \"solid\";\n      styles[\"border-color\"] = \"transparent\";\n      styles[\"border-width\"] = slice.join(\"px \") + \"px\";\n    },\n\n\n    /**\n     * Computes the inset values based on the border image slices (defined in the\n     * decoration theme or computed from the fallback image sizes).\n     *\n     * @return {Map} Map with the top, right, bottom and left insets\n     */\n    _getDefaultInsetsForBorderImage : function()\n    {\n      if (!this.getBorderImage()) {\n        return {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        };\n      }\n\n      var resolvedImage = qx.util.AliasManager.getInstance().resolve(this.getBorderImage());\n      var computedSlices = this.__getSlices(resolvedImage);\n\n      return {\n        top : this.getSliceTop() || computedSlices[0],\n        right: this.getSliceRight() || computedSlices[1],\n        bottom: this.getSliceBottom() || computedSlices[2],\n        left: this.getSliceLeft() || computedSlices[3]\n      };\n    },\n\n\n    _applyBorderImage : function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (this._isInitialized()) {\n          throw new Error(\"This decorator is already in-use. Modification is not possible anymore!\");\n        }\n      }\n    },\n\n\n    /**\n     * Gets the slice sizes from the fallback border images.\n     *\n     * @param baseImage {String} Resource Id of the base border image\n     * @return {Integer[]} Array with the top, right, bottom and left slice widths\n     */\n    __getSlices : function(baseImage)\n    {\n      var mode = this.getBorderImageMode();\n      var topSlice = 0;\n      var rightSlice = 0;\n      var bottomSlice = 0;\n      var leftSlice = 0;\n\n      var split = /(.*)(\\.[a-z]+)$/.exec(baseImage);\n      var prefix = split[1];\n      var ext = split[2];\n\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n\n      if (mode == \"grid\" || mode == \"vertical\") {\n        topSlice = ResourceManager.getImageHeight(prefix + \"-t\" + ext);\n        bottomSlice = ResourceManager.getImageHeight(prefix + \"-b\" + ext);\n      }\n\n      if (mode == \"grid\" || mode == \"horizontal\") {\n        rightSlice = ResourceManager.getImageWidth(prefix + \"-r\" + ext);\n        leftSlice = ResourceManager.getImageWidth(prefix + \"-l\" + ext);\n      }\n\n      return [topSlice, rightSlice, bottomSlice, leftSlice];\n    }\n  }\n});\n"
  ]
}