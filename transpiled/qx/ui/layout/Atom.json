{
  "className": "qx.ui.layout.Atom",
  "packageName": "qx.ui.layout",
  "name": "Atom",
  "superClass": "qx.ui.layout.Abstract",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 45,
        "column": 0
      },
      "end": {
        "line": 367,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "A atom layout. Used to place an image and label in relation\nto each other. Useful to create buttons, list items, etc.\n\n*Features*\n\n* Gap between icon and text (using {@link #gap})\n* Vertical and horizontal mode (using {@link #iconPosition})\n* Sorting options to place first child on top/left or bottom/right (using {@link #iconPosition})\n* Automatically middles/centers content to the available space\n* Auto-sizing\n* Supports more than two children (will be processed the same way like the previous ones)\n\n*Item Properties*\n\nNone\n\n*Notes*\n\n* Does not support margins and alignment of {@link qx.ui.core.LayoutItem}.\n\n*Alternative Names*\n\nNone"
        }
      ]
    }
  },
  "type": "class",
  "properties": {
    "gap": {
      "location": {
        "start": {
          "line": 61,
          "column": 4
        },
        "end": {
          "line": 66,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The gap between the icon and the text"
          }
        ]
      },
      "name": "gap",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": 4,
      "check": "Integer",
      "defaultValue": 4
    },
    "iconPosition": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The position of the icon in relation to the text"
          }
        ]
      },
      "name": "iconPosition",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": "left",
      "possibleValues": [
        "left",
        "top",
        "right",
        "bottom",
        "top-left",
        "bottom-left",
        "top-right",
        "bottom-right"
      ],
      "defaultValue": "left"
    },
    "center": {
      "location": {
        "start": {
          "line": 87,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the content should be rendered centrally when to much space\nis available. Enabling this property centers in both axis. The behavior\nwhen disabled of the centering depends on the {@link #iconPosition} property.\nIf the icon position is <code>left</code> or <code>right</code>, the X axis\nis not centered, only the Y axis. If the icon position is <code>top</code>\nor <code>bottom</code>, the Y axis is not centered. In case of e.g. an\nicon position of <code>top-left</code> no axis is centered."
          }
        ]
      },
      "name": "center",
      "propertyType": "new",
      "apply": "_applyLayoutChange",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "verifyLayoutProperty": {
      "location": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nLAYOUT INTERFACE\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {Object} The affected layout item",
            "paramName": "item",
            "description": " The affected layout item",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "name {Object} Name of the layout property",
            "paramName": "name",
            "description": " Name of the layout property",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "value {Object} Value of the layout property",
            "paramName": "value",
            "description": " Value of the layout property",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 267,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "availWidth {Integer} Final width available for the content (in pixel)",
            "paramName": "availWidth",
            "description": " Final width available for the content (in pixel)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "availHeight {Integer} Final height available for the content (in pixel)",
            "paramName": "availHeight",
            "description": " Final height available for the content (in pixel)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "padding {Map} Map containing the padding values. Keys:\n<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "paramName": "padding",
            "description": " Map containing the padding values. Keys:\n<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 365,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The size hint.",
            "type": "Map",
            "description": " The size hint."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "reset"
    },
    "getGap": {
      "type": "function",
      "name": "getGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>gap</code>.\n\nFor further details take a look at the property definition: {@link #gap}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for gap"
          }
        ]
      }
    },
    "setGap": {
      "type": "function",
      "name": "setGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>gap</code>.\n\nFor further details take a look at the property definition: {@link #gap}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for gap"
          }
        ]
      }
    },
    "resetGap": {
      "type": "function",
      "name": "resetGap",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>gap</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #gap}."
          }
        ]
      }
    },
    "getIconPosition": {
      "type": "function",
      "name": "getIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>iconPosition</code>.\n\nFor further details take a look at the property definition: {@link #iconPosition}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for iconPosition"
          }
        ]
      }
    },
    "setIconPosition": {
      "type": "function",
      "name": "setIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>iconPosition</code>.\n\nFor further details take a look at the property definition: {@link #iconPosition}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for iconPosition"
          }
        ]
      }
    },
    "resetIconPosition": {
      "type": "function",
      "name": "resetIconPosition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>iconPosition</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #iconPosition}."
          }
        ]
      }
    },
    "getCenter": {
      "type": "function",
      "name": "getCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>center</code>.\n\nFor further details take a look at the property definition: {@link #center}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for center"
          }
        ]
      }
    },
    "isCenter": {
      "type": "function",
      "name": "isCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>center</code>.\n\nFor further details take a look at the property definition: {@link #center}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for center"
          }
        ]
      }
    },
    "setCenter": {
      "type": "function",
      "name": "setCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>center</code>.\n\nFor further details take a look at the property definition: {@link #center}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for center"
          }
        ]
      }
    },
    "resetCenter": {
      "type": "function",
      "name": "resetCenter",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>center</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #center}."
          }
        ]
      }
    }
  },
  "descendants": []
}