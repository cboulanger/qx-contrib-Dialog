{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/layout/Flow.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacingX",
    "spacingY",
    "alignX",
    "setSpacingX",
    "setSpacingY",
    "setAlignX",
    "properties",
    "check",
    "init",
    "apply",
    "alignY",
    "reversed",
    "members",
    "verifyLayoutProperty",
    "item",
    "name",
    "value",
    "validProperties",
    "assertInArray",
    "connectToWidget",
    "widget",
    "setAllowShrinkY",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "children",
    "_getLayoutChildren",
    "getReversed",
    "concat",
    "reverse",
    "lineCalculator",
    "LineSizeIterator",
    "getSpacingX",
    "lineTop",
    "top",
    "hasMoreLines",
    "line",
    "computeNextLine",
    "__renderLine",
    "height",
    "getSpacingY",
    "util",
    "Util",
    "left",
    "getAlignX",
    "width",
    "Math",
    "round",
    "i",
    "length",
    "child",
    "size",
    "getSizeHint",
    "marginTop",
    "getMarginTop",
    "marginBottom",
    "getMarginBottom",
    "computeVerticalAlignOffset",
    "getAlignY",
    "layoutProps",
    "getLayoutProperties",
    "stretch",
    "gapsBefore",
    "_computeSizeHint",
    "__computeSize",
    "Infinity",
    "hasHeightForWidth",
    "getHeightForWidth",
    "getLastLineChildren",
    "lineData",
    "lineCount",
    "max",
    "Flow"
  ],
  "mappings": "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",
  "file": "Flow.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n   http://qooxdoo.org\n\n   Copyright:\n     2008 Dihedrals.com, http://www.dihedrals.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Chris Banford (zermattchris)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A basic layout, which supports positioning of child widgets in a 'flowing'\n * manner, starting at the container's top/left position, placing children left to right\n * (like a HBox) until the there's no remaining room for the next child. When\n * out of room on the current line of elements, a new line is started, cleared\n * below the tallest child of the preceding line -- a bit like using 'float'\n * in CSS, except that a new line wraps all the way back to the left.\n *\n * *Features*\n *\n * <ul>\n * <li> Reversing children order </li>\n * <li> Manual line breaks </li>\n * <li> Horizontal alignment of lines </li>\n * <li> Vertical alignment of individual widgets within a line </li>\n * <li> Margins with horizontal margin collapsing </li>\n * <li> Horizontal and vertical spacing </li>\n * <li> Height for width calculations </li>\n * <li> Auto-sizing </li>\n * </ul>\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>lineBreak</strong> <em>(Boolean)</em>: If set to <code>true</code>\n *   a forced line break will happen after this child widget.\n * </li>\n * <li><strong>stretch</strong> <em>(Boolean)</em>: If set to <code>true</code>\n *   the widget will be stretched to the remaining line width. This requires\n *   lineBreak to be true.\n * </li>\n\n * </ul>\n *\n * *Example*\n *\n * Here is a little example of how to use the Flow layout.\n *\n * <pre class=\"javascript\">\n *  var flowlayout = new qx.ui.layout.Flow();\n *\n *  flowlayout.setAlignX( \"center\" );  // Align children to the X axis of the container (left|center|right)\n *\n *  var container = new qx.ui.container.Composite(flowlayout);\n *  this.getRoot().add(container, {edge: 0});\n *\n *  var button1 = new qx.ui.form.Button(\"1. First Button\", \"flowlayout/test.png\");\n *  container.add(button1);\n *\n *  var button2 = new qx.ui.form.Button(\"2. Second longer Button...\", \"flowlayout/test.png\");\n *  // Have this child create a break in the current Line (next child will always start a new Line)\n *  container.add(button2, {lineBreak: true});\n *\n *  var button3 = new qx.ui.form.Button(\"3rd really, really, really long Button\", \"flowlayout/test.png\");\n *  button3.setHeight(100);  // tall button\n *  container.add(button3);\n *\n *  var button4 = new qx.ui.form.Button(\"Number 4\", \"flowlayout/test.png\");\n *  button4.setAlignY(\"bottom\");\n *  container.add(button4);\n *\n *  var button5 = new qx.ui.form.Button(\"20px Margins around the great big 5th button!\");\n *  button5.setHeight(100);  // tall button\n *  button5.setMargin(20);\n *  container.add(button5, {lineBreak: true});    // Line break after this button.\n *\n *  var button6 = new qx.ui.form.Button(\"Number 6\", \"flowlayout/test.png\");\n *  button6.setAlignY(\"middle\");  // Align this child to the vertical center of this line.\n *  container.add(button6);\n *\n *  var button7 = new qx.ui.form.Button(\"7th a wide, short button\", \"flowlayout/test.png\");\n *  button7.setMaxHeight(20);  // short button\n *  container.add(button7);\n * </pre>\n *\n * *External Documentation*\n *\n * <a href='http://manual.qooxdoo.org/${qxversion}/pages/layout/flow.html'>\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\n */\nqx.Class.define(\"qx.ui.layout.Flow\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacingX {Integer?0} The spacing between child widgets {@link #spacingX}.\n   * @param spacingY {Integer?0} The spacing between the lines {@link #spacingY}.\n   * @param alignX {String?\"left\"} Horizontal alignment of the whole children\n   *     block {@link #alignX}.\n   */\n  construct : function(spacingX, spacingY, alignX)\n  {\n    this.base(arguments);\n\n    if (spacingX) {\n      this.setSpacingX(spacingX);\n    }\n\n    if (spacingY) {\n      this.setSpacingY(spacingY);\n    }\n\n    if (alignX) {\n      this.setAlignX(alignX);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Horizontal alignment of the whole children block. The horizontal\n     * alignment of the child is completely ignored in HBoxes (\n     * {@link qx.ui.core.LayoutItem#alignX}).\n     */\n    alignX :\n    {\n      check : [ \"left\", \"center\", \"right\" ],\n      init : \"left\",\n      apply : \"_applyLayoutChange\"\n    },\n\n    /**\n     * Vertical alignment of each child. Can be overridden through\n     * {@link qx.ui.core.LayoutItem#alignY}.\n     */\n    alignY :\n    {\n      check : [ \"top\", \"middle\", \"bottom\"],\n      init : \"top\",\n      apply : \"_applyLayoutChange\"\n    },\n\n    /** Horizontal spacing between two children */\n    spacingX :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    },\n\n    /**\n     * The vertical spacing between the lines.\n     */\n    spacingY :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    },\n\n    /** Whether the actual children list should be laid out in reversed order. */\n    reversed :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyLayoutChange\"\n    }\n\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value) {\n        var validProperties = [\"lineBreak\", \"stretch\"];\n        this.assertInArray(name, validProperties, \"The property '\"+name+\"' is not supported by the flow layout!\" );\n      },\n\n      \"false\" : null\n    }),\n\n\n    // overridden\n    connectToWidget : function(widget)\n    {\n      this.base(arguments, widget);\n\n      // Necessary to be able to calculate the lines for the flow layout.\n      // Otherwise the layout calculates the needed width and height by using\n      // only one line of items which is leading to the wrong height. This\n      // wrong height does e.g. suppress scrolling since the scroll pane does\n      // not know about the correct needed height.\n      if (widget) {\n        widget.setAllowShrinkY(false);\n      }\n    },\n\n\n    /**\n     * The FlowLayout tries to add as many Children as possible to the current 'Line'\n     * and when it sees that the next Child won't fit, it starts on a new Line, continuing\n     * until all the Children have been added.\n     * To enable alignX \"left\", \"center\", \"right\" renderLayout has to calculate the positions\n     * of all a Line's children before it draws them.\n     *\n     * @param availWidth {Integer} Final width available for the content (in pixel)\n     * @param availHeight {Integer} Final height available for the content (in pixel)\n     * @param padding {Map} Map containing the padding values. Keys:\n     * <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>\n     */\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      var children = this._getLayoutChildren();\n\n      if (this.getReversed()) {\n        children = children.concat().reverse();\n      }\n\n      var lineCalculator = new qx.ui.layout.LineSizeIterator(\n        children,\n        this.getSpacingX()\n      );\n\n      var lineTop = padding.top;\n      while (lineCalculator.hasMoreLines())\n      {\n        var line = lineCalculator.computeNextLine(availWidth);\n        this.__renderLine(line, lineTop, availWidth, padding);\n        lineTop += line.height + this.getSpacingY();\n      }\n    },\n\n\n    /**\n     * Render a line in the flow layout\n     *\n     * @param line {Map} A line configuration as returned by\n     *    {@link LineSizeIterator#computeNextLine}.\n     * @param lineTop {Integer} The line's top position\n     * @param availWidth {Integer} The available line width\n     * @param padding {Map} Map containing the padding values. Keys:\n     * <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>\n     */\n    __renderLine : function(line, lineTop, availWidth, padding)\n    {\n      var util = qx.ui.layout.Util;\n\n      var left = padding.left;\n      if (this.getAlignX() != \"left\") {\n        left = padding.left + availWidth - line.width;\n        if (this.getAlignX() == \"center\") {\n          left = padding.left + Math.round((availWidth - line.width) / 2);\n        }\n      }\n\n      for (var i=0; i<line.children.length; i++)\n      {\n        var child = line.children[i];\n        var size = child.getSizeHint();\n        var marginTop = child.getMarginTop();\n        var marginBottom = child.getMarginBottom();\n\n        var top = util.computeVerticalAlignOffset(\n          child.getAlignY() || this.getAlignY(),\n          marginTop + size.height + marginBottom,\n          line.height,\n          marginTop, marginBottom\n        );\n\n        var layoutProps = child.getLayoutProperties();\n        if (layoutProps.stretch && layoutProps.stretch) {\n          size.width += availWidth - line.width;\n        }\n\n        child.renderLayout(\n          left + line.gapsBefore[i],\n          lineTop + top,\n          size.width,\n          size.height\n        );\n\n        left += line.gapsBefore[i] + size.width;\n      }\n    },\n\n\n    // overridden\n    _computeSizeHint : function() {\n      return this.__computeSize(Infinity);\n    },\n\n\n    // overridden\n    hasHeightForWidth : function() {\n      return true;\n    },\n\n\n    // overridden\n    getHeightForWidth : function(width) {\n      return this.__computeSize(width).height;\n    },\n\n\n    /**\n     * Returns the list of children fitting in the last row of the given width.\n     * @param width {Number} The width to use for the calculation.\n     * @return {Array} List of children in the first row.\n     */\n    getLastLineChildren : function(width) {\n      var lineCalculator = new qx.ui.layout.LineSizeIterator(\n        this._getLayoutChildren(),\n        this.getSpacingX()\n      );\n\n      var lineData = [];\n      while (lineCalculator.hasMoreLines()) {\n        lineData = lineCalculator.computeNextLine(width).children;\n      }\n\n      return lineData;\n    },\n\n\n    /**\n     * Compute the preferred size optionally constrained by the available width\n     *\n     * @param availWidth {Integer} The available width\n     * @return {Map} Map containing the preferred height and width of the layout\n     */\n    __computeSize : function(availWidth)\n    {\n      var lineCalculator = new qx.ui.layout.LineSizeIterator(\n        this._getLayoutChildren(),\n        this.getSpacingX()\n      );\n\n      var height = 0;\n      var width = 0;\n      var lineCount = 0;\n\n      while (lineCalculator.hasMoreLines())\n      {\n        var line = lineCalculator.computeNextLine(availWidth);\n        lineCount += 1;\n        width = Math.max(width, line.width);\n        height += line.height;\n      }\n\n      return {\n        width : width,\n        height : height + this.getSpacingY() * (lineCount-1)\n      };\n    }\n  }\n});\n"
  ]
}