{
  "className": "qx.ui.layout.Canvas",
  "packageName": "qx.ui.layout",
  "name": "Canvas",
  "superClass": "qx.ui.layout.Abstract",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 83,
        "column": 0
      },
      "end": {
        "line": 398,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The Canvas is an extended Basic layout.\n\nIt is possible to position a widget relative to the right or bottom edge of\nthe available space. It further supports stretching between left and right\nor top and bottom e.g. <code>left=20</code> and <code>right=20</code> would\nkeep a margin of 20 pixels to both edges. The Canvas layout has support for\npercent dimensions and locations.\n\n*Features*\n\n* Pixel dimensions and locations\n* Percent dimensions and locations\n* Stretching between left+right and top+bottom\n* Minimum and maximum dimensions\n* Children are automatically shrunk to their minimum dimensions if not enough space is available\n* Auto sizing (ignoring percent values)\n* Margins (also negative ones)\n\n*Item Properties*\n\n<ul>\n<li><strong>left</strong> <em>(Integer|String)</em>: The left coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>top</strong> <em>(Integer|String)</em>: The top coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>right</strong> <em>(Integer|String)</em>: The right coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>bottom</strong> <em>(Integer|String)</em>: The bottom coordinate in pixel or as a percent string e.g. <code>20</code> or <code>30%</code>.</li>\n<li><strong>edge</strong> <em>(Integer|String)</em>: The coordinate in pixels or as a percent string to be used for all four edges.\n<li><strong>width</strong> <em>(String)</em>: A percent width e.g. <code>40%</code>.</li>\n<li><strong>height</strong> <em>(String)</em>: A percent height e.g. <code>60%</code>.</li>\n</ul>\n\n*Notes*\n\n<ul>\n<li>Stretching (<code>left</code>-><code>right</code> or <code>top</code>-><code>bottom</code>)\nhas a higher priority than the preferred dimensions</li>\n<li>Stretching has a lower priority than the min/max dimensions.</li>\n<li>Percent values have no influence on the size hint of the layout.</li>\n</ul>\n\n*Example*\n\nHere is a little example of how to use the canvas layout.\n\n<pre class=\"javascript\">\nvar container = new qx.ui.container.Composite(new qx.ui.layout.Canvas());\n\n// simple positioning\ncontainer.add(new qx.ui.core.Widget(), {top: 10, left: 10});\n\n// stretch vertically with 10 pixel distance to the parent's top\n// and bottom border\ncontainer.add(new qx.ui.core.Widget(), {top: 10, left: 10, bottom: 10});\n\n// percent positioning and size\ncontainer.add(new qx.ui.core.Widget(), {left: \"50%\", top: \"50%\", width: \"25%\", height: \"40%\"});\n</pre>\n\n*External Documentation*\n\n<a href='http://manual.qooxdoo.org/${qxversion}/pages/layout/canvas.html'>\nExtended documentation</a> and links to demos of this layout in the qooxdoo manual."
        }
      ]
    }
  },
  "type": "class",
  "properties": {
    "desktop": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 107,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "If desktop mode is active, the children's minimum sizes are ignored\nby the layout calculation. This is necessary to prevent the desktop\nfrom growing if e.g. a window is moved beyond the edge of the desktop"
          }
        ]
      },
      "name": "desktop",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "verifyLayoutProperty": {
      "location": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 164,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nLAYOUT INTERFACE\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {Object} The affected layout item",
            "paramName": "item",
            "description": " The affected layout item",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "name {Object} Name of the layout property",
            "paramName": "name",
            "description": " Name of the layout property",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "value {Object} Value of the layout property",
            "paramName": "value",
            "description": " Value of the layout property",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "renderLayout": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 316,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "availWidth {Integer} Final width available for the content (in pixel)",
            "paramName": "availWidth",
            "description": " Final width available for the content (in pixel)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "availHeight {Integer} Final height available for the content (in pixel)",
            "paramName": "availHeight",
            "description": " Final height available for the content (in pixel)",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "padding {Map} Map containing the padding values. Keys:\n<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "paramName": "padding",
            "description": " Map containing the padding values. Keys:\n<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "_computeSizeHint": {
      "location": {
        "start": {
          "line": 320,
          "column": 4
        },
        "end": {
          "line": 396,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} The size hint.",
            "type": "Map",
            "description": " The size hint."
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "appearsIn": [
        "qx.ui.layout.Abstract"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.ui.layout.Abstract",
      "property": "reset"
    },
    "getDesktop": {
      "type": "function",
      "name": "getDesktop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>desktop</code>.\n\nFor further details take a look at the property definition: {@link #desktop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for desktop"
          }
        ]
      }
    },
    "isDesktop": {
      "type": "function",
      "name": "isDesktop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>desktop</code>.\n\nFor further details take a look at the property definition: {@link #desktop}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for desktop"
          }
        ]
      }
    },
    "setDesktop": {
      "type": "function",
      "name": "setDesktop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>desktop</code>.\n\nFor further details take a look at the property definition: {@link #desktop}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for desktop"
          }
        ]
      }
    },
    "resetDesktop": {
      "type": "function",
      "name": "resetDesktop",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>desktop</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #desktop}."
          }
        ]
      }
    }
  },
  "descendants": []
}