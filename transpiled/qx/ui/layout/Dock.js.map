{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/layout/Dock.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "construct",
    "spacingX",
    "spacingY",
    "separatorX",
    "separatorY",
    "setSpacingX",
    "setSpacingY",
    "setSeparatorX",
    "setSeparatorY",
    "properties",
    "sort",
    "check",
    "init",
    "apply",
    "nullable",
    "connectSeparators",
    "members",
    "__children",
    "__edges",
    "verifyLayoutProperty",
    "item",
    "name",
    "value",
    "assertInArray",
    "assertNumber",
    "assert",
    "assertMatch",
    "Util",
    "PERCENT_VALUE",
    "_applySort",
    "_invalidChildrenCache",
    "_applyLayoutChange",
    "__edgeMap",
    "north",
    "south",
    "west",
    "east",
    "center",
    "__alignMap",
    "__rebuildCache",
    "all",
    "_getLayoutChildren",
    "child",
    "length",
    "high",
    "low",
    "edge",
    "yfirst",
    "getSort",
    "xfirst",
    "i",
    "getLayoutProperties",
    "Error",
    "push",
    "result",
    "concat",
    "edges",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "util",
    "children",
    "flexibles",
    "hint",
    "props",
    "flex",
    "grow",
    "width",
    "height",
    "offset",
    "widths",
    "heights",
    "separatorWidths",
    "_getSeparatorWidths",
    "getSpacingX",
    "getSpacingY",
    "allocatedWidth",
    "allocatedHeight",
    "x",
    "y",
    "getSizeHint",
    "Math",
    "floor",
    "parseFloat",
    "minWidth",
    "maxWidth",
    "minHeight",
    "maxHeight",
    "getMarginTop",
    "getMarginBottom",
    "getMarginLeft",
    "getMarginRight",
    "min",
    "max",
    "computeFlexOffsets",
    "_clearSeparators",
    "getSeparatorX",
    "getSeparatorY",
    "getConnectSeparators",
    "nextTop",
    "nextLeft",
    "left",
    "top",
    "used",
    "separatorLeft",
    "separatorTop",
    "separatorWidth",
    "separatorHeight",
    "marginTop",
    "marginBottom",
    "marginLeft",
    "marginRight",
    "alignMap",
    "computeVerticalAlignOffset",
    "computeHorizontalAlignOffset",
    "getAlignX",
    "_renderSeparator",
    "getAlignY",
    "decorationManager",
    "theme",
    "manager",
    "Decoration",
    "getInstance",
    "separatorInstanceX",
    "resolve",
    "separatorInsetsX",
    "getInsets",
    "separatorWidthX",
    "right",
    "separatorInstanceY",
    "separatorInsetsY",
    "separatorWidthY",
    "bottom",
    "_computeSizeHint",
    "marginX",
    "marginY",
    "widthX",
    "minWidthX",
    "heightX",
    "minHeightX",
    "widthY",
    "minWidthY",
    "heightY",
    "minHeightY",
    "spacingSumX",
    "spacingSumY",
    "destruct",
    "Dock"
  ],
  "mappings": "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",
  "file": "Dock.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Docks children to one of the edges.\n *\n * *Features*\n *\n * * Percent width for left/right/center attached children\n * * Percent height for top/bottom/center attached children\n * * Minimum and maximum dimensions\n * * Prioritized growing/shrinking (flex)\n * * Auto sizing\n * * Margins and Spacings\n * * Alignment in orthogonal axis (e.g. alignX of north attached)\n * * Different sort options for children\n *\n * *Item Properties*\n *\n * <ul>\n * <li><strong>edge</strong> <em>(String)</em>: The edge where the layout item\n *   should be docked. This may be one of <code>north</code>, <code>east</code>,\n *   <code>south</code>, <code>west</code> or <code>center</code>. (Required)</li>\n * <li><strong>width</strong> <em>(String)</em>: Defines a percent\n *   width for the item. The percent width,\n *   when specified, is used instead of the width defined by the size hint.\n *   This is only supported for children added to the north or south edge or\n *   are centered in the middle of the layout.\n *   The minimum and maximum width still takes care of the elements limitations.\n *   It has no influence on the layout's size hint. Percents are mainly useful for\n *   widgets which are sized by the outer hierarchy.\n * </li>\n * <li><strong>height</strong> <em>(String)</em>: Defines a percent\n *   height for the item. The percent height,\n *   when specified, is used instead of the height defined by the size hint.\n *   This is only supported for children added to the west or east edge or\n *   are centered in the middle of the layout.\n *   The minimum and maximum height still takes care of the elements limitations.\n *   It has no influence on the layout's size hint. Percents are mainly useful for\n *   widgets which are sized by the outer hierarchy.\n * </li>\n * </ul>\n *\n * *Example*\n *\n * <pre class=\"javascript\">\n * var layout = new qx.ui.layout.Dock();\n *\n * var w1 = new qx.ui.core.Widget();\n * var w2 = new qx.ui.core.Widget();\n * var w3 = new qx.ui.core.Widget();\n *\n * w1.setHeight(200);\n * w2.setWidth(150);\n *\n * var container = new qx.ui.container.Composite(layout);\n * container.add(w1, {edge:\"north\"});\n * container.add(w2, {edge:\"west\"});\n * container.add(w3, {edge:\"center\"});\n * </pre>\n *\n * *Detailed Description*\n *\n * Using this layout, items may be \"docked\" to a specific side\n * of the available space. Each displayed item reduces the available space\n * for the following children. Priorities depend on the position of\n * the child in the internal children list.\n *\n * *External Documentation*\n *\n * <a href='http://manual.qooxdoo.org/${qxversion}/pages/layout/dock.html'>\n * Extended documentation</a> and links to demos of this layout in the qooxdoo manual.\n */\nqx.Class.define(\"qx.ui.layout.Dock\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param spacingX {Integer?0} The horizontal spacing. Sets {@link #spacingX}.\n   * @param spacingY {Integer?0} The vertical spacing. Sets {@link #spacingY}.\n   * @param separatorX {String|qx.ui.decoration.IDecorator} Separator to render between columns\n   * @param separatorY {String|qx.ui.decoration.IDecorator} Separator to render between rows\n   */\n  construct : function(spacingX, spacingY, separatorX, separatorY)\n  {\n    this.base(arguments);\n\n    if (spacingX) {\n      this.setSpacingX(spacingX);\n    }\n\n    if (spacingY) {\n      this.setSpacingY(spacingY);\n    }\n\n    if (separatorX) {\n      this.setSeparatorX(separatorX);\n    }\n\n    if (separatorY) {\n      this.setSeparatorY(separatorY);\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The way the widgets should be displayed (in conjunction with their\n     * position in the childrens array).\n     */\n    sort :\n    {\n      check : [ \"auto\", \"y\", \"x\" ],\n      init : \"auto\",\n      apply : \"_applySort\"\n    },\n\n\n    /** Separator lines to use between the horizontal objects */\n    separatorX :\n    {\n      check : \"Decorator\",\n      nullable : true,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /** Separator lines to use between the vertical objects */\n    separatorY :\n    {\n      check : \"Decorator\",\n      nullable : true,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /**\n     * Whether separators should be collapsed so when a spacing is\n     * configured the line go over into each other\n     */\n    connectSeparators :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /** Horizontal spacing between two children */\n    spacingX :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /** Vertical spacing between two children */\n    spacingY :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyLayoutChange\"\n    }\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __children : null,\n    __edges : null,\n\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value)\n      {\n        this.assertInArray(name, [\"flex\", \"edge\", \"height\", \"width\"], \"The property '\"+name+\"' is not supported by the Dock layout!\");\n\n        if (name === \"edge\")\n        {\n          this.assertInArray(value, [\"north\", \"south\", \"west\", \"east\", \"center\"]);\n        }\n        else if (name === \"flex\")\n        {\n          this.assertNumber(value);\n          this.assert(value >= 0);\n        } else {\n          this.assertMatch(value, qx.ui.layout.Util.PERCENT_VALUE);\n        }\n      },\n\n      \"false\" : null\n    }),\n\n\n    // property apply\n    _applySort : function()\n    {\n      // easiest way is to invalidate the cache\n      this._invalidChildrenCache = true;\n\n      // call normal layout change\n      this._applyLayoutChange();\n    },\n\n\n    /**\n     * @type {Map} Maps edge IDs to numeric values\n     *\n     * @lint ignoreReferenceField(__edgeMap)\n     */\n    __edgeMap :\n    {\n      north : 1,\n      south : 2,\n      west : 3,\n      east : 4,\n      center : 5\n    },\n\n\n    /**\n     * @type {Map} Maps edges to align values\n     *\n     * @lint ignoreReferenceField(__alignMap)\n     */\n    __alignMap :\n    {\n      1 : \"top\",\n      2 : \"bottom\",\n      3 : \"left\",\n      4 : \"right\"\n    },\n\n\n    /**\n     * Rebuilds cache for sorted children list.\n     *\n     */\n    __rebuildCache : function()\n    {\n      var all = this._getLayoutChildren();\n      var child, center;\n      var length = all.length;\n\n      var high = [];\n      var low = [];\n      var edge = [];\n\n      var yfirst = this.getSort() === \"y\";\n      var xfirst = this.getSort() === \"x\";\n\n      for (var i=0; i<length; i++)\n      {\n        child = all[i];\n        edge = child.getLayoutProperties().edge;\n\n        if (edge === \"center\")\n        {\n          if (center) {\n            throw new Error(\"It is not allowed to have more than one child aligned to 'center'!\");\n          }\n\n          center = child;\n        }\n        else if (xfirst || yfirst)\n        {\n          if (edge === \"north\" || edge === \"south\") {\n            yfirst ? high.push(child) : low.push(child);\n          } else if (edge === \"west\" || edge === \"east\") {\n            yfirst ? low.push(child) : high.push(child);\n          }\n        }\n        else\n        {\n          high.push(child);\n        }\n      }\n\n      // Combine sorted children list\n      var result = high.concat(low);\n      if (center) {\n        result.push(center);\n      }\n\n      this.__children = result;\n\n      // Cache edges for faster access\n      var edges=[];\n      for (var i=0; i<length; i++)\n      {\n        edge = result[i].getLayoutProperties().edge;\n        edges[i] = this.__edgeMap[edge] || 5;\n      }\n\n      this.__edges = edges;\n\n      // Clear invalidation marker\n      delete this._invalidChildrenCache;\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      // Rebuild flex/width caches\n      if (this._invalidChildrenCache) {\n        this.__rebuildCache();\n      }\n\n      var util = qx.ui.layout.Util;\n      var children = this.__children;\n      var edges = this.__edges;\n      var length = children.length;\n      var flexibles, child, hint, props, flex, grow, width, height, offset;\n\n      var widths = [];\n      var heights = [];\n\n      var separatorWidths = this._getSeparatorWidths();\n      var spacingX = this.getSpacingX();\n      var spacingY = this.getSpacingY();\n\n\n\n\n      // **************************************\n      //   Caching children data\n      // **************************************\n\n      var allocatedWidth = -spacingX;\n      var allocatedHeight = -spacingY;\n\n      if (separatorWidths.x) {\n        allocatedWidth -= separatorWidths.x + spacingX;\n      }\n\n      if (separatorWidths.y) {\n        allocatedHeight -= separatorWidths.y + spacingY;\n      }\n\n      for (var i=0; i<length; i++)\n      {\n        child = children[i];\n        props = child.getLayoutProperties();\n        hint = child.getSizeHint();\n\n        width = hint.width;\n        height = hint.height;\n\n        if (props.width != null)\n        {\n          width = Math.floor(availWidth * parseFloat(props.width) / 100);\n          if (width < hint.minWidth) {\n            width = hint.minWidth;\n          } else if (width > hint.maxWidth) {\n            width = hint.maxWidth;\n          }\n        }\n\n        if (props.height != null)\n        {\n          height = Math.floor(availHeight * parseFloat(props.height) / 100);\n          if (height < hint.minHeight) {\n            height = hint.minHeight;\n          } else if (height > hint.maxHeight) {\n            height = hint.maxHeight;\n          }\n        }\n\n        widths[i] = width;\n        heights[i] = height;\n\n        // Update allocated width\n        switch(edges[i])\n        {\n          // north+south\n          case 1:\n          case 2:\n            allocatedHeight += height + child.getMarginTop() + child.getMarginBottom() + spacingY;\n            if (separatorWidths.y) {\n              allocatedHeight += separatorWidths.y + spacingY;\n            }\n            break;\n\n          // west+east\n          case 3:\n          case 4:\n            allocatedWidth += width + child.getMarginLeft() + child.getMarginRight() + spacingX;\n            if (separatorWidths.x) {\n              allocatedWidth += separatorWidths.x + spacingX;\n            }\n            break;\n\n          // center\n          default:\n            allocatedWidth += width + child.getMarginLeft() + child.getMarginRight() + spacingX;\n            allocatedHeight += height + child.getMarginTop() + child.getMarginBottom() + spacingY;\n\n            if (separatorWidths.x) {\n              allocatedWidth += separatorWidths.x + spacingX;\n            }\n\n            if (separatorWidths.y) {\n              allocatedHeight += separatorWidths.y + spacingY;\n            }\n        }\n      }\n\n\n\n\n\n      // **************************************\n      //   Horizontal flex support\n      // **************************************\n\n      if (allocatedWidth != availWidth)\n      {\n        flexibles = {};\n        grow = allocatedWidth < availWidth;\n\n        for (var i=0; i<length; i++)\n        {\n          child = children[i];\n\n          switch(edges[i])\n          {\n            case 3:\n            case 4:\n            case 5:\n              flex = child.getLayoutProperties().flex;\n\n              // Default flex for centered children is '1'\n              if (flex == null && edges[i] == 5) {\n                flex = 1;\n              }\n\n              if (flex > 0)\n              {\n                hint = child.getSizeHint();\n\n                flexibles[i] =\n                {\n                  min : hint.minWidth,\n                  value : widths[i],\n                  max : hint.maxWidth,\n                  flex : flex\n                };\n              }\n          }\n        }\n\n        var result = util.computeFlexOffsets(flexibles, availWidth, allocatedWidth);\n        for (var i in result)\n        {\n          offset = result[i].offset;\n\n          widths[i] += offset;\n          allocatedWidth += offset;\n        }\n      }\n\n\n\n\n      // **************************************\n      //   Vertical flex support\n      // **************************************\n\n      // Process height for flex stretching/shrinking\n      if (allocatedHeight != availHeight)\n      {\n        flexibles = {};\n        grow = allocatedHeight < availHeight;\n\n        for (var i=0; i<length; i++)\n        {\n          child = children[i];\n\n          switch(edges[i])\n          {\n            case 1:\n            case 2:\n            case 5:\n              flex = child.getLayoutProperties().flex;\n\n              // Default flex for centered children is '1'\n              if (flex == null && edges[i] == 5) {\n                flex = 1;\n              }\n\n              if (flex > 0)\n              {\n                hint = child.getSizeHint();\n\n                flexibles[i] =\n                {\n                  min : hint.minHeight,\n                  value : heights[i],\n                  max : hint.maxHeight,\n                  flex : flex\n                };\n              }\n          }\n        }\n\n        var result = util.computeFlexOffsets(flexibles, availHeight, allocatedHeight);\n        for (var i in result)\n        {\n          offset = result[i].offset;\n\n          heights[i] += offset;\n          allocatedHeight += offset;\n        }\n      }\n\n\n\n\n\n      // **************************************\n      //   Layout children\n      // **************************************\n\n      // Pre configure separators\n      this._clearSeparators();\n\n      // Prepare loop\n      var separatorX=this.getSeparatorX(), separatorY=this.getSeparatorY();\n      var connectSeparators=this.getConnectSeparators();\n      var nextTop=0, nextLeft=0;\n      var left, top, width, height, used, edge;\n      var separatorLeft, separatorTop, separatorWidth, separatorHeight;\n      var marginTop, marginBottom, marginLeft, marginRight;\n      var alignMap = this.__alignMap;\n\n      for (var i=0; i<length; i++)\n      {\n        // Cache child data\n        child = children[i];\n        edge = edges[i];\n        hint = child.getSizeHint();\n\n        // Cache child margins\n        marginTop = child.getMarginTop();\n        marginBottom = child.getMarginBottom();\n        marginLeft = child.getMarginLeft();\n        marginRight = child.getMarginRight();\n\n        // Calculate child layout\n        switch(edge)\n        {\n          // north + south\n          case 1:\n          case 2:\n            // Full available width\n            width = availWidth - marginLeft - marginRight;\n\n            // Limit width to min/max\n            if (width < hint.minWidth) {\n              width = hint.minWidth;\n            } else if (width > hint.maxWidth) {\n              width = hint.maxWidth;\n            }\n\n            // Child preferred height\n            height = heights[i];\n\n            // Compute position\n            top = nextTop + util.computeVerticalAlignOffset(alignMap[edge], height, availHeight, marginTop, marginBottom);\n            left = nextLeft + util.computeHorizontalAlignOffset(child.getAlignX()||\"left\", width, availWidth, marginLeft, marginRight);\n\n            // Render the separator\n            if (separatorWidths.y)\n            {\n              if (edge == 1) {\n                separatorTop = nextTop + height + marginTop + spacingY + marginBottom;\n              } else {\n                separatorTop = nextTop + availHeight - height - marginTop - spacingY - marginBottom - separatorWidths.y;\n              }\n\n              separatorLeft = left;\n              separatorWidth = availWidth;\n\n              if (connectSeparators && separatorLeft > 0)\n              {\n                separatorLeft -= spacingX + marginLeft;\n                separatorWidth += (spacingX) * 2;\n              }\n              else\n              {\n                separatorLeft -= marginLeft;\n              }\n\n              this._renderSeparator(separatorY, {\n                left : separatorLeft + padding.left,\n                top : separatorTop + padding.top,\n                width : separatorWidth,\n                height : separatorWidths.y\n              });\n            }\n\n            // Update available height\n            used = height + marginTop + marginBottom + spacingY;\n            if (separatorWidths.y) {\n              used += separatorWidths.y + spacingY;\n            }\n\n            availHeight -= used;\n\n            // Update coordinates, for next child\n            if (edge == 1) {\n              nextTop += used;\n            }\n\n            break;\n\n\n          // west + east\n          case 3:\n          case 4:\n            // Full available height\n            height = availHeight - marginTop - marginBottom;\n\n            // Limit height to min/max\n            if (height < hint.minHeight) {\n              height = hint.minHeight;\n            } else if (height > hint.maxHeight) {\n              height = hint.maxHeight;\n            }\n\n            // Child preferred width\n            width = widths[i];\n\n            // Compute position\n            left = nextLeft + util.computeHorizontalAlignOffset(alignMap[edge], width, availWidth, marginLeft, marginRight);\n            top = nextTop + util.computeVerticalAlignOffset(child.getAlignY()||\"top\", height, availHeight, marginTop, marginBottom);\n\n            // Render the separator\n            if (separatorWidths.x)\n            {\n              if (edge == 3) {\n                separatorLeft = nextLeft + width + marginLeft + spacingX + marginRight;\n              } else {\n                separatorLeft = nextLeft + availWidth - width - marginLeft - spacingX - marginRight - separatorWidths.x;\n              }\n\n              separatorTop = top;\n              separatorHeight = availHeight;\n\n              if (connectSeparators && separatorTop > 0)\n              {\n                separatorTop -= spacingY + marginTop;\n                separatorHeight += (spacingY) * 2;\n              }\n              else\n              {\n                separatorTop -= marginTop;\n              }\n\n              this._renderSeparator(separatorX, {\n                left : separatorLeft + padding.left,\n                top : separatorTop + padding.top,\n                width : separatorWidths.x,\n                height : separatorHeight\n              });\n            }\n\n            // Update available height\n            used = width + marginLeft + marginRight + spacingX;\n            if (separatorWidths.x) {\n              used += separatorWidths.x + spacingX;\n            }\n            availWidth -= used;\n\n            // Update coordinates, for next child\n            if (edge == 3) {\n              nextLeft += used;\n            }\n\n            break;\n\n\n          // center\n          default:\n            // Calculated width/height\n            width = availWidth - marginLeft - marginRight;\n            height = availHeight - marginTop - marginBottom;\n\n            // Limit width to min/max\n            if (width < hint.minWidth) {\n              width = hint.minWidth;\n            } else if (width > hint.maxWidth) {\n              width = hint.maxWidth;\n            }\n\n            // Limit height to min/max\n            if (height < hint.minHeight) {\n              height = hint.minHeight;\n            } else if (height > hint.maxHeight) {\n              height = hint.maxHeight;\n            }\n\n            // Compute coordinates (respect margins and alignments for both axis)\n            left = nextLeft + util.computeHorizontalAlignOffset(child.getAlignX()||\"left\", width, availWidth, marginLeft, marginRight);\n            top = nextTop + util.computeVerticalAlignOffset(child.getAlignY()||\"top\", height, availHeight, marginTop, marginBottom);\n        }\n\n        // Apply layout\n        child.renderLayout(left + padding.left, top + padding.top, width, height);\n      }\n    },\n\n\n    /**\n     * Computes the dimensions each separator on both the <code>x</code> and\n     * <code>y</code> axis needs.\n     *\n     * @return {Map} Map with the keys <code>x</code> and\n     *   <code>y</code>\n     */\n    _getSeparatorWidths : function()\n    {\n      var separatorX=this.getSeparatorX(), separatorY=this.getSeparatorY();\n      if (separatorX || separatorY) {\n        var decorationManager = qx.theme.manager.Decoration.getInstance();\n      }\n\n      if (separatorX)\n      {\n        var separatorInstanceX = decorationManager.resolve(separatorX);\n        var separatorInsetsX = separatorInstanceX.getInsets();\n        var separatorWidthX = separatorInsetsX.left + separatorInsetsX.right;\n      }\n\n      if (separatorY)\n      {\n        var separatorInstanceY = decorationManager.resolve(separatorY);\n        var separatorInsetsY = separatorInstanceY.getInsets();\n        var separatorWidthY = separatorInsetsY.top + separatorInsetsY.bottom;\n      }\n\n      return {\n        x : separatorWidthX || 0,\n        y : separatorWidthY || 0\n      };\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      // Rebuild flex/width caches\n      if (this._invalidChildrenCache) {\n        this.__rebuildCache();\n      }\n\n      var children = this.__children;\n      var edges = this.__edges;\n\n      var length = children.length;\n      var hint, child;\n      var marginX, marginY;\n\n      var widthX=0, minWidthX=0;\n      var heightX=0, minHeightX=0;\n      var widthY=0, minWidthY=0;\n      var heightY=0, minHeightY=0;\n\n      var separatorWidths = this._getSeparatorWidths();\n      var spacingX=this.getSpacingX(), spacingY=this.getSpacingY();\n      var spacingSumX=-spacingX, spacingSumY=-spacingY;\n\n      if (separatorWidths.x) {\n        spacingSumX -= separatorWidths.x + spacingX;\n      }\n\n      if (separatorWidths.y) {\n        spacingSumY -= separatorWidths.y + spacingY;\n      }\n\n      // Detect children sizes\n      for (var i=0; i<length; i++)\n      {\n        child = children[i];\n        hint = child.getSizeHint();\n\n        // Pre-cache margin sums\n        marginX = child.getMarginLeft() + child.getMarginRight();\n        marginY = child.getMarginTop() + child.getMarginBottom();\n\n        // Ok, this part is a bit complicated :)\n        switch(edges[i])\n        {\n          case 1:\n          case 2:\n            // Find the maximum width used by these fully stretched items\n            // The recommended width used by these must add the currently\n            // occupied width by the orthogonal ordered children.\n            widthY = Math.max(widthY, hint.width + widthX + marginX);\n            minWidthY = Math.max(minWidthY, hint.minWidth + minWidthX + marginX);\n\n            // Add the needed heights of this widget\n            heightY += hint.height + marginY;\n            minHeightY += hint.minHeight + marginY;\n\n            // Add spacing\n            spacingSumY += spacingY;\n            if (separatorWidths.y) {\n              spacingSumY += separatorWidths.y + spacingY;\n            }\n\n            break;\n\n          case 3:\n          case 4:\n            // Find the maximum height used by these fully stretched items\n            // The recommended height used by these must add the currently\n            // occupied height by the orthogonal ordered children.\n            heightX = Math.max(heightX, hint.height + heightY + marginY);\n            minHeightX = Math.max(minHeightX, hint.minHeight + minHeightY + marginY);\n\n            // Add the needed widths of this widget\n            widthX += hint.width + marginX;\n            minWidthX += hint.minWidth + marginX;\n\n            // Add spacing\n            spacingSumX += spacingX;\n            if (separatorWidths.x) {\n              spacingSumX += separatorWidths.x + spacingX;\n            }\n\n            break;\n\n          default:\n            // A centered widget must be added to both sums as\n            // it stretches into the remaining available space.\n            widthX += hint.width + marginX;\n            minWidthX += hint.minWidth + marginX;\n\n            heightY += hint.height + marginY;\n            minHeightY += hint.minHeight + marginY;\n\n            // Add spacing\n            spacingSumX += spacingX;\n            if (separatorWidths.x) {\n              spacingSumX += separatorWidths.x + spacingX;\n            }\n\n            spacingSumY += spacingY;\n            if (separatorWidths.y) {\n              spacingSumY += separatorWidths.y + spacingY;\n            }\n        }\n      }\n\n      var minWidth = Math.max(minWidthX, minWidthY) + spacingSumX;\n      var width = Math.max(widthX, widthY) + spacingSumX;\n      var minHeight = Math.max(minHeightX, minHeightY) + spacingSumY;\n      var height = Math.max(heightX, heightY) + spacingSumY;\n\n      // Return hint\n      return {\n        minWidth : minWidth,\n        width : width,\n        minHeight : minHeight,\n        height : height\n      };\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.__edges = this.__children = null;\n  }\n});\n"
  ]
}