{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/layout/Atom.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "properties",
    "gap",
    "check",
    "init",
    "apply",
    "iconPosition",
    "center",
    "members",
    "verifyLayoutProperty",
    "item",
    "name",
    "value",
    "assert",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "left",
    "top",
    "Util",
    "getIconPosition",
    "children",
    "_getLayoutChildren",
    "length",
    "width",
    "height",
    "child",
    "hint",
    "getGap",
    "getCenter",
    "allowedPositions",
    "indexOf",
    "start",
    "end",
    "increment",
    "allocatedHeight",
    "i",
    "getSizeHint",
    "Math",
    "round",
    "childTop",
    "min",
    "maxWidth",
    "max",
    "minWidth",
    "computeHorizontalAlignOffset",
    "remainingWidth",
    "shrinkTarget",
    "count",
    "basic",
    "Label",
    "gapSum",
    "shrinkTargetWidth",
    "maxHeight",
    "minHeight",
    "align",
    "computeVerticalAlignOffset",
    "_computeSizeHint",
    "result",
    "Atom"
  ],
  "mappings": ";;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA4CAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,mBAAhB,EACA;AACEC,YAASN,GAAGO,EAAH,CAAMC,MAAN,CAAaC,QADxB;;AAME;;;;;;AAMAC,gBACA;AACE;AACAC,WACA;AACEC,eAAQ,SADV;AAEEC,cAAO,CAFT;AAGEC,eAAQ;AAHV,OAHF;;AAUE;AACAC,oBACA;AACEH,eAAQ,CAAC,MAAD,EAAS,KAAT,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,UAAnC,EAA+C,aAA/C,EAA8D,WAA9D,EAA2E,cAA3E,CADV;AAEEC,cAAO,MAFT;AAGEC,eAAS;AAHX,OAZF;;AAmBE;;;;;;;;;AASAE,cACA;AACEJ,eAAQ,SADV;AAEEC,cAAO,KAFT;AAGEC,eAAQ;AAHV;AA7BF,KAbF;;AAoDE;;;;;;AAMAG,aACA;AACE;;;;;;AAMA;AACAC,4BAEW,8BAASC,IAAT,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AACnC,aAAKC,MAAL,CAAY,KAAZ,EAAmB,mBAAiBF,IAAjB,GAAsB,wCAAzC;AACD,OAZL;;AAkBE;AACAG,oBAAe,sBAASC,UAAT,EAAqBC,WAArB,EAAkCC,OAAlC,EACf;AACE,YAAIC,OAAOD,QAAQC,IAAnB;AACA,YAAIC,MAAMF,QAAQE,GAAlB;AACA,YAAIC,OAAO7B,GAAGO,EAAH,CAAMC,MAAN,CAAaqB,IAAxB;;AAEA,YAAId,eAAe,KAAKe,eAAL,EAAnB;AACA,YAAIC,WAAW,KAAKC,kBAAL,EAAf;AACA,YAAIC,SAASF,SAASE,MAAtB;;AAEA,YAAIC,KAAJ,EAAWC,MAAX;AACA,YAAIC,KAAJ,EAAWC,IAAX;AACA,YAAI1B,MAAM,KAAK2B,MAAL,EAAV;AACA,YAAItB,SAAS,KAAKuB,SAAL,EAAb;;AAEA;AACA,YAAIC,mBAAmB,CAAC,QAAD,EAAW,OAAX,EAAoB,WAApB,EAAiC,cAAjC,CAAvB;AACA,YAAIA,iBAAiBC,OAAjB,CAAyB1B,YAAzB,KAA0C,CAAC,CAA/C,EACA;AACE,cAAI2B,QAAQT,SAAO,CAAnB;AACA,cAAIU,MAAM,CAAC,CAAX;AACA,cAAIC,YAAY,CAAC,CAAjB;AACD,SALD,MAOA;AACE,cAAIF,QAAQ,CAAZ;AACA,cAAIC,MAAMV,MAAV;AACA,cAAIW,YAAY,CAAhB;AACD;;AAED;AACA,YAAI7B,gBAAgB,KAAhB,IAAyBA,gBAAgB,QAA7C,EACA;AACE,cAAIC,MAAJ,EACA;AACE,gBAAI6B,kBAAkB,CAAtB;AACA,iBAAK,IAAIC,IAAEJ,KAAX,EAAkBI,KAAGH,GAArB,EAA0BG,KAAGF,SAA7B,EACA;AACET,uBAASJ,SAASe,CAAT,EAAYC,WAAZ,GAA0BZ,MAAnC;;AAEA,kBAAIA,SAAS,CAAb,EACA;AACEU,mCAAmBV,MAAnB;;AAEA,oBAAIW,KAAKJ,KAAT,EAAgB;AACdG,qCAAmBlC,GAAnB;AACD;AACF;AACF;;AAEDiB,mBAAOoB,KAAKC,KAAL,CAAW,CAACxB,cAAcoB,eAAf,IAAkC,CAA7C,CAAP;AACD;;AAED,cAAIK,WAAWtB,GAAf;AACA,eAAK,IAAIkB,IAAEJ,KAAX,EAAkBI,KAAGH,GAArB,EAA0BG,KAAGF,SAA7B,EACA;AACER,oBAAQL,SAASe,CAAT,CAAR;;AAEAT,mBAAOD,MAAMW,WAAN,EAAP;AACAb,oBAAQc,KAAKG,GAAL,CAASd,KAAKe,QAAd,EAAwBJ,KAAKK,GAAL,CAAS7B,UAAT,EAAqBa,KAAKiB,QAA1B,CAAxB,CAAR;AACAnB,qBAASE,KAAKF,MAAd;;AAEAR,mBAAOE,KAAK0B,4BAAL,CAAkC,QAAlC,EAA4CrB,KAA5C,EAAmDV,UAAnD,IAAiEE,QAAQC,IAAhF;AACAS,kBAAMb,YAAN,CAAmBI,IAAnB,EAAyBuB,QAAzB,EAAmChB,KAAnC,EAA0CC,MAA1C;;AAEA;AACA,gBAAIA,SAAS,CAAb,EAAgB;AACde,yBAAWtB,MAAMO,MAAN,GAAexB,GAA1B;AACD;AACF;AACF;;AAED;AACA;AA1CA,aA4CA;AACE,gBAAI6C,iBAAiBhC,UAArB;AACA,gBAAIiC,eAAe,IAAnB;;AAEA,gBAAIC,QAAM,CAAV;AACA,iBAAK,IAAIZ,IAAEJ,KAAX,EAAkBI,KAAGH,GAArB,EAA0BG,KAAGF,SAA7B,EACA;AACER,sBAAQL,SAASe,CAAT,CAAR;AACAZ,sBAAQE,MAAMW,WAAN,GAAoBb,KAA5B;;AAEA,kBAAIA,QAAQ,CAAZ,EACA;AACE,oBAAI,CAACuB,YAAD,IAAiBrB,iBAAiBpC,GAAGO,EAAH,CAAMoD,KAAN,CAAYC,KAAlD,EAAyD;AACvDH,iCAAerB,KAAf;AACD,iBAFD,MAEO;AACLoB,oCAAkBtB,KAAlB;AACD;;AAEDwB;AACD;AACF;;AAED,gBAAIA,QAAQ,CAAZ,EACA;AACE,kBAAIG,SAAS,CAACH,QAAQ,CAAT,IAAc/C,GAA3B;AACA6C,gCAAkBK,MAAlB;AACD;;AAED,gBAAIJ,YAAJ,EACA;AACE,kBAAIpB,OAAOoB,aAAaV,WAAb,EAAX;AACA,kBAAIe,oBAAoBd,KAAKK,GAAL,CAAShB,KAAKiB,QAAd,EAAwBN,KAAKG,GAAL,CAASK,cAAT,EAAyBnB,KAAKe,QAA9B,CAAxB,CAAxB;AACAI,gCAAkBM,iBAAlB;AACD;;AAED,gBAAI9C,UAAUwC,iBAAiB,CAA/B,EAAkC;AAChC7B,sBAAQqB,KAAKC,KAAL,CAAWO,iBAAiB,CAA5B,CAAR;AACD;;AAED,iBAAK,IAAIV,IAAEJ,KAAX,EAAkBI,KAAGH,GAArB,EAA0BG,KAAGF,SAA7B,EACA;AACER,sBAAQL,SAASe,CAAT,CAAR;;AAEAT,qBAAOD,MAAMW,WAAN,EAAP;AACAZ,uBAASa,KAAKG,GAAL,CAASd,KAAK0B,SAAd,EAAyBf,KAAKK,GAAL,CAAS5B,WAAT,EAAsBY,KAAK2B,SAA3B,CAAzB,CAAT;;AAEA,kBAAI5B,UAAUqB,YAAd,EAA4B;AAC1BvB,wBAAQ4B,iBAAR;AACD,eAFD,MAEO;AACL5B,wBAAQG,KAAKH,KAAb;AACD;;AAED,kBAAI+B,QAAQ,QAAZ;AACA,kBAAGlD,gBAAgB,UAAhB,IAA8BA,gBAAgB,WAAjD,EAA6D;AAC3DkD,wBAAQ,KAAR;AACD,eAFD,MAEO,IAAIlD,gBAAgB,aAAhB,IAAiCA,gBAAgB,cAArD,EAAqE;AAC1EkD,wBAAQ,QAAR;AACD;AACD,kBAAIf,WAAWtB,MAAMC,KAAKqC,0BAAL,CAAgCD,KAAhC,EAAuC5B,KAAKF,MAA5C,EAAoDV,WAApD,CAArB;AACAW,oBAAMb,YAAN,CAAmBI,IAAnB,EAAyBuB,QAAzB,EAAmChB,KAAnC,EAA0CC,MAA1C;;AAEA;AACA;AACA,kBAAID,QAAQ,CAAZ,EAAe;AACbP,wBAAQO,QAAQvB,GAAhB;AACD;AACF;AACF;AACF,OAlKH;;AAqKE;AACAwD,wBAAmB,4BACnB;AACE,YAAIpC,WAAW,KAAKC,kBAAL,EAAf;AACA,YAAIC,SAASF,SAASE,MAAtB;AACA,YAAII,IAAJ,EAAU+B,MAAV;;AAEA;AACA,YAAInC,WAAW,CAAf,EACA;AACE,cAAII,OAAON,SAAS,CAAT,EAAYgB,WAAZ,EAAX;;AAEA;AACA;AACA;AACAqB,mBAAS;AACPlC,mBAAQG,KAAKH,KADN;AAEPC,oBAASE,KAAKF,MAFP;AAGPmB,sBAAWjB,KAAKiB,QAHT;AAIPU,uBAAY3B,KAAK2B;AAJV,WAAT;AAMD,SAbD,MAeA;AACE,cAAIV,WAAS,CAAb;AAAA,cAAgBpB,QAAM,CAAtB;AACA,cAAI8B,YAAU,CAAd;AAAA,cAAiB7B,SAAO,CAAxB;;AAEA,cAAIpB,eAAe,KAAKe,eAAL,EAAnB;AACA,cAAInB,MAAM,KAAK2B,MAAL,EAAV;;AAEA,cAAIvB,iBAAiB,KAAjB,IAA0BA,iBAAiB,QAA/C,EACA;AACE,gBAAI2C,QAAQ,CAAZ;AACA,iBAAK,IAAIZ,IAAE,CAAX,EAAcA,IAAEb,MAAhB,EAAwBa,GAAxB,EACA;AACET,qBAAON,SAASe,CAAT,EAAYC,WAAZ,EAAP;;AAEA;AACAb,sBAAQc,KAAKK,GAAL,CAASnB,KAAT,EAAgBG,KAAKH,KAArB,CAAR;AACAoB,yBAAWN,KAAKK,GAAL,CAASC,QAAT,EAAmBjB,KAAKiB,QAAxB,CAAX;;AAEA;AACA,kBAAIjB,KAAKF,MAAL,GAAc,CAAlB,EACA;AACEA,0BAAUE,KAAKF,MAAf;AACA6B,6BAAa3B,KAAK2B,SAAlB;AACAN;AACD;AACF;;AAED,gBAAIA,QAAQ,CAAZ,EACA;AACE,kBAAIG,SAAS,CAACH,QAAM,CAAP,IAAY/C,GAAzB;AACAwB,wBAAU0B,MAAV;AACAG,2BAAaH,MAAb;AACD;AACF,WA1BD,MA4BA;AACE,gBAAIH,QAAM,CAAV;AACA,iBAAK,IAAIZ,IAAE,CAAX,EAAcA,IAAEb,MAAhB,EAAwBa,GAAxB,EACA;AACET,qBAAON,SAASe,CAAT,EAAYC,WAAZ,EAAP;;AAEA;AACAZ,uBAASa,KAAKK,GAAL,CAASlB,MAAT,EAAiBE,KAAKF,MAAtB,CAAT;AACA6B,0BAAYhB,KAAKK,GAAL,CAASW,SAAT,EAAoB3B,KAAK2B,SAAzB,CAAZ;;AAEA;AACA,kBAAI3B,KAAKH,KAAL,GAAa,CAAjB,EACA;AACEA,yBAASG,KAAKH,KAAd;AACAoB,4BAAYjB,KAAKiB,QAAjB;AACAI;AACD;AACF;;AAED,gBAAIA,QAAQ,CAAZ,EACA;AACE,kBAAIG,SAAS,CAACH,QAAM,CAAP,IAAY/C,GAAzB;AACAuB,uBAAS2B,MAAT;AACAP,0BAAYO,MAAZ;AACD;AACF;;AAED;AACAO,mBAAS;AACPd,sBAAWA,QADJ;AAEPpB,mBAAQA,KAFD;AAGP8B,uBAAYA,SAHL;AAIP7B,oBAASA;AAJF,WAAT;AAMD;;AAED,eAAOiC,MAAP;AACD;AApQH;AA3DF,GADA,C;AA5CApE,KAAGO,EAAH,CAAMC,MAAN,CAAa6D,IAAb,CAAkBlE,aAAlB,GAAkCA,aAAlC",
  "file": "Atom.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * A atom layout. Used to place an image and label in relation\n * to each other. Useful to create buttons, list items, etc.\n *\n * *Features*\n *\n * * Gap between icon and text (using {@link #gap})\n * * Vertical and horizontal mode (using {@link #iconPosition})\n * * Sorting options to place first child on top/left or bottom/right (using {@link #iconPosition})\n * * Automatically middles/centers content to the available space\n * * Auto-sizing\n * * Supports more than two children (will be processed the same way like the previous ones)\n *\n * *Item Properties*\n *\n * None\n *\n * *Notes*\n *\n * * Does not support margins and alignment of {@link qx.ui.core.LayoutItem}.\n *\n * *Alternative Names*\n *\n * None\n */\nqx.Class.define(\"qx.ui.layout.Atom\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The gap between the icon and the text */\n    gap :\n    {\n      check : \"Integer\",\n      init : 4,\n      apply : \"_applyLayoutChange\"\n    },\n\n\n    /** The position of the icon in relation to the text */\n    iconPosition :\n    {\n      check : [\"left\", \"top\", \"right\", \"bottom\", \"top-left\", \"bottom-left\", \"top-right\", \"bottom-right\"],\n      init : \"left\",\n      apply  : \"_applyLayoutChange\"\n    },\n\n\n    /**\n     * Whether the content should be rendered centrally when to much space\n     * is available. Enabling this property centers in both axis. The behavior\n     * when disabled of the centering depends on the {@link #iconPosition} property.\n     * If the icon position is <code>left</code> or <code>right</code>, the X axis\n     * is not centered, only the Y axis. If the icon position is <code>top</code>\n     * or <code>bottom</code>, the Y axis is not centered. In case of e.g. an\n     * icon position of <code>top-left</code> no axis is centered.\n     */\n    center :\n    {\n      check : \"Boolean\",\n      init : false,\n      apply : \"_applyLayoutChange\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value) {\n        this.assert(false, \"The property '\"+name+\"' is not supported by the Atom layout!\");\n      },\n\n      \"false\" : null\n    }),\n\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      var left = padding.left;\n      var top = padding.top;\n      var Util = qx.ui.layout.Util;\n\n      var iconPosition = this.getIconPosition();\n      var children = this._getLayoutChildren();\n      var length = children.length;\n\n      var width, height;\n      var child, hint;\n      var gap = this.getGap();\n      var center = this.getCenter();\n\n      // reverse ordering\n      var allowedPositions = [\"bottom\", \"right\", \"top-right\", \"bottom-right\"];\n      if (allowedPositions.indexOf(iconPosition) != -1)\n      {\n        var start = length-1;\n        var end = -1;\n        var increment = -1;\n      }\n      else\n      {\n        var start = 0;\n        var end = length;\n        var increment = 1;\n      }\n\n      // vertical\n      if (iconPosition == \"top\" || iconPosition == \"bottom\")\n      {\n        if (center)\n        {\n          var allocatedHeight = 0;\n          for (var i=start; i!=end; i+=increment)\n          {\n            height = children[i].getSizeHint().height;\n\n            if (height > 0)\n            {\n              allocatedHeight += height;\n\n              if (i != start) {\n                allocatedHeight += gap;\n              }\n            }\n          }\n\n          top += Math.round((availHeight - allocatedHeight) / 2);\n        }\n\n        var childTop = top;\n        for (var i=start; i!=end; i+=increment)\n        {\n          child = children[i];\n\n          hint = child.getSizeHint();\n          width = Math.min(hint.maxWidth, Math.max(availWidth, hint.minWidth));\n          height = hint.height;\n\n          left = Util.computeHorizontalAlignOffset(\"center\", width, availWidth) + padding.left;\n          child.renderLayout(left, childTop, width, height);\n\n          // Ignore pseudo invisible elements\n          if (height > 0) {\n            childTop = top + height + gap;\n          }\n        }\n      }\n\n      // horizontal\n      // in this way it also supports shrinking of the first label\n      else\n      {\n        var remainingWidth = availWidth;\n        var shrinkTarget = null;\n\n        var count=0;\n        for (var i=start; i!=end; i+=increment)\n        {\n          child = children[i];\n          width = child.getSizeHint().width;\n\n          if (width > 0)\n          {\n            if (!shrinkTarget && child instanceof qx.ui.basic.Label) {\n              shrinkTarget = child;\n            } else {\n              remainingWidth -= width;\n            }\n\n            count++;\n          }\n        }\n\n        if (count > 1)\n        {\n          var gapSum = (count - 1) * gap;\n          remainingWidth -= gapSum;\n        }\n\n        if (shrinkTarget)\n        {\n          var hint = shrinkTarget.getSizeHint();\n          var shrinkTargetWidth = Math.max(hint.minWidth, Math.min(remainingWidth, hint.maxWidth));\n          remainingWidth -= shrinkTargetWidth;\n        }\n\n        if (center && remainingWidth > 0) {\n          left += Math.round(remainingWidth / 2);\n        }\n\n        for (var i=start; i!=end; i+=increment)\n        {\n          child = children[i];\n\n          hint = child.getSizeHint();\n          height = Math.min(hint.maxHeight, Math.max(availHeight, hint.minHeight));\n\n          if (child === shrinkTarget) {\n            width = shrinkTargetWidth;\n          } else {\n            width = hint.width;\n          }\n\n          var align = \"middle\";\n          if(iconPosition == \"top-left\" || iconPosition == \"top-right\"){\n            align = \"top\";\n          } else if (iconPosition == \"bottom-left\" || iconPosition == \"bottom-right\") {\n            align = \"bottom\";\n          }\n          var childTop = top + Util.computeVerticalAlignOffset(align, hint.height, availHeight);\n          child.renderLayout(left, childTop, width, height);\n\n          // Ignore pseudo invisible childs for gap e.g.\n          // empty text or unavailable images\n          if (width > 0) {\n            left += width + gap;\n          }\n        }\n      }\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      var children = this._getLayoutChildren();\n      var length = children.length;\n      var hint, result;\n\n      // Fast path for only one child\n      if (length === 1)\n      {\n        var hint = children[0].getSizeHint();\n\n        // Work on a copy, but do not respect max\n        // values as a Atom can be rendered bigger\n        // than its content.\n        result = {\n          width : hint.width,\n          height : hint.height,\n          minWidth : hint.minWidth,\n          minHeight : hint.minHeight\n        };\n      }\n      else\n      {\n        var minWidth=0, width=0;\n        var minHeight=0, height=0;\n\n        var iconPosition = this.getIconPosition();\n        var gap = this.getGap();\n\n        if (iconPosition === \"top\" || iconPosition === \"bottom\")\n        {\n          var count = 0;\n          for (var i=0; i<length; i++)\n          {\n            hint = children[i].getSizeHint();\n\n            // Max of widths\n            width = Math.max(width, hint.width);\n            minWidth = Math.max(minWidth, hint.minWidth);\n\n            // Sum of heights\n            if (hint.height > 0)\n            {\n              height += hint.height;\n              minHeight += hint.minHeight;\n              count++;\n            }\n          }\n\n          if (count > 1)\n          {\n            var gapSum = (count-1) * gap;\n            height += gapSum;\n            minHeight += gapSum;\n          }\n        }\n        else\n        {\n          var count=0;\n          for (var i=0; i<length; i++)\n          {\n            hint = children[i].getSizeHint();\n\n            // Max of heights\n            height = Math.max(height, hint.height);\n            minHeight = Math.max(minHeight, hint.minHeight);\n\n            // Sum of widths\n            if (hint.width > 0)\n            {\n              width += hint.width;\n              minWidth += hint.minWidth;\n              count++;\n            }\n          }\n\n          if (count > 1)\n          {\n            var gapSum = (count-1) * gap;\n            width += gapSum;\n            minWidth += gapSum;\n          }\n        }\n\n        // Build hint\n        result = {\n          minWidth : minWidth,\n          width : width,\n          minHeight : minHeight,\n          height : height\n        };\n      }\n\n      return result;\n    }\n  }\n});\n"
  ]
}