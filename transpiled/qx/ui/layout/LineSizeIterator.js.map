{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/layout/LineSizeIterator.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "Object",
    "construct",
    "children",
    "spacing",
    "__children",
    "__spacing",
    "__hasMoreLines",
    "length",
    "__childIndex",
    "members",
    "computeNextLine",
    "availWidth",
    "Infinity",
    "Error",
    "lineHeight",
    "lineWidth",
    "lineChildren",
    "gapsBefore",
    "i",
    "child",
    "size",
    "getSizeHint",
    "gapBefore",
    "__computeGapBeforeChild",
    "childWidth",
    "width",
    "isFirstChild",
    "childHeight",
    "height",
    "getMarginTop",
    "getMarginBottom",
    "push",
    "Math",
    "max",
    "getLayoutProperties",
    "lineBreak",
    "childIndex",
    "isFirstInLine",
    "getMarginLeft",
    "getMarginRight",
    "hasMoreLines",
    "ui",
    "layout",
    "LineSizeIterator"
  ],
  "mappings": ";;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAuBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,+BAAhB,EACA;AACEC,YAASC,MADX;;AAGE;;;;;AAKAC,eAAY,mBAASC,QAAT,EAAmBC,OAAnB,EACZ;AACE,WAAKC,UAAL,GAAkBF,QAAlB;AACA,WAAKG,SAAL,GAAiBF,OAAjB;;AAEA,WAAKG,cAAL,GAAsBJ,SAASK,MAAT,GAAkB,CAAxC;AACA,WAAKC,YAAL,GAAoB,CAApB;AACD,KAfH;;AAiBEC,aACA;AACEL,kBAAa,IADf;AAEEC,iBAAY,IAFd;AAGEC,sBAAiB,IAHnB;AAIEE,oBAAe,IAJjB;;AAOE;;;;;;;AAOAE,uBAAkB,yBAASC,UAAT,EAClB;AACE,YAAIA,aAAaA,cAAcC,QAA/B;;AAEA,YAAI,CAAC,KAAKN,cAAV,EAA0B;AACxB,gBAAM,IAAIO,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,YAAIX,WAAW,KAAKE,UAApB;AACA,YAAIU,aAAa,CAAjB;AACA,YAAIC,YAAY,CAAhB;AACA,YAAIC,eAAe,EAAnB;AACA,YAAIC,aAAa,EAAjB;;AAEA,aAAK,IAAIC,IAAE,KAAKV,YAAhB,EAA8BU,IAAEhB,SAASK,MAAzC,EAAiDW,GAAjD,EACA;AACE,cAAIC,QAAQjB,SAASgB,CAAT,CAAZ;AACA,cAAIE,OAAOD,MAAME,WAAN,EAAX;;AAEA,cAAIC,YAAY,KAAKC,uBAAL,CAA6BL,CAA7B,CAAhB;AACA,cAAIM,aAAaJ,KAAKK,KAAL,GAAaH,SAA9B;AACA,cAAII,eAAeR,KAAK,KAAKV,YAA7B;AACA,cAAI,CAACkB,YAAD,IAAiBX,YAAYS,UAAZ,GAAyBb,UAA9C,EACA;AACE,iBAAKH,YAAL,GAAoBU,CAApB;AACA;AACD;;AAED,cAAIS,cAAcP,KAAKQ,MAAL,GAAcT,MAAMU,YAAN,EAAd,GAAqCV,MAAMW,eAAN,EAAvD;AACAd,uBAAae,IAAb,CAAkBZ,KAAlB;AACAF,qBAAWc,IAAX,CAAgBT,SAAhB;AACAP,uBAAaS,UAAb;AACAV,uBAAakB,KAAKC,GAAL,CAASnB,UAAT,EAAqBa,WAArB,CAAb;;AAEA,cAAIR,MAAMe,mBAAN,GAA4BC,SAAhC,EAA2C;AACzC,iBAAK3B,YAAL,GAAoBU,IAAE,CAAtB;AACA;AACD;AACF;;AAED,YAAIA,KAAKhB,SAASK,MAAlB,EAA0B;AACxB,eAAKD,cAAL,GAAsB,KAAtB;AACD;;AAED,eAAO;AACLsB,kBAAQd,UADH;AAELW,iBAAOV,SAFF;AAGLb,oBAAUc,YAHL;AAILC,sBAAaA;AAJR,SAAP;AAMD,OAhEH;;AAmEE;;;;;;AAMAM,+BAA0B,iCAASa,UAAT,EAC1B;AACE,YAAIC,gBAAgBD,cAAc,KAAK5B,YAAvC;AACA,YAAI6B,aAAJ,EAAmB;AACjB,iBAAO,KAAKjC,UAAL,CAAgBgC,UAAhB,EAA4BE,aAA5B,EAAP;AACD,SAFD,MAEO;AACL,iBAAON,KAAKC,GAAL,CACL,KAAK7B,UAAL,CAAgBgC,aAAW,CAA3B,EAA8BG,cAA9B,EADK,EAEL,KAAKnC,UAAL,CAAgBgC,UAAhB,EAA4BE,aAA5B,EAFK,EAGL,KAAKjC,SAHA,CAAP;AAKD;AACF,OArFH;;AAwFE;;;;;AAKAmC,oBAAe,wBAAW;AACxB,eAAO,KAAKlC,cAAZ;AACD;AA/FH;AAlBF,GADA,C;AAvBAb,KAAGgD,EAAH,CAAMC,MAAN,CAAaC,gBAAb,CAA8B/C,aAA9B,GAA8CA,aAA9C",
  "file": "LineSizeIterator.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n   http://qooxdoo.org\n\n   Copyright:\n     2008 Dihedrals.com, http://www.dihedrals.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Chris Banford (zermattchris)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class iterates over the lines in a flow layout.\n *\n * @internal\n */\nqx.Class.define(\"qx.ui.layout.LineSizeIterator\",\n{\n  extend : Object,\n\n  /**\n   * @param children {qx.ui.core.Widget[]} The children of the flow layout to\n   *    compute the lines from\n   * @param spacing {Integer} The horizontal spacing between the children\n   */\n  construct : function(children, spacing)\n  {\n    this.__children = children;\n    this.__spacing = spacing;\n\n    this.__hasMoreLines = children.length > 0;\n    this.__childIndex = 0;\n  },\n\n  members :\n  {\n    __children : null,\n    __spacing : null,\n    __hasMoreLines : null,\n    __childIndex : null,\n\n\n    /**\n     * Computes the properties of the next line taking the available width into\n     * account\n     *\n     * @param availWidth {Integer} The available width for the next line\n     * @return {Map} A map containing the line's properties.\n     */\n    computeNextLine : function(availWidth)\n    {\n      var availWidth = availWidth || Infinity;\n\n      if (!this.__hasMoreLines) {\n        throw new Error(\"No more lines to compute\");\n      }\n\n      var children = this.__children;\n      var lineHeight = 0;\n      var lineWidth = 0;\n      var lineChildren = [];\n      var gapsBefore = [];\n\n      for (var i=this.__childIndex; i<children.length; i++)\n      {\n        var child = children[i];\n        var size = child.getSizeHint();\n\n        var gapBefore = this.__computeGapBeforeChild(i);\n        var childWidth = size.width + gapBefore;\n        var isFirstChild = i == this.__childIndex;\n        if (!isFirstChild && lineWidth + childWidth > availWidth)\n        {\n          this.__childIndex = i;\n          break;\n        }\n\n        var childHeight = size.height + child.getMarginTop() + child.getMarginBottom();\n        lineChildren.push(child);\n        gapsBefore.push(gapBefore);\n        lineWidth += childWidth;\n        lineHeight = Math.max(lineHeight, childHeight);\n\n        if (child.getLayoutProperties().lineBreak) {\n          this.__childIndex = i+1;\n          break;\n        }\n      }\n\n      if (i >= children.length) {\n        this.__hasMoreLines = false;\n      }\n\n      return {\n        height: lineHeight,\n        width: lineWidth,\n        children: lineChildren,\n        gapsBefore : gapsBefore\n      };\n    },\n\n\n    /**\n     * Computes the gap before the child at the given index\n     *\n     * @param childIndex {Integer} The index of the child widget\n     * @return {Integer} The gap before the given child\n     */\n    __computeGapBeforeChild : function(childIndex)\n    {\n      var isFirstInLine = childIndex == this.__childIndex;\n      if (isFirstInLine) {\n        return this.__children[childIndex].getMarginLeft();\n      } else {\n        return Math.max(\n          this.__children[childIndex-1].getMarginRight(),\n          this.__children[childIndex].getMarginLeft(),\n          this.__spacing\n        );\n      }\n    },\n\n\n    /**\n     * Whether there are more lines\n     *\n     * @return {Boolean} Whether there are more lines\n     */\n    hasMoreLines : function() {\n      return this.__hasMoreLines;\n    }\n  }\n});"
  ]
}