{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/form/DateField.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MRemoteChildrenHandling",
    "form",
    "MForm",
    "implement",
    "IForm",
    "IDateForm",
    "construct",
    "layout",
    "HBox",
    "_setLayout",
    "setAlignY",
    "textField",
    "_createChildControl",
    "addListener",
    "_onTap",
    "_onBlur",
    "e",
    "fireNonBubblingEvent",
    "event",
    "type",
    "Focus",
    "_setDefaultDateFormat",
    "_addLocaleChangeListener",
    "events",
    "properties",
    "dateFormat",
    "check",
    "apply",
    "placeholder",
    "nullable",
    "appearance",
    "refine",
    "init",
    "focusable",
    "width",
    "statics",
    "__dateFormat",
    "__formatter",
    "getDefaultDateFormatter",
    "format",
    "locale",
    "Date",
    "getDateFormat",
    "toString",
    "dispose",
    "util",
    "DateFormat",
    "Manager",
    "getInstance",
    "getLocale",
    "members",
    "__localeListenerId",
    "_forwardStates",
    "focused",
    "invalid",
    "setDateFormat",
    "DateField",
    "setValue",
    "value",
    "getChildControl",
    "dateChooser",
    "getValue",
    "textfieldValue",
    "length",
    "parse",
    "ex",
    "resetValue",
    "open",
    "popup",
    "placeToWidget",
    "show",
    "close",
    "hide",
    "toggle",
    "isListOpen",
    "isVisible",
    "_applyDateFormat",
    "old",
    "textfield",
    "dateStr",
    "currentDate",
    "_applyPlaceholder",
    "setPlaceholder",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "TextField",
    "setFocusable",
    "addState",
    "_onTextFieldChangeValue",
    "_add",
    "flex",
    "Button",
    "setKeepActive",
    "DateChooser",
    "setKeepFocus",
    "_onChangeDate",
    "Popup",
    "VBox",
    "setAutoHide",
    "add",
    "_onPopupChangeVisibility",
    "selectedDate",
    "_onKeyPress",
    "iden",
    "getKeyIdentifier",
    "isAltPressed",
    "stopPropagation",
    "getVisibility",
    "preventDefault",
    "handleKeyPress",
    "getData",
    "removeState",
    "chooser",
    "date",
    "list",
    "fireDataEvent",
    "isEmpty",
    "focus",
    "getFocusElement",
    "destruct",
    "removeListenerById"
  ],
  "mappings": "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",
  "file": "DateField.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * A *date field* is like a combo box with the date as popup. As button to\n * open the calendar a calendar icon is shown at the right to the textfield.\n *\n * To be conform with all form widgets, the {@link qx.ui.form.IForm} interface\n * is implemented.\n *\n * The following example creates a date field and sets the current\n * date as selected.\n *\n * <pre class='javascript'>\n * var dateField = new qx.ui.form.DateField();\n * this.getRoot().add(dateField, {top: 20, left: 20});\n * dateField.setValue(new Date());\n * </pre>\n *\n * @childControl list {qx.ui.control.DateChooser} date chooser component\n * @childControl popup {qx.ui.popup.Popup} popup which shows the list control\n * @childControl textfield {qx.ui.form.TextField} text field for manual date entry\n * @childControl button {qx.ui.form.Button} button that opens the list control\n */\nqx.Class.define(\"qx.ui.form.DateField\",\n{\n  extend : qx.ui.core.Widget,\n  include : [\n    qx.ui.core.MRemoteChildrenHandling,\n    qx.ui.form.MForm\n  ],\n  implement : [\n    qx.ui.form.IForm,\n    qx.ui.form.IDateForm\n  ],\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // set the layout\n    var layout = new qx.ui.layout.HBox();\n    this._setLayout(layout);\n    layout.setAlignY(\"middle\");\n\n    // text field\n    var textField = this._createChildControl(\"textfield\");\n    this._createChildControl(\"button\");\n\n    // register listeners\n    this.addListener(\"tap\", this._onTap, this);\n    this.addListener(\"blur\", this._onBlur, this);\n\n    // forward the focusin and focusout events to the textfield. The textfield\n    // is not focusable so the events need to be forwarded manually.\n    this.addListener(\"focusin\", function(e) {\n      textField.fireNonBubblingEvent(\"focusin\", qx.event.type.Focus);\n    }, this);\n\n    this.addListener(\"focusout\", function(e) {\n      textField.fireNonBubblingEvent(\"focusout\", qx.event.type.Focus);\n    }, this);\n\n    // initializes the DateField with the default format\n    this._setDefaultDateFormat();\n\n    // adds a locale change listener\n    this._addLocaleChangeListener();\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Whenever the value is changed this event is fired\n     *\n     *  Event data: The new text value of the field.\n     */\n    \"changeValue\" : \"qx.event.type.Data\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n\n    /** The formatter, which converts the selected date to a string. **/\n    dateFormat :\n    {\n      check : \"qx.util.format.DateFormat\",\n      apply : \"_applyDateFormat\"\n    },\n\n    /**\n     * String value which will be shown as a hint if the field is all of:\n     * unset, unfocused and enabled. Set to null to not show a placeholder\n     * text.\n     */\n    placeholder :\n    {\n      check : \"String\",\n      nullable : true,\n      apply : \"_applyPlaceholder\"\n    },\n\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"datefield\"\n    },\n\n    // overridden\n    focusable :\n    {\n      refine : true,\n      init : true\n    },\n\n    // overridden\n    width :\n    {\n      refine : true,\n      init : 120\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    __dateFormat : null,\n    __formatter : null,\n\n    /**\n     * Get the shared default date formatter\n     *\n     * @return {qx.util.format.DateFormat} The shared date formatter\n     */\n    getDefaultDateFormatter : function()\n    {\n      var format = qx.locale.Date.getDateFormat(\"medium\").toString();\n\n      if (format == this.__dateFormat) {\n        return this.__formatter;\n      }\n\n      if (this.__formatter) {\n        this.__formatter.dispose();\n      }\n\n      this.__formatter = new qx.util.format.DateFormat(format, qx.locale.Manager.getInstance().getLocale());\n      this.__dateFormat = format;\n\n      return this.__formatter;\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __localeListenerId : null,\n\n\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates : {\n      focused : true,\n      invalid : true\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED METHODS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Sets the default date format which is returned by\n     * {@link #getDefaultDateFormatter}. You can override this method to\n     * define your own default format.\n     */\n    _setDefaultDateFormat : function() {\n      this.setDateFormat(qx.ui.form.DateField.getDefaultDateFormatter());\n    },\n\n\n    /**\n     * Checks for \"qx.dynlocale\" and adds a listener to the locale changes.\n     * On every change, {@link #_setDefaultDateFormat} is called to reinitialize\n     * the format. You can easily override that method to prevent that behavior.\n     */\n    _addLocaleChangeListener : function() {\n      // listen for locale changes\n      if (qx.core.Environment.get(\"qx.dynlocale\"))\n      {\n        this.__localeListenerId =\n          qx.locale.Manager.getInstance().addListener(\"changeLocale\", function() {\n            this._setDefaultDateFormat();\n          }, this);\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n    * This method sets the date, which will be formatted according to\n    * #dateFormat to the date field. It will also select the date in the\n    * calendar popup.\n    *\n    * @param value {Date} The date to set.\n     */\n    setValue : function(value)\n    {\n      // set the date to the textfield\n      var textField = this.getChildControl(\"textfield\");\n      textField.setValue(this.getDateFormat().format(value));\n\n      // set the date in the datechooser\n      var dateChooser = this.getChildControl(\"list\");\n      dateChooser.setValue(value);\n    },\n\n\n    /**\n     * Returns the current set date, parsed from the input-field\n     * corresponding to the {@link #dateFormat}.\n     * If the given text could not be parsed, <code>null</code> will be returned.\n     *\n     * @return {Date} The currently set date.\n     */\n    getValue : function()\n    {\n      // get the value of the textfield\n      var textfieldValue = this.getChildControl(\"textfield\").getValue();\n\n      // return the parsed date\n      try {\n        if (textfieldValue == null || textfieldValue.length == 0) {\n          return null;\n        }\n        return this.getDateFormat().parse(textfieldValue);\n      } catch (ex) {\n        return null;\n      }\n    },\n\n\n    /**\n     * Resets the DateField. The textfield will be empty and the datechooser\n     * will also have no selection.\n     */\n    resetValue: function()\n    {\n      // set the date to the textfield\n      var textField = this.getChildControl(\"textfield\");\n      textField.setValue(\"\");\n\n      // set the date in the datechooser\n      var dateChooser = this.getChildControl(\"list\");\n      dateChooser.setValue(null);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LIST STUFF\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Shows the date chooser popup.\n     */\n    open : function()\n    {\n      var popup = this.getChildControl(\"popup\");\n\n      popup.placeToWidget(this, true);\n      popup.show();\n    },\n\n\n    /**\n     * Hides the date chooser popup.\n     */\n    close : function() {\n      this.getChildControl(\"popup\").hide();\n    },\n\n\n    /**\n     * Toggles the date chooser popup visibility.\n     */\n    toggle : function()\n    {\n      var isListOpen = this.getChildControl(\"popup\").isVisible();\n      if (isListOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply routine\n    _applyDateFormat : function(value, old)\n    {\n      // if old is undefined or null do nothing\n      if (!old) {\n        return;\n      }\n\n      // get the date with the old date format\n      try\n      {\n        var textfield = this.getChildControl(\"textfield\");\n        var dateStr = textfield.getValue();\n        if (dateStr != null) {\n          var currentDate = old.parse(dateStr);\n          textfield.setValue(value.format(currentDate));\n        }\n      }\n      catch (ex) {\n        // do nothing if the former date could not be parsed\n      }\n    },\n\n\n    // property apply routine\n    _applyPlaceholder : function(value, old) {\n      this.getChildControl(\"textfield\").setPlaceholder(value);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"textfield\":\n          control = new qx.ui.form.TextField();\n          control.setFocusable(false);\n          control.addState(\"inner\");\n          control.addListener(\"changeValue\", this._onTextFieldChangeValue, this);\n          control.addListener(\"blur\", this.close, this);\n          this._add(control, {flex: 1});\n          break;\n\n        case \"button\":\n          control = new qx.ui.form.Button();\n          control.setFocusable(false);\n          control.setKeepActive(true);\n          control.addState(\"inner\");\n          control.addListener(\"execute\", this.toggle, this);\n          this._add(control);\n          break;\n\n        case \"list\":\n          control = new qx.ui.control.DateChooser();\n          control.setFocusable(false);\n          control.setKeepFocus(true);\n          control.addListener(\"execute\", this._onChangeDate, this);\n          break;\n\n        case \"popup\":\n          control = new qx.ui.popup.Popup(new qx.ui.layout.VBox);\n          control.setAutoHide(false);\n          control.add(this.getChildControl(\"list\"));\n          control.addListener(\"pointerup\", this._onChangeDate, this);\n          control.addListener(\"changeVisibility\", this._onPopupChangeVisibility, this);\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n\n\n   /*\n   ---------------------------------------------------------------------------\n     EVENT LISTENERS\n   ---------------------------------------------------------------------------\n   */\n\n   /**\n    * Handler method which handles the tap on the calender popup.\n    *\n    * @param e {qx.event.type.Pointer} The pointer event.\n    */\n    _onChangeDate : function(e)\n    {\n      var textField = this.getChildControl(\"textfield\");\n\n      var selectedDate = this.getChildControl(\"list\").getValue();\n\n      textField.setValue(this.getDateFormat().format(selectedDate));\n      this.close();\n    },\n\n\n    /**\n     * Toggles the popup's visibility.\n     *\n     * @param e {qx.event.type.Pointer} Pointer tap event\n     */\n    _onTap : function(e) {\n      this.close();\n    },\n\n\n    /**\n     * Handler for the blur event of the current widget.\n     *\n     * @param e {qx.event.type.Focus} The blur event.\n     */\n    _onBlur : function(e) {\n      this.close();\n    },\n\n\n    /**\n     * Handler method which handles the key press. It forwards all key event\n     * to the opened date chooser except the escape key event. Escape closes\n     * the popup.\n     * If the list is cloned, all key events will not be processed further.\n     *\n     * @param e {qx.event.type.KeySequence} Keypress event\n     */\n    _onKeyPress : function(e)\n    {\n      // get the key identifier\n      var iden = e.getKeyIdentifier();\n      if (iden == \"Down\" && e.isAltPressed())\n      {\n        this.toggle();\n        e.stopPropagation();\n        return;\n      }\n\n      // if the popup is closed, ignore all\n      var popup = this.getChildControl(\"popup\");\n      if (popup.getVisibility() == \"hidden\") {\n        return;\n      }\n\n      // hide the list always on escape\n      if (iden == \"Escape\")\n      {\n        this.close();\n        e.stopPropagation();\n        return;\n      }\n\n      // Stop navigation keys when popup is open\n      if (iden === \"Left\" || iden === \"Right\" || iden === \"Down\" || iden === \"Up\") {\n        e.preventDefault();\n      }\n\n      // forward the rest of the events to the date chooser\n      this.getChildControl(\"list\").handleKeyPress(e);\n    },\n\n\n    /**\n     * Redirects changeVisibility event from the list to this widget.\n     *\n     * @param e {qx.event.type.Data} Property change event\n     */\n    _onPopupChangeVisibility : function(e)\n    {\n      e.getData() == \"visible\" ? this.addState(\"popupOpen\") : this.removeState(\"popupOpen\");\n\n      // Synchronize the chooser with the current value on every\n      // opening of the popup. This is needed when the value has been\n      // modified and not saved yet (e.g. no blur)\n      var popup = this.getChildControl(\"popup\");\n      if (popup.isVisible())\n      {\n        var chooser = this.getChildControl(\"list\");\n        var date = this.getValue();\n        chooser.setValue(date);\n      }\n    },\n\n\n    /**\n     * Reacts on value changes of the text field and syncs the\n     * value to the combobox.\n     *\n     * @param e {qx.event.type.Data} Change event\n     */\n    _onTextFieldChangeValue : function(e)\n    {\n      // Apply to popup\n      var date = this.getValue();\n      if (date != null)\n      {\n        var list = this.getChildControl(\"list\");\n        list.setValue(date);\n      }\n\n      // Fire event\n      this.fireDataEvent(\"changeValue\", this.getValue());\n    },\n\n\n    /**\n     * Checks if the textfield of the DateField is empty.\n     *\n     * @return {Boolean} True, if the textfield of the DateField is empty.\n     */\n    isEmpty: function()\n    {\n      var value = this.getChildControl(\"textfield\").getValue();\n      return value == null || value == \"\";\n    },\n\n    // overridden\n    focus : function()\n    {\n      this.base(arguments);\n      this.getChildControl(\"textfield\").getFocusElement().focus();\n    }\n  },\n\n\n  destruct : function() {\n    // listen for locale changes\n    if (qx.core.Environment.get(\"qx.dynlocale\"))\n    {\n      if (this.__localeListenerId) {\n        qx.locale.Manager.getInstance().removeListenerById(this.__localeListenerId);\n      }\n    }\n  }\n});\n"
  ]
}