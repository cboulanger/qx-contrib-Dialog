{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/form/Form.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__groups",
    "_buttons",
    "_buttonOptions",
    "_validationManager",
    "_createValidationManager",
    "_resetter",
    "_createResetter",
    "events",
    "members",
    "_groupCounter",
    "add",
    "item",
    "label",
    "validator",
    "name",
    "validatorContext",
    "options",
    "__isFirstAdd",
    "push",
    "title",
    "items",
    "labels",
    "names",
    "headerOptions",
    "replace",
    "fireEvent",
    "addGroupHeader",
    "addButton",
    "button",
    "length",
    "remove",
    "i",
    "group",
    "j",
    "storedItem",
    "splice",
    "removeGroupHeader",
    "targetGroup",
    "concat",
    "removeButton",
    "storedButton",
    "getItems",
    "getItem",
    "reset",
    "redefineResetter",
    "redefine",
    "redefineResetterItem",
    "redefineItem",
    "validate",
    "getValidationManager",
    "getGroups",
    "getButtons",
    "getButtonOptions",
    "ui",
    "form",
    "validation",
    "Manager",
    "Resetter",
    "destruct",
    "dispose",
    "Form"
  ],
  "mappings": "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",
  "file": "Form.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The form object is responsible for managing form items. For that, it takes\n * advantage of two existing qooxdoo classes.\n * The {@link qx.ui.form.Resetter} is used for resetting and the\n * {@link qx.ui.form.validation.Manager} is used for all validation purposes.\n *\n * The view code can be found in the used renderer ({@link qx.ui.form.renderer}).\n */\nqx.Class.define(\"qx.ui.form.Form\",\n{\n  extend : qx.core.Object,\n\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    this.__groups = [];\n    this._buttons = [];\n    this._buttonOptions = [];\n    this._validationManager = this._createValidationManager();\n    this._resetter = this._createResetter();\n  },\n\n\n  events : {\n    /** Fired as soon as something changes in the form.*/\n    \"change\" : \"qx.event.type.Event\"\n  },\n\n\n  members :\n  {\n    __groups : null,\n    _validationManager : null,\n    _groupCounter : 0,\n    _buttons : null,\n    _buttonOptions : null,\n    _resetter : null,\n\n    /*\n    ---------------------------------------------------------------------------\n       ADD\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Adds a form item to the form including its internal\n     * {@link qx.ui.form.validation.Manager} and {@link qx.ui.form.Resetter}.\n     *\n     * *Hint:* The order of all add calls represent the order in the layout.\n     *\n     * @param item {qx.ui.form.IForm} A supported form item.\n     * @param label {String} The string, which should be used as label.\n     * @param validator {Function | qx.ui.form.validation.AsyncValidator ? null}\n     *   The validator which is used by the validation\n     *   {@link qx.ui.form.validation.Manager}.\n     * @param name {String?null} The name which is used by the data binding\n     *   controller {@link qx.data.controller.Form}.\n     * @param validatorContext {var?null} The context of the validator.\n     * @param options {Map?null} An additional map containing custom data which\n     *   will be available in your form renderer specific to the added item.\n     */\n    add : function(item, label, validator, name, validatorContext, options) {\n      if (this.__isFirstAdd()) {\n        this.__groups.push({\n          title: null, items: [], labels: [], names: [],\n          options: [], headerOptions: {}\n        });\n      }\n      // save the given arguments\n      this.__groups[this._groupCounter].items.push(item);\n      this.__groups[this._groupCounter].labels.push(label);\n      this.__groups[this._groupCounter].options.push(options);\n      // if no name is given, use the label without not working character\n      if (name == null) {\n        name = label.replace(\n          /\\s+|&|-|\\+|\\*|\\/|\\||!|\\.|,|:|\\?|;|~|%|\\{|\\}|\\(|\\)|\\[|\\]|<|>|=|\\^|@|\\\\/g, \"\"\n        );\n      }\n      this.__groups[this._groupCounter].names.push(name);\n\n      // add the item to the validation manager\n      this._validationManager.add(item, validator, validatorContext);\n      // add the item to the reset manager\n      this._resetter.add(item);\n      // fire the change event\n      this.fireEvent(\"change\");\n    },\n\n\n    /**\n     * Adds a group header to the form.\n     *\n     * *Hint:* The order of all add calls represent the order in the layout.\n     *\n     * @param title {String} The title of the group header.\n     * @param options {Map?null} A special set of custom data which will be\n     *   given to the renderer.\n     */\n    addGroupHeader : function(title, options) {\n      if (!this.__isFirstAdd()) {\n        this._groupCounter++;\n      }\n      this.__groups.push({\n        title: title, items: [], labels: [], names: [],\n        options: [], headerOptions: options\n      });\n      // fire the change event\n      this.fireEvent(\"change\");\n    },\n\n\n    /**\n     * Adds a button to the form.\n     *\n     * *Hint:* The order of all add calls represent the order in the layout.\n     *\n     * @param button {qx.ui.form.Button} The button to add.\n     * @param options {Map?null} An additional map containing custom data which\n     *   will be available in your form renderer specific to the added button.\n     */\n    addButton : function(button, options) {\n      this._buttons.push(button);\n      this._buttonOptions.push(options || null);\n      // fire the change event\n      this.fireEvent(\"change\");\n    },\n\n\n    /**\n     * Returns whether something has already been added.\n     *\n     * @return {Boolean} true, if nothing has been added jet.\n     */\n    __isFirstAdd : function() {\n      return this.__groups.length === 0;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       REMOVE\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Removes the given item from the form.\n     *\n     * @param item {qx.ui.form.IForm} A supported form item.\n     * @return {Boolean} <code>true</code>, if the item could be removed.\n     */\n    remove : function(item) {\n      for (var i = 0; i < this.__groups.length; i++) {\n        var group = this.__groups[i];\n        for (var j = 0; j < group.items.length; j++) {\n          var storedItem = group.items[j];\n          if (storedItem === item) {\n            // remove all stored data\n            group.items.splice(j, 1);\n            group.labels.splice(j, 1);\n            group.names.splice(j, 1);\n            group.options.splice(j, 1);\n\n            // remove the item to the validation manager\n            this._validationManager.remove(item);\n            // remove the item to the reset manager\n            this._resetter.remove(item);\n\n            // fire the change event\n            this.fireEvent(\"change\");\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n\n    /**\n     * Removes the given group header from the form. All items in the group will be moved to\n     * another group (usually the previous group). If there is more than one group with\n     * the same title, only the first group will be removed.\n     *\n     * @param title {String} The title.\n     * @return {Boolean} <code>true</code>, if the header could be removed.\n     */\n    removeGroupHeader : function(title) {\n      for (var i = 0; i < this.__groups.length; i++) {\n        var group = this.__groups[i];\n        if (group.title === title) {\n          var targetGroup;\n\n          // if it's the first group\n          if (i == 0) {\n            // if it's the only group\n            if (this.__groups.length == 1) {\n              // remove the title and the header options\n              group.title = null;\n              group.headerOptions = {};\n              // fire the change event\n              this.fireEvent(\"change\");\n              return true;\n            } else {\n              // add to the next\n              targetGroup = this.__groups[i+1];\n            }\n          } else {\n            // add to the previous group\n            targetGroup = this.__groups[i-1];\n          }\n\n          // copy the data over\n          targetGroup.items = targetGroup.items.concat(group.items);\n          targetGroup.labels = targetGroup.labels.concat(group.labels);\n          targetGroup.names = targetGroup.names.concat(group.names);\n          targetGroup.options = targetGroup.options.concat(group.options);\n\n          // delete the group\n          this.__groups.splice(i, 1);\n\n          this._groupCounter--;\n\n          // fire the change event\n          this.fireEvent(\"change\");\n          return true;\n        }\n      }\n      return false;\n    },\n\n\n    /**\n     * Removes the given button from the form.\n     *\n     * @param button {qx.ui.form.Button} The button to remove.\n     * @return {Boolean} <code>true</code>, if the button could be removed.\n     */\n    removeButton : function(button) {\n      for (var i = 0; i < this._buttons.length; i++) {\n        var storedButton = this._buttons[i];\n        if (storedButton === button) {\n          this._buttons.splice(i, 1);\n          this._buttonOptions.splice(i, 1);\n          // fire the change event\n          this.fireEvent(\"change\");\n          return true;\n        }\n      }\n      return false;\n    },\n\n\n    /**\n     * Returns all added items as a map.\n     *\n     * @return {Map} A map containing for every item an entry with its name.\n     */\n    getItems : function() {\n      var items = {};\n      // go threw all groups\n      for (var i = 0; i < this.__groups.length; i++) {\n        var group = this.__groups[i];\n        // get all items\n        for (var j = 0; j < group.names.length; j++) {\n          var name = group.names[j];\n          items[name] = group.items[j];\n        }\n      }\n      return items;\n    },\n\n\n    /**\n     * Return an item by name.\n     *\n     * @param name {string} Item name.\n     * @return {qx.ui.form.IForm|null} The form item or null.\n     */\n    getItem : function(name) {\n      for (var i = 0; i < this.__groups.length; i++) {\n        var group = this.__groups[i];\n        for (var j = 0; j < group.names.length; j++) {\n          if (group.names[j] === name) {\n            return group.items[j];\n          }\n        }\n      }\n\n      return null;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       RESET SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Resets the form. This means reseting all form items and the validation.\n     */\n    reset : function() {\n      this._resetter.reset();\n      this._validationManager.reset();\n    },\n\n\n    /**\n     * Redefines the values used for resetting. It calls\n     * {@link qx.ui.form.Resetter#redefine} to get that.\n     */\n    redefineResetter : function() {\n      this._resetter.redefine();\n    },\n\n\n    /**\n     * Redefines the value used for resetting of the given item. It calls\n     * {@link qx.ui.form.Resetter#redefineItem} to get that.\n     *\n     * @param item {qx.ui.core.Widget} The item to redefine.\n     */\n    redefineResetterItem : function(item) {\n      this._resetter.redefineItem(item);\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       VALIDATION\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Validates the form using the\n     * {@link qx.ui.form.validation.Manager#validate} method.\n     *\n     * @return {Boolean | null} The validation result.\n     */\n    validate : function() {\n      return this._validationManager.validate();\n    },\n\n\n    /**\n     * Returns the internally used validation manager. If you want to do some\n     * enhanced validation tasks, you need to use the validation manager.\n     *\n     * @return {qx.ui.form.validation.Manager} The used manager.\n     */\n    getValidationManager : function() {\n      return this._validationManager;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       RENDERER SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Accessor method for the renderer which returns all added items in a\n     * array containing a map of all items:\n     * {title: title, items: [], labels: [], names: []}\n     *\n     * @return {Array} An array containing all necessary data for the renderer.\n     * @internal\n     */\n    getGroups : function() {\n      return this.__groups;\n    },\n\n\n    /**\n     * Accessor method for the renderer which returns all added buttons in an\n     * array.\n     * @return {Array} An array containing all added buttons.\n     * @internal\n     */\n    getButtons : function() {\n      return this._buttons;\n    },\n\n\n    /**\n     * Accessor method for the renderer which returns all added options for\n     * the buttons in an array.\n     * @return {Array} An array containing all added options for the buttons.\n     * @internal\n     */\n    getButtonOptions : function() {\n      return this._buttonOptions;\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n       INTERNAL\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Creates and returns the used validation manager.\n     *\n     * @return {qx.ui.form.validation.Manager} The validation manager.\n     */\n    _createValidationManager : function() {\n      return new qx.ui.form.validation.Manager();\n    },\n\n\n    /**\n     * Creates and returns the used resetter.\n     *\n     * @return {qx.ui.form.Resetter} the resetter class.\n     */\n    _createResetter : function() {\n      return new qx.ui.form.Resetter();\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n  destruct : function()\n  {\n    // holding references to widgets --> must set to null\n    this.__groups = this._buttons = this._buttonOptions = null;\n    this._validationManager.dispose();\n    this._resetter.dispose();\n  }\n});\n"
  ]
}