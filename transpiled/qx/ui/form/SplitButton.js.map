{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/form/SplitButton.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MExecutable",
    "implement",
    "form",
    "IExecutable",
    "construct",
    "label",
    "icon",
    "menu",
    "command",
    "_setLayout",
    "layout",
    "HBox",
    "_createChildControl",
    "addListener",
    "_onPointerOver",
    "_onPointerOut",
    "_onKeyDown",
    "_onKeyUp",
    "setLabel",
    "setIcon",
    "setMenu",
    "setCommand",
    "properties",
    "appearance",
    "refine",
    "init",
    "focusable",
    "apply",
    "nullable",
    "check",
    "themeable",
    "show",
    "inheritable",
    "event",
    "members",
    "__cursorIsOut",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "Button",
    "_onButtonExecute",
    "setFocusable",
    "_addAt",
    "flex",
    "MenuButton",
    "setShow",
    "_forwardStates",
    "hovered",
    "focused",
    "_applyLabel",
    "value",
    "old",
    "button",
    "getChildControl",
    "resetLabel",
    "_applyIcon",
    "resetIcon",
    "_applyMenu",
    "arrow",
    "resetEnabled",
    "setOpener",
    "_onChangeMenuVisibility",
    "setEnabled",
    "resetMenu",
    "removeListener",
    "resetOpener",
    "_applyShow",
    "e",
    "stopPropagation",
    "addState",
    "hasState",
    "related",
    "getRelatedTarget",
    "contains",
    "getMenu",
    "isVisible",
    "removeState",
    "getKeyIdentifier",
    "execute",
    "SplitButton"
  ],
  "mappings": "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",
  "file": "SplitButton.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * A button which acts as a normal button and shows a menu on one\n * of the sides to open something like a history list.\n *\n * @childControl button {qx.ui.form.Button} button to execute action\n * @childControl arrow {qx.ui.form.MenuButton} arrow to open the popup\n */\nqx.Class.define(\"qx.ui.form.SplitButton\",\n{\n  extend : qx.ui.core.Widget,\n  include : [qx.ui.core.MExecutable],\n  implement : [qx.ui.form.IExecutable],\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param label {String} Label to use\n   * @param icon {String?null} Icon to use\n   * @param menu {qx.ui.menu.Menu} Connect to menu instance\n   * @param command {qx.ui.command.Command} Command instance to connect with\n   */\n  construct : function(label, icon, menu, command)\n  {\n    this.base(arguments);\n\n    this._setLayout(new qx.ui.layout.HBox);\n\n    // Force arrow creation\n    this._createChildControl(\"arrow\");\n\n    // Add pointer listeners\n    this.addListener(\"pointerover\", this._onPointerOver, this, true);\n    this.addListener(\"pointerout\", this._onPointerOut, this, true);\n\n    // Add key listeners\n    this.addListener(\"keydown\", this._onKeyDown);\n    this.addListener(\"keyup\", this._onKeyUp);\n\n    // Process incoming arguments\n    if (label != null) {\n      this.setLabel(label);\n    }\n\n    if (icon != null) {\n      this.setIcon(icon);\n    }\n\n    if (menu != null) {\n      this.setMenu(menu);\n    }\n\n    if (command != null) {\n      this.setCommand(command);\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"splitbutton\"\n    },\n\n    // overridden\n    focusable :\n    {\n      refine : true,\n      init : true\n    },\n\n\n    /** The label/caption/text of the qx.ui.basic.Atom instance */\n    label :\n    {\n      apply : \"_applyLabel\",\n      nullable : true,\n      check : \"String\"\n    },\n\n\n    /** Any URI String supported by qx.ui.basic.Image to display an icon */\n    icon :\n    {\n      check : \"String\",\n      apply : \"_applyIcon\",\n      nullable : true,\n      themeable : true\n    },\n\n\n    /**\n     * Configure the visibility of the sub elements/widgets.\n     * Possible values: both, text, icon\n     */\n    show :\n    {\n      init : \"both\",\n      check : [ \"both\", \"label\", \"icon\" ],\n      themeable : true,\n      inheritable : true,\n      apply : \"_applyShow\",\n      event : \"changeShow\"\n    },\n\n\n    /** The menu instance to show when tapping on the button */\n    menu :\n    {\n      check : \"qx.ui.menu.Menu\",\n      nullable : true,\n      apply : \"_applyMenu\",\n      event : \"changeMenu\"\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __cursorIsOut : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"button\":\n          control = new qx.ui.form.Button;\n          control.addListener(\"execute\", this._onButtonExecute, this);\n          control.setFocusable(false);\n          this._addAt(control, 0, {flex: 1});\n          break;\n\n        case \"arrow\":\n          control = new qx.ui.form.MenuButton();\n          control.setFocusable(false);\n          control.setShow(\"both\");\n          this._addAt(control, 1);\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates :\n    {\n      hovered : 1,\n      focused : 1\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyLabel : function(value, old)\n    {\n      var button = this.getChildControl(\"button\");\n      value == null ? button.resetLabel() : button.setLabel(value);\n    },\n\n    // property apply\n    _applyIcon : function(value, old)\n    {\n      var button = this.getChildControl(\"button\");\n      value == null ? button.resetIcon() : button.setIcon(value);\n    },\n\n    // property apply\n    _applyMenu : function(value, old)\n    {\n      var arrow = this.getChildControl(\"arrow\");\n\n      if (value)\n      {\n        arrow.resetEnabled();\n        arrow.setMenu(value);\n        value.setOpener(this);\n\n        value.addListener(\"changeVisibility\", this._onChangeMenuVisibility, this);\n      }\n      else\n      {\n        arrow.setEnabled(false);\n        arrow.resetMenu();\n      }\n\n      if (old)\n      {\n        old.removeListener(\"changeVisibility\", this._onChangeMenuVisibility, this);\n        old.resetOpener();\n      }\n    },\n\n    // property apply\n    _applyShow : function(value, old) {\n      // pass: is already inherited to the button\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Listener for <code>pointerover</code> event\n     *\n     * @param e {qx.event.type.Pointer} pointerover event\n     */\n    _onPointerOver : function(e)\n    {\n      // Captured listener\n      // Whole stop for event, do not let the\n      // inner buttons know about this event.\n      e.stopPropagation();\n\n      // Add hover state, is forwarded to the buttons\n      this.addState(\"hovered\");\n\n      // Delete cursor out flag\n      delete this.__cursorIsOut;\n    },\n\n\n    /**\n     * Listener for <code>pointerout</code> event\n     *\n     * @param e {qx.event.type.Pointer} pointerout event\n     */\n    _onPointerOut : function(e)\n    {\n      // Captured listener\n      // Whole stop for event, do not let the\n      // inner buttons know about this event.\n      e.stopPropagation();\n\n      // First simple state check\n      if (!this.hasState(\"hovered\")) {\n        return;\n      }\n\n      // Only when the related target is not part of the button\n      var related = e.getRelatedTarget();\n      if (qx.ui.core.Widget.contains(this, related)) {\n        return;\n      }\n\n      // When the menu is visible (cursor moved to the menu)\n      // keep the hover state on the whole button\n      var menu = this.getMenu();\n      if (menu && menu.isVisible())\n      {\n        this.__cursorIsOut = true;\n        return;\n      }\n\n      // Finally remove state\n      this.removeState(\"hovered\");\n    },\n\n\n    /**\n     * Event listener for all keyboard events\n     *\n     * @param e {qx.event.type.KeySequence} Event object\n     */\n    _onKeyDown : function(e)\n    {\n      var button = this.getChildControl(\"button\");\n      switch(e.getKeyIdentifier())\n      {\n        case \"Enter\":\n        case \"Space\":\n          button.removeState(\"abandoned\");\n          button.addState(\"pressed\");\n      }\n    },\n\n\n    /**\n     * Event listener for all keyboard events\n     *\n     * @param e {qx.event.type.KeySequence} Event object\n     */\n    _onKeyUp : function(e)\n    {\n      var button = this.getChildControl(\"button\");\n      switch(e.getKeyIdentifier())\n      {\n        case \"Enter\":\n        case \"Space\":\n          if (button.hasState(\"pressed\"))\n          {\n            button.removeState(\"abandoned\");\n            button.removeState(\"pressed\");\n            button.execute();\n          }\n      }\n    },\n\n\n    /**\n     * Event listener for button's execute event.\n     *\n     * @param e {qx.event.type.Event} execute event of the button\n     */\n    _onButtonExecute : function(e)\n    {\n      // forward execute event\n      this.execute();\n    },\n\n\n    /**\n     * Event listener for visibility changes of the menu\n     *\n     * @param e {qx.event.type.Data} property change event\n     */\n    _onChangeMenuVisibility : function(e)\n    {\n      if (!this.getMenu().isVisible() && this.__cursorIsOut) {\n        this.removeState(\"hovered\");\n      }\n    }\n  }\n});\n"
  ]
}