{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/form/AbstractSelectBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MRemoteChildrenHandling",
    "form",
    "MForm",
    "implement",
    "IForm",
    "type",
    "construct",
    "layout",
    "HBox",
    "_setLayout",
    "setAlignY",
    "addListener",
    "_onKeyPress",
    "_onBlur",
    "_onResize",
    "properties",
    "focusable",
    "refine",
    "init",
    "width",
    "maxListHeight",
    "check",
    "apply",
    "nullable",
    "format",
    "item",
    "_defaultFormat",
    "members",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "List",
    "set",
    "keepFocus",
    "height",
    "maxHeight",
    "getMaxListHeight",
    "selectionMode",
    "quickSelection",
    "_onListChangeSelection",
    "_onListPointerDown",
    "getChildControl",
    "close",
    "popup",
    "Popup",
    "VBox",
    "setAutoHide",
    "setKeepActive",
    "add",
    "_onPopupChangeVisibility",
    "_applyMaxListHeight",
    "value",
    "old",
    "setMaxHeight",
    "getChildrenContainer",
    "open",
    "placeToWidget",
    "show",
    "hide",
    "toggle",
    "isListOpen",
    "isVisible",
    "valueLabel",
    "getLabel",
    "rich",
    "getRich",
    "replace",
    "bom",
    "String",
    "unescape",
    "e",
    "identifier",
    "getKeyIdentifier",
    "listPopup",
    "isHidden",
    "stopPropagation",
    "stop",
    "handleKeyPress",
    "setMinWidth",
    "getData",
    "Error",
    "addState",
    "removeState",
    "AbstractSelectBox"
  ],
  "mappings": "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",
  "file": "AbstractSelectBox.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Sebastian Werner (wpbasti)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Basic class for a selectbox like lists. Basically supports a popup\n * with a list and the whole children management.\n *\n * @childControl list {qx.ui.form.List} list component of the selectbox\n * @childControl popup {qx.ui.popup.Popup} popup which shows the list\n *\n */\nqx.Class.define(\"qx.ui.form.AbstractSelectBox\",\n{\n  extend  : qx.ui.core.Widget,\n  include : [\n    qx.ui.core.MRemoteChildrenHandling,\n    qx.ui.form.MForm\n  ],\n  implement : [\n    qx.ui.form.IForm\n  ],\n  type : \"abstract\",\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // set the layout\n    var layout = new qx.ui.layout.HBox();\n    this._setLayout(layout);\n    layout.setAlignY(\"middle\");\n\n    // Register listeners\n    this.addListener(\"keypress\", this._onKeyPress);\n    this.addListener(\"blur\", this._onBlur, this);\n\n    // register the resize listener\n    this.addListener(\"resize\", this._onResize, this);\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    focusable :\n    {\n      refine : true,\n      init : true\n    },\n\n    // overridden\n    width :\n    {\n      refine : true,\n      init : 120\n    },\n\n    /**\n     * The maximum height of the list popup. Setting this value to\n     * <code>null</code> will set cause the list to be auto-sized.\n     */\n    maxListHeight :\n    {\n      check : \"Number\",\n      apply : \"_applyMaxListHeight\",\n      nullable: true,\n      init : 200\n    },\n\n    /**\n     * Formatter which format the value from the selected <code>ListItem</code>.\n     * Uses the default formatter {@link #_defaultFormat}.\n     */\n    format :\n    {\n      check : \"Function\",\n      init : function(item) {\n        return this._defaultFormat(item);\n      },\n      nullable : true\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"list\":\n          control = new qx.ui.form.List().set({\n            focusable: false,\n            keepFocus: true,\n            height: null,\n            width: null,\n            maxHeight: this.getMaxListHeight(),\n            selectionMode: \"one\",\n            quickSelection: true\n          });\n\n          control.addListener(\"changeSelection\", this._onListChangeSelection, this);\n          control.addListener(\"pointerdown\", this._onListPointerDown, this);\n          control.getChildControl(\"pane\").addListener(\"tap\", this.close, this);\n          break;\n\n        case \"popup\":\n          control = new qx.ui.popup.Popup(new qx.ui.layout.VBox());\n          control.setAutoHide(false);\n          control.setKeepActive(true);\n          control.add(this.getChildControl(\"list\"));\n\n          control.addListener(\"changeVisibility\", this._onPopupChangeVisibility, this);\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyMaxListHeight : function(value, old) {\n      this.getChildControl(\"list\").setMaxHeight(value);\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the list widget.\n     * @return {qx.ui.form.List} the list\n     */\n    getChildrenContainer : function() {\n      return this.getChildControl(\"list\");\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LIST STUFF\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Shows the list popup.\n     */\n    open : function()\n    {\n      var popup = this.getChildControl(\"popup\");\n\n      popup.placeToWidget(this, true);\n      popup.show();\n    },\n\n\n    /**\n     * Hides the list popup.\n     */\n    close : function() {\n      this.getChildControl(\"popup\").hide();\n    },\n\n\n    /**\n     * Toggles the popup's visibility.\n     */\n    toggle : function()\n    {\n      var isListOpen = this.getChildControl(\"popup\").isVisible();\n      if (isListOpen) {\n        this.close();\n      } else {\n        this.open();\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      FORMAT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Return the formatted label text from the <code>ListItem</code>.\n     * The formatter removes all HTML tags and converts all HTML entities\n     * to string characters when the rich property is <code>true</code>.\n     *\n     * @param item {qx.ui.form.ListItem} The list item to format.\n     * @return {String} The formatted text.\n     */\n    _defaultFormat : function(item)\n    {\n      var valueLabel = item ? item.getLabel() : \"\";\n      var rich = item ? item.getRich() : false;\n\n      if (rich) {\n        valueLabel = valueLabel.replace(/<[^>]+?>/g, \"\");\n        valueLabel = qx.bom.String.unescape(valueLabel);\n      }\n\n      return valueLabel;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for the blur event of the current widget.\n     *\n     * @param e {qx.event.type.Focus} The blur event.\n     */\n    _onBlur : function(e)\n    {\n      this.close();\n    },\n\n\n    /**\n     * Reacts on special keys and forwards other key events to the list widget.\n     *\n     * @param e {qx.event.type.KeySequence} Keypress event\n     */\n    _onKeyPress : function(e)\n    {\n      // get the key identifier\n      var identifier = e.getKeyIdentifier();\n      var listPopup = this.getChildControl(\"popup\");\n\n      // disabled pageUp and pageDown keys\n      if (listPopup.isHidden() && (identifier == \"PageDown\" || identifier == \"PageUp\")) {\n        e.stopPropagation();\n      }\n\n      // hide the list always on escape\n      else if (!listPopup.isHidden() && identifier == \"Escape\")\n      {\n        this.close();\n        e.stop();\n      }\n\n      // forward the rest of the events to the list\n      else\n      {\n        this.getChildControl(\"list\").handleKeyPress(e);\n      }\n    },\n\n\n    /**\n     * Updates list minimum size.\n     *\n     * @param e {qx.event.type.Data} Data event\n     */\n    _onResize : function(e){\n      this.getChildControl(\"popup\").setMinWidth(e.getData().width);\n    },\n\n\n    /**\n     * Syncs the own property from the list change\n     *\n     * @param e {qx.event.type.Data} Data Event\n     */\n    _onListChangeSelection : function(e) {\n      throw new Error(\"Abstract method: _onListChangeSelection()\");\n    },\n\n\n    /**\n     * Redirects pointerdown event from the list to this widget.\n     *\n     * @param e {qx.event.type.Pointer} Pointer Event\n     */\n    _onListPointerDown : function(e) {\n      throw new Error(\"Abstract method: _onListPointerDown()\");\n    },\n\n\n    /**\n     * Redirects changeVisibility event from the list to this widget.\n     *\n     * @param e {qx.event.type.Data} Property change event\n     */\n    _onPopupChangeVisibility : function(e) {\n      e.getData() == \"visible\" ? this.addState(\"popupOpen\") : this.removeState(\"popupOpen\");\n    }\n  }\n});\n"
  ]
}