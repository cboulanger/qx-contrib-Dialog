{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/form/ComboBox.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "AbstractSelectBox",
    "implement",
    "IStringForm",
    "construct",
    "textField",
    "_createChildControl",
    "addListener",
    "_onTap",
    "e",
    "fireNonBubblingEvent",
    "event",
    "type",
    "Focus",
    "properties",
    "appearance",
    "refine",
    "init",
    "placeholder",
    "check",
    "nullable",
    "apply",
    "events",
    "members",
    "__preSelectedItem",
    "__onInputId",
    "_applyPlaceholder",
    "value",
    "old",
    "getChildControl",
    "setPlaceholder",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "TextField",
    "setFocusable",
    "addState",
    "_onTextFieldChangeValue",
    "close",
    "_add",
    "flex",
    "Button",
    "setKeepActive",
    "toggle",
    "setSelectionMode",
    "_forwardStates",
    "focused",
    "invalid",
    "tabFocus",
    "field",
    "getFocusElement",
    "focus",
    "selectAllText",
    "setValue",
    "textfield",
    "getValue",
    "resetValue",
    "_onKeyPress",
    "popup",
    "iden",
    "getKeyIdentifier",
    "isAltPressed",
    "stopPropagation",
    "isVisible",
    "_setPreselectedItem",
    "resetAllTextSelection",
    "stop",
    "_onListPointerDown",
    "label",
    "getLabel",
    "getFormat",
    "call",
    "translate",
    "_onListChangeSelection",
    "current",
    "getData",
    "length",
    "list",
    "ctx",
    "getSelectionContext",
    "_onPopupChangeVisibility",
    "item",
    "findItem",
    "setSelection",
    "resetSelection",
    "getOldData",
    "removeState",
    "fireDataEvent",
    "getTextSelection",
    "getTextSelectionLength",
    "setTextSelection",
    "start",
    "end",
    "clearTextSelection",
    "ComboBox"
  ],
  "mappings": "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",
  "file": "ComboBox.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n     * Sebastian Werner (wpbasti)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Basically a text fields which allows a selection from a list of\n * preconfigured options. Allows custom user input. Public API is value\n * oriented.\n *\n * To work with selections without custom input the ideal candidates are\n * the {@link SelectBox} or the {@link RadioGroup}.\n *\n * @childControl textfield {qx.ui.form.TextField} textfield component of the combobox\n * @childControl button {qx.ui.form.Button} button to open the list popup\n * @childControl list {qx.ui.form.List} list inside the popup\n */\nqx.Class.define(\"qx.ui.form.ComboBox\",\n{\n  extend  : qx.ui.form.AbstractSelectBox,\n  implement : [qx.ui.form.IStringForm],\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    var textField = this._createChildControl(\"textfield\");\n    this._createChildControl(\"button\");\n\n    this.addListener(\"tap\", this._onTap);\n\n    // forward the focusin and focusout events to the textfield. The textfield\n    // is not focusable so the events need to be forwarded manually.\n    this.addListener(\"focusin\", function(e) {\n      textField.fireNonBubblingEvent(\"focusin\", qx.event.type.Focus);\n    }, this);\n\n    this.addListener(\"focusout\", function(e) {\n      textField.fireNonBubblingEvent(\"focusout\", qx.event.type.Focus);\n    }, this);\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"combobox\"\n    },\n\n\n    /**\n     * String value which will be shown as a hint if the field is all of:\n     * unset, unfocused and enabled. Set to null to not show a placeholder\n     * text.\n     */\n    placeholder :\n    {\n      check : \"String\",\n      nullable : true,\n      apply : \"_applyPlaceholder\"\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Whenever the value is changed this event is fired\n     *\n     *  Event data: The new text value of the field.\n     */\n    \"changeValue\" : \"qx.event.type.Data\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __preSelectedItem : null,\n    __onInputId : null,\n\n\n    // property apply\n    _applyPlaceholder : function(value, old) {\n      this.getChildControl(\"textfield\").setPlaceholder(value);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"textfield\":\n          control = new qx.ui.form.TextField();\n          control.setFocusable(false);\n          control.addState(\"inner\");\n          control.addListener(\"changeValue\", this._onTextFieldChangeValue, this);\n          control.addListener(\"blur\", this.close, this);\n          this._add(control, {flex: 1});\n          break;\n\n        case \"button\":\n          control = new qx.ui.form.Button();\n          control.setFocusable(false);\n          control.setKeepActive(true);\n          control.addState(\"inner\");\n          control.addListener(\"execute\", this.toggle, this);\n          this._add(control);\n          break;\n\n        case \"list\":\n          // Get the list from the AbstractSelectBox\n          control = this.base(arguments, id);\n\n          // Change selection mode\n          control.setSelectionMode(\"single\");\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates : {\n      focused : true,\n      invalid : true\n    },\n\n\n    // overridden\n    tabFocus : function()\n    {\n      var field = this.getChildControl(\"textfield\");\n\n      field.getFocusElement().focus();\n      field.selectAllText();\n    },\n\n\n    // overridden\n    focus : function()\n    {\n      this.base(arguments);\n      this.getChildControl(\"textfield\").getFocusElement().focus();\n    },\n\n\n    // interface implementation\n    setValue : function(value)\n    {\n      var textfield = this.getChildControl(\"textfield\");\n      if (textfield.getValue() == value) {\n        return;\n      }\n\n      // Apply to text field\n      textfield.setValue(value);\n    },\n\n\n    // interface implementation\n    getValue : function() {\n      return this.getChildControl(\"textfield\").getValue();\n    },\n\n\n    // interface implementation\n    resetValue : function() {\n      this.getChildControl(\"textfield\").setValue(null);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _onKeyPress : function(e)\n    {\n      var popup = this.getChildControl(\"popup\");\n      var iden = e.getKeyIdentifier();\n\n      if (iden == \"Down\" && e.isAltPressed())\n      {\n        this.getChildControl(\"button\").addState(\"selected\");\n        this.toggle();\n        e.stopPropagation();\n      }\n      else if (iden == \"Enter\")\n      {\n        if (popup.isVisible())\n        {\n          this._setPreselectedItem();\n          this.resetAllTextSelection();\n          this.close();\n          e.stop();\n        }\n      }\n      else if (popup.isVisible())\n      {\n        this.base(arguments, e);\n      }\n    },\n\n\n    /**\n     * Toggles the popup's visibility.\n     *\n     * @param e {qx.event.type.Pointer} Pointer tap event\n     */\n    _onTap : function(e) {\n      this.close();\n    },\n\n\n    // overridden\n    _onListPointerDown : function(e) {\n      this._setPreselectedItem();\n    },\n\n\n    /**\n     * Apply pre-selected item\n     */\n    _setPreselectedItem: function() {\n      if (this.__preSelectedItem)\n      {\n        var label = this.__preSelectedItem.getLabel();\n\n        if (this.getFormat()!= null) {\n          label = this.getFormat().call(this, this.__preSelectedItem);\n        }\n\n        // check for translation\n        if (label && label.translate) {\n          label = label.translate();\n        }\n        this.setValue(label);\n        this.__preSelectedItem = null;\n      }\n    },\n\n\n    // overridden\n    _onListChangeSelection : function(e)\n    {\n      var current = e.getData();\n      if (current.length > 0)\n      {\n        // Ignore quick context (e.g. pointerover)\n        // and configure the new value when closing the popup afterwards\n        var list = this.getChildControl(\"list\");\n        var ctx = list.getSelectionContext();\n        if (ctx == \"quick\" || ctx == \"key\" )\n        {\n          this.__preSelectedItem = current[0];\n        }\n        else\n        {\n          var label = current[0].getLabel();\n\n          if (this.getFormat()!= null) {\n            label = this.getFormat().call(this, current[0]);\n          }\n\n          // check for translation\n          if (label && label.translate) {\n            label = label.translate();\n          }\n          this.setValue(label);\n          this.__preSelectedItem = null;\n        }\n      }\n    },\n\n\n    // overridden\n    _onPopupChangeVisibility : function(e)\n    {\n      this.base(arguments, e);\n\n      // Synchronize the list with the current value on every\n      // opening of the popup. This is useful because through\n      // the quick selection mode, the list may keep an invalid\n      // selection on close or the user may enter text while\n      // the combobox is closed and reopen it afterwards.\n      var popup = this.getChildControl(\"popup\");\n      if (popup.isVisible())\n      {\n        var list = this.getChildControl(\"list\");\n        var value = this.getValue();\n        var item = null;\n\n        if (value) {\n          item = list.findItem(value);\n        }\n\n        if (item) {\n          list.setSelection([item]);\n        } else {\n          list.resetSelection();\n        }\n      }\n      else\n      {\n        // When closing the popup text should selected and field should\n        // have the focus. Identical to when reaching the field using the TAB key.\n        //\n        // Only focus if popup was visible before. Fixes [BUG #4453].\n        if (e.getOldData() == \"visible\") {\n          this.tabFocus();\n        }\n      }\n\n      // In all cases: Remove focused state from button\n      this.getChildControl(\"button\").removeState(\"selected\");\n    },\n\n\n    /**\n     * Reacts on value changes of the text field and syncs the\n     * value to the combobox.\n     *\n     * @param e {qx.event.type.Data} Change event\n     */\n    _onTextFieldChangeValue : function(e)\n    {\n      var value = e.getData();\n\n      var list = this.getChildControl(\"list\");\n      if (value != null) {\n        // Select item when possible\n        var item = list.findItem(value, false);\n        if (item) {\n          list.setSelection([item]);\n        } else {\n          list.resetSelection();\n        }\n      } else {\n        list.resetSelection();\n      }\n\n      // Fire event\n      this.fireDataEvent(\"changeValue\", value, e.getOldData());\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      TEXTFIELD SELECTION API\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the current selection.\n     * This method only works if the widget is already created and\n     * added to the document.\n     *\n     * @return {String|null}\n     */\n    getTextSelection : function() {\n      return this.getChildControl(\"textfield\").getTextSelection();\n    },\n\n\n    /**\n     * Returns the current selection length.\n     * This method only works if the widget is already created and\n     * added to the document.\n     *\n     * @return {Integer|null}\n     */\n    getTextSelectionLength : function() {\n      return this.getChildControl(\"textfield\").getTextSelectionLength();\n    },\n\n\n    /**\n     * Set the selection to the given start and end (zero-based).\n     * If no end value is given the selection will extend to the\n     * end of the textfield's content.\n     * This method only works if the widget is already created and\n     * added to the document.\n     *\n     * @param start {Integer} start of the selection (zero-based)\n     * @param end {Integer} end of the selection\n     */\n    setTextSelection : function(start, end) {\n      this.getChildControl(\"textfield\").setTextSelection(start, end);\n    },\n\n\n    /**\n     * Clears the current selection.\n     * This method only works if the widget is already created and\n     * added to the document.\n     *\n     */\n    clearTextSelection : function() {\n      this.getChildControl(\"textfield\").clearTextSelection();\n    },\n\n\n    /**\n     * Selects the whole content\n     *\n     */\n    selectAllText : function() {\n      this.getChildControl(\"textfield\").selectAllText();\n    },\n\n\n    /**\n     * Clear any text selection, then select all text\n     *\n     */\n    resetAllTextSelection: function() {\n      this.clearTextSelection();\n      this.selectAllText();\n    }\n  }\n});\n"
  ]
}