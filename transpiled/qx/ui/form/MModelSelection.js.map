{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/form/MModelSelection.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "__modelSelection",
    "data",
    "Array",
    "addListener",
    "__onModelSelectionArrayChange",
    "__onModelSelectionChange",
    "events",
    "changeModelSelection",
    "members",
    "__inSelectionChange",
    "getSelection",
    "modelSelection",
    "i",
    "length",
    "item",
    "model",
    "getModel",
    "push",
    "setModelSelection",
    "e",
    "Error",
    "selectables",
    "getSelectables",
    "itemSelection",
    "toArray",
    "j",
    "selectable",
    "selectableModel",
    "setSelection",
    "currentSelection",
    "lang",
    "equals",
    "getModelSelection",
    "removeAll",
    "assertArray",
    "unshift",
    "getLength",
    "returnArray",
    "splice",
    "apply",
    "dispose",
    "destruct",
    "_disposeObjects",
    "ui",
    "form",
    "MModelSelection"
  ],
  "mappings": "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",
  "file": "MModelSelection.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * This mixin offers the selection of the model properties.\n * It can only be included if the object including it implements the\n * {@link qx.ui.core.ISingleSelection} interface and the selectables implement\n * the {@link qx.ui.form.IModel} interface.\n */\nqx.Mixin.define(\"qx.ui.form.MModelSelection\",\n{\n\n  construct : function() {\n    // create the selection array\n    this.__modelSelection = new qx.data.Array();\n\n    // listen to the changes\n    this.__modelSelection.addListener(\"change\", this.__onModelSelectionArrayChange, this);\n    this.addListener(\"changeSelection\", this.__onModelSelectionChange, this);\n  },\n\n\n  events :\n  {\n    /**\n     * Pseudo event. It will never be fired because the array itself can not\n     * be changed. But the event description is needed for the data binding.\n     */\n    changeModelSelection : \"qx.event.type.Data\"\n  },\n\n\n  members :\n  {\n\n    __modelSelection : null,\n    __inSelectionChange : false,\n\n\n    /**\n     * Handler for the selection change of the including class e.g. SelectBox,\n     * List, ...\n     * It sets the new modelSelection via {@link #setModelSelection}.\n     */\n    __onModelSelectionChange : function() {\n      if (this.__inSelectionChange) {\n        return;\n      }\n      var data = this.getSelection();\n\n      // create the array with the modes inside\n      var modelSelection = [];\n      for (var i = 0; i < data.length; i++) {\n        var item = data[i];\n        // fallback if getModel is not implemented\n        var model = item.getModel ? item.getModel() : null;\n        if (model !== null) {\n          modelSelection.push(model);\n        }\n      }\n\n      try {\n        this.setModelSelection(modelSelection);\n      } catch (e) {\n        throw new Error(\n          \"Could not set the model selection. Maybe your models are not unique? \" + e\n        );\n      }\n    },\n\n\n    /**\n     * Listener for the change of the internal model selection data array.\n     */\n    __onModelSelectionArrayChange : function() {\n      this.__inSelectionChange = true;\n      var selectables = this.getSelectables(true);\n      var itemSelection = [];\n\n      var modelSelection = this.__modelSelection.toArray();\n      for (var i = 0; i < modelSelection.length; i++) {\n        var model = modelSelection[i];\n        for (var j = 0; j < selectables.length; j++) {\n          var selectable = selectables[j];\n          // fallback if getModel is not implemented\n          var selectableModel = selectable.getModel ? selectable.getModel() : null;\n          if (model === selectableModel) {\n            itemSelection.push(selectable);\n            break;\n          }\n        }\n      }\n      this.setSelection(itemSelection);\n      this.__inSelectionChange = false;\n\n      // check if the setting has worked\n      var currentSelection = this.getSelection();\n      if (!qx.lang.Array.equals(currentSelection, itemSelection)) {\n        // if not, set the actual selection\n        this.__onModelSelectionChange();\n      }\n    },\n\n\n    /**\n     * Returns always an array of the models of the selected items. If no\n     * item is selected or no model is given, the array will be empty.\n     *\n     * *CAREFUL!* The model selection can only work if every item item in the\n     * selection providing widget has a model property!\n     *\n     * @return {qx.data.Array} An array of the models of the selected items.\n     */\n    getModelSelection : function()\n    {\n      return this.__modelSelection;\n    },\n\n\n    /**\n     * Takes the given models in the array and searches for the corresponding\n     * selectables. If an selectable does have that model attached, it will be\n     * selected.\n     *\n     * *Attention:* This method can have a time complexity of O(n^2)!\n     *\n     * *CAREFUL!* The model selection can only work if every item item in the\n     * selection providing widget has a model property!\n     *\n     * @param modelSelection {Array} An array of models, which should be\n     *   selected.\n     */\n    setModelSelection : function(modelSelection)\n    {\n      // check for null values\n      if (!modelSelection)\n      {\n        this.__modelSelection.removeAll();\n        return;\n      }\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArray(modelSelection, \"Please use an array as parameter.\");\n      }\n\n      // add the first two parameter\n      modelSelection.unshift(this.__modelSelection.getLength()); // remove index\n      modelSelection.unshift(0);  // start index\n\n      var returnArray = this.__modelSelection.splice.apply(this.__modelSelection, modelSelection);\n      returnArray.dispose();\n    }\n  },\n\n  destruct : function() {\n    this._disposeObjects(\"__modelSelection\");\n  }\n});\n"
  ]
}