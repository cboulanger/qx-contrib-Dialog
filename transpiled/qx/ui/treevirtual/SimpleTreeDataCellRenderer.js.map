{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/treevirtual/SimpleTreeDataCellRenderer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "cellrenderer",
    "Abstract",
    "construct",
    "STDCR",
    "treevirtual",
    "SimpleTreeDataCellRenderer",
    "__bVirgin",
    "__preloadImages",
    "__am",
    "util",
    "AliasManager",
    "getInstance",
    "__rm",
    "ResourceManager",
    "__tm",
    "theme",
    "manager",
    "Appearance",
    "BLANK",
    "toUri",
    "resolve",
    "statics",
    "__icon",
    "ImageLoader",
    "io",
    "am",
    "rm",
    "tm",
    "loadImage",
    "f",
    "load",
    "line",
    "styleFrom",
    "icon",
    "contract",
    "expand",
    "onlyContract",
    "onlyExpand",
    "startContract",
    "startExpand",
    "endContract",
    "endExpand",
    "crossContract",
    "crossExpand",
    "end",
    "cross",
    "properties",
    "useTreeLines",
    "check",
    "init",
    "excludeFirstLevelTreeLines",
    "alwaysShowOpenCloseSymbol",
    "members",
    "_onChangeTheme",
    "_getCellStyle",
    "cellInfo",
    "node",
    "value",
    "html",
    "cellStyle",
    "_getContentHtml",
    "pos",
    "extra",
    "_addExtraContentBeforeIndentation",
    "indentation",
    "_addIndentation",
    "_addExtraContentBeforeIcon",
    "_addIcon",
    "_addExtraContentBeforeLabel",
    "_addLabel",
    "_addImage",
    "imageInfo",
    "source",
    "url",
    "position",
    "push",
    "core",
    "Environment",
    "get",
    "bom",
    "element",
    "BoxSizing",
    "compile",
    "top",
    "undefined",
    "right",
    "bottom",
    "left",
    "width",
    "height",
    "imageWidth",
    "imageHeight",
    "tooltip",
    "join",
    "imageData",
    "bUseTreeLines",
    "getUseTreeLines",
    "bExcludeFirstLevelTreeLines",
    "getExcludeFirstLevelTreeLines",
    "bAlwaysShowOpenCloseSymbol",
    "getAlwaysShowOpenCloseSymbol",
    "i",
    "level",
    "_getIndentSymbol",
    "rowHeight",
    "getRowHeight",
    "paddingTop",
    "paddingLeft",
    "imageUrl",
    "bSelected",
    "iconSelected",
    "type",
    "SimpleTreeDataModel",
    "Type",
    "LEAF",
    "o",
    "states",
    "opened",
    "bOpened",
    "label",
    "translate",
    "labelStyle",
    "labelSpanStyle",
    "column",
    "lastChild",
    "bLastChild",
    "length",
    "BRANCH",
    "bHideOpenClose",
    "children",
    "bFirstChild",
    "parentNodeId",
    "destruct"
  ],
  "mappings": "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",
  "file": "SimpleTreeDataCellRenderer.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n     * David Perez Carmona (david-perez)\n\n************************************************************************ */\n\n/**\n * A data cell renderer for the tree column of a simple tree\n *\n * This cell renderer has provisions for subclasses to easily extend the\n * appearance of the tree. If the tree should contain images, labels,\n * etc. before the indentation, the subclass should override the method\n * _addExtraContentBeforeIndentation(). Similarly, content can be added before\n * the icon by overriding _addExtraContentBeforeIcon(), and before the label\n * by overriding _addExtraContentBeforeLabel().\n *\n * Each of these overridden methods that calls _addImage() can provide, as\n * part of the map passed to _addImage(), a member called \"tooltip\" which\n * contains the tool tip to present when the mouse is hovered over the image.\n *\n * If this class is subclassed to form a new cell renderer, an instance of it\n * must be provided, via the 'custom' parameter, to the TreeVirtual\n * constructor.\n */\nqx.Class.define(\"qx.ui.treevirtual.SimpleTreeDataCellRenderer\",\n{\n  extend : qx.ui.table.cellrenderer.Abstract,\n\n\n  construct : function()\n  {\n    var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\n\n    // Begin preloading of the tree images, if not already requested.\n    if (STDCR.__bVirgin)\n    {\n      STDCR.__preloadImages();\n      STDCR.__bVirgin = false;\n    }\n\n    this.base(arguments);\n\n    this.__am = qx.util.AliasManager.getInstance();\n    this.__rm = qx.util.ResourceManager.getInstance();\n    this.__tm = qx.theme.manager.Appearance.getInstance();\n\n    // Base URL used for indentation\n    this.BLANK = this.__rm.toUri(this.__am.resolve(\"static/blank.gif\"));\n  },\n\n\n  statics :\n  {\n    /** File names of each of the tree icons */\n    __icon : { },\n\n    /** Whether we have not yet requested pre-loading of images */\n    __bVirgin : true,\n\n    /**\n     * Request preloading of images so they appear immediately upon rendering\n     */\n    __preloadImages : function()\n    {\n      var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\n\n      var ImageLoader = qx.io.ImageLoader;\n\n      var am = qx.util.AliasManager.getInstance();\n      var rm = qx.util.ResourceManager.getInstance();\n      var tm = qx.theme.manager.Appearance.getInstance();\n\n      var loadImage = function(f)\n      {\n        ImageLoader.load(rm.toUri(am.resolve(f)));\n      };\n\n      STDCR.__icon.line = tm.styleFrom(\"treevirtual-line\");\n      loadImage(STDCR.__icon.line.icon);\n\n      STDCR.__icon.contract = tm.styleFrom(\"treevirtual-contract\");\n      loadImage(STDCR.__icon.contract.icon);\n\n      STDCR.__icon.expand = tm.styleFrom(\"treevirtual-expand\");\n      loadImage(STDCR.__icon.expand.icon);\n\n      STDCR.__icon.onlyContract = tm.styleFrom(\"treevirtual-only-contract\");\n      loadImage(STDCR.__icon.onlyContract.icon);\n\n      STDCR.__icon.onlyExpand = tm.styleFrom(\"treevirtual-only-expand\");\n      loadImage(STDCR.__icon.onlyExpand.icon);\n\n      STDCR.__icon.startContract = tm.styleFrom(\"treevirtual-start-contract\");\n      loadImage(STDCR.__icon.startContract.icon);\n\n      STDCR.__icon.startExpand = tm.styleFrom(\"treevirtual-start-expand\");\n      loadImage(STDCR.__icon.startExpand.icon);\n\n      STDCR.__icon.endContract = tm.styleFrom(\"treevirtual-end-contract\");\n      loadImage(STDCR.__icon.endContract.icon);\n\n      STDCR.__icon.endExpand = tm.styleFrom(\"treevirtual-end-expand\");\n      loadImage(STDCR.__icon.endExpand.icon);\n\n      STDCR.__icon.crossContract = tm.styleFrom(\"treevirtual-cross-contract\");\n      loadImage(STDCR.__icon.crossContract.icon);\n\n      STDCR.__icon.crossExpand = tm.styleFrom(\"treevirtual-cross-expand\");\n      loadImage(STDCR.__icon.crossExpand.icon);\n\n      STDCR.__icon.end = tm.styleFrom(\"treevirtual-end\");\n      loadImage(STDCR.__icon.end.icon);\n\n      STDCR.__icon.cross = tm.styleFrom(\"treevirtual-cross\");\n      loadImage(STDCR.__icon.cross.icon);\n    }\n  },\n\n\n  properties :\n  {\n    /**\n     * Set whether lines linking tree children shall be drawn on the tree\n     * if the theme supports tree lines.\n     */\n    useTreeLines :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n    /**\n     * When true, exclude only the first-level tree lines, creating,\n     * effectively, multiple unrelated root nodes.\n     */\n    excludeFirstLevelTreeLines :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n    /**\n     * Set whether the open/close button should be displayed on a branch, even\n     * if the branch has no children.\n     */\n    alwaysShowOpenCloseSymbol :\n    {\n      check : \"Boolean\",\n      init : false\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __am : null,\n    __tm : null,\n    __rm : null,\n\n\n    // overridden\n    _onChangeTheme : function() {\n      this.base(arguments);\n      qx.ui.treevirtual.SimpleTreeDataCellRenderer.__preloadImages();\n    },\n\n\n    // overridden\n    _getCellStyle : function(cellInfo)\n    {\n      var node = cellInfo.value;\n\n      // Return the style for the div for the cell.  If there's cell-specific\n      // style information provided, append it.\n      var html =\n        this.base(arguments, cellInfo) +\n        (node.cellStyle ? node.cellStyle + \";\" : \"\");\n      return html;\n    },\n\n    // overridden\n    _getContentHtml : function(cellInfo)\n    {\n      var html = \"\";\n\n      // Horizontal position\n      var pos = 0;\n\n      // If needed, add extra content before indentation\n      var extra = this._addExtraContentBeforeIndentation(cellInfo, pos);\n      html += extra.html;\n      pos = extra.pos;\n\n      // Add the indentation (optionally with tree lines)\n      var indentation = this._addIndentation(cellInfo, pos);\n      html += indentation.html;\n      pos = indentation.pos;\n\n      // If needed, add extra content before icon\n      extra = this._addExtraContentBeforeIcon(cellInfo, pos);\n      html += extra.html;\n      pos = extra.pos;\n\n      // Add the node icon\n      var icon = this._addIcon(cellInfo, pos);\n      html += icon.html;\n      pos = icon.pos;\n\n      // If needed, add extra content before label\n      extra = this._addExtraContentBeforeLabel(cellInfo, pos);\n      html += extra.html;\n      pos = extra.pos;\n\n      // Add the node's label\n      html += this._addLabel(cellInfo, pos);\n\n      return html;\n    },\n\n    /**\n     * Add an image to the tree.  This might be a visible icon or it may be\n     * part of the indentation.\n     *\n     * @param imageInfo {Map}\n     *   How to display the image.  It optionally includes any of the\n     *   following:\n     *   <dl>\n     *     <dt>position {Map}</dt>\n     *     <dd>\n     *       If provided, a div is created to hold the image.  The div's top,\n     *       right, bottom, left, width, and/or height may be specified with\n     *       members of this map.  Each is expected to be an integer value.\n     *     </dd>\n     *     <dt>imageWidth, imageHeight</dt>\n     *     <dd>\n     *       The image's width and height.  These are used only if both are\n     *       specified.\n     *     </dd>\n     *   </dl>\n     *\n     * @return {String}\n     *   The html for this image, possibly with a surrounding div (see\n     *   'position', above).\n     */\n    _addImage : function(imageInfo)\n    {\n      var html = [];\n\n      // Resolve the URI\n      var source = this.__rm.toUri(this.__am.resolve(imageInfo.url));\n\n      // If we've been given positioning attributes, enclose image in a div\n      if (imageInfo.position)\n      {\n        var pos = imageInfo.position;\n\n        html.push('<div style=\"position:absolute;');\n\n        if (qx.core.Environment.get(\"css.boxsizing\"))\n        {\n          html.push(qx.bom.element.BoxSizing.compile(\"content-box\"));\n        }\n\n        if (pos.top !== undefined)\n        {\n          html.push('top:' + pos.top + 'px;');\n        }\n\n        if (pos.right !== undefined)\n        {\n          html.push('right:' + pos.right + 'px;');\n        }\n\n        if (pos.bottom !== undefined)\n        {\n          html.push('bottom:' + pos.bottom + 'px;');\n        }\n\n        if (pos.left !== undefined)\n        {\n          html.push('left:' + pos.left + 'px;');\n        }\n\n        if (pos.width !== undefined)\n        {\n          html.push('width:' + pos.width + 'px;');\n        }\n\n        if (pos.height !== undefined)\n        {\n          html.push('height:' + pos.height + 'px;');\n        }\n\n        html.push('\">');\n      }\n\n      // Don't use an image tag.  They render differently in Firefox and IE7\n      // even if both are enclosed in a div specified as content box.  Instead,\n      // add the image as the background image of a div.\n      html.push('<div style=\"');\n      html.push('background-image:url(' + source + ');');\n      html.push('background-repeat:no-repeat;');\n\n      if (imageInfo.imageWidth && imageInfo.imageHeight)\n      {\n        html.push(\n          ';width:' +\n          imageInfo.imageWidth +\n          'px' +\n          ';height:' +\n          imageInfo.imageHeight +\n          'px');\n      }\n\n      var tooltip = imageInfo.tooltip;\n\n      if (tooltip != null)\n      {\n        html.push('\" title=\"' + tooltip);\n      }\n\n      html.push('\">&nbsp;</div>');\n\n      if (imageInfo.position)\n      {\n        html.push('</div>');\n      }\n\n      return html.join(\"\");\n    },\n\n\n    /**\n     * Add the indentation for this node of the tree.\n     *\n     * The indentation optionally includes tree lines.  Whether tree lines are\n     * used depends on (a) the properties 'useTreeLines' and\n     * 'excludeFirstLevelTreelines' within this class; and (b) the widget\n     * theme in use (some themes don't support tree lines).\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the indentation, and a 'pos' member which is the starting position\n     *   plus the width of the indentation.\n     */\n    _addIndentation : function(cellInfo, pos)\n    {\n      var node = cellInfo.value;\n      var imageData;\n      var html = \"\";\n\n      // Generate the indentation.  Obtain icon determination values once\n      // rather than each time through the loop.\n      var bUseTreeLines = this.getUseTreeLines();\n      var bExcludeFirstLevelTreeLines = this.getExcludeFirstLevelTreeLines();\n      var bAlwaysShowOpenCloseSymbol = this.getAlwaysShowOpenCloseSymbol();\n\n      for (var i=0; i<node.level; i++)\n      {\n        imageData = this._getIndentSymbol(i, node, bUseTreeLines,\n                                          bAlwaysShowOpenCloseSymbol,\n                                          bExcludeFirstLevelTreeLines);\n\n        var rowHeight = cellInfo.table.getRowHeight();\n\n        html += this._addImage(\n        {\n          url         : imageData.icon,\n          position    :\n          {\n            top         : 0 + (imageData.paddingTop || 0),\n            left        : pos + (imageData.paddingLeft || 0),\n            width       : rowHeight + 3,\n            height      : rowHeight\n          },\n          imageWidth  : rowHeight,\n          imageHeight : rowHeight\n        });\n        pos += rowHeight + 3;\n      }\n\n      return (\n        {\n          html : html,\n          pos  : pos\n        });\n    },\n\n    /**\n     * Add the icon for this node of the tree.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the icon, and a 'pos' member which is the starting position plus the\n     *   width of the icon.\n     */\n    _addIcon : function(cellInfo, pos)\n    {\n      var node = cellInfo.value;\n\n      // Add the node's icon\n      var imageUrl = (node.bSelected ? node.iconSelected : node.icon);\n\n      if (!imageUrl)\n      {\n        if (node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF)\n        {\n          var o = this.__tm.styleFrom(\"treevirtual-file\");\n        }\n        else\n        {\n          var states = { opened : node.bOpened };\n          var o = this.__tm.styleFrom(\"treevirtual-folder\", states);\n        }\n\n        imageUrl = o.icon;\n      }\n\n      var rowHeight = cellInfo.table.getRowHeight();\n\n      var html = this._addImage(\n      {\n        url         : imageUrl,\n        position    :\n        {\n          top         : 0,\n          left        : pos,\n          width       : rowHeight + 3,\n          height      : rowHeight\n        },\n        imageWidth  : rowHeight,\n        imageHeight : rowHeight\n      });\n\n      return (\n        {\n          html : html,\n          pos  : pos + rowHeight + 3\n        });\n    },\n\n    /**\n     * Add the label for this node of the tree.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *   See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *   Additionally, if defined, the labelSpanStyle member is used to apply\n     *   style to the span containing the label.  (This member is for use by\n     *   subclasses; it's not otherwise used by this class.)\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {String}\n     *   The html for the label.\n     */\n    _addLabel : function(cellInfo, pos)\n    {\n      var node = cellInfo.value;\n      var label = node.label;\n\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\n        if (label && label.translate) {\n          label = label.translate();\n        }\n      }\n\n      // Add the node's label.  We calculate the \"left\" property with: each\n      // tree line (indentation) icon is 19 pixels wide; the folder icon is 16\n      // pixels wide, there are two pixels of padding at the left, and we want\n      // 2 pixels between the folder icon and the label\n      var html =\n        '<div style=\"position:absolute;' +\n        'left:' + pos + 'px;' +\n        'top:0;' +\n        (node.labelStyle ? node.labelStyle + \";\" : \"\") +\n        '\">' +\n        '<span' + (cellInfo.labelSpanStyle\n                   ? 'style=\"' + cellInfo.labelSpanStyle + ';\"'\n                   : \"\") + '>' +\n        label +\n        '</span>' +\n        '</div>';\n\n      return html;\n    },\n\n    /**\n     * Adds extra content just before the indentation.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the indentation, and a 'pos' member which is the starting position\n     *   plus the width of the indentation.\n     */\n    _addExtraContentBeforeIndentation : function(cellInfo, pos)\n    {\n      return { html: '', pos: pos };\n    },\n\n    /**\n     * Adds extra content just before the icon.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the indentation, and a 'pos' member which is the starting position\n     *   plus the width of the indentation.\n     */\n    _addExtraContentBeforeIcon : function(cellInfo, pos)\n    {\n      return { html: '', pos: pos };\n    },\n\n    /**\n     * Adds extra content just before the label.\n     *\n     * @param cellInfo {Map} The information about the cell.\n     *      See {@link qx.ui.table.cellrenderer.Abstract#createDataCellHtml}.\n     *\n     * @param pos {Integer}\n     *   The position from the left edge of the column at which to render this\n     *   item.\n     *\n     * @return {Map}\n     *   The returned map contains an 'html' member which contains the html for\n     *   the indentation, and a 'pos' member which is the starting position\n     *   plus the width of the indentation.\n     */\n    _addExtraContentBeforeLabel : function(cellInfo, pos)\n    {\n      return { html: '', pos: pos };\n    },\n\n\n    /**\n     * Determine the symbol to use for indentation of a tree row, at a\n     * particular column.  The indentation to use may be just white space or\n     * may be a tree line.  Tree lines come in numerous varieties, so the\n     * appropriate one is selected.\n     *\n     * @param column {Integer}\n     *   The column of indentation being requested, zero-relative\n     *\n     * @param node {Node}\n     *   The node being displayed in the row.  The properties of a node are\n     *   described in {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     *\n     * @param bUseTreeLines {Boolean}\n     *   Whether to find an appropriate tree line icon, or simply provide\n     *   white space.\n     *\n     * @param bAlwaysShowOpenCloseSymbol {Boolean}\n     *   Whether to display the open/close icon for a node even if it has no\n     *   children.\n     *\n     * @param bExcludeFirstLevelTreeLines {Boolean}\n     *   If bUseTreeLines is enabled, then further filtering of the left-most\n     *   tree line may be specified here.  If <i>true</i> then the left-most\n     *   tree line, between top-level siblings, will not be displayed.\n     *   If <i>false</i>, then the left-most tree line will be displayed\n     *   just like all of the other tree lines.\n     *\n     * @return {Map} map of image properties.\n     */\n    _getIndentSymbol : function(column,\n                                node,\n                                bUseTreeLines,\n                                bAlwaysShowOpenCloseSymbol,\n                                bExcludeFirstLevelTreeLines)\n    {\n      var STDCR = qx.ui.treevirtual.SimpleTreeDataCellRenderer;\n\n      // If we're in column 0 and excludeFirstLevelTreeLines is enabled, then\n      // we treat this as if no tree lines were requested.\n      if (column == 0 && bExcludeFirstLevelTreeLines)\n      {\n        bUseTreeLines = false;\n      }\n\n      // If we're not on the final column...\n      if (column < node.level - 1)\n      {\n        // then return either a line or a blank icon, depending on\n        // bUseTreeLines\n        return (bUseTreeLines && ! node.lastChild[column]\n                ? STDCR.__icon.line\n                : { icon : this.BLANK });\n      }\n\n      var bLastChild = node.lastChild[node.lastChild.length - 1];\n\n      // Is this a branch node that does not have the open/close button hidden?\n      if (node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH &&\n          ! node.bHideOpenClose)\n      {\n        // Does this node have any children, or do we always want the\n        // open/close symbol to be shown?\n        if (node.children.length > 0 || bAlwaysShowOpenCloseSymbol)\n        {\n          // If we're not showing tree lines...\n          if (!bUseTreeLines)\n          {\n            // ... then just use an expand or contract\n            return (node.bOpened\n                    ? STDCR.__icon.contract\n                    : STDCR.__icon.expand);\n          }\n\n          // Are we looking at a top-level, first child of its parent?\n          if (column == 0 && node.bFirstChild)\n          {\n            // Yup.  If it's also a last child...\n            if (bLastChild)\n            {\n              // ... then use no tree lines.\n              return (node.bOpened\n                      ? STDCR.__icon.onlyContract\n                      : STDCR.__icon.onlyExpand);\n            }\n            else\n            {\n              // otherwise, use descender lines but no ascender.\n              return (node.bOpened\n                      ? STDCR.__icon.startContract\n                      : STDCR.__icon.startExpand);\n            }\n          }\n\n          // It's not a top-level, first child.  Is this the last child of its\n          // parent?\n          if (bLastChild)\n          {\n            // Yup.  Return an ending expand or contract.\n            return (node.bOpened\n                    ? STDCR.__icon.endContract\n                    : STDCR.__icon.endExpand);\n          }\n\n          // Otherwise, return a crossing expand or contract.\n          return (node.bOpened\n                  ? STDCR.__icon.crossContract\n                  : STDCR.__icon.crossExpand);\n        }\n      }\n\n      // This node does not have any children.  Return an end or cross, if\n      // we're using tree lines.\n      if (bUseTreeLines)\n      {\n        // If this is a child of the root node...\n        if (node.parentNodeId == 0)\n        {\n          // If this is the only child...\n          if (bLastChild && node.bFirstChild)\n          {\n            // ... then return a blank.\n            return { icon : this.BLANK };\n          }\n\n          // Otherwise, if this is the last child...\n          if (bLastChild)\n          {\n            // ... then return an end line.\n            return STDCR.__icon.end;\n          }\n\n          // Otherwise if this is the first child and is a branch...\n          if (node.bFirstChild &&\n              node.type == qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH)\n          {\n            // ... then return a start line.\n            return (node.bOpened\n                    ? STDCR.__icon.startContract\n                    : STDCR.__icon.startExpand);\n          }\n        }\n\n        // If this is a last child, return and ending line; otherwise cross.\n        return (bLastChild\n                ? STDCR.__icon.end\n                : STDCR.__icon.cross);\n      }\n\n      return { icon : this.BLANK };\n    }\n  },\n\n  destruct : function() {\n    this.__am = this.__rm = this.__tm = null;\n  }\n});\n"
  ]
}