{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/treevirtual/TreeVirtual.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "table",
    "Table",
    "construct",
    "headings",
    "custom",
    "dataModel",
    "treevirtual",
    "SimpleTreeDataModel",
    "treeColumn",
    "undefined",
    "setTreeColumn",
    "treeDataCellRenderer",
    "SimpleTreeDataCellRenderer",
    "defaultDataCellRenderer",
    "DefaultDataCellRenderer",
    "dataRowRenderer",
    "SimpleTreeDataRowRenderer",
    "selectionManager",
    "obj",
    "SelectionManager",
    "tableColumnModel",
    "columnmodel",
    "Resize",
    "lang",
    "Type",
    "isString",
    "setColumns",
    "setTree",
    "addListener",
    "e",
    "getDataModel",
    "setData",
    "setColumnVisibilityButtonVisible",
    "length",
    "setRowHeight",
    "setMetaColumnCounts",
    "setOverflow",
    "stdcr",
    "ddcr",
    "tcm",
    "getTableColumnModel",
    "treeCol",
    "getTreeColumn",
    "i",
    "setDataCellRenderer",
    "setDataRowRenderer",
    "setFocusCellOnPointerMove",
    "setShowCellFocusIndicator",
    "scrollers",
    "_getPaneScrollerArr",
    "setSelectBeforeFocus",
    "events",
    "statics",
    "SelectionMode",
    "NONE",
    "selection",
    "Model",
    "NO_SELECTION",
    "SINGLE",
    "SINGLE_SELECTION",
    "SINGLE_INTERVAL",
    "SINGLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL",
    "MULTIPLE_INTERVAL_SELECTION",
    "MULTIPLE_INTERVAL_TOGGLE",
    "MULTIPLE_INTERVAL_SELECTION_TOGGLE",
    "properties",
    "openCloseClickSelectsRow",
    "check",
    "init",
    "appearance",
    "refine",
    "members",
    "getTableModel",
    "setUseTreeLines",
    "b",
    "dcr",
    "getDataCellRenderer",
    "hasListener",
    "data",
    "firstRow",
    "lastRow",
    "getRowCount",
    "firstColumn",
    "lastColumn",
    "getColumnCount",
    "fireDataEvent",
    "getUseTreeLines",
    "setAlwaysShowOpenCloseSymbol",
    "setExcludeFirstLevelTreeLines",
    "getExcludeFirstLevelTreeLines",
    "getAlwaysShowOpenCloseSymbol",
    "setSelectionMode",
    "mode",
    "getSelectionModel",
    "getSelectionMode",
    "getHierarchy",
    "nodeReference",
    "_this",
    "components",
    "node",
    "nodeId",
    "Error",
    "addHierarchy",
    "getData",
    "unshift",
    "label",
    "parentNodeId",
    "getSelectedNodes",
    "_onKeyPress",
    "evt",
    "getEnabled",
    "identifier",
    "getKeyIdentifier",
    "consumed",
    "modifiers",
    "getModifiers",
    "dm",
    "focusedCol",
    "getFocusedColumn",
    "focusedRow",
    "getFocusedRow",
    "getNode",
    "bHideOpenClose",
    "type",
    "LEAF",
    "setState",
    "bOpened",
    "moveFocusedCell",
    "event",
    "Dom",
    "CTRL_MASK",
    "BRANCH",
    "setFocusedCell",
    "SHIFT_MASK",
    "rowIndex",
    "getRowFromNodeId",
    "_focusedCol",
    "children",
    "preventDefault",
    "stopPropagation",
    "_onSelectionChanged",
    "_clearSelections",
    "TreeVirtual",
    "selectedNodes",
    "_calculateSelectedNodes",
    "stdcm",
    "selectedRanges",
    "getSelectedRanges",
    "j",
    "minIndex",
    "maxIndex",
    "bSelected",
    "push",
    "s"
  ],
  "mappings": "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",
  "file": "TreeVirtual.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * A \"virtual\" tree\n * <p>\n *   A number of convenience methods are available in the following mixins:\n *   <ul>\n *     <li>{@link qx.ui.treevirtual.MNode}</li>\n *     <li>{@link qx.ui.treevirtual.MFamily}</li>\n *   </ul>\n * </p>\n */\nqx.Class.define(\"qx.ui.treevirtual.TreeVirtual\",\n{\n  extend : qx.ui.table.Table,\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param headings {Array | String}\n   *   An array containing a list of strings, one for each column, representing\n   *   the headings for each column.  As a special case, if only one column is\n   *   to exist, the string representing its heading need not be enclosed in an\n   *   array.\n   *\n   * @param custom {Map ? null}\n   *   A map provided (typically) by subclasses, to override the various\n   *   supplemental classes allocated within this constructor.  For normal\n   *   usage, this parameter may be omitted.  Each property must be an object\n   *   instance or a function which returns an object instance, as indicated by\n   *   the defaults listed here:\n   *\n   *   <dl>\n   *     <dt>initiallyHiddenColumns</dt>\n   *       <dd>\n   *         {Array?}\n   *         A list of column numbers that should be initially invisible. Any\n   *         column not mentioned will be initially visible, and if no array\n   *         is provided, all columns will be initially visible.\n   *       </dd>\n   *     <dt>dataModel</dt>\n   *       <dd>new qx.ui.treevirtual.SimpleTreeDataModel()</dd>\n   *     <dt>treeDataCellRenderer</dt>\n   *       <dd>\n   *         Instance of {@link qx.ui.treevirtual.SimpleTreeDataCellRenderer}.\n   *         Custom data cell renderer for the tree column.\n   *       </dd>\n   *     <dt>treeColumn</dt>\n   *       <dd>\n   *         The column number in which the tree is to reside, i.e., which\n   *         column uses the SimpleTreeDataCellRenderer or a subclass of it.\n   *       </dd>\n   *     <dt>defaultDataCellRenderer</dt>\n   *       <dd>\n   *         Instance of {@link qx.ui.treevirtual.DefaultDataCellRenderer}.\n   *         Custom data cell renderer for all columns other than the tree\n   *         column.\n   *       </dd>\n   *     <dt>dataRowRenderer</dt>\n   *       <dd>new qx.ui.treevirtual.SimpleTreeDataRowRenderer()</dd>\n   *     <dt>selectionManager</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.treevirtual.SelectionManager(obj);\n   *         }\n   *       </pre></dd>\n   *     <dt>tableColumnModel</dt>\n   *       <dd><pre class='javascript'>\n   *         function(obj)\n   *         {\n   *           return new qx.ui.table.columnmodel.Resize(obj);\n   *         }\n   *       </pre></dd>\n   *   </dl>\n   */\n  construct : function(headings, custom)\n  {\n    //\n    // Allocate default objects if custom objects are not specified\n    //\n    if (! custom)\n    {\n      custom = { };\n    }\n\n    if (! custom.dataModel)\n    {\n      custom.dataModel =\n        new qx.ui.treevirtual.SimpleTreeDataModel();\n    }\n\n    if (custom.treeColumn === undefined)\n    {\n      custom.treeColumn = 0;\n      custom.dataModel.setTreeColumn(custom.treeColumn);\n    }\n\n    if (! custom.treeDataCellRenderer)\n    {\n      custom.treeDataCellRenderer =\n        new qx.ui.treevirtual.SimpleTreeDataCellRenderer();\n    }\n\n    if (! custom.defaultDataCellRenderer)\n    {\n      custom.defaultDataCellRenderer =\n        new qx.ui.treevirtual.DefaultDataCellRenderer();\n    }\n\n    if (! custom.dataRowRenderer)\n    {\n      custom.dataRowRenderer =\n        new qx.ui.treevirtual.SimpleTreeDataRowRenderer();\n    }\n\n    if (! custom.selectionManager)\n    {\n      custom.selectionManager =\n        function(obj)\n        {\n          return new qx.ui.treevirtual.SelectionManager(obj);\n        };\n    }\n\n    if (! custom.tableColumnModel)\n    {\n      custom.tableColumnModel =\n        function(obj)\n        {\n          return new qx.ui.table.columnmodel.Resize(obj);\n        };\n    }\n\n    // Specify the column headings.  We accept a single string (one single\n    // column) or an array of strings (one or more columns).\n    if (qx.lang.Type.isString(headings)) {\n      headings = [ headings ];\n    }\n\n    custom.dataModel.setColumns(headings);\n    custom.dataModel.setTreeColumn(custom.treeColumn);\n\n    // Save a reference to the tree with the data model\n    custom.dataModel.setTree(this);\n\n    // Call our superclass constructor\n    this.base(arguments, custom.dataModel, custom);\n\n    // Arrange to redisplay edited data following editing\n    this.addListener(\"dataEdited\",\n                     function(e)\n                     {\n                       this.getDataModel().setData();\n                     },\n                     this);\n\n    // By default, present the column visibility button only if there are\n    // multiple columns.\n    this.setColumnVisibilityButtonVisible(headings.length > 1);\n\n    // Set sizes\n    this.setRowHeight(16);\n    this.setMetaColumnCounts(headings.length > 1 ? [ 1, -1 ] : [ 1 ]);\n\n    // Overflow on trees is always hidden.  The internal elements scroll.\n    this.setOverflow(\"hidden\");\n\n    // Set the data cell render.  We use the SimpleTreeDataCellRenderer for the\n    // tree column, and our DefaultDataCellRenderer for all other columns.\n    var stdcr = custom.treeDataCellRenderer;\n    var ddcr = custom.defaultDataCellRenderer;\n    var tcm = this.getTableColumnModel();\n    var treeCol = this.getDataModel().getTreeColumn();\n\n    for (var i=0; i<headings.length; i++)\n    {\n      tcm.setDataCellRenderer(i, i == treeCol ? stdcr : ddcr);\n    }\n\n    // Set the data row renderer.\n    this.setDataRowRenderer(custom.dataRowRenderer);\n\n    // Move the focus with the mouse.  This controls the ROW focus indicator.\n    this.setFocusCellOnPointerMove(true);\n\n    // In a tree we don't typically want a visible cell focus indicator\n    this.setShowCellFocusIndicator(false);\n\n    // Get the list of pane scrollers\n    var scrollers = this._getPaneScrollerArr();\n\n    // For each scroller...\n    for (var i=0; i<scrollers.length; i++)\n    {\n      // Set the pane scrollers to handle the selection before\n      // displaying the focus, so we can manipulate the selected icon.\n      scrollers[i].setSelectBeforeFocus(true);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /**\n     * Fired when a tree branch which already has content is opened.\n     *\n     * Event data: the node object from the data model (of the node\n     * being opened) as described in\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     */\n    \"treeOpenWithContent\" : \"qx.event.type.Data\",\n\n    /**\n     * Fired when an empty tree branch is opened.\n     *\n     * Event data: the node object from the data model (of the node\n     * being opened) as described in\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     */\n    \"treeOpenWhileEmpty\"  : \"qx.event.type.Data\",\n\n    /**\n     * Fired when a tree branch is closed.\n     *\n     * Event data: the node object from the data model (of the node\n     * being closed) as described in\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     */\n    \"treeClose\"           : \"qx.event.type.Data\",\n\n    /**\n     * Fired when the selected rows change.\n     *\n     * Event data: An array of node objects (the selected rows' nodes)\n     * from the data model.  Each node object is described in\n     * {@link qx.ui.treevirtual.SimpleTreeDataModel}\n     */\n    \"changeSelection\"     : \"qx.event.type.Data\"\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * Selection Modes {int}\n     *\n     *   NONE\n     *     Nothing can ever be selected.\n     *\n     *   SINGLE\n     *     Allow only one selected item.\n     *\n     *   SINGLE_INTERVAL\n     *     Allow one contiguous interval of selected items.\n     *\n     *   MULTIPLE_INTERVAL\n     *     Allow any set of selected items, whether contiguous or not.\n     *\n     *   MULTIPLE_INTERVAL_TOGGLE\n     *     Like MULTIPLE_INTERVAL, but clicking on an item toggles its selection state.\n     */\n    SelectionMode :\n    {\n      NONE :\n        qx.ui.table.selection.Model.NO_SELECTION,\n      SINGLE :\n        qx.ui.table.selection.Model.SINGLE_SELECTION,\n      SINGLE_INTERVAL :\n        qx.ui.table.selection.Model.SINGLE_INTERVAL_SELECTION,\n      MULTIPLE_INTERVAL :\n        qx.ui.table.selection.Model.MULTIPLE_INTERVAL_SELECTION,\n      MULTIPLE_INTERVAL_TOGGLE :\n        qx.ui.table.selection.Model.MULTIPLE_INTERVAL_SELECTION_TOGGLE\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Whether a click on the open/close button should also cause selection of\n     * the row.\n     */\n    openCloseClickSelectsRow :\n    {\n      check : \"Boolean\",\n      init : false\n    },\n\n    appearance :\n    {\n      refine : true,\n      init : \"treevirtual\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Return the data model for this tree.\n     *\n     * @return {qx.ui.table.ITableModel} The data model.\n     */\n    getDataModel : function()\n    {\n      return this.getTableModel();\n    },\n\n\n    /**\n     * Set whether lines linking tree children shall be drawn on the tree.\n     * Note that not all themes support tree lines.  As of the time of this\n     * writing, the Classic theme supports tree lines (and uses +/- icons\n     * which lend themselves to tree lines), while the Modern theme, which\n     * uses right-facing and downward-facing arrows instead of +/-, does not.\n     *\n     * @param b {Boolean}\n     *   <i>true</i> if tree lines should be shown; <i>false</i> otherwise.\n     *\n     */\n    setUseTreeLines : function(b)\n    {\n      var dataModel = this.getDataModel();\n      var treeCol = dataModel.getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      dcr.setUseTreeLines(b);\n\n      // Inform the listeners\n      if (dataModel.hasListener(\"dataChanged\"))\n      {\n        var data =\n        {\n          firstRow    : 0,\n          lastRow     : dataModel.getRowCount() - 1,\n          firstColumn : 0,\n          lastColumn  : dataModel.getColumnCount() - 1\n        };\n\n        dataModel.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n\n    /**\n     * Get whether lines linking tree children shall be drawn on the tree.\n     *\n     * @return {Boolean}\n     *   <i>true</i> if tree lines are in use;\n     *   <i>false</i> otherwise.\n     */\n    getUseTreeLines : function()\n    {\n      var treeCol = this.getDataModel().getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      return dcr.getUseTreeLines();\n    },\n\n\n    /**\n     * Set whether the open/close button should be displayed on a branch,\n     * even if the branch has no children.\n     *\n     * @param b {Boolean}\n     *   <i>true</i> if the open/close button should be shown;\n     *   <i>false</i> otherwise.\n     *\n     */\n    setAlwaysShowOpenCloseSymbol : function(b)\n    {\n      var dataModel = this.getDataModel();\n      var treeCol = dataModel.getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      dcr.setAlwaysShowOpenCloseSymbol(b);\n\n      // Inform the listeners\n      if (dataModel.hasListener(\"dataChanged\"))\n      {\n        var data =\n        {\n          firstRow    : 0,\n          lastRow     : dataModel.getRowCount() - 1,\n          firstColumn : 0,\n          lastColumn  : dataModel.getColumnCount() - 1\n        };\n\n        dataModel.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n\n    /**\n     * Set whether drawing of first-level tree-node lines are disabled even\n     * if drawing of tree lines is enabled.\n     *\n     * @param b {Boolean}\n     *   <i>true</i> if first-level tree lines should be disabled;\n     *   <i>false</i> for normal operation.\n     *\n     */\n    setExcludeFirstLevelTreeLines : function(b)\n    {\n      var dataModel = this.getDataModel();\n      var treeCol = dataModel.getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      dcr.setExcludeFirstLevelTreeLines(b);\n\n      // Inform the listeners\n      if (dataModel.hasListener(\"dataChanged\"))\n      {\n        var data =\n        {\n          firstRow    : 0,\n          lastRow     : dataModel.getRowCount() - 1,\n          firstColumn : 0,\n          lastColumn  : dataModel.getColumnCount() - 1\n        };\n\n        dataModel.fireDataEvent(\"dataChanged\", data);\n      }\n    },\n\n\n    /**\n     * Get whether drawing of first-level tree lines should be disabled even\n     * if drawing of tree lines is enabled.\n     * (See also {@link #getUseTreeLines})\n     *\n     * @return {Boolean}\n     *   <i>true</i> if tree lines are in use;\n     *   <i>false</i> otherwise.\n     */\n    getExcludeFirstLevelTreeLines : function()\n    {\n      var treeCol = this.getDataModel().getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      return dcr.getExcludeFirstLevelTreeLines();\n    },\n\n\n    /**\n     * Set whether the open/close button should be displayed on a branch,\n     * even if the branch has no children.\n     *\n     * @return {Boolean}\n     *   <i>true</i> if tree lines are in use;\n     *   <i>false</i> otherwise.\n     */\n    getAlwaysShowOpenCloseSymbol : function()\n    {\n      var treeCol = this.getDataModel().getTreeColumn();\n      var dcr = this.getTableColumnModel().getDataCellRenderer(treeCol);\n      return dcr.getAlwaysShowOpenCloseSymbol();\n    },\n\n\n    /**\n     * Set the selection mode.\n     *\n     * @param mode {Integer}\n     *   The selection mode to be used.  It may be any of:\n     *     <pre>\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE:\n     *          Nothing can ever be selected.\n     *\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE\n     *          Allow only one selected item.\n     *\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.SINGLE_INTERVAL\n     *          Allow one contiguous interval of selected items.\n     *\n     *       qx.ui.treevirtual.TreeVirtual.SelectionMode.MULTIPLE_INTERVAL\n     *          Allow any selected items, whether contiguous or not.\n     *     </pre>\n     *\n     */\n    setSelectionMode : function(mode)\n    {\n      this.getSelectionModel().setSelectionMode(mode);\n    },\n\n\n    /**\n     * Get the selection mode currently in use.\n     *\n     * @return {Integer}\n     *   One of the values documented in {@link #setSelectionMode}\n     */\n    getSelectionMode : function()\n    {\n      return this.getSelectionModel().getSelectionMode();\n    },\n\n\n    /**\n     * Obtain the entire hierarchy of labels from the root down to the\n     * specified node.\n     *\n     * @param nodeReference {Object | Integer}\n     *   The node for which the hierarchy is desired.  The node can be\n     *   represented either by the node object, or the node id (as would have\n     *   been returned by addBranch(), addLeaf(), etc.)\n     *\n     * @return {Array}\n     *   The returned array contains one string for each label in the\n     *   hierarchy of the node specified by the parameter.  Element 0 of the\n     *   array contains the label of the root node, element 1 contains the\n     *   label of the node immediately below root in the specified node's\n     *   hierarchy, etc., down to the last element in the array contain the\n     *   label of the node referenced by the parameter.\n     */\n    getHierarchy : function(nodeReference)\n    {\n      var _this = this;\n      var components = [];\n      var node;\n      var nodeId;\n\n      if (typeof(nodeReference) == \"object\")\n      {\n        node = nodeReference;\n        nodeId = node.nodeId;\n      }\n      else if (typeof(nodeReference) == \"number\")\n      {\n        nodeId = nodeReference;\n      }\n      else\n      {\n        throw new Error(\"Expected node object or node id\");\n      }\n\n      function addHierarchy(nodeId)\n      {\n        // If we're at the root...\n        if (! nodeId)\n        {\n          // ... then we're done\n          return ;\n        }\n\n        // Get the requested node\n        var node = _this.getDataModel().getData()[nodeId];\n\n        // Add its label to the hierarchy components\n        components.unshift(node.label);\n\n        // Call recursively to our parent node.\n        addHierarchy(node.parentNodeId);\n      }\n\n      addHierarchy(nodeId);\n      return components;\n    },\n\n\n    /**\n     * Return the nodes that are currently selected.\n     *\n     * @return {Array}\n     *   An array containing the nodes that are currently selected.\n     */\n    getSelectedNodes : function()\n    {\n      return this.getDataModel().getSelectedNodes();\n    },\n\n\n    /**\n     * Event handler. Called when a key was pressed.\n     *\n     * We handle the Enter key to toggle opened/closed tree state.  All\n     * other keydown events are passed to our superclass.\n     *\n     * @param evt {Map}\n     *   The event.\n     *\n     */\n    _onKeyPress : function(evt)\n    {\n      if (!this.getEnabled())\n      {\n        return;\n      }\n\n      var identifier = evt.getKeyIdentifier();\n\n      var consumed = false;\n      var modifiers = evt.getModifiers();\n\n      if (modifiers == 0)\n      {\n        switch(identifier)\n        {\n          case \"Enter\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            var focusedCol = this.getFocusedColumn();\n            var treeCol = dm.getTreeColumn();\n\n            if (focusedCol == treeCol)\n            {\n              // Get the focused node\n              var focusedRow = this.getFocusedRow();\n              var node = dm.getNode(focusedRow);\n\n              if (! node.bHideOpenClose &&\n                  node.type != qx.ui.treevirtual.SimpleTreeDataModel.Type.LEAF)\n              {\n                dm.setState(node, { bOpened : ! node.bOpened });\n              }\n\n              consumed = true;\n            }\n            break;\n\n          case \"Left\":\n            this.moveFocusedCell(-1, 0);\n            break;\n\n          case \"Right\":\n            this.moveFocusedCell(1, 0);\n            break;\n        }\n      }\n      else if (modifiers == qx.event.type.Dom.CTRL_MASK)\n      {\n        switch(identifier)\n        {\n          case \"Left\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            // Get the focused node\n            var focusedRow = this.getFocusedRow();\n            var treeCol = dm.getTreeColumn();\n            var node = dm.getNode(focusedRow);\n\n            // If it's an open branch and open/close is allowed...\n            if ((node.type ==\n                 qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH) &&\n                ! node.bHideOpenClose &&\n                node.bOpened)\n            {\n              // ... then close it\n              dm.setState(node, { bOpened : ! node.bOpened });\n            }\n\n            // Reset the focus to the current node\n            this.setFocusedCell(treeCol, focusedRow, true);\n\n            consumed = true;\n            break;\n\n          case \"Right\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            // Get the focused node\n            focusedRow = this.getFocusedRow();\n            treeCol = dm.getTreeColumn();\n            node = dm.getNode(focusedRow);\n\n            // If it's a closed branch and open/close is allowed...\n            if ((node.type ==\n                 qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH) &&\n                ! node.bHideOpenClose &&\n                ! node.bOpened)\n            {\n              // ... then open it\n              dm.setState(node, { bOpened : ! node.bOpened });\n            }\n\n            // Reset the focus to the current node\n            this.setFocusedCell(treeCol, focusedRow, true);\n\n            consumed = true;\n            break;\n        }\n      }\n      else if (modifiers == qx.event.type.Dom.SHIFT_MASK)\n      {\n        switch(identifier)\n        {\n          case \"Left\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            // Get the focused node\n            var focusedRow = this.getFocusedRow();\n            var treeCol = dm.getTreeColumn();\n            var node = dm.getNode(focusedRow);\n\n            // If we're not at the top-level already...\n            if (node.parentNodeId)\n            {\n              // Find out what rendered row our parent node is at\n              var rowIndex = dm.getRowFromNodeId(node.parentNodeId);\n\n              // Set the focus to our parent\n              this.setFocusedCell(this._focusedCol, rowIndex, true);\n            }\n\n            consumed = true;\n            break;\n\n          case \"Right\":\n            // Get the data model\n            var dm = this.getDataModel();\n\n            // Get the focused node\n            focusedRow = this.getFocusedRow();\n            treeCol = dm.getTreeColumn();\n            node = dm.getNode(focusedRow);\n\n            // If we're on a branch and open/close is allowed...\n            if ((node.type ==\n                 qx.ui.treevirtual.SimpleTreeDataModel.Type.BRANCH) &&\n                ! node.bHideOpenClose)\n            {\n              // ... then first ensure the branch is open\n              if (! node.bOpened)\n              {\n                dm.setState(node, { bOpened : ! node.bOpened });\n              }\n\n              // If this node has children...\n              if (node.children.length > 0)\n              {\n                // ... then move the focus to the first child\n                this.moveFocusedCell(0, 1);\n              }\n            }\n\n            consumed = true;\n            break;\n        }\n      }\n\n      // Was this one of our events that we handled?\n      if (consumed)\n      {\n        // Yup.  Don't propagate it.\n        evt.preventDefault();\n        evt.stopPropagation();\n      }\n      else\n      {\n        // It's not one of ours.  Let our superclass handle this event\n        this.base(arguments, evt);\n      }\n    },\n\n\n    /**\n     * Event handler. Called when the selection has changed.\n     *\n     * @param evt {Map}\n     *   The event.\n     *\n     */\n    _onSelectionChanged : function(evt)\n    {\n      // Clear the old list of selected nodes\n      this.getDataModel()._clearSelections();\n\n      // If selections are allowed, pass an event to our listeners\n      if (this.getSelectionMode() !=\n          qx.ui.treevirtual.TreeVirtual.SelectionMode.NONE)\n      {\n        var selectedNodes = this._calculateSelectedNodes();\n\n        // Get the now-focused\n        this.fireDataEvent(\"changeSelection\", selectedNodes);\n      }\n\n      // Call the superclass method\n      this.base(arguments, evt);\n    },\n\n\n    /**\n     * Calculate and return the set of nodes which are currently selected by\n     * the user, on the screen.  In the process of calculating which nodes\n     * are selected, the nodes corresponding to the selected rows on the\n     * screen are marked as selected by setting their <i>bSelected</i>\n     * property to true, and all previously-selected nodes have their\n     * <i>bSelected</i> property reset to false.\n     *\n     * @return {Array}\n     *   An array of nodes matching the set of rows which are selected on the\n     *   screen.\n     */\n    _calculateSelectedNodes : function()\n    {\n      // Create an array of nodes that are now selected\n      var stdcm = this.getDataModel();\n      var selectedRanges = this.getSelectionModel().getSelectedRanges();\n      var selectedNodes = [];\n      var node;\n\n      for (var i=0;\n           i<selectedRanges.length;\n           i++)\n      {\n        for (var j=selectedRanges[i].minIndex;\n             j<=selectedRanges[i].maxIndex;\n             j++)\n        {\n          node = stdcm.getNode(j);\n          stdcm.setState(node, { bSelected : true });\n          selectedNodes.push(node);\n        }\n      }\n\n      return selectedNodes;\n    },\n\n\n    /**\n     * Set the overflow mode.\n     *\n     * @param s {String}\n     *   Overflow mode.  The only allowable mode is \"hidden\".\n     *\n     *\n     * @throws {Error}\n     *   Error if tree overflow mode is other than \"hidden\"\n     */\n    setOverflow : function(s)\n    {\n      if (s != \"hidden\")\n      {\n        throw new Error(\"Tree overflow must be hidden.  \" +\n                        \"The internal elements of it will scroll.\");\n      }\n    }\n  }\n});\n"
  ]
}