{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/splitpane/HLayout.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "layout",
    "Abstract",
    "members",
    "verifyLayoutProperty",
    "item",
    "name",
    "value",
    "assert",
    "assertNumber",
    "assertString",
    "renderLayout",
    "availWidth",
    "availHeight",
    "padding",
    "children",
    "_getLayoutChildren",
    "length",
    "child",
    "type",
    "begin",
    "splitter",
    "slider",
    "end",
    "paddingLeft",
    "left",
    "paddingTop",
    "top",
    "i",
    "getLayoutProperties",
    "beginFlex",
    "flex",
    "endFlex",
    "beginHint",
    "getSizeHint",
    "splitterHint",
    "endHint",
    "beginWidth",
    "width",
    "splitterWidth",
    "endWidth",
    "flexSum",
    "flexAvailable",
    "Math",
    "round",
    "sizes",
    "Util",
    "arrangeIdeals",
    "minWidth",
    "maxWidth",
    "_computeSizeHint",
    "hint",
    "props",
    "minHeight",
    "height",
    "maxHeight",
    "splitpane",
    "HLayout"
  ],
  "mappings": "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",
  "file": "HLayout.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Layouter for horizontal split panes.\n *\n * @internal\n */\nqx.Class.define(\"qx.ui.splitpane.HLayout\",\n{\n  extend : qx.ui.layout.Abstract,\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    verifyLayoutProperty : qx.core.Environment.select(\"qx.debug\",\n    {\n      \"true\" : function(item, name, value)\n      {\n        this.assert(name === \"type\" || name === \"flex\", \"The property '\"+name+\"' is not supported by the split layout!\");\n\n        if (name == \"flex\") {\n          this.assertNumber(value);\n        }\n\n        if (name == \"type\") {\n          this.assertString(value);\n        }\n      },\n\n      \"false\" : null\n    }),\n\n\n    // overridden\n    renderLayout : function(availWidth, availHeight, padding)\n    {\n      var children = this._getLayoutChildren();\n      var length = children.length;\n      var child, type;\n      var begin, splitter, slider, end;\n      var paddingLeft = padding.left || 0;\n      var paddingTop = padding.top || 0;\n\n      for (var i=0; i<length; i++)\n      {\n        child = children[i];\n        type = child.getLayoutProperties().type;\n\n        if (type === \"splitter\") {\n          splitter = child;\n        } else if (type === \"slider\") {\n          slider = child;\n        } else if (!begin) {\n          begin = child;\n        } else {\n          end = child;\n        }\n      }\n\n      if (begin && end)\n      {\n        var beginFlex = begin.getLayoutProperties().flex;\n        var endFlex = end.getLayoutProperties().flex;\n\n        if (beginFlex == null) {\n          beginFlex = 1;\n        }\n\n        if (endFlex == null) {\n          endFlex = 1;\n        }\n\n        var beginHint = begin.getSizeHint();\n        var splitterHint = splitter.getSizeHint();\n        var endHint = end.getSizeHint();\n\n        var beginWidth = beginHint.width;\n        var splitterWidth = splitterHint.width;\n        var endWidth = endHint.width;\n\n        if (beginFlex > 0 && endFlex > 0)\n        {\n          var flexSum = beginFlex + endFlex;\n          var flexAvailable = availWidth - splitterWidth;\n\n          var beginWidth = Math.round((flexAvailable / flexSum) * beginFlex);\n          var endWidth = flexAvailable - beginWidth;\n\n          var sizes = qx.ui.layout.Util.arrangeIdeals(beginHint.minWidth, beginWidth, beginHint.maxWidth,\n            endHint.minWidth, endWidth, endHint.maxWidth);\n\n          beginWidth = sizes.begin;\n          endWidth = sizes.end;\n        }\n        else if (beginFlex > 0)\n        {\n          beginWidth = availWidth - splitterWidth - endWidth;\n          if (beginWidth < beginHint.minWidth) {\n            beginWidth = beginHint.minWidth;\n          }\n\n          if (beginWidth > beginHint.maxWidth) {\n            beginWidth = beginHint.maxWidth;\n          }\n        }\n        else if (endFlex > 0)\n        {\n          endWidth = availWidth - beginWidth - splitterWidth;\n          if (endWidth < endHint.minWidth) {\n            endWidth = endHint.minWidth;\n          }\n\n          if (endWidth > endHint.maxWidth) {\n            endWidth = endHint.maxWidth;\n          }\n        }\n\n        begin.renderLayout(paddingLeft, paddingTop, beginWidth, availHeight);\n        splitter.renderLayout(beginWidth + paddingLeft, paddingTop, splitterWidth, availHeight);\n        end.renderLayout(beginWidth+splitterWidth + paddingLeft, paddingTop, endWidth, availHeight);\n      }\n      else\n      {\n        // Hide the splitter completely\n        splitter.renderLayout(0, 0, 0, 0);\n\n        // Render one child\n        if (begin) {\n          begin.renderLayout(paddingLeft, paddingTop, availWidth, availHeight);\n        } else if (end) {\n          end.renderLayout(paddingLeft, paddingTop, availWidth, availHeight);\n        }\n      }\n    },\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      var children = this._getLayoutChildren();\n      var length = children.length;\n      var child, hint, props;\n      var minWidth=0, width=0, maxWidth=0;\n      var minHeight=0, height=0, maxHeight=0;\n\n      for (var i=0; i<length; i++)\n      {\n        child = children[i];\n        props = child.getLayoutProperties();\n\n        // The slider is not relevant for auto sizing\n        if (props.type === \"slider\") {\n          continue;\n        }\n\n        hint = child.getSizeHint();\n\n        minWidth += hint.minWidth;\n        width += hint.width;\n        maxWidth += hint.maxWidth;\n\n        if (hint.minHeight > minHeight) {\n          minHeight = hint.minHeight;\n        }\n\n        if (hint.height > height) {\n          height = hint.height;\n        }\n\n        if (hint.maxHeight > maxHeight) {\n          maxHeight = hint.maxHeight;\n        }\n      }\n\n      return {\n        minWidth : minWidth,\n        width : width,\n        maxWidth : maxWidth,\n        minHeight : minHeight,\n        height : height,\n        maxHeight : maxHeight\n      };\n    }\n  }\n});\n"
  ]
}