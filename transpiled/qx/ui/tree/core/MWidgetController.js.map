{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/tree/core/MWidgetController.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "__boundItems",
    "properties",
    "labelPath",
    "check",
    "nullable",
    "iconPath",
    "labelOptions",
    "iconOptions",
    "childProperty",
    "delegate",
    "event",
    "init",
    "members",
    "bindDefaultProperties",
    "item",
    "index",
    "bindProperty",
    "getLabelPath",
    "getLabelOptions",
    "bindPath",
    "__getBindPath",
    "bindTarget",
    "_tree",
    "getLookupTable",
    "data",
    "SingleValueBinding",
    "resolvePropertyChain",
    "util",
    "OOUtil",
    "hasProperty",
    "constructor",
    "getChildProperty",
    "converter",
    "setAppearance",
    "getIconPath",
    "getIconOptions",
    "sourcePath",
    "targetProperty",
    "options",
    "targetWidget",
    "id",
    "bind",
    "__addBinding",
    "bindPropertyReverse",
    "targetPath",
    "sourceProperty",
    "sourceWidget",
    "removeBindings",
    "length",
    "pop",
    "_removeBindingsFrom",
    "_bindItem",
    "bindItem",
    "Delegate",
    "getMethod",
    "getDelegate",
    "bindings",
    "__getBindings",
    "removeBinding",
    "e",
    "includes",
    "lang",
    "Array",
    "remove",
    "path",
    "widget",
    "push",
    "getUserData",
    "setUserData",
    "destruct",
    "ui",
    "tree",
    "core",
    "MWidgetController"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAwBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,mCAAhB,EACA;AACEC,eAAY,qBAAW;AACrB,WAAKC,YAAL,GAAoB,EAApB;AACD,KAHH;;AAMEC,gBACA;AACE;;;;AAIAC,iBACA;AACEC,eAAO,QADT;AAEEC,kBAAU;AAFZ,OANF;;AAYE;;;;AAIAC,gBACA;AACEF,eAAO,QADT;AAEEC,kBAAU;AAFZ,OAjBF;;AAuBE;;;;AAIAE,oBACA;AACEF,kBAAU;AADZ,OA5BF;;AAiCE;;;;AAIAG,mBACA;AACEH,kBAAU;AADZ,OAtCF;;AA2CE;;;;;AAKAI,qBACA;AACEL,eAAO,QADT;AAEEC,kBAAU;AAFZ,OAjDF;;AAuDE;;;;AAIAK,gBACA;AACEC,eAAO,gBADT;AAEEC,cAAM,IAFR;AAGEP,kBAAU;AAHZ;AA5DF,KAPF;;AA2EEQ,aACA;AACE;AACAZ,oBAAe,IAFjB;;AAKE;;;;;;;;;;;AAWAa,6BAAwB,+BAASC,IAAT,EAAeC,KAAf,EACxB;AACE;AACA,aAAKC,YAAL,CAAkB,EAAlB,EAAsB,OAAtB,EAA+B,IAA/B,EAAqCF,IAArC,EAA2CC,KAA3C;;AAEA,aAAKC,YAAL,CACE,KAAKC,YAAL,EADF,EACuB,OADvB,EACgC,KAAKC,eAAL,EADhC,EACwDJ,IADxD,EAC8DC,KAD9D;;AAIA,YAAII,WAAW,KAAKC,aAAL,CAAmBL,KAAnB,CAAf;AACA,YAAIM,aAAa,KAAKC,KAAL,CAAWC,cAAX,EAAjB;AACAF,qBAAa5B,GAAG+B,IAAH,CAAQC,kBAAR,CAA2BC,oBAA3B,CAAgDL,UAAhD,EAA4DF,QAA5D,CAAb;;AAEA,YAAI1B,GAAGkC,IAAH,CAAQC,MAAR,CAAeC,WAAf,CAA2BR,WAAWS,WAAtC,EAAmD,KAAKC,gBAAL,EAAnD,CAAJ,EAAiF;AAC/E,eAAKf,YAAL,CACE,KAAKe,gBAAL,KAA0B,SAD5B,EACuC,YADvC,EAEE;AACEC,uBAAY,qBAAW;AACrB,qBAAO,qBAAP;AACD;AAHH,WAFF,EAMKlB,IANL,EAMWC,KANX;AAQD,SATD,MASO;AACLD,eAAKmB,aAAL,CAAmB,mBAAnB;AACD;;AAED,YAAI,KAAKC,WAAL,MAAsB,IAA1B,EACA;AACE,eAAKlB,YAAL,CACE,KAAKkB,WAAL,EADF,EACsB,MADtB,EAC8B,KAAKC,cAAL,EAD9B,EACqDrB,IADrD,EAC2DC,KAD3D;AAGD;AACF,OAhDH;;AAmDE;;;;;;;;;;;;;;AAcAC,oBAAe,sBAASoB,UAAT,EAAqBC,cAArB,EAAqCC,OAArC,EAA8CC,YAA9C,EAA4DxB,KAA5D,EACf;AACE,YAAII,WAAW,KAAKC,aAAL,CAAmBL,KAAnB,EAA0BqB,UAA1B,CAAf;AACA,YAAIf,aAAa,KAAKC,KAAL,CAAWC,cAAX,EAAjB;;AAEA,YAAIiB,KAAKnB,WAAWoB,IAAX,CAAgBtB,QAAhB,EAA0BoB,YAA1B,EAAwCF,cAAxC,EAAwDC,OAAxD,CAAT;AACA,aAAKI,YAAL,CAAkBH,YAAlB,EAAgCC,EAAhC;AACD,OAxEH;;AA2EE;;;;;;;;;;;;;AAaAG,2BAAsB,6BAASC,UAAT,EAAqBC,cAArB,EAAqCP,OAArC,EAA8CQ,YAA9C,EAA4D/B,KAA5D,EACtB;AACE,YAAII,WAAW,KAAKC,aAAL,CAAmBL,KAAnB,EAA0B6B,UAA1B,CAAf;AACA,YAAIvB,aAAa,KAAKC,KAAL,CAAWC,cAAX,EAAjB;;AAEA,YAAIiB,KAAKM,aAAaL,IAAb,CAAkBI,cAAlB,EAAkCxB,UAAlC,EAA8CF,QAA9C,EAAwDmB,OAAxD,CAAT;AACA,aAAKI,YAAL,CAAkBI,YAAlB,EAAgCN,EAAhC;AACD,OA/FH;;AAkGE;;;AAGAO,sBAAiB,0BACjB;AACE,eAAM,KAAK/C,YAAL,CAAkBgD,MAAlB,GAA2B,CAAjC,EAAoC;AAClC,cAAIlC,OAAO,KAAKd,YAAL,CAAkBiD,GAAlB,EAAX;AACA,eAAKC,mBAAL,CAAyBpC,IAAzB;AACD;AACF,OA3GH;;AA8GE;;;;;;AAMAqC,iBAAY,mBAASrC,IAAT,EAAeC,KAAf,EACZ;AACE,YAAIqC,WAAW3D,GAAGkC,IAAH,CAAQ0B,QAAR,CAAiBC,SAAjB,CAA2B,KAAKC,WAAL,EAA3B,EAA+C,UAA/C,CAAf;;AAEA,YAAIH,YAAY,IAAhB,EAAsB;AACpBA,mBAAS,IAAT,EAAetC,IAAf,EAAqBC,KAArB;AACD,SAFD,MAEO;AACL,eAAKF,qBAAL,CAA2BC,IAA3B,EAAiCC,KAAjC;AACD;AACF,OA7HH;;AAgIE;;;;;;AAMAmC,2BAAsB,6BAASpC,IAAT,EACtB;AACE,YAAI0C,WAAW,KAAKC,aAAL,CAAmB3C,IAAnB,CAAf;;AAEA,eAAO0C,SAASR,MAAT,GAAkB,CAAzB,EACA;AACE,cAAIR,KAAKgB,SAASP,GAAT,EAAT;;AAEA,cAAI;AACF,iBAAK3B,KAAL,CAAWC,cAAX,GAA4BmC,aAA5B,CAA0ClB,EAA1C;AACD,WAFD,CAEE,OAAMmB,CAAN,EAAS;AACT7C,iBAAK4C,aAAL,CAAmBlB,EAAnB;AACD;AACF;;AAED,YAAI,KAAKxC,YAAL,CAAkB4D,QAAlB,CAA2B9C,IAA3B,CAAJ,EAAsC;AACpCrB,aAAGoE,IAAH,CAAQC,KAAR,CAAcC,MAAd,CAAqB,KAAK/D,YAA1B,EAAwCc,IAAxC;AACD;AACF,OAxJH;;AA2JE;;;;;;;AAOAM,qBAAgB,uBAASL,KAAT,EAAgBiD,IAAhB,EAChB;AACE,YAAI7C,WAAW,MAAMJ,KAAN,GAAc,GAA7B;AACA,YAAIiD,QAAQ,IAAR,IAAgBA,QAAQ,EAA5B,EAAgC;AAC9B7C,sBAAY,MAAM6C,IAAlB;AACD;AACD,eAAO7C,QAAP;AACD,OAzKH;;AA4KE;;;;;;AAMAuB,oBAAe,sBAASuB,MAAT,EAAiBzB,EAAjB,EACf;AACE,YAAIgB,WAAW,KAAKC,aAAL,CAAmBQ,MAAnB,CAAf;;AAEA,YAAI,CAACT,SAASI,QAAT,CAAkBpB,EAAlB,CAAL,EAA4B;AAC1BgB,mBAASU,IAAT,CAAc1B,EAAd;AACD;;AAED,YAAI,CAAC,KAAKxC,YAAL,CAAkB4D,QAAlB,CAA2BK,MAA3B,CAAL,EAAyC;AACvC,eAAKjE,YAAL,CAAkBkE,IAAlB,CAAuBD,MAAvB;AACD;AACF,OA7LH;;AAgME;;;;;;AAMAR,qBAAgB,uBAASQ,MAAT,EAChB;AACE,YAAIT,WAAWS,OAAOE,WAAP,CAAmB,YAAnB,CAAf;;AAEA,YAAIX,YAAY,IAAhB,EAAsB;AACpBA,qBAAW,EAAX;AACAS,iBAAOG,WAAP,CAAmB,YAAnB,EAAiCZ,QAAjC;AACD;;AAED,eAAOA,QAAP;AACD;AAhNH,KA5EF;;AAgSEa,cAAW,oBAAW;AACpB,WAAKrE,YAAL,GAAoB,IAApB;AACD;AAlSH,GADA,C;AAxBAP,KAAG6E,EAAH,CAAMC,IAAN,CAAWC,IAAX,CAAgBC,iBAAhB,CAAkC7E,aAAlC,GAAkDA,aAAlD",
  "file": "MWidgetController.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * The mixin controls the binding between model and item.\n *\n * @internal\n */\nqx.Mixin.define(\"qx.ui.tree.core.MWidgetController\",\n{\n  construct : function() {\n    this.__boundItems = [];\n  },\n\n\n  properties :\n  {\n    /**\n     * The name of the property, where the value for the tree node/leaf label\n     * is stored in the model classes.\n     */\n    labelPath :\n    {\n      check: \"String\",\n      nullable: true\n    },\n\n\n    /**\n     * The path to the property which holds the information that should be\n     * shown as an icon.\n     */\n    iconPath :\n    {\n      check: \"String\",\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the label binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    labelOptions :\n    {\n      nullable: true\n    },\n\n\n    /**\n     * A map containing the options for the icon binding. The possible keys\n     * can be found in the {@link qx.data.SingleValueBinding} documentation.\n     */\n    iconOptions :\n    {\n      nullable: true\n    },\n\n\n    /**\n     * The name of the property, where the children are stored in the model.\n     * Instead of the {@link #labelPath} must the child property a direct\n     * property form the model instance.\n     */\n    childProperty :\n    {\n      check: \"String\",\n      nullable: true\n    },\n\n\n    /**\n     * Delegation object, which can have one or more functions defined by the\n     * {@link qx.ui.tree.core.IVirtualTreeDelegate} interface.\n     */\n    delegate :\n    {\n      event: \"changeDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n\n  members :\n  {\n    /** @type {Array} which contains the bounded items */\n    __boundItems : null,\n\n\n    /**\n     * Helper-Method for binding the default properties from the model to the\n     * target widget. The used default properties  depends on the passed item.\n     *\n     * This method should only be called in the {@link IVirtualTreeDelegate#bindItem}\n     * function implemented by the {@link #delegate} property.\n     *\n     * @param item {qx.ui.core.Widget} The internally created and used node or\n     *   leaf.\n     * @param index {Integer} The index of the item (node or leaf).\n     */\n    bindDefaultProperties : function(item, index)\n    {\n      // bind model first\n      this.bindProperty(\"\", \"model\", null, item, index);\n\n      this.bindProperty(\n        this.getLabelPath(), \"label\", this.getLabelOptions(), item, index\n      );\n\n      var bindPath = this.__getBindPath(index);\n      var bindTarget = this._tree.getLookupTable();\n      bindTarget = qx.data.SingleValueBinding.resolvePropertyChain(bindTarget, bindPath);\n\n      if (qx.util.OOUtil.hasProperty(bindTarget.constructor, this.getChildProperty())) {\n        this.bindProperty(\n          this.getChildProperty() + \".length\", \"appearance\",\n          {\n            converter : function() {\n              return \"virtual-tree-folder\";\n            }\n          }, item, index\n        );\n      } else {\n        item.setAppearance(\"virtual-tree-file\");\n      }\n\n      if (this.getIconPath() != null)\n      {\n        this.bindProperty(\n          this.getIconPath(), \"icon\", this.getIconOptions(), item, index\n        );\n      }\n    },\n\n\n    /**\n     * Helper-Method for binding a given property from the model to the target\n     * widget.\n     *\n     * This method should only be called in the {@link IVirtualTreeDelegate#bindItem}\n     * function implemented by the {@link #delegate} property.\n     *\n     * @param sourcePath {String | null} The path to the property in the model.\n     *   If you use an empty string, the whole model item will be bound.\n     * @param targetProperty {String} The name of the property in the target widget.\n     * @param options {Map | null} The options to use for the binding.\n     * @param targetWidget {qx.ui.core.Widget} The target widget.\n     * @param index {Integer} The index of the current binding.\n     */\n    bindProperty : function(sourcePath, targetProperty, options, targetWidget, index)\n    {\n      var bindPath = this.__getBindPath(index, sourcePath);\n      var bindTarget = this._tree.getLookupTable();\n\n      var id = bindTarget.bind(bindPath, targetWidget, targetProperty, options);\n      this.__addBinding(targetWidget, id);\n    },\n\n\n    /**\n     * Helper-Method for binding a given property from the target widget to\n     * the model.\n     * This method should only be called in the\n     * {@link qx.ui.tree.core.IVirtualTreeDelegate#bindItem} function implemented by the\n     * {@link #delegate} property.\n     *\n     * @param targetPath {String | null} The path to the property in the model.\n     * @param sourceProperty {String} The name of the property in the target.\n     * @param options {Map | null} The options to use for the binding.\n     * @param sourceWidget {qx.ui.core.Widget} The source widget.\n     * @param index {Integer} The index of the current binding.\n     */\n    bindPropertyReverse : function(targetPath, sourceProperty, options, sourceWidget, index)\n    {\n      var bindPath = this.__getBindPath(index, targetPath);\n      var bindTarget = this._tree.getLookupTable();\n\n      var id = sourceWidget.bind(sourceProperty, bindTarget, bindPath, options);\n      this.__addBinding(sourceWidget, id);\n    },\n\n\n    /**\n     * Remove all bindings from all bounded items.\n     */\n    removeBindings : function()\n    {\n      while(this.__boundItems.length > 0) {\n        var item = this.__boundItems.pop();\n        this._removeBindingsFrom(item);\n      }\n    },\n\n\n    /**\n     * Sets up the binding for the given item and index.\n     *\n     * @param item {qx.ui.core.Widget} The internally created and used item.\n     * @param index {Integer} The index of the item.\n     */\n    _bindItem : function(item, index)\n    {\n      var bindItem = qx.util.Delegate.getMethod(this.getDelegate(), \"bindItem\");\n\n      if (bindItem != null) {\n        bindItem(this, item, index);\n      } else {\n        this.bindDefaultProperties(item, index);\n      }\n    },\n\n\n    /**\n     * Removes the binding of the given item.\n     *\n     * @param item {qx.ui.core.Widget} The item which the binding should be\n     *   removed.\n     */\n    _removeBindingsFrom : function(item)\n    {\n      var bindings = this.__getBindings(item);\n\n      while (bindings.length > 0)\n      {\n        var id = bindings.pop();\n\n        try {\n          this._tree.getLookupTable().removeBinding(id);\n        } catch(e) {\n          item.removeBinding(id);\n        }\n      }\n\n      if (this.__boundItems.includes(item)) {\n        qx.lang.Array.remove(this.__boundItems, item);\n      }\n    },\n\n\n    /**\n     * Helper method to create the path for binding.\n     *\n     * @param index {Integer} The index of the item.\n     * @param path {String|null} The path to the property.\n     * @return {String} The binding path\n     */\n    __getBindPath : function(index, path)\n    {\n      var bindPath = \"[\" + index + \"]\";\n      if (path != null && path != \"\") {\n        bindPath += \".\" + path;\n      }\n      return bindPath;\n    },\n\n\n    /**\n     * Helper method to save the binding for the widget.\n     *\n     * @param widget {qx.ui.core.Widget} widget to save binding.\n     * @param id {var} the id from the binding.\n     */\n    __addBinding : function(widget, id)\n    {\n      var bindings = this.__getBindings(widget);\n\n      if (!bindings.includes(id)) {\n        bindings.push(id);\n      }\n\n      if (!this.__boundItems.includes(widget)) {\n        this.__boundItems.push(widget);\n      }\n    },\n\n\n    /**\n     * Helper method which returns all bound id from the widget.\n     *\n     * @param widget {qx.ui.core.Widget} widget to get all binding.\n     * @return {Array} all bound id's.\n     */\n    __getBindings : function(widget)\n    {\n      var bindings = widget.getUserData(\"BindingIds\");\n\n      if (bindings == null) {\n        bindings = [];\n        widget.setUserData(\"BindingIds\", bindings);\n      }\n\n      return bindings;\n    }\n  },\n\n\n  destruct : function() {\n    this.__boundItems = null;\n  }\n});\n"
  ]
}