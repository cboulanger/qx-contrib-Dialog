{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/indicator/ProgressBar.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "container",
    "Composite",
    "construct",
    "value",
    "maximum",
    "_createChildControl",
    "setLayout",
    "layout",
    "HBox",
    "setMaximum",
    "setValue",
    "properties",
    "appearance",
    "refine",
    "init",
    "event",
    "apply",
    "events",
    "complete",
    "change",
    "members",
    "_applyValue",
    "old",
    "max",
    "getMaximum",
    "lang",
    "Type",
    "isNumber",
    "isFinite",
    "_changeProgress",
    "_applyMaximum",
    "val",
    "getValue",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "Canvas",
    "_add",
    "width",
    "bar",
    "getChildControl",
    "to",
    "Math",
    "floor",
    "from",
    "parseInt",
    "getLayoutProperties",
    "setLayoutProperties",
    "fireDataEvent",
    "fireEvent",
    "indicator",
    "ProgressBar"
  ],
  "mappings": "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",
  "file": "ProgressBar.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2015 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Adrian Olaru (adrianolaru)\n\n************************************************************************ */\n\n\n/**\n * The Progress bar is designed to simply display the current % complete\n * for a process.\n *\n * The Value is limited between 0 and Maximum value.\n * It's not allowed to set a Maximum value of 0.  If you set a Maximum value\n * bigger than 0, but smaller than Value, it will be limited to Value.\n *\n * The following example creates and adds a progress bar to the root element.\n * A listener is used to show the user if the value is changed,\n * and another one when the progress is complete.\n *\n * <pre class='javascript'>\n * var pb = new qx.ui.indicator.ProgressBar();\n * this.getRoot().add(pb, { left : 20, top: 20});\n *\n * pb.addListener(\"change\", function(e) {\n *   this.debug(e.getData()); // % complete\n *   this.debug(pb.getValue()); // absolute value\n * });\n *\n * pb.addListener(\"complete\", function(e) {\n *   this.debug(\"complete\");\n * });\n *\n * //set a value\n * pb.setValue(20);\n * </pre>\n *\n * @childControl progress {qx.ui.container.Composite} The progress bar\n */\nqx.Class.define(\"qx.ui.indicator.ProgressBar\",\n{\n  extend: qx.ui.container.Composite,\n\n\n  /**\n   * @param value {Number ? 0} Progress bar value\n   * @param maximum {Number ? 100} Progress bar maximum value\n   */\n  construct: function(value, maximum) {\n    this.base(arguments);\n\n    this._createChildControl(\"progress\");\n\n    this.setLayout(new qx.ui.layout.HBox());\n\n    if (maximum != null) {\n      this.setMaximum(maximum);\n    }\n\n    if (value != null) {\n      this.setValue(value);\n    }\n\n  },\n\n\n  properties:\n  {\n    appearance:\n    {\n      refine: true,\n      init: \"progressbar\"\n    },\n\n    /** Maximum value of the progress bar */\n    maximum :\n    {\n      init : 100,\n      event : \"changeMaximum\",\n      apply : \"_applyMaximum\"\n    },\n\n    /** Current value of the progress bar */\n    value :\n    {\n      init : 0,\n      event : \"changeValue\",\n      apply : \"_applyValue\"\n    }\n  },\n\n\n  events:\n  {\n    /**\n     * Fired when the process is complete (value === maximum value)\n     */\n    complete: \"qx.event.type.Event\",\n\n\n    /**\n     * Fired when the % complete value is changed.\n     */\n    change: \"qx.event.type.Data\"\n  },\n\n\n  members:\n  {\n  // property apply\n    _applyValue: function(value, old) {\n      var max = this.getMaximum();\n\n      //do nothing if is not a number\n      if (!qx.lang.Type.isNumber(value) || !isFinite(value)) {\n        value = old;\n      }\n\n      if (value < 0) {\n        // limit value to 0\n        value = 0;\n      } else if (value > max) {\n        // limit value to max\n        value = max;\n      }\n\n      //set value\n      this.setValue(value);\n\n      //update progress\n      this._changeProgress(value / max);\n    },\n\n\n    // property apply\n    _applyMaximum: function(value, old) {\n      var max = value;\n      var val = this.getValue();\n\n      //do nothing if is not a number, is negative or zero\n      if (!qx.lang.Type.isNumber(max) || !isFinite(max) || max <= 0) {\n        max = old;\n      }\n\n      //limit max to a greater than 0 value\n      if (max < val) {\n        max = val;\n      }\n\n      //set max\n      this.setMaximum(max);\n\n      //update progress\n      this._changeProgress(val / max);\n    },\n\n\n    //overridden\n    _createChildControlImpl: function(id, hash) {\n      var control;\n\n      switch (id)\n      {\n        case \"progress\":\n          control = new qx.ui.container.Composite(new qx.ui.layout.Canvas());\n          this._add(control, { width: \"0%\" });\n          break;\n      }\n      return control || this.base(arguments, id);\n    },\n\n\n  /**\n   * Update the progress bar.\n   *\n   * @param value {Number} future value of progress bar\n   */\n    _changeProgress: function(value) {\n      var bar = this.getChildControl(\"progress\");\n      var to = Math.floor(value * 100);\n      var from = parseInt(bar.getLayoutProperties().width, 10);\n\n      bar.setLayoutProperties({width: to + \"%\"});\n\n      //fire change event\n      if (to != from) {\n        this.fireDataEvent(\"change\", to, from);\n      }\n\n      //fire complete event if 100% complete\n      if (to === 100) {\n        this.fireEvent(\"complete\");\n      }\n    }\n  }\n});\n"
  ]
}