{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/virtual/layer/HtmlCell.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "construct",
    "htmlCellProvider",
    "setZIndex",
    "assertInterface",
    "core",
    "IHtmlCellProvider",
    "_cellProvider",
    "members",
    "_getCellSizeStyle",
    "width",
    "height",
    "insetX",
    "insetY",
    "style",
    "Environment",
    "get",
    "_fullUpdate",
    "firstRow",
    "firstColumn",
    "rowSizes",
    "columnSizes",
    "html",
    "left",
    "top",
    "row",
    "column",
    "y",
    "length",
    "x",
    "cellProperties",
    "getCellProperties",
    "insets",
    "push",
    "classes",
    "attributes",
    "content",
    "getContentElement",
    "setAttribute",
    "join",
    "destruct",
    "HtmlCell"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA0BAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,8BAAhB,EACA;AACEC,YAASN,GAAGO,EAAH,CAAMC,OAAN,CAAcC,KAAd,CAAoBC,QAD/B;;AAIE;;;;AAIAC,eAAY,mBAASC,gBAAT,EACZ;AACE;AACA,WAAKC,SAAL,CAAe,EAAf;;AAEyC;AACvC,aAAKC,eAAL,CAAqBF,gBAArB,EAAuCZ,GAAGO,EAAH,CAAMC,OAAN,CAAcO,IAAd,CAAmBC,iBAA1D;AACD;AACD,WAAKC,aAAL,GAAqBL,gBAArB;AACD,KAjBH;;AAoBE;;;;;;AAMAM,aACA;;AAEE;;;;;;;;;;;AAWAC,yBAAoB,2BAASC,KAAT,EAAgBC,MAAhB,EAAwBC,MAAxB,EAAgCC,MAAhC,EACpB;AACE,YAAIC,QAAQ,EAAZ;AACA,YAAIxB,GAAGe,IAAH,CAAQU,WAAR,CAAoBC,GAApB,CAAwB,cAAxB,KAA2C,SAA/C,EACA;AACEN,mBAASE,MAAT;AACAD,oBAAUE,MAAV;AACD;;AAEDC,iBAAS,WAAYJ,KAAZ,GAAoB,KAA7B;AACAI,iBAAS,YAAYH,MAAZ,GAAqB,KAA9B;;AAEA,eAAOG,KAAP;AACD,OA1BH;;AA6BE;AACAG,mBAAc,qBAASC,QAAT,EAAmBC,WAAnB,EAAgCC,QAAhC,EAA0CC,WAA1C,EACd;AACE,YAAIC,OAAO,EAAX;AACA,YAAIC,OAAO,CAAX;AACA,YAAIC,MAAM,CAAV;AACA,YAAIC,MAAMP,QAAV;AACA,YAAIQ,SAASP,WAAb;AACA,aAAK,IAAIQ,IAAE,CAAX,EAAcA,IAAEP,SAASQ,MAAzB,EAAiCD,GAAjC,EACA;AACE,cAAIJ,OAAO,CAAX;AACA,cAAIG,SAASP,WAAb;AACA,cAAIR,SAASS,SAASO,CAAT,CAAb;AACA,eAAI,IAAIE,IAAE,CAAV,EAAaA,IAAER,YAAYO,MAA3B,EAAmCC,GAAnC,EACA;AACE,gBAAInB,QAAQW,YAAYQ,CAAZ,CAAZ;AACA,gBAAIC,iBAAiB,KAAKvB,aAAL,CAAmBwB,iBAAnB,CAAqCN,GAArC,EAA0CC,MAA1C,CAArB;AACA,gBAAIM,SAASF,eAAeE,MAAf,IAAyB,CAAC,CAAD,EAAI,CAAJ,CAAtC;;AAEAV,iBAAKW,IAAL,CACE,OADF,EAEE,SAFF,EAGE,OAHF,EAGWV,IAHX,EAGiB,KAHjB,EAIE,MAJF,EAIUC,GAJV,EAIe,KAJf,EAKE,KAAKf,iBAAL,CAAuBC,KAAvB,EAA8BC,MAA9B,EAAsCqB,OAAO,CAAP,CAAtC,EAAiDA,OAAO,CAAP,CAAjD,CALF,EAMEF,eAAehB,KAAf,IAAwB,EAN1B,EAM8B,IAN9B,EAOE,SAPF,EAOagB,eAAeI,OAAf,IAA0B,EAPvC,EAO2C,IAP3C,EAQEJ,eAAeK,UAAf,IAA6B,EAR/B,EAQmC,GARnC,EASEL,eAAeM,OAAf,IAA0B,EAT5B,EAUE,QAVF;;AAaAV;AACAH,oBAAQb,KAAR;AACD;AACDc,iBAAOb,MAAP;AACAc;AACD;;AAED,aAAKY,iBAAL,GAAyBC,YAAzB,CAAsC,MAAtC,EAA8ChB,KAAKiB,IAAL,CAAU,EAAV,CAA9C;AACD;AArEH,KA3BF;;AAmGE;;;;;;AAMAC,cAAW,oBAAW;AACpB,WAAKjC,aAAL,GAAqB,IAArB;AACD;AA3GH,GADA,C;AA1BAjB,KAAGO,EAAH,CAAMC,OAAN,CAAcC,KAAd,CAAoB0C,QAApB,CAA6BhD,aAA7B,GAA6CA,aAA7C",
  "file": "HtmlCell.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n\n/**\n * EXPERIMENTAL!\n *\n * The HtmlCell layer renders each cell with custom HTML markup. The concrete\n * markup for each cell is provided by a cell provider.\n */\nqx.Class.define(\"qx.ui.virtual.layer.HtmlCell\",\n{\n  extend : qx.ui.virtual.layer.Abstract,\n\n\n  /**\n   * @param htmlCellProvider {qx.ui.virtual.core.IHtmlCellProvider} This class\n   *    provides the HTML markup for each cell.\n   */\n  construct : function(htmlCellProvider)\n  {\n    this.base(arguments);\n    this.setZIndex(12);\n\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      this.assertInterface(htmlCellProvider, qx.ui.virtual.core.IHtmlCellProvider);\n    }\n    this._cellProvider = htmlCellProvider;\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    /**\n     * Get the cell size taking the box model into account\n     *\n     * @param width {Integer} The cell's (border-box) width in pixel\n     * @param height {Integer} The cell's (border-box) height in pixel\n     * @param insetX {Integer} The cell's horizontal insets, i.e. the sum of\n     *    horizontal paddings and borders\n     * @param insetY {Integer} The cell's vertical insets, i.e. the sum of\n     *    vertical paddings and borders\n     * @return {String} The CSS style string for the cell size\n     */\n    _getCellSizeStyle : function(width, height, insetX, insetY)\n    {\n      var style = \"\";\n      if (qx.core.Environment.get(\"css.boxmodel\") == \"content\")\n      {\n        width -= insetX;\n        height -= insetY;\n      }\n\n      style += \"width:\" +  width + \"px;\";\n      style += \"height:\" + height + \"px;\";\n\n      return style;\n    },\n\n\n    // overridden\n    _fullUpdate : function(firstRow, firstColumn, rowSizes, columnSizes)\n    {\n      var html = [];\n      var left = 0;\n      var top = 0;\n      var row = firstRow;\n      var column = firstColumn;\n      for (var y=0; y<rowSizes.length; y++)\n      {\n        var left = 0;\n        var column = firstColumn;\n        var height = rowSizes[y];\n        for(var x=0; x<columnSizes.length; x++)\n        {\n          var width = columnSizes[x];\n          var cellProperties = this._cellProvider.getCellProperties(row, column);\n          var insets = cellProperties.insets || [0, 0];\n\n          html.push(\n            \"<div \",\n            \"style='\",\n            \"left:\", left, \"px;\",\n            \"top:\", top, \"px;\",\n            this._getCellSizeStyle(width, height, insets[0], insets[1]),\n            cellProperties.style || \"\", \"' \",\n            \"class='\", cellProperties.classes || \"\", \"' \",\n            cellProperties.attributes || \"\", \">\",\n            cellProperties.content || \"\",\n            \"</div>\"\n          );\n\n          column++;\n          left += width;\n        }\n        top += height;\n        row++;\n      }\n\n      this.getContentElement().setAttribute(\"html\", html.join(\"\"));\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this._cellProvider = null;\n  }\n});\n"
  ]
}