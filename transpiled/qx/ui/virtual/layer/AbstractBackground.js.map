{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/virtual/layer/AbstractBackground.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "Abstract",
    "construct",
    "colorEven",
    "colorOdd",
    "setColorEven",
    "setColorOdd",
    "__customColors",
    "__decorators",
    "properties",
    "nullable",
    "check",
    "apply",
    "themeable",
    "members",
    "__colorEven",
    "__colorOdd",
    "setColor",
    "index",
    "color",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "resolve",
    "clearCustomColors",
    "updateLayerData",
    "getColor",
    "customColor",
    "_applyColorEven",
    "value",
    "old",
    "_applyColorOdd",
    "setBackground",
    "decorator",
    "Decoration",
    "getBackground",
    "destruct",
    "AbstractBackground"
  ],
  "mappings": "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",
  "file": "AbstractBackground.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n\n/**\n * EXPERIMENTAL!\n *\n * Abstract base class for the {@link Row} and {@link Column} layers.\n */\nqx.Class.define(\"qx.ui.virtual.layer.AbstractBackground\",\n{\n  extend : qx.ui.virtual.layer.Abstract,\n\n\n  /*\n   *****************************************************************************\n      CONSTRUCTOR\n   *****************************************************************************\n   */\n\n   /**\n    * @param colorEven {Color?null} color for even indexes\n    * @param colorOdd {Color?null} color for odd indexes\n    */\n   construct : function(colorEven, colorOdd)\n   {\n     this.base(arguments);\n\n     if (colorEven) {\n       this.setColorEven(colorEven);\n     }\n\n     if (colorOdd) {\n       this.setColorOdd(colorOdd);\n     }\n\n     this.__customColors = {};\n     this.__decorators = {};\n   },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** color for event indexes */\n    colorEven :\n    {\n      nullable : true,\n      check : \"Color\",\n      apply : \"_applyColorEven\",\n      themeable : true\n    },\n\n    /** color for odd indexes */\n    colorOdd :\n    {\n      nullable : true,\n      check : \"Color\",\n      apply : \"_applyColorOdd\",\n      themeable : true\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __colorEven : null,\n    __colorOdd : null,\n    __customColors : null,\n    __decorators : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      COLOR HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Sets the color for the given index\n     *\n     * @param index {Integer} Index to set the color for\n     * @param color {Color|null} the color to set. A value of <code>null</code>\n     *    will reset the color.\n     */\n    setColor : function(index, color)\n    {\n      if (color) {\n        this.__customColors[index] = qx.theme.manager.Color.getInstance().resolve(color);\n      } else {\n        delete(this.__customColors[index]);\n      }\n    },\n\n\n    /**\n     * Clear all colors set using {@link #setColor}.\n     */\n    clearCustomColors : function()\n    {\n      this.__customColors = {};\n      this.updateLayerData();\n    },\n\n\n    /**\n     * Get the color at the given index\n     *\n     * @param index {Integer} The index to get the color for.\n     * @return {Color} The color at the given index\n     */\n    getColor : function(index)\n    {\n      var customColor = this.__customColors[index];\n      if (customColor) {\n        return customColor;\n      } else {\n        return index % 2 == 0 ? this.__colorEven : this.__colorOdd;\n      }\n    },\n\n\n    // property apply\n    _applyColorEven : function(value, old)\n    {\n      if (value) {\n        this.__colorEven = qx.theme.manager.Color.getInstance().resolve(value);\n      } else {\n        this.__colorEven = null;\n      }\n      this.updateLayerData();\n    },\n\n\n    // property apply\n    _applyColorOdd : function(value, old)\n    {\n      if (value) {\n        this.__colorOdd = qx.theme.manager.Color.getInstance().resolve(value);\n      } else {\n        this.__colorOdd = null;\n      }\n      this.updateLayerData();\n    },\n\n\n    /**\n     * Sets the decorator for the given index\n     *\n     * @param index {Integer} Index to set the color for\n     * @param decorator {qx.ui.decoration.IDecorator|null} the decorator to set. A value of\n     *    <code>null</code> will reset the decorator.\n     */\n    setBackground : function(index, decorator)\n    {\n      if (decorator) {\n        this.__decorators[index] = qx.theme.manager.Decoration.getInstance().resolve(decorator);\n      } else {\n        delete(this.__decorators[index]);\n      }\n      this.updateLayerData();\n    },\n\n\n    /**\n     * Get the decorator at the given index\n     *\n     * @param index {Integer} The index to get the decorator for.\n     * @return {qx.ui.decoration.IDecorator} The decorator at the given index\n     */\n    getBackground : function(index) {\n      return this.__decorators[index];\n    }\n  },\n\n  /*\n   *****************************************************************************\n      DESTRUCT\n   *****************************************************************************\n   */\n\n  destruct : function() {\n    this.__customColors = this.__decorators = null;\n  }\n});\n"
  ]
}