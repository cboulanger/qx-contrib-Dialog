{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/virtual/layer/HtmlCellSpan.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "layer",
    "HtmlCell",
    "construct",
    "htmlCellProvider",
    "rowConfig",
    "columnConfig",
    "_spanManager",
    "CellSpanManager",
    "members",
    "setCellSpan",
    "row",
    "column",
    "rowSpan",
    "columnSpan",
    "id",
    "removeCell",
    "addCell",
    "core",
    "queue",
    "Widget",
    "add",
    "__renderCell",
    "htmlArr",
    "left",
    "top",
    "width",
    "height",
    "cellProperties",
    "_cellProvider",
    "getCellProperties",
    "insets",
    "push",
    "_getCellSizeStyle",
    "style",
    "classes",
    "attributes",
    "content",
    "_fullUpdate",
    "firstRow",
    "firstColumn",
    "rowSizes",
    "columnSizes",
    "html",
    "cells",
    "findCellsInWindow",
    "length",
    "bounds",
    "getCellBounds",
    "spanMap",
    "computeCellSpanMap",
    "i",
    "l",
    "cell",
    "cellBounds",
    "x",
    "y",
    "getContentElement",
    "setAttribute",
    "join",
    "destruct",
    "_disposeObjects",
    "HtmlCellSpan"
  ],
  "mappings": "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",
  "file": "HtmlCellSpan.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * EXPERIMENTAL!\n *\n * An extended HtmlCell layer, which adds the possibility to specify row and\n * column spans for specific cells.\n */\nqx.Class.define(\"qx.ui.virtual.layer.HtmlCellSpan\",\n{\n  extend : qx.ui.virtual.layer.HtmlCell,\n\n\n  /**\n   * @param htmlCellProvider {qx.ui.virtual.core.IHtmlCellProvider} This class\n   *    provides the HTML markup for each cell.\n   * @param rowConfig {qx.ui.virtual.core.Axis} The row configuration of the pane\n   *    in which the cells will be rendered\n   * @param columnConfig {qx.ui.virtual.core.Axis} The column configuration of\n   *    the pane in which the cells will be rendered\n   */\n  construct : function(htmlCellProvider, rowConfig, columnConfig)\n  {\n    this.base(arguments, htmlCellProvider);\n    this._spanManager = new qx.ui.virtual.layer.CellSpanManager(\n      rowConfig, columnConfig\n    );\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Set the row and column span for a specific cell\n     *\n     * @param row {PositiveInteger} The cell's row\n     * @param column {PositiveInteger} The cell's column\n     * @param rowSpan {PositiveInteger} The number of rows the cells spans\n     * @param columnSpan {PositiveInteger} The number of columns the cells spans\n     */\n    setCellSpan : function(row, column, rowSpan, columnSpan)\n    {\n      var id = row + \"x\" + column;\n      this._spanManager.removeCell(id);\n      if (rowSpan > 1 || columnSpan > 1) {\n        this._spanManager.addCell(id, row, column, rowSpan, columnSpan);\n      }\n      qx.ui.core.queue.Widget.add(this);\n    },\n\n\n    /**\n     * Renders a cell\n     *\n     * @param htmlArr {String[]} the output array\n     * @param row {Integer} The cell's row index\n     * @param column {Integer} The cell's column index\n     * @param left {Integer} The cell's CSS left position (in pixel)\n     * @param top {Integer} The cell's CSS top position (in pixel)\n     * @param width {Integer} The cell's width\n     * @param height {Integer} The cell's height\n     */\n    __renderCell : function(htmlArr, row, column, left, top, width, height)\n    {\n      var cellProperties = this._cellProvider.getCellProperties(row, column);\n      var insets = cellProperties.insets || [0, 0];\n\n      htmlArr.push(\n        \"<div \",\n        \"style='\",\n        \"left:\", left, \"px;\",\n        \"top:\", top, \"px;\",\n        this._getCellSizeStyle(width, height, insets[0], insets[1]),\n        cellProperties.style || \"\", \"' \",\n        \"class='\", cellProperties.classes || \"\", \"' \",\n        cellProperties.attributes || \"\", \">\",\n        cellProperties.content || \"\",\n        \"</div>\"\n      );\n    },\n\n\n    // overridden\n    _fullUpdate : function(firstRow, firstColumn, rowSizes, columnSizes)\n    {\n      var html = [];\n\n      var cells = this._spanManager.findCellsInWindow(\n        firstRow, firstColumn,\n        rowSizes.length, columnSizes.length\n      );\n\n      if (cells.length > 0)\n      {\n        var bounds = this._spanManager.getCellBounds(cells, firstRow, firstColumn);\n        var spanMap = this._spanManager.computeCellSpanMap(\n          cells,\n          firstRow, firstColumn,\n          rowSizes.length, columnSizes.length\n        );\n\n        // render spanning cells\n        for (var i=0, l=cells.length; i<l; i++)\n        {\n          var cell = cells[i];\n          var cellBounds = bounds[i];\n          this.__renderCell(\n            html,\n            cell.firstRow, cell.firstColumn,\n            cellBounds.left, cellBounds.top,\n            cellBounds.width, cellBounds.height\n          );\n        }\n      }\n      else\n      {\n        // create empty dummy map\n        spanMap = [];\n        for (var i=0; i<rowSizes.length; i++) {\n          spanMap[firstRow+i] = [];\n        }\n      }\n\n      // render non spanning cells\n      var left = 0;\n      var top = 0;\n      var row = firstRow;\n      var column = firstColumn;\n      for (var x=0; x<rowSizes.length; x++)\n      {\n        var left = 0;\n        var column = firstColumn;\n        var height = rowSizes[x];\n        for(var y=0; y<columnSizes.length; y++)\n        {\n          var width = columnSizes[y];\n\n          if (!spanMap[row][column])\n          {\n            this.__renderCell(\n              html,\n              row, column,\n              left, top,\n              width, height\n            );\n          }\n\n          column++;\n          left += width;\n        }\n        top += height;\n        row++;\n      }\n\n      this.getContentElement().setAttribute(\"html\", html.join(\"\"));\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._disposeObjects(\"_spanManager\");\n  }\n});"
  ]
}