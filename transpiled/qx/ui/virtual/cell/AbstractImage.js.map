{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/virtual/cell/AbstractImage.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "cell",
    "Cell",
    "type",
    "construct",
    "_aliasManager",
    "util",
    "AliasManager",
    "getInstance",
    "members",
    "__defaultWidth",
    "__defaultHeight",
    "__getImageSize",
    "source",
    "ResourceManager",
    "ImageLoader",
    "io",
    "width",
    "height",
    "has",
    "getImageWidth",
    "getImageHeight",
    "isLoaded",
    "getWidth",
    "getHeight",
    "__createImage",
    "imageData",
    "url",
    "resolve",
    "sizes",
    "tooltip",
    "_identifyImage",
    "value",
    "Error",
    "getContent",
    "states",
    "content",
    "styles",
    "display",
    "verticalAlign",
    "position",
    "tag",
    "bom",
    "element",
    "Decoration",
    "getTagName",
    "ret",
    "getAttributes",
    "css",
    "Style",
    "compile",
    "style",
    "src",
    "AbstractImage"
  ],
  "mappings": "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",
  "file": "AbstractImage.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Carsten Lergenmueller (carstenl)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * Abstract base class for image cell renderer.\n *\n * EXPERIMENTAL!\n */\nqx.Class.define(\"qx.ui.virtual.cell.AbstractImage\",\n{\n  extend : qx.ui.virtual.cell.Cell,\n  type : \"abstract\",\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n    this._aliasManager = qx.util.AliasManager.getInstance();\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __defaultWidth : 16,\n    __defaultHeight : 16,\n    _aliasManager : null,\n\n\n    /**\n     * Compute the size of the given image\n     *\n     * @param source {String} the image URL\n     * @return {Map} A map containing the image's <code>width</code> and\n     *    <code>height</code>\n     */\n    __getImageSize : function(source)\n    {\n      var ResourceManager = qx.util.ResourceManager.getInstance();\n      var ImageLoader = qx.io.ImageLoader;\n      var width, height;\n\n      // Detect if the image registry knows this image\n      if (ResourceManager.has(source))\n      {\n        width = ResourceManager.getImageWidth(source),\n        height = ResourceManager.getImageHeight(source);\n      }\n      else if (ImageLoader.isLoaded(source))\n      {\n        width = ImageLoader.getWidth(source);\n        height = ImageLoader.getHeight(source);\n      }\n      else\n      {\n        width = this.__defaultWidth;\n        height = this.__defaultHeight;\n      }\n\n      return {width : width, height : height};\n    },\n\n\n    /**\n     * Compute image meta data\n     *\n     * @param imageData {Object|String} Either a string containing the image URL\n     *   or a map, which describes the image. Map keys:\n     *   <ul>\n     *     <li>url (required)</li>\n     *     <li>width</li>\n     *     <li>height</li>\n     *     <li>tooltip</li>\n     *   </ul>\n     * @return {Object} A map describing the image. Map keys:\n     *   <ul>\n     *     <li>url</li>\n     *     <li>width</li>\n     *     <li>height</li>\n     *     <li>tooltip (optional)</li>\n     *   </ul>\n     */\n    __createImage : function(imageData)\n    {\n      if (typeof(imageData) == \"string\") {\n        imageData = {url: imageData};\n      }\n\n      var url = this._aliasManager.resolve(imageData.url || null);\n      var sizes;\n\n      if (imageData.width && imageData.height) {\n        sizes = {width : imageData.width, height : imageData.height};\n      } else {\n        sizes = this.__getImageSize(url);\n      }\n\n      return {\n        width : sizes.width,\n        height : sizes.height,\n        url : url,\n        tooltip : imageData.tooltip\n      };\n    },\n\n\n    /**\n     * Identifies the Image to show. This is a template method, which must be\n     * implements by sub classes.\n     *\n     * @abstract\n     * @param value {var} The cell's data value\n     * @return {Map} A map having the following attributes:\n     *           <ul>\n     *           <li>\"url\": (type string) must be the URL of the image to show.</li>\n     *           <li>\"width\": (type int) the width of the image in pixels.</li>\n     *           <li>\"height\": (type int) the height of the image in pixels.</li>\n     *           <li>\"tooltip\": (type string) must be the image tooltip text.</li>\n     *           </ul>\n     */\n    _identifyImage : function(value) {\n      throw new Error(\"_identifyImage is abstract\");\n    },\n\n\n    // overridden\n    getContent : function(value, states)\n    {\n      if (value === null) {\n        return \"\";\n      }\n\n      var content = \"\";\n      var imageData = this.__createImage(this._identifyImage(value));\n      var tooltip = imageData.tooltip ? 'title=\"' + imageData.tooltip + '\"' : \"\";\n\n      var styles = {\n        width: imageData.width + \"px\",\n        height: imageData.height + \"px\",\n        display: \"inline-block\",\n        verticalAlign: \"top\",\n        position: \"static\"\n      };\n\n      var tag = qx.bom.element.Decoration.getTagName(\"no-repeat\", imageData.url);\n      var ret = qx.bom.element.Decoration.getAttributes(imageData.url, \"no-repeat\", styles);\n      var css = qx.bom.element.Style.compile(ret.style);\n\n      if (tag === \"img\")\n      {\n        content = '<img src=\"' + ret.src + '\" style=\"' + css + '\" ';\n        content += tooltip + '/>';\n      }\n      else\n      {\n        content = '<div style=\"' + css + '\" ';\n        content += tooltip + '></div>';\n      }\n      return content;\n    }\n\n  }\n});\n"
  ]
}