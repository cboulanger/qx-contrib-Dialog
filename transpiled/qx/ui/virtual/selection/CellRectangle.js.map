{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/virtual/selection/CellRectangle.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "virtual",
    "selection",
    "Abstract",
    "members",
    "_getItemCount",
    "_pane",
    "getRowConfig",
    "getItemCount",
    "getColumnConfig",
    "_getSelectableFromPointerEvent",
    "event",
    "cell",
    "getCellAtPosition",
    "getDocumentLeft",
    "getDocumentTop",
    "_isSelectable",
    "getSelectables",
    "all",
    "selectables",
    "rowCount",
    "columnCount",
    "row",
    "column",
    "push",
    "_getSelectableRange",
    "item1",
    "item2",
    "minRow",
    "Math",
    "min",
    "maxRow",
    "max",
    "minColumn",
    "maxColumn",
    "_getFirstSelectable",
    "_getLastSelectable",
    "_getRelatedSelectable",
    "item",
    "relation",
    "_getPage",
    "lead",
    "up",
    "_selectableToHashCode",
    "_scrollItemIntoView",
    "_autoScrollIntoView",
    "scrollCellIntoView",
    "_getSelectableLocationX",
    "columnConfig",
    "itemLeft",
    "getItemPosition",
    "itemRight",
    "getItemSize",
    "left",
    "right",
    "_getSelectableLocationY",
    "rowConfig",
    "itemTop",
    "itemBottom",
    "top",
    "bottom",
    "CellRectangle"
  ],
  "mappings": "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",
  "file": "CellRectangle.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * EXPERIMENTAL!\n *\n * Cell selection manager\n */\nqx.Class.define(\"qx.ui.virtual.selection.CellRectangle\",\n{\n  extend : qx.ui.virtual.selection.Abstract,\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Returns the number of all items in the pane. This number may contain\n     * unselectable items as well.\n     *\n     * @return {Integer} number of items\n     */\n    _getItemCount : function() {\n      return this._pane.getRowConfig().getItemCount() * this._pane.getColumnConfig().getItemCount();\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      IMPLEMENT ABSTRACT METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _getSelectableFromPointerEvent : function(event)\n    {\n      var cell = this._pane.getCellAtPosition(\n        event.getDocumentLeft(),\n        event.getDocumentTop()\n      );\n\n      if (!cell) {\n        return null;\n      }\n\n      return this._isSelectable(cell) ? cell : null;\n    },\n\n\n    // overridden\n    getSelectables : function(all)\n    {\n      var selectables = [];\n\n      var rowCount = this._pane.getRowConfig().getItemCount();\n      var columnCount = this._pane.getColumnConfig().getItemCount();\n\n      for (var row=0; row<rowCount; row++)\n      {\n        for (var column=0; column<columnCount; column++)\n        {\n          var cell = {\n              row: row,\n              column: column\n          };\n          if (this._isSelectable(cell)) {\n            selectables.push(cell);\n          }\n        }\n      }\n\n      return selectables;\n    },\n\n\n    // overridden\n    _getSelectableRange : function(item1, item2)\n    {\n      var selectables = [];\n\n      var minRow = Math.min(item1.row, item2.row);\n      var maxRow = Math.max(item1.row, item2.row);\n      var minColumn = Math.min(item1.column, item2.column);\n      var maxColumn = Math.max(item1.column, item2.column);\n\n      for (var row=minRow; row<=maxRow; row++)\n      {\n        for (var column=minColumn; column<=maxColumn; column++)\n        {\n          var cell = {\n              row: row,\n              column: column\n          };\n          if (this._isSelectable(cell)) {\n            selectables.push(cell);\n          }\n        }\n      }\n      return selectables;\n    },\n\n\n    // overridden\n    _getFirstSelectable : function()\n    {\n      var rowCount = this._pane.getRowConfig().getItemCount();\n      var columnCount = this._pane.getColumnConfig().getItemCount();\n\n      for (var row=0; row<rowCount; row++)\n      {\n        for (var column=0; column<columnCount; column++)\n        {\n          var cell = {\n              row: row,\n              column: column\n          };\n          if (this._isSelectable(cell)) {\n            return cell;\n          }\n        }\n      }\n\n      return null;\n    },\n\n\n    // overridden\n    _getLastSelectable : function()\n    {\n      var rowCount = this._pane.getRowConfig().getItemCount();\n      var columnCount = this._pane.getColumnConfig().getItemCount();\n\n      for (var column=columnCount-1; column>=0; column--)\n      {\n        for (var row=rowCount-1; row>=0; row--)\n        {\n          var cell = {\n              row: row,\n              column: column\n          };\n          if (this._isSelectable(cell)) {\n            return cell;\n          }\n        }\n      }\n\n      return null;\n    },\n\n\n    // overridden\n    _getRelatedSelectable : function(item, relation)\n    {\n      var cell = {\n        row: item.row,\n        column: item.column\n      };\n\n      switch(relation)\n      {\n        case \"above\":\n          for (var row=item.row-1; row>=0; row--)\n          {\n            cell.row = row;\n            if (this._isSelectable(cell)) {\n              return cell;\n            }\n          }\n          break;\n\n        case \"under\":\n          var rowCount = this._pane.getRowConfig().getItemCount();\n          for (var row=item.row+1; row<rowCount; row++)\n          {\n            cell.row = row;\n            if (this._isSelectable(cell)) {\n              return cell;\n            }\n          }\n          break;\n\n        case \"left\":\n          for (var column=item.column-1; column>=0; column--)\n          {\n            cell.column = column;\n            if (this._isSelectable(cell)) {\n              return cell;\n            }\n          }\n          break;\n\n        case \"right\":\n          var columnCount = this._pane.getColumnConfig().getItemCount();\n          for (var column=item.column+1; column<columnCount; column++)\n          {\n            cell.column = column;\n            if (this._isSelectable(cell)) {\n              return cell;\n            }\n          }\n          break;\n      }\n      return null;\n    },\n\n\n    // overridden\n    _getPage : function(lead, up)\n    {\n      if (up) {\n        return this._getFirstSelectable();\n      } else {\n        return this._getLastSelectable();\n      }\n    },\n\n\n    // overridden\n    _selectableToHashCode : function(item) {\n      return item.column + \"x\" + item.row;\n    },\n\n\n    // overridden\n    _scrollItemIntoView : function(item) {\n      if (this._autoScrollIntoView) {\n        this._pane.scrollCellIntoView(item.column, item.row);\n      }\n    },\n\n\n    // overridden\n    _getSelectableLocationX : function(item)\n    {\n      var columnConfig = this._pane.getColumnConfig();\n\n      var itemLeft = columnConfig.getItemPosition(item.column);\n      var itemRight = itemLeft + columnConfig.getItemSize(item.column) - 1;\n\n      return {\n        left: itemLeft,\n        right: itemRight\n      };\n    },\n\n\n    // overridden\n    _getSelectableLocationY : function(item)\n    {\n      var rowConfig = this._pane.getRowConfig();\n\n      var itemTop = rowConfig.getItemPosition(item.row);\n      var itemBottom = itemTop + rowConfig.getItemSize(item.row) - 1;\n\n      return {\n        top: itemTop,\n        bottom: itemBottom\n      };\n    }\n  }\n});\n"
  ]
}