{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/menu/AbstractButton.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MExecutable",
    "implement",
    "form",
    "IExecutable",
    "type",
    "construct",
    "_setLayout",
    "menu",
    "ButtonLayout",
    "addListener",
    "_onTap",
    "_onKeyPress",
    "_onChangeCommand",
    "properties",
    "blockToolTip",
    "refine",
    "init",
    "label",
    "check",
    "apply",
    "nullable",
    "event",
    "dereference",
    "icon",
    "themeable",
    "showCommandLabel",
    "members",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "basic",
    "Image",
    "setAnonymous",
    "_add",
    "column",
    "Label",
    "getShowCommandLabel",
    "exclude",
    "_forwardStates",
    "selected",
    "getChildrenSizes",
    "iconWidth",
    "labelWidth",
    "shortcutWidth",
    "arrowWidth",
    "_isChildControlVisible",
    "getChildControl",
    "getMarginLeft",
    "getSizeHint",
    "width",
    "getMarginRight",
    "shortcut",
    "arrow",
    "e",
    "isLeftPressed",
    "execute",
    "Manager",
    "getInstance",
    "hideAll",
    "getContextMenu",
    "preventContextMenuOnce",
    "command",
    "getData",
    "oldCommand",
    "getOldData",
    "locale",
    "_onChangeLocale",
    "removeListener",
    "cmdString",
    "toString",
    "setValue",
    "getCommand",
    "_applyIcon",
    "value",
    "old",
    "_showChildControl",
    "setSource",
    "_excludeChildControl",
    "_applyLabel",
    "_applyMenu",
    "resetOpener",
    "removeState",
    "setOpener",
    "addState",
    "_applyShowCommandLabel",
    "destruct",
    "getMenu",
    "ObjectRegistry",
    "inShutDown",
    "destroy",
    "AbstractButton"
  ],
  "mappings": "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",
  "file": "AbstractButton.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The abstract menu button class is used for all type of menu content\n * for example normal buttons, checkboxes or radiobuttons.\n *\n * @childControl icon {qx.ui.basic.Image} icon of the button\n * @childControl label {qx.ui.basic.Label} label of the button\n * @childControl shortcut {qx.ui.basic.Label} shows if specified the shortcut\n * @childControl arrow {qx.ui.basic.Image} shows the arrow to show an additional widget (e.g. popup or submenu)\n */\nqx.Class.define(\"qx.ui.menu.AbstractButton\",\n{\n  extend : qx.ui.core.Widget,\n  include : [qx.ui.core.MExecutable],\n  implement : [qx.ui.form.IExecutable],\n  type : \"abstract\",\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // Use hard coded layout\n    this._setLayout(new qx.ui.menu.ButtonLayout);\n\n    // Add listeners\n    this.addListener(\"tap\", this._onTap);\n    this.addListener(\"keypress\", this._onKeyPress);\n\n    // Add command listener\n    this.addListener(\"changeCommand\", this._onChangeCommand, this);\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    blockToolTip :\n    {\n      refine : true,\n      init : true\n    },\n\n    /** The label text of the button */\n    label :\n    {\n      check : \"String\",\n      apply : \"_applyLabel\",\n      nullable : true,\n      event: \"changeLabel\"\n    },\n\n    /** Whether a sub menu should be shown and which one */\n    menu :\n    {\n      check : \"qx.ui.menu.Menu\",\n      apply : \"_applyMenu\",\n      nullable : true,\n      dereference : true,\n      event : \"changeMenu\"\n    },\n\n    /** The icon to use */\n    icon :\n    {\n      check : \"String\",\n      apply : \"_applyIcon\",\n      themeable : true,\n      nullable : true,\n      event: \"changeIcon\"\n    },\n\n    /** Indicates whether the label for the command (shortcut) should be visible or not. */\n    showCommandLabel :\n    {\n      check : \"Boolean\",\n      apply : \"_applyShowCommandLabel\",\n      themeable : true,\n      init : true,\n      event: \"changeShowCommandLabel\"\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"icon\":\n          control = new qx.ui.basic.Image;\n          control.setAnonymous(true);\n          this._add(control, {column:0});\n          break;\n\n        case \"label\":\n          control = new qx.ui.basic.Label;\n          control.setAnonymous(true);\n          this._add(control, {column:1});\n          break;\n\n        case \"shortcut\":\n          control = new qx.ui.basic.Label;\n          control.setAnonymous(true);\n          if (!this.getShowCommandLabel()) {\n            control.exclude();\n          }\n          this._add(control, {column:2});\n          break;\n\n        case \"arrow\":\n          control = new qx.ui.basic.Image;\n          control.setAnonymous(true);\n          this._add(control, {column:3});\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n    // overridden\n    /**\n     * @lint ignoreReferenceField(_forwardStates)\n     */\n    _forwardStates : {\n      selected : 1\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      LAYOUT UTILS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the dimensions of all children\n     *\n     * @return {Array} Preferred width of each child\n     */\n    getChildrenSizes : function()\n    {\n      var iconWidth=0, labelWidth=0, shortcutWidth=0, arrowWidth=0;\n\n      if (this._isChildControlVisible(\"icon\"))\n      {\n        var icon = this.getChildControl(\"icon\");\n        iconWidth = icon.getMarginLeft() + icon.getSizeHint().width + icon.getMarginRight();\n      }\n\n      if (this._isChildControlVisible(\"label\"))\n      {\n        var label = this.getChildControl(\"label\");\n        labelWidth = label.getMarginLeft() + label.getSizeHint().width + label.getMarginRight();\n      }\n\n      if (this._isChildControlVisible(\"shortcut\"))\n      {\n        var shortcut = this.getChildControl(\"shortcut\");\n        shortcutWidth = shortcut.getMarginLeft() + shortcut.getSizeHint().width + shortcut.getMarginRight();\n      }\n\n      if (this._isChildControlVisible(\"arrow\"))\n      {\n        var arrow = this.getChildControl(\"arrow\");\n        arrowWidth = arrow.getMarginLeft() + arrow.getSizeHint().width + arrow.getMarginRight();\n      }\n\n      return [ iconWidth, labelWidth, shortcutWidth, arrowWidth ];\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Event listener for tap\n     *\n     * @param e {qx.event.type.Pointer} pointer event\n     */\n    _onTap : function(e)\n    {\n      if (e.isLeftPressed()) {\n        this.execute();\n        qx.ui.menu.Manager.getInstance().hideAll();\n      }\n\n      // right click\n      else {\n        // only prevent contextmenu event if button has no further context menu.\n        if (!this.getContextMenu()) {\n          qx.ui.menu.Manager.getInstance().preventContextMenuOnce();\n        }\n      }\n    },\n\n\n    /**\n     * Event listener for keypress event\n     *\n     * @param e {qx.event.type.KeySequence} keypress event\n     */\n    _onKeyPress : function(e) {\n      this.execute();\n    },\n\n\n    /**\n     * Event listener for command changes. Updates the text of the shortcut.\n     *\n     * @param e {qx.event.type.Data} Property change event\n     */\n    _onChangeCommand : function(e)\n    {\n      var command = e.getData();\n\n      // do nothing if no command is set\n      if (command == null) {\n        return;\n      }\n\n      if (qx.core.Environment.get(\"qx.dynlocale\"))\n      {\n        var oldCommand = e.getOldData();\n        if (!oldCommand) {\n          qx.locale.Manager.getInstance().addListener(\"changeLocale\", this._onChangeLocale, this);\n        }\n        if (!command) {\n          qx.locale.Manager.getInstance().removeListener(\"changeLocale\", this._onChangeLocale, this);\n        }\n      }\n\n      var cmdString = command != null ? command.toString() : \"\";\n      this.getChildControl(\"shortcut\").setValue(cmdString);\n    },\n\n\n    /**\n     * Update command string on locale changes\n     */\n    _onChangeLocale : qx.core.Environment.select(\"qx.dynlocale\",\n    {\n      \"true\" : function(e) {\n        var command = this.getCommand();\n        if (command != null) {\n          this.getChildControl(\"shortcut\").setValue(command.toString());\n        }\n      },\n\n      \"false\" : null\n    }),\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applyIcon : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"icon\").setSource(value);\n      } else {\n        this._excludeChildControl(\"icon\");\n      }\n    },\n\n    // property apply\n    _applyLabel : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"label\").setValue(value);\n      } else {\n        this._excludeChildControl(\"label\");\n      }\n    },\n\n    // property apply\n    _applyMenu : function(value, old)\n    {\n      if (old)\n      {\n        old.resetOpener();\n        old.removeState(\"submenu\");\n      }\n\n      if (value)\n      {\n        this._showChildControl(\"arrow\");\n\n        value.setOpener(this);\n        value.addState(\"submenu\");\n      }\n      else\n      {\n        this._excludeChildControl(\"arrow\");\n      }\n    },\n\n    // property apply\n    _applyShowCommandLabel : function(value, old)\n    {\n      if (value) {\n        this._showChildControl(\"shortcut\");\n      } else {\n        this._excludeChildControl(\"shortcut\");\n      }\n    }\n  },\n\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct : function()\n  {\n    this.removeListener(\"changeCommand\", this._onChangeCommand, this);\n\n    if (this.getMenu())\n    {\n      if (!qx.core.ObjectRegistry.inShutDown) {\n        this.getMenu().destroy();\n      }\n    }\n\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\"changeLocale\", this._onChangeLocale, this);\n    }\n  }\n});\n\n"
  ]
}