{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/toolbar/Part.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MRemoteChildrenHandling",
    "construct",
    "_setLayout",
    "layout",
    "HBox",
    "_createChildControl",
    "properties",
    "appearance",
    "refine",
    "init",
    "show",
    "check",
    "inheritable",
    "event",
    "spacing",
    "nullable",
    "themeable",
    "apply",
    "members",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "basic",
    "Image",
    "setAlignY",
    "_add",
    "toolbar",
    "PartContainer",
    "addListener",
    "__onSyncAppearance",
    "getChildrenContainer",
    "getChildControl",
    "_applySpacing",
    "value",
    "old",
    "getLayout",
    "resetSpacing",
    "setSpacing",
    "children",
    "getChildren",
    "filter",
    "child",
    "getVisibility",
    "i",
    "length",
    "addState",
    "removeState",
    "addSeparator",
    "add",
    "Separator",
    "getMenuButtons",
    "buttons",
    "l",
    "menubar",
    "Button",
    "push",
    "Part"
  ],
  "mappings": "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",
  "file": "Part.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * A part is a container for multiple toolbar buttons. Each part comes\n * with a handle which may be used in later versions to drag the part\n * around and move it to another position. Currently mainly used\n * for structuring large toolbars beyond the capabilities of the\n * {@link Separator}.\n *\n * @childControl handle {qx.ui.basic.Image} prat handle to visualize the separation\n * @childControl container {qx.ui.toolbar.PartContainer} holds the content of the toolbar part\n */\nqx.Class.define(\"qx.ui.toolbar.Part\",\n{\n  extend : qx.ui.core.Widget,\n  include : [qx.ui.core.MRemoteChildrenHandling],\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // Hard coded HBox layout\n    this._setLayout(new qx.ui.layout.HBox);\n\n    // Force creation of the handle\n    this._createChildControl(\"handle\");\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    appearance :\n    {\n      refine : true,\n      init : \"toolbar/part\"\n    },\n\n    /** Whether icons, labels, both or none should be shown. */\n    show :\n    {\n      init : \"both\",\n      check : [ \"both\", \"label\", \"icon\" ],\n      inheritable : true,\n      event : \"changeShow\"\n    },\n\n    /** The spacing between every child of the toolbar */\n    spacing :\n    {\n      nullable : true,\n      check : \"Integer\",\n      themeable : true,\n      apply : \"_applySpacing\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      WIDGET API\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"handle\":\n          control = new qx.ui.basic.Image();\n          control.setAlignY(\"middle\");\n          this._add(control);\n          break;\n\n        case \"container\":\n          control = new qx.ui.toolbar.PartContainer();\n          control.addListener(\"syncAppearance\", this.__onSyncAppearance, this);\n          this._add(control);\n          control.addListener(\"changeChildren\", function() {\n            this.__onSyncAppearance();\n          }, this);\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n    // overridden\n    getChildrenContainer : function() {\n      return this.getChildControl(\"container\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    _applySpacing : function(value, old)\n    {\n      var layout = this.getChildControl(\"container\").getLayout();\n      value == null ? layout.resetSpacing() : layout.setSpacing(value);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      UTILITIES\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Helper which applies the left, right and middle states.\n     */\n    __onSyncAppearance : function() {\n      // check every child\n      var children = this.getChildrenContainer().getChildren();\n      children = children.filter(function(child) {\n        return child.getVisibility() == \"visible\";\n      });\n      for (var i = 0; i < children.length; i++) {\n        // if its the first child\n        if (i == 0 && i != children.length - 1) {\n          children[i].addState(\"left\");\n          children[i].removeState(\"right\");\n          children[i].removeState(\"middle\");\n        // if its the last child\n        } else if (i == children.length - 1 && i != 0) {\n          children[i].addState(\"right\");\n          children[i].removeState(\"left\");\n          children[i].removeState(\"middle\");\n        // if there is only one child\n        } else if (i == 0 && i == children.length - 1) {\n          children[i].removeState(\"left\");\n          children[i].removeState(\"middle\");\n          children[i].removeState(\"right\");\n        } else {\n          children[i].addState(\"middle\");\n          children[i].removeState(\"right\");\n          children[i].removeState(\"left\");\n        }\n      };\n    },\n\n\n    /**\n     * Adds a separator to the toolbar part.\n     */\n    addSeparator : function() {\n      this.add(new qx.ui.toolbar.Separator);\n    },\n\n\n    /**\n     * Returns all nested buttons which contains a menu to show. This is mainly\n     * used for keyboard support.\n     *\n     * @return {Array} List of all menu buttons\n     */\n    getMenuButtons : function()\n    {\n      var children = this.getChildren();\n      var buttons = [];\n      var child;\n\n      for (var i=0, l=children.length; i<l; i++)\n      {\n        child = children[i];\n\n        if (child instanceof qx.ui.menubar.Button) {\n          buttons.push(child);\n        }\n      }\n\n      return buttons;\n    }\n  }\n});\n"
  ]
}