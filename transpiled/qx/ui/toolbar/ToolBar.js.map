{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/toolbar/ToolBar.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "MChildrenHandling",
    "construct",
    "_setLayout",
    "layout",
    "HBox",
    "__removedItems",
    "__removePriority",
    "properties",
    "appearance",
    "refine",
    "init",
    "openMenu",
    "check",
    "event",
    "nullable",
    "show",
    "inheritable",
    "apply",
    "spacing",
    "themeable",
    "overflowIndicator",
    "overflowHandling",
    "events",
    "members",
    "_computeSizeHint",
    "hint",
    "getOverflowHandling",
    "minWidth",
    "overflowWidget",
    "getOverflowIndicator",
    "getSizeHint",
    "width",
    "getSpacing",
    "_onResize",
    "e",
    "_recalculateOverflow",
    "getData",
    "requiredWidth",
    "overflowWidgetWidth",
    "undefined",
    "getBounds",
    "childToHide",
    "_getNextToHide",
    "margins",
    "getMarginLeft",
    "getMarginRight",
    "Math",
    "max",
    "childWidth",
    "__hideChild",
    "getVisibility",
    "setVisibility",
    "overflowWidgetMargins",
    "length",
    "removedChild",
    "getContentElement",
    "getDomElement",
    "syncAppearance",
    "invalidateLayoutCache",
    "removedChildWidth",
    "fits",
    "addedMargin",
    "wouldRequiredWidth",
    "__showChild",
    "child",
    "shift",
    "fireDataEvent",
    "unshift",
    "i",
    "item",
    "children",
    "_getChildren",
    "setRemovePriority",
    "priority",
    "override",
    "Error",
    "_applyOverflowHandling",
    "value",
    "old",
    "parent",
    "getLayoutParent",
    "bounds",
    "addListener",
    "removeListener",
    "_applyOverflowIndicator",
    "_remove",
    "_indexOf",
    "__allowMenuOpenHover",
    "_setAllowMenuOpenHover",
    "_isAllowMenuOpenHover",
    "_applySpacing",
    "_getLayout",
    "resetSpacing",
    "setSpacing",
    "_applyShow",
    "setShow",
    "_add",
    "options",
    "util",
    "PropertyUtil",
    "getUserValue",
    "getShow",
    "newWidth",
    "_addAt",
    "index",
    "_addBefore",
    "before",
    "_addAfter",
    "after",
    "_removeAt",
    "_removeAll",
    "addSpacer",
    "spacer",
    "Spacer",
    "flex",
    "addSeparator",
    "add",
    "toolbar",
    "Separator",
    "getMenuButtons",
    "getChildren",
    "buttons",
    "l",
    "menubar",
    "Button",
    "push",
    "Part",
    "destruct",
    "hasListener",
    "ToolBar"
  ],
  "mappings": "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",
  "file": "ToolBar.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Martin Wittemann (martinwittemann)\n     * Jonathan Weiß (jonathan_rass)\n\n************************************************************************ */\n\n/**\n * The Toolbar class is the main part of the toolbar widget.\n *\n * It can handle added {@link Button}s, {@link CheckBox}es, {@link RadioButton}s\n * and {@link Separator}s in its {@link #add} method. The {@link #addSpacer} method\n * adds a spacer at the current toolbar position. This means that the widgets\n * added after the method call of {@link #addSpacer} are aligned to the right of\n * the toolbar.\n *\n * For more details on the documentation of the toolbar widget, take a look at the\n * documentation of the {@link qx.ui.toolbar}-Package.\n */\nqx.Class.define(\"qx.ui.toolbar.ToolBar\",\n{\n  extend : qx.ui.core.Widget,\n  include : qx.ui.core.MChildrenHandling,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // add needed layout\n    this._setLayout(new qx.ui.layout.HBox());\n\n    // initialize the overflow handling\n    this.__removedItems = [];\n    this.__removePriority = [];\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Appearance of the widget */\n    appearance :\n    {\n      refine : true,\n      init : \"toolbar\"\n    },\n\n    /** Holds the currently open menu (when the toolbar is used for menus) */\n    openMenu :\n    {\n      check : \"qx.ui.menu.Menu\",\n      event : \"changeOpenMenu\",\n      nullable : true\n    },\n\n    /** Whether icons, labels, both or none should be shown. */\n    show :\n    {\n      init : \"both\",\n      check : [ \"both\", \"label\", \"icon\" ],\n      inheritable : true,\n      apply : \"_applyShow\",\n      event : \"changeShow\"\n    },\n\n    /** The spacing between every child of the toolbar */\n    spacing :\n    {\n      nullable : true,\n      check : \"Integer\",\n      themeable : true,\n      apply : \"_applySpacing\"\n    },\n\n    /**\n     * Widget which will be shown if at least one toolbar item is hidden.\n     * Keep in mind to add this widget to the toolbar before you set it as\n     * indicator!\n     */\n    overflowIndicator :\n    {\n      check : \"qx.ui.core.Widget\",\n      nullable : true,\n      apply : \"_applyOverflowIndicator\"\n    },\n\n    /** Enables the overflow handling which automatically removes items.*/\n    overflowHandling :\n    {\n      init : false,\n      check : \"Boolean\",\n      apply : \"_applyOverflowHandling\"\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fired if an item will be hidden by the {@link #overflowHandling}.*/\n    \"hideItem\" : \"qx.event.type.Data\",\n\n    /** Fired if an item will be shown by the {@link #overflowHandling}.*/\n    \"showItem\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      OVERFLOW HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    __removedItems : null,\n    __removePriority : null,\n\n\n    // overridden\n    _computeSizeHint : function()\n    {\n      // get the original hint\n      var hint = this.base(arguments);\n      if (true && this.getOverflowHandling()) {\n        var minWidth = 0;\n        // if an overflow widget is given, use its width + spacing as min width\n        var overflowWidget = this.getOverflowIndicator();\n        if (overflowWidget) {\n          minWidth = overflowWidget.getSizeHint().width + this.getSpacing();\n        }\n        // reset the minWidth because we reduce the count of elements\n        hint.minWidth = minWidth;\n      }\n      return hint;\n    },\n\n\n    /**\n     * Resize event handler.\n     *\n     * @param e {qx.event.type.Data} The resize event.\n     */\n    _onResize : function(e) {\n      this._recalculateOverflow(e.getData().width);\n    },\n\n\n    /**\n     * Responsible for calculation the overflow based on the available width.\n     *\n     * @param width {Integer?null} The available width.\n     * @param requiredWidth {Integer?null} The required width for the widget\n     *   if available.\n     */\n    _recalculateOverflow : function(width, requiredWidth)\n    {\n     // do nothing if overflow handling is not enabled\n     if (!this.getOverflowHandling()) {\n       return;\n     }\n\n     // get all required sizes\n     requiredWidth = requiredWidth || this.getSizeHint().width;\n     var overflowWidget = this.getOverflowIndicator();\n     var overflowWidgetWidth = 0;\n     if (overflowWidget) {\n       overflowWidgetWidth = overflowWidget.getSizeHint().width;\n     }\n\n     if (width == undefined && this.getBounds() != null) {\n       width = this.getBounds().width;\n     }\n\n     // if we still don't have a width, than we are not added to a parent\n     if (width == undefined) {\n       // we should ignore it in that case\n       return;\n     }\n\n     // if we have not enough space\n     if (width < requiredWidth) {\n       do {\n         // get the next child\n         var childToHide = this._getNextToHide();\n         // if there is no child to hide, just do nothing\n         if (!childToHide) {\n           return;\n         }\n         // get margins or spacing\n         var margins = childToHide.getMarginLeft() + childToHide.getMarginRight();\n         margins = Math.max(margins, this.getSpacing());\n         var childWidth = childToHide.getSizeHint().width + margins;\n         this.__hideChild(childToHide);\n\n         // new width is the requiredWidth - the removed childs width\n         requiredWidth -= childWidth;\n\n         // show the overflowWidgetWidth\n         if (overflowWidget && overflowWidget.getVisibility() != \"visible\") {\n           overflowWidget.setVisibility(\"visible\");\n           // if we need to add the overflow indicator, we need to add its width\n           requiredWidth += overflowWidgetWidth;\n           // add spacing or margins\n           var overflowWidgetMargins =\n             overflowWidget.getMarginLeft() +\n             overflowWidget.getMarginRight();\n           requiredWidth += Math.max(overflowWidgetMargins, this.getSpacing());\n         }\n       } while (requiredWidth > width);\n\n       // if we can possibly show something\n     } else if (this.__removedItems.length > 0) {\n\n       do {\n         var removedChild = this.__removedItems[0];\n         // if we have something we can show\n         if (removedChild) {\n           // get the margins or spacing\n           var margins = removedChild.getMarginLeft() + removedChild.getMarginRight();\n           margins = Math.max(margins, this.getSpacing());\n\n           // check if the element has been rendered before [BUG #4542]\n           if (removedChild.getContentElement().getDomElement() == null) {\n             // if not, apply the decorator element because it can change the\n             // width of the child with padding e.g.\n             removedChild.syncAppearance();\n             // also invalidate the layout cache to trigger size hint\n             // recalculation\n             removedChild.invalidateLayoutCache();\n           }\n           var removedChildWidth = removedChild.getSizeHint().width;\n\n           // check if it fits in in case its the last child to replace\n           var fits = false;\n           // if we can remove the overflow widget if its available\n\n           if (this.__removedItems.length == 1 && overflowWidgetWidth > 0) {\n             var addedMargin = margins - this.getSpacing();\n             var wouldRequiredWidth =\n               requiredWidth -\n               overflowWidgetWidth +\n               removedChildWidth +\n               addedMargin;\n             fits = width > wouldRequiredWidth;\n           }\n\n           // if it just fits in || it fits in when we remove the overflow widget\n           if (width > requiredWidth + removedChildWidth + margins || fits) {\n             this.__showChild(removedChild);\n             requiredWidth += removedChildWidth;\n             // check if we need to remove the overflow widget\n             if (overflowWidget && this.__removedItems.length == 0) {\n\n               overflowWidget.setVisibility(\"excluded\");\n             }\n           } else {\n             return;\n           }\n         }\n       } while (width >= requiredWidth && this.__removedItems.length > 0);\n     }\n    },\n\n\n    /**\n     * Helper to show a toolbar item.\n     *\n     * @param child {qx.ui.core.Widget} The widget to show.\n     */\n    __showChild : function(child)\n    {\n      child.setVisibility(\"visible\");\n      this.__removedItems.shift();\n      this.fireDataEvent(\"showItem\", child);\n    },\n\n\n    /**\n     * Helper to exclude a toolbar item.\n     *\n     * @param child {qx.ui.core.Widget} The widget to exclude.\n     */\n    __hideChild : function(child)\n    {\n      // ignore the call if no child is given\n      if (!child) {\n        return;\n      }\n      this.__removedItems.unshift(child);\n      child.setVisibility(\"excluded\");\n      this.fireDataEvent(\"hideItem\", child);\n    },\n\n\n    /**\n     * Responsible for returning the next item to remove. In It checks the\n     * priorities added by {@link #setRemovePriority}. If all priorized widgets\n     * already excluded, it takes the widget added at last.\n     *\n     * @return {qx.ui.core.Widget|null} The widget which should be removed next.\n     *   If null is returned, no widget is available to remove.\n     */\n    _getNextToHide : function()\n    {\n      // get the elements by priority\n      for (var i = this.__removePriority.length - 1; i >= 0; i--) {\n        var item = this.__removePriority[i];\n        // maybe a priority is left out and spacers don't have the visibility\n        if (item && item.getVisibility && item.getVisibility() == \"visible\") {\n          return item;\n        }\n      };\n\n      // if there is non found by priority, check all available widgets\n      var children = this._getChildren();\n      for (var i = children.length -1; i >= 0; i--) {\n        var child = children[i];\n        // ignore the overflow widget\n        if (child == this.getOverflowIndicator()) {\n          continue;\n        }\n        // spacer don't have the visibility\n        if (child.getVisibility && child.getVisibility() == \"visible\") {\n          return child;\n        }\n      };\n    },\n\n\n    /**\n     * The removal of the toolbar items is priority based. You can change these\n     * priorities with this method. The higher a priority, the earlier it will\n     * be excluded. Remember to use every priority only once! If you want\n     * override an already set priority, use the override parameter.\n     * Keep in mind to only use already added items.\n     *\n     * @param item {qx.ui.core.Widget} The item to give the priority.\n     * @param priority {Integer} The priority, higher means removed earlier.\n     * @param override {Boolean} true, if the priority should be overridden.\n     */\n    setRemovePriority : function(item, priority, override)\n    {\n      // security check for overriding priorities\n      if (!override && this.__removePriority[priority] != undefined) {\n        throw new Error(\"Priority already in use!\");\n      }\n      this.__removePriority[priority] = item;\n    },\n\n\n    // property apply\n    _applyOverflowHandling : function(value, old)\n    {\n      // invalidate the own and the parents layout cache because the size hint changes\n      this.invalidateLayoutCache();\n      var parent = this.getLayoutParent();\n      if (parent) {\n        parent.invalidateLayoutCache();\n      }\n\n      // recalculate if possible\n      var bounds = this.getBounds();\n      if (bounds && bounds.width) {\n        this._recalculateOverflow(bounds.width);\n      }\n\n      // if the handling has been enabled\n      if (value) {\n        // add the resize listener\n        this.addListener(\"resize\", this._onResize, this);\n\n      // if the handles has been disabled\n      } else {\n        this.removeListener(\"resize\", this._onResize, this);\n\n        // set the overflow indicator to excluded\n        var overflowIndicator = this.getOverflowIndicator();\n        if (overflowIndicator) {\n          overflowIndicator.setVisibility(\"excluded\");\n        }\n\n        // set all buttons back to visible\n        for (var i = 0; i < this.__removedItems.length; i++) {\n          this.__removedItems[i].setVisibility(\"visible\");\n        };\n        // reset the removed items\n        this.__removedItems = [];\n      }\n    },\n\n\n    // property apply\n    _applyOverflowIndicator : function(value, old)\n    {\n      if (old) {\n        this._remove(old);\n      }\n\n      if (value) {\n        // check if its a child of the toolbar\n        if (this._indexOf(value) == -1) {\n          throw new Error(\"Widget must be child of the toolbar.\");\n        }\n        // hide the widget\n        value.setVisibility(\"excluded\");\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      MENU OPEN\n    ---------------------------------------------------------------------------\n    */\n\n    __allowMenuOpenHover : false,\n\n    /**\n     * Indicate if a menu could be opened on hover or not.\n     *\n     * @internal\n     * @param value {Boolean} <code>true</code> if a menu could be opened,\n     *    <code>false</code> otherwise.\n     */\n    _setAllowMenuOpenHover : function(value) {\n      this.__allowMenuOpenHover = value;\n    },\n\n    /**\n     * Return if a menu could be opened on hover or not.\n     *\n     * @internal\n     * @return {Boolean} <code>true</code> if a menu could be opened,\n     *    <code>false</code> otherwise.\n     */\n    _isAllowMenuOpenHover : function () {\n      return this.__allowMenuOpenHover;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROPERTY APPLY ROUTINES\n    ---------------------------------------------------------------------------\n    */\n\n    // property apply\n    _applySpacing : function(value, old)\n    {\n      var layout = this._getLayout();\n      value == null ? layout.resetSpacing() : layout.setSpacing(value);\n    },\n\n\n    // property apply\n    _applyShow : function(value) {\n      var children = this._getChildren();\n      for (var i=0; i < children.length; i++) {\n        if (children[i].setShow) {\n          children[i].setShow(value);\n        }\n      };\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CHILD HANDLING\n    ---------------------------------------------------------------------------\n    */\n    // overridden\n    _add : function(child, options) {\n      this.base(arguments, child, options);\n      // sync the show property (bug #6743) - but only if show wasn't explicitly set for the child (bug #6823)\n      if (child.setShow && !qx.util.PropertyUtil.getUserValue(child, \"show\")) {\n        child.setShow(this.getShow());\n      }\n\n      var newWidth =\n        this.getSizeHint().width +\n        child.getSizeHint().width +\n        2 * this.getSpacing();\n      this._recalculateOverflow(null, newWidth);\n    },\n\n    // overridden\n    _addAt : function(child, index, options) {\n      this.base(arguments, child, index, options);\n      // sync the show property (bug #6743) - but only if show wasn't explicitly set for the child (bug #6823)\n      if (child.setShow && !qx.util.PropertyUtil.getUserValue(child, \"show\")) {\n        child.setShow(this.getShow());\n      }\n\n      var newWidth =\n        this.getSizeHint().width +\n        child.getSizeHint().width +\n        2 * this.getSpacing();\n      this._recalculateOverflow(null, newWidth);\n    },\n\n    // overridden\n    _addBefore : function(child, before, options) {\n      this.base(arguments, child, before, options);\n      // sync the show property (bug #6743) - but only if show wasn't explicitly set for the child (bug #6823)\n      if (child.setShow && !qx.util.PropertyUtil.getUserValue(child, \"show\")) {\n        child.setShow(this.getShow());\n      }\n\n      var newWidth =\n        this.getSizeHint().width +\n        child.getSizeHint().width +\n        2 * this.getSpacing();\n      this._recalculateOverflow(null, newWidth);\n    },\n\n    // overridden\n    _addAfter : function(child, after, options) {\n      this.base(arguments, child, after, options);\n      // sync the show property (bug #6743) - but only if show wasn't explicitly set for the child (bug #6823)\n      if (child.setShow && !qx.util.PropertyUtil.getUserValue(child, \"show\")) {\n        child.setShow(this.getShow());\n      }\n\n      var newWidth =\n        this.getSizeHint().width +\n        child.getSizeHint().width +\n        2 * this.getSpacing();\n      this._recalculateOverflow(null, newWidth);\n    },\n\n    // overridden\n    _remove : function(child) {\n      this.base(arguments, child);\n      var newWidth =\n        this.getSizeHint().width -\n        child.getSizeHint().width -\n        2 * this.getSpacing();\n      this._recalculateOverflow(null, newWidth);\n    },\n\n    // overridden\n    _removeAt : function(index) {\n      var child = this._getChildren()[index];\n      this.base(arguments, index);\n      var newWidth =\n        this.getSizeHint().width -\n        child.getSizeHint().width -\n        2 * this.getSpacing();\n      this._recalculateOverflow(null, newWidth);\n      return child;\n    },\n\n    // overridden\n    _removeAll : function() {\n      var children = this.base(arguments);\n      this._recalculateOverflow(null, 0);\n      return children;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      UTILITIES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Add a spacer to the toolbar. The spacer has a flex\n     * value of one and will stretch to the available space.\n     *\n     * @return {qx.ui.core.Spacer} The newly added spacer object. A reference\n     *   to the spacer is needed to remove this spacer from the layout.\n     */\n    addSpacer : function()\n    {\n      var spacer = new qx.ui.core.Spacer;\n      this._add(spacer, {flex:1});\n      return spacer;\n    },\n\n\n    /**\n     * Adds a separator to the toolbar.\n     */\n    addSeparator : function() {\n      this.add(new qx.ui.toolbar.Separator);\n    },\n\n\n    /**\n     * Returns all nested buttons which contains a menu to show. This is mainly\n     * used for keyboard support.\n     *\n     * @return {Array} List of all menu buttons\n     */\n    getMenuButtons : function()\n    {\n      var children = this.getChildren();\n      var buttons = [];\n      var child;\n\n      for (var i=0, l=children.length; i<l; i++)\n      {\n        child = children[i];\n\n        if (child instanceof qx.ui.menubar.Button) {\n          buttons.push(child);\n        } else if (child instanceof qx.ui.toolbar.Part) {\n          buttons.push.apply(buttons, child.getMenuButtons());\n        }\n      }\n\n      return buttons;\n    }\n  },\n\n\n  destruct : function() {\n    if (this.hasListener(\"resize\")) {\n      this.removeListener(\"resize\", this._onResize, this);\n    }\n\n  }\n});\n"
  ]
}