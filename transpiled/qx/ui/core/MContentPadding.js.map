{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/core/MContentPadding.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "contentPaddingTop",
    "check",
    "init",
    "apply",
    "themeable",
    "contentPaddingRight",
    "contentPaddingBottom",
    "contentPaddingLeft",
    "contentPadding",
    "group",
    "mode",
    "members",
    "__contentPaddingSetter",
    "__contentPaddingThemedSetter",
    "__contentPaddingResetter",
    "_applyContentPadding",
    "value",
    "old",
    "name",
    "variant",
    "target",
    "_getContentPaddingTarget",
    "resetter",
    "setter",
    "ui",
    "core",
    "MContentPadding"
  ],
  "mappings": ";;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA2BAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,4BAAhB,EACA;AACE;;;;;;AAMAC,gBACA;AACE;AACAC,yBACA;AACEC,eAAQ,SADV;AAEEC,cAAO,CAFT;AAGEC,eAAQ,sBAHV;AAIEC,mBAAY;AAJd,OAHF;;AAUE;AACAC,2BACA;AACEJ,eAAQ,SADV;AAEEC,cAAO,CAFT;AAGEC,eAAQ,sBAHV;AAIEC,mBAAY;AAJd,OAZF;;AAmBE;AACAE,4BACA;AACEL,eAAQ,SADV;AAEEC,cAAO,CAFT;AAGEC,eAAQ,sBAHV;AAIEC,mBAAY;AAJd,OArBF;;AA4BE;AACAG,0BACA;AACEN,eAAQ,SADV;AAEEC,cAAO,CAFT;AAGEC,eAAQ,sBAHV;AAIEC,mBAAY;AAJd,OA9BF;;AAqCE;;;;;;;;;AASAI,sBACA;AACEC,eAAQ,CACN,mBADM,EACe,qBADf,EAEN,sBAFM,EAEkB,oBAFlB,CADV;AAKEC,cAAQ,WALV;AAMEN,mBAAY;AANd;AA/CF,KARF;;AAqEE;;;;;;AAMAO,aACA;AACE;;;;;AAKAC,8BACA;AACEZ,2BAAoB,eADtB;AAEEK,6BAAsB,iBAFxB;AAGEC,8BAAuB,kBAHzB;AAIEC,4BAAqB;AAJvB,OAPF;;AAeE;;;;;AAKAM,oCACA;AACEb,2BAAoB,qBADtB;AAEEK,6BAAsB,uBAFxB;AAGEC,8BAAuB,wBAHzB;AAIEC,4BAAqB;AAJvB,OArBF;;AA6BE;;;;;AAKAO,gCACA;AACEd,2BAAoB,iBADtB;AAEEK,6BAAsB,mBAFxB;AAGEC,8BAAuB,oBAHzB;AAIEC,4BAAqB;AAJvB,OAnCF;;AA2CE;AACAQ,4BAAuB,8BAASC,KAAT,EAAgBC,GAAhB,EAAqBC,IAArB,EAA2BC,OAA3B,EACvB;AACE,YAAIC,SAAS,KAAKC,wBAAL,EAAb;;AAEA,YAAIL,SAAS,IAAb,EACA;AACE,cAAIM,WAAW,KAAKR,wBAAL,CAA8BI,IAA9B,CAAf;AACAE,iBAAOE,QAAP;AACD,SAJD,MAMA;AACE;AACA,cAAIH,WAAW,WAAX,IAA0BA,WAAW,aAAzC,EAAwD;AACtD,gBAAII,SAAS,KAAKV,4BAAL,CAAkCK,IAAlC,CAAb;AACAE,mBAAOG,MAAP,EAAeP,KAAf;AACD,WAHD,MAGO;AACL,gBAAIO,SAAS,KAAKX,sBAAL,CAA4BM,IAA5B,CAAb;AACAE,mBAAOG,MAAP,EAAeP,KAAf;AACD;AACF;AACF;AAhEH;AA5EF,GADA,C;AA3BAvB,KAAG+B,EAAH,CAAMC,IAAN,CAAWC,eAAX,CAA2B9B,aAA3B,GAA2CA,aAA3C",
  "file": "MContentPadding.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This mixin defines the <code>contentPadding</code> property, which is used\n * by widgets like the window or group box, which must have a property, which\n * defines the padding of an inner pane.\n *\n * The including class must implement the method\n * <code>_getContentPaddingTarget</code>, which must return the widget on which\n * the padding should be applied.\n */\nqx.Mixin.define(\"qx.ui.core.MContentPadding\",\n{\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Top padding of the content pane */\n    contentPaddingTop :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyContentPadding\",\n      themeable : true\n    },\n\n    /** Right padding of the content pane */\n    contentPaddingRight :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyContentPadding\",\n      themeable : true\n    },\n\n    /** Bottom padding of the content pane */\n    contentPaddingBottom :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyContentPadding\",\n      themeable : true\n    },\n\n    /** Left padding of the content pane */\n    contentPaddingLeft :\n    {\n      check : \"Integer\",\n      init : 0,\n      apply : \"_applyContentPadding\",\n      themeable : true\n    },\n\n    /**\n     * The 'contentPadding' property is a shorthand property for setting 'contentPaddingTop',\n     * 'contentPaddingRight', 'contentPaddingBottom' and 'contentPaddingLeft'\n     * at the same time.\n     *\n     * If four values are specified they apply to top, right, bottom and left respectively.\n     * If there is only one value, it applies to all sides, if there are two or three,\n     * the missing values are taken from the opposite side.\n     */\n    contentPadding :\n    {\n      group : [\n        \"contentPaddingTop\", \"contentPaddingRight\",\n        \"contentPaddingBottom\", \"contentPaddingLeft\"\n      ],\n      mode  : \"shorthand\",\n      themeable : true\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * @type {Map} Maps property names of content padding to the setter of the padding\n     *\n     * @lint ignoreReferenceField(__contentPaddingSetter)\n     */\n    __contentPaddingSetter :\n    {\n      contentPaddingTop : \"setPaddingTop\",\n      contentPaddingRight : \"setPaddingRight\",\n      contentPaddingBottom : \"setPaddingBottom\",\n      contentPaddingLeft : \"setPaddingLeft\"\n    },\n\n\n    /**\n     * @type {Map} Maps property names of content padding to the themed setter of the padding\n     *\n     * @lint ignoreReferenceField(__contentPaddingThemedSetter)\n     */\n    __contentPaddingThemedSetter :\n    {\n      contentPaddingTop : \"setThemedPaddingTop\",\n      contentPaddingRight : \"setThemedPaddingRight\",\n      contentPaddingBottom : \"setThemedPaddingBottom\",\n      contentPaddingLeft : \"setThemedPaddingLeft\"\n    },\n\n\n    /**\n     * @type {Map} Maps property names of content padding to the resetter of the padding\n     *\n     * @lint ignoreReferenceField(__contentPaddingResetter)\n     */\n    __contentPaddingResetter :\n    {\n      contentPaddingTop : \"resetPaddingTop\",\n      contentPaddingRight : \"resetPaddingRight\",\n      contentPaddingBottom : \"resetPaddingBottom\",\n      contentPaddingLeft : \"resetPaddingLeft\"\n    },\n\n\n    // property apply\n    _applyContentPadding : function(value, old, name, variant)\n    {\n      var target = this._getContentPaddingTarget();\n\n      if (value == null)\n      {\n        var resetter = this.__contentPaddingResetter[name];\n        target[resetter]();\n      }\n      else\n      {\n        // forward the themed sates if case the apply was invoked by a theme\n        if (variant == \"setThemed\" || variant == \"resetThemed\") {\n          var setter = this.__contentPaddingThemedSetter[name];\n          target[setter](value);\n        } else {\n          var setter = this.__contentPaddingSetter[name];\n          target[setter](value);\n        }\n      }\n    }\n  }\n});\n"
  ]
}