{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/core/scroll/AbstractScrollArea.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "core",
    "Widget",
    "include",
    "scroll",
    "MScrollBarFactory",
    "MRoll",
    "MDragDropScrolling",
    "type",
    "statics",
    "DEFAULT_SCROLLBAR_WIDTH",
    "construct",
    "Environment",
    "get",
    "_setLayout",
    "layout",
    "Canvas",
    "grid",
    "Grid",
    "setColumnFlex",
    "setRowFlex",
    "size",
    "AbstractScrollArea",
    "set",
    "minHeight",
    "minWidth",
    "_addRollHandling",
    "events",
    "scrollAnimationXEnd",
    "scrollAnimationYEnd",
    "properties",
    "appearance",
    "refine",
    "init",
    "scrollbarX",
    "check",
    "themeable",
    "apply",
    "scrollbarY",
    "scrollbar",
    "group",
    "members",
    "_createChildControlImpl",
    "id",
    "hash",
    "control",
    "ScrollPane",
    "addListener",
    "_computeScrollbars",
    "_onScrollPaneX",
    "_onScrollPaneY",
    "_add",
    "edge",
    "row",
    "column",
    "_createScrollBar",
    "setMinWidth",
    "exclude",
    "_onScrollBarX",
    "_onChangeScrollbarXVisibility",
    "_onScrollAnimationEnd",
    "bind",
    "setMinHeight",
    "bottom",
    "right",
    "left",
    "_onScrollBarY",
    "_onChangeScrollbarYVisibility",
    "top",
    "setWidth",
    "setHeight",
    "getPaneSize",
    "getChildControl",
    "getInnerSize",
    "getItemTop",
    "item",
    "getItemBottom",
    "getItemLeft",
    "getItemRight",
    "scrollToX",
    "value",
    "duration",
    "queue",
    "Manager",
    "flush",
    "scrollTo",
    "scrollByX",
    "scrollBy",
    "getScrollX",
    "getPosition",
    "scrollToY",
    "scrollByY",
    "getScrollY",
    "stopScrollAnimationX",
    "stopScrollAnimation",
    "stopScrollAnimationY",
    "direction",
    "fireEvent",
    "e",
    "getData",
    "updatePosition",
    "showX",
    "_isChildControlVisible",
    "showY",
    "_showChildControl",
    "_excludeChildControl",
    "pane",
    "content",
    "getChildren",
    "innerSize",
    "paneSize",
    "scrollSize",
    "getScrollSize",
    "getScrollbarX",
    "getScrollbarY",
    "width",
    "height",
    "barX",
    "show",
    "setMaximum",
    "Math",
    "max",
    "setKnobFactor",
    "barY"
  ],
  "mappings": "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",
  "file": "AbstractScrollArea.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The ScrollArea provides a container widget with on demand scroll bars\n * if the content size exceeds the size of the container.\n *\n * @childControl pane {qx.ui.core.scroll.ScrollPane} pane which holds the content to scroll\n * @childControl scrollbar-x {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} horizontal scrollbar\n * @childControl scrollbar-y {qx.ui.core.scroll.ScrollBar?qx.ui.core.scroll.NativeScrollBar} vertical scrollbar\n * @childControl corner {qx.ui.core.Widget} corner where no scrollbar is shown\n */\nqx.Class.define(\"qx.ui.core.scroll.AbstractScrollArea\",\n{\n  extend : qx.ui.core.Widget,\n  include : [\n    qx.ui.core.scroll.MScrollBarFactory,\n    qx.ui.core.scroll.MRoll,\n    qx.ui.core.MDragDropScrolling\n  ],\n  type : \"abstract\",\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /**\n     * The default width which is used for the width of the scroll bar if\n     * overlaid.\n     */\n    DEFAULT_SCROLLBAR_WIDTH : 14\n  },\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n      // use a plain canvas to overlay the scroll bars\n      this._setLayout(new qx.ui.layout.Canvas());\n    } else {\n      // Create 'fixed' grid layout\n      var grid = new qx.ui.layout.Grid();\n      grid.setColumnFlex(0, 1);\n      grid.setRowFlex(0, 1);\n      this._setLayout(grid);\n    }\n\n    // since the scroll container disregards the min size of the scrollbars\n    // we have to set the min size of the scroll area to ensure that the\n    // scrollbars always have an usable size.\n    var size = qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH * 2 + 14;\n    this.set({minHeight: size, minWidth: size});\n\n    // Roll listener for scrolling\n    this._addRollHandling();\n  },\n\n\n  events : {\n    /** Fired as soon as the scroll animation in X direction ends. */\n    scrollAnimationXEnd: 'qx.event.type.Event',\n\n    /** Fired as soon as the scroll animation in Y direction ends. */\n    scrollAnimationYEnd: 'qx.event.type.Event'\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    appearance :\n    {\n      refine : true,\n      init : \"scrollarea\"\n    },\n\n\n    /**\n     * The policy, when the horizontal scrollbar should be shown.\n     * <ul>\n     *   <li><b>auto</b>: Show scrollbar on demand</li>\n     *   <li><b>on</b>: Always show the scrollbar</li>\n     *   <li><b>off</b>: Never show the scrollbar</li>\n     * </ul>\n     */\n    scrollbarX :\n    {\n      check : [\"auto\", \"on\", \"off\"],\n      init : \"auto\",\n      themeable : true,\n      apply : \"_computeScrollbars\"\n    },\n\n\n    /**\n     * The policy, when the horizontal scrollbar should be shown.\n     * <ul>\n     *   <li><b>auto</b>: Show scrollbar on demand</li>\n     *   <li><b>on</b>: Always show the scrollbar</li>\n     *   <li><b>off</b>: Never show the scrollbar</li>\n     * </ul>\n     */\n    scrollbarY :\n    {\n      check : [\"auto\", \"on\", \"off\"],\n      init : \"auto\",\n      themeable : true,\n      apply : \"_computeScrollbars\"\n    },\n\n\n    /**\n     * Group property, to set the overflow of both scroll bars.\n     */\n    scrollbar : {\n      group : [ \"scrollbarX\", \"scrollbarY\" ]\n    }\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      CHILD CONTROL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    _createChildControlImpl : function(id, hash)\n    {\n      var control;\n\n      switch(id)\n      {\n        case \"pane\":\n          control = new qx.ui.core.scroll.ScrollPane();\n\n          control.addListener(\"update\", this._computeScrollbars, this);\n          control.addListener(\"scrollX\", this._onScrollPaneX, this);\n          control.addListener(\"scrollY\", this._onScrollPaneY, this);\n\n          if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n            this._add(control, {edge: 0});\n          } else {\n            this._add(control, {row: 0, column: 0});\n          }\n          break;\n\n\n        case \"scrollbar-x\":\n          control = this._createScrollBar(\"horizontal\");\n          control.setMinWidth(0);\n\n          control.exclude();\n          control.addListener(\"scroll\", this._onScrollBarX, this);\n          control.addListener(\"changeVisibility\", this._onChangeScrollbarXVisibility, this);\n          control.addListener(\"scrollAnimationEnd\", this._onScrollAnimationEnd.bind(this, \"X\"));\n\n          if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n            control.setMinHeight(qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH);\n            this._add(control, {bottom: 0, right: 0, left: 0});\n          } else {\n            this._add(control, {row: 1, column: 0});\n          }\n          break;\n\n\n        case \"scrollbar-y\":\n          control = this._createScrollBar(\"vertical\");\n          control.setMinHeight(0);\n\n          control.exclude();\n          control.addListener(\"scroll\", this._onScrollBarY, this);\n          control.addListener(\"changeVisibility\", this._onChangeScrollbarYVisibility, this);\n          control.addListener(\"scrollAnimationEnd\", this._onScrollAnimationEnd.bind(this, \"Y\"));\n\n          if (qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n            control.setMinWidth(qx.ui.core.scroll.AbstractScrollArea.DEFAULT_SCROLLBAR_WIDTH);\n            this._add(control, {right: 0, bottom: 0, top: 0});\n          } else {\n            this._add(control, {row: 0, column: 1});\n          }\n          break;\n\n\n        case \"corner\":\n          control = new qx.ui.core.Widget();\n          control.setWidth(0);\n          control.setHeight(0);\n          control.exclude();\n\n          if (!qx.core.Environment.get(\"os.scrollBarOverlayed\")) {\n            // only add for non overlayed scroll bars\n            this._add(control, {row: 1, column: 1});\n          }\n          break;\n      }\n\n      return control || this.base(arguments, id);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PANE SIZE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the dimensions of the pane.\n     *\n     * @return {Map|null} The pane dimension in pixel. Contains\n     *    the keys <code>width</code> and <code>height</code>.\n     */\n    getPaneSize : function() {\n      return this.getChildControl(\"pane\").getInnerSize();\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      ITEM LOCATION SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns the top offset of the given item in relation to the\n     * inner height of this widget.\n     *\n     * @param item {qx.ui.core.Widget} Item to query\n     * @return {Integer} Top offset\n     */\n    getItemTop : function(item) {\n      return this.getChildControl(\"pane\").getItemTop(item);\n    },\n\n\n    /**\n     * Returns the top offset of the end of the given item in relation to the\n     * inner height of this widget.\n     *\n     * @param item {qx.ui.core.Widget} Item to query\n     * @return {Integer} Top offset\n     */\n    getItemBottom : function(item) {\n      return this.getChildControl(\"pane\").getItemBottom(item);\n    },\n\n\n    /**\n     * Returns the left offset of the given item in relation to the\n     * inner width of this widget.\n     *\n     * @param item {qx.ui.core.Widget} Item to query\n     * @return {Integer} Top offset\n     */\n    getItemLeft : function(item) {\n      return this.getChildControl(\"pane\").getItemLeft(item);\n    },\n\n\n    /**\n     * Returns the left offset of the end of the given item in relation to the\n     * inner width of this widget.\n     *\n     * @param item {qx.ui.core.Widget} Item to query\n     * @return {Integer} Right offset\n     */\n    getItemRight : function(item) {\n      return this.getChildControl(\"pane\").getItemRight(item);\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      SCROLL SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Scrolls the element's content to the given left coordinate\n     *\n     * @param value {Integer} The vertical position to scroll to.\n     * @param duration {Number?} The time in milliseconds the scroll to should take.\n     */\n    scrollToX : function(value, duration) {\n      // First flush queue before scroll\n      qx.ui.core.queue.Manager.flush();\n\n      this.getChildControl(\"scrollbar-x\").scrollTo(value, duration);\n    },\n\n\n    /**\n     * Scrolls the element's content by the given left offset\n     *\n     * @param value {Integer} The vertical position to scroll to.\n     * @param duration {Number?} The time in milliseconds the scroll to should take.\n     */\n    scrollByX : function(value, duration) {\n      // First flush queue before scroll\n      qx.ui.core.queue.Manager.flush();\n\n      this.getChildControl(\"scrollbar-x\").scrollBy(value, duration);\n    },\n\n\n    /**\n     * Returns the scroll left position of the content\n     *\n     * @return {Integer} Horizontal scroll position\n     */\n    getScrollX : function()\n    {\n      var scrollbar = this.getChildControl(\"scrollbar-x\", true);\n      return scrollbar ? scrollbar.getPosition() : 0;\n    },\n\n\n    /**\n     * Scrolls the element's content to the given top coordinate\n     *\n     * @param value {Integer} The horizontal position to scroll to.\n     * @param duration {Number?} The time in milliseconds the scroll to should take.\n     */\n    scrollToY : function(value, duration) {\n      // First flush queue before scroll\n      qx.ui.core.queue.Manager.flush();\n\n      this.getChildControl(\"scrollbar-y\").scrollTo(value, duration);\n    },\n\n\n    /**\n     * Scrolls the element's content by the given top offset\n     *\n     * @param value {Integer} The horizontal position to scroll to.\n     * @param duration {Number?} The time in milliseconds the scroll to should take.\n     */\n    scrollByY : function(value, duration) {\n      // First flush queue before scroll\n      qx.ui.core.queue.Manager.flush();\n\n      this.getChildControl(\"scrollbar-y\").scrollBy(value, duration);\n    },\n\n\n    /**\n     * Returns the scroll top position of the content\n     *\n     * @return {Integer} Vertical scroll position\n     */\n    getScrollY : function()\n    {\n      var scrollbar = this.getChildControl(\"scrollbar-y\", true);\n      return scrollbar ? scrollbar.getPosition() : 0;\n    },\n\n\n    /**\n     * In case a scroll animation is currently running in X direction,\n     * it will be stopped. If not, the method does nothing.\n     */\n    stopScrollAnimationX : function() {\n      var scrollbar = this.getChildControl(\"scrollbar-x\", true);\n      if (scrollbar) {\n        scrollbar.stopScrollAnimation();\n      }\n    },\n\n\n    /**\n     * In case a scroll animation is currently running in X direction,\n     * it will be stopped. If not, the method does nothing.\n     */\n    stopScrollAnimationY : function() {\n      var scrollbar = this.getChildControl(\"scrollbar-y\", true);\n      if (scrollbar) {\n        scrollbar.stopScrollAnimation();\n      }\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT LISTENERS\n    ---------------------------------------------------------------------------\n    */\n    /**\n     * Event handler for the scroll animation end event for both scroll bars.\n     *\n     * @param direction {String} Either \"X\" or \"Y\".\n     */\n    _onScrollAnimationEnd : function(direction) {\n      this.fireEvent(\"scrollAnimation\" + direction + \"End\");\n    },\n\n    /**\n     * Event handler for the scroll event of the horizontal scrollbar\n     *\n     * @param e {qx.event.type.Data} The scroll event object\n     */\n    _onScrollBarX : function(e) {\n      this.getChildControl(\"pane\").scrollToX(e.getData());\n    },\n\n\n    /**\n     * Event handler for the scroll event of the vertical scrollbar\n     *\n     * @param e {qx.event.type.Data} The scroll event object\n     */\n    _onScrollBarY : function(e) {\n      this.getChildControl(\"pane\").scrollToY(e.getData());\n    },\n\n\n    /**\n     * Event handler for the horizontal scroll event of the pane\n     *\n     * @param e {qx.event.type.Data} The scroll event object\n     */\n    _onScrollPaneX : function(e) {\n      var scrollbar = this.getChildControl(\"scrollbar-x\");\n      if (scrollbar) {\n        scrollbar.updatePosition(e.getData());\n      }\n    },\n\n\n    /**\n     * Event handler for the vertical scroll event of the pane\n     *\n     * @param e {qx.event.type.Data} The scroll event object\n     */\n    _onScrollPaneY : function(e) {\n      var scrollbar = this.getChildControl(\"scrollbar-y\");\n      if (scrollbar) {\n        scrollbar.updatePosition(e.getData());\n      }\n    },\n\n\n    /**\n     * Event handler for visibility changes of horizontal scrollbar.\n     *\n     * @param e {qx.event.type.Event} Property change event\n     */\n    _onChangeScrollbarXVisibility : function(e)\n    {\n      var showX = this._isChildControlVisible(\"scrollbar-x\");\n      var showY = this._isChildControlVisible(\"scrollbar-y\");\n\n      if (!showX) {\n        this.scrollToX(0);\n      }\n\n      showX && showY ? this._showChildControl(\"corner\") : this._excludeChildControl(\"corner\");\n    },\n\n\n    /**\n     * Event handler for visibility changes of horizontal scrollbar.\n     *\n     * @param e {qx.event.type.Event} Property change event\n     */\n    _onChangeScrollbarYVisibility : function(e)\n    {\n      var showX = this._isChildControlVisible(\"scrollbar-x\");\n      var showY = this._isChildControlVisible(\"scrollbar-y\");\n\n      if (!showY) {\n        this.scrollToY(0);\n      }\n\n      showX && showY ? this._showChildControl(\"corner\") : this._excludeChildControl(\"corner\");\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Computes the visibility state for scrollbars.\n     *\n     */\n    _computeScrollbars : function()\n    {\n      var pane = this.getChildControl(\"pane\");\n      var content = pane.getChildren()[0];\n      if (!content)\n      {\n        this._excludeChildControl(\"scrollbar-x\");\n        this._excludeChildControl(\"scrollbar-y\");\n        return;\n      }\n\n      var innerSize = this.getInnerSize();\n      var paneSize = pane.getInnerSize();\n      var scrollSize = pane.getScrollSize();\n\n      // if the widget has not yet been rendered, return and try again in the\n      // resize event\n      if (!paneSize || !scrollSize) {\n        return;\n      }\n\n      var scrollbarX = this.getScrollbarX();\n      var scrollbarY = this.getScrollbarY();\n\n      if (scrollbarX === \"auto\" && scrollbarY === \"auto\")\n      {\n        // Check if the container is big enough to show\n        // the full content.\n        var showX = scrollSize.width > innerSize.width;\n        var showY = scrollSize.height > innerSize.height;\n\n        // Dependency check\n        // We need a special intelligence here when only one\n        // of the autosized axis requires a scrollbar\n        // This scrollbar may then influence the need\n        // for the other one as well.\n        if ((showX || showY) && !(showX && showY))\n        {\n          if (showX) {\n            showY = scrollSize.height > paneSize.height;\n          } else if (showY) {\n            showX = scrollSize.width > paneSize.width;\n          }\n        }\n      }\n      else\n      {\n        var showX = scrollbarX === \"on\";\n        var showY = scrollbarY === \"on\";\n\n        // Check auto values afterwards with already\n        // corrected client dimensions\n        if (scrollSize.width > (showX ? paneSize.width : innerSize.width) && scrollbarX === \"auto\") {\n          showX = true;\n        }\n\n        if (scrollSize.height > (showX ? paneSize.height : innerSize.height) && scrollbarY === \"auto\") {\n          showY = true;\n        }\n      }\n\n      // Update scrollbars\n      if (showX)\n      {\n        var barX = this.getChildControl(\"scrollbar-x\");\n\n        barX.show();\n        barX.setMaximum(Math.max(0, scrollSize.width - paneSize.width));\n        barX.setKnobFactor((scrollSize.width === 0) ? 0 : paneSize.width / scrollSize.width);\n      }\n      else\n      {\n        this._excludeChildControl(\"scrollbar-x\");\n      }\n\n      if (showY)\n      {\n        var barY = this.getChildControl(\"scrollbar-y\");\n\n        barY.show();\n        barY.setMaximum(Math.max(0, scrollSize.height - paneSize.height));\n        barY.setKnobFactor((scrollSize.height === 0) ? 0 : paneSize.height / scrollSize.height);\n      }\n      else\n      {\n        this._excludeChildControl(\"scrollbar-y\");\n      }\n    }\n  }\n});\n"
  ]
}