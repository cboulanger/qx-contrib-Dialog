{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/core/MExecutable.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "events",
    "properties",
    "command",
    "check",
    "apply",
    "event",
    "nullable",
    "members",
    "__executableBindingIds",
    "__semaphore",
    "__executeListenerId",
    "_bindableProperties",
    "execute",
    "cmd",
    "getCommand",
    "fireEvent",
    "__onCommandExecute",
    "e",
    "isEnabled",
    "_applyCommand",
    "value",
    "old",
    "removeListenerById",
    "addListener",
    "ids",
    "selfPropertyValue",
    "i",
    "length",
    "property",
    "isDisposed",
    "removeBinding",
    "Class",
    "hasProperty",
    "constructor",
    "cmdPropertyValue",
    "get",
    "syncAppearance",
    "util",
    "PropertyUtil",
    "getThemeValue",
    "bind",
    "set",
    "destruct",
    "ui",
    "core",
    "MExecutable"
  ],
  "mappings": "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",
  "file": "MExecutable.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This mixin is included by all widgets, which support an 'execute' like\n * buttons or menu entries.\n */\nqx.Mixin.define(\"qx.ui.core.MExecutable\",\n{\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fired if the {@link #execute} method is invoked.*/\n    \"execute\" : \"qx.event.type.Event\"\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * A command called if the {@link #execute} method is called, e.g. on a\n     * button tap.\n     */\n    command :\n    {\n      check : \"qx.ui.command.Command\",\n      apply : \"_applyCommand\",\n      event : \"changeCommand\",\n      nullable : true\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __executableBindingIds : null,\n    __semaphore : false,\n    __executeListenerId : null,\n\n\n    /**\n     * @type {Map} Set of properties, which will by synced from the command to the\n     *    including widget\n     *\n     * @lint ignoreReferenceField(_bindableProperties)\n     */\n    _bindableProperties :\n    [\n      \"enabled\",\n      \"label\",\n      \"icon\",\n      \"toolTipText\",\n      \"value\",\n      \"menu\"\n    ],\n\n\n    /**\n     * Initiate the execute action.\n     */\n    execute : function()\n    {\n      var cmd = this.getCommand();\n\n      if (cmd) {\n        if (this.__semaphore) {\n          this.__semaphore = false;\n        } else {\n          this.__semaphore = true;\n          cmd.execute(this);\n        }\n      }\n\n      this.fireEvent(\"execute\");\n    },\n\n\n    /**\n     * Handler for the execute event of the command.\n     *\n     * @param e {qx.event.type.Event} The execute event of the command.\n     */\n    __onCommandExecute : function(e) {\n      if (this.__semaphore) {\n        this.__semaphore = false;\n        return;\n      }\n      if (this.isEnabled()) {\n        this.__semaphore = true;\n        this.execute();\n      }\n    },\n\n\n    // property apply\n    _applyCommand : function(value, old)\n    {\n      // execute forwarding\n      if (old != null) {\n        old.removeListenerById(this.__executeListenerId);\n      }\n      if (value != null) {\n        this.__executeListenerId = value.addListener(\n          \"execute\", this.__onCommandExecute, this\n        );\n      }\n\n      // binding stuff\n      var ids = this.__executableBindingIds;\n      if (ids == null) {\n        this.__executableBindingIds = ids = {};\n      }\n\n      var selfPropertyValue;\n      for (var i = 0; i < this._bindableProperties.length; i++) {\n        var property = this._bindableProperties[i];\n\n        // remove the old binding\n        if (old != null && !old.isDisposed() && ids[property] != null)\n        {\n          old.removeBinding(ids[property]);\n          ids[property] = null;\n        }\n\n        // add the new binding\n        if (value != null && qx.Class.hasProperty(this.constructor, property)) {\n          // handle the init value (don't sync the initial null)\n          var cmdPropertyValue = value.get(property);\n          if (cmdPropertyValue == null) {\n            selfPropertyValue = this.get(property);\n            // check also for themed values [BUG #5906]\n            if (selfPropertyValue == null) {\n              // update the appearance to make sure every themed property is up to date\n              this.syncAppearance();\n              selfPropertyValue = qx.util.PropertyUtil.getThemeValue(\n                this, property\n              );\n            }\n          } else {\n            // Reset the self property value [BUG #4534]\n            selfPropertyValue = null;\n          }\n          // set up the binding\n          ids[property] = value.bind(property, this, property);\n          // reapply the former value\n          if (selfPropertyValue) {\n            this.set(property, selfPropertyValue);\n          }\n        }\n      }\n    }\n  },\n\n\n  destruct : function() {\n    this._applyCommand(null, this.getCommand());\n    this.__executableBindingIds = null;\n  }\n});\n"
  ]
}