{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/core/MResizable.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "content",
    "getContentElement",
    "addListener",
    "__onResizePointerDown",
    "__onResizePointerUp",
    "__onResizePointerMove",
    "__onResizePointerOut",
    "__onResizeLoseCapture",
    "domElement",
    "getDomElement",
    "window",
    "__dragDropHandler",
    "event",
    "Registration",
    "getManager",
    "getHandler",
    "handler",
    "DragDrop",
    "properties",
    "resizableTop",
    "check",
    "init",
    "resizableRight",
    "resizableBottom",
    "resizableLeft",
    "resizable",
    "group",
    "mode",
    "resizeSensitivity",
    "useResizeFrame",
    "members",
    "__resizeFrame",
    "__resizeActive",
    "__resizeLeft",
    "__resizeTop",
    "__resizeStart",
    "__resizeRange",
    "RESIZE_TOP",
    "RESIZE_BOTTOM",
    "RESIZE_LEFT",
    "RESIZE_RIGHT",
    "_getResizeFrame",
    "frame",
    "ui",
    "core",
    "Widget",
    "setAppearance",
    "exclude",
    "Init",
    "getApplication",
    "getRoot",
    "add",
    "__showResizeFrame",
    "location",
    "getContentLocation",
    "setUserBounds",
    "left",
    "top",
    "right",
    "bottom",
    "show",
    "setZIndex",
    "getZIndex",
    "__computeResizeResult",
    "e",
    "resizeActive",
    "hint",
    "getSizeHint",
    "range",
    "start",
    "width",
    "height",
    "diff",
    "Math",
    "max",
    "min",
    "getDocumentTop",
    "minHeight",
    "maxHeight",
    "getDocumentLeft",
    "minWidth",
    "maxWidth",
    "viewportLeft",
    "viewportTop",
    "parentLeft",
    "bounds",
    "parentTop",
    "__resizeCursors",
    "__computeResizeMode",
    "pointerTolerance",
    "getResizeSensitivity",
    "pointerLeft",
    "pointerTop",
    "__computeResizeActive",
    "getResizableTop",
    "abs",
    "getResizableBottom",
    "getResizableLeft",
    "getResizableRight",
    "getEnabled",
    "getPointerType",
    "addState",
    "getBounds",
    "lang",
    "Object",
    "clone",
    "parent",
    "getLayoutParent",
    "parentLocation",
    "parentBounds",
    "getUseResizeFrame",
    "capture",
    "stop",
    "hasState",
    "setWidth",
    "setHeight",
    "setLayoutProperties",
    "removeState",
    "resetCursor",
    "getApplicationRoot",
    "resetGlobalCursor",
    "releaseCapture",
    "stopPropagation",
    "isSessionActive",
    "root",
    "cursor",
    "setCursor",
    "setGlobalCursor",
    "getCursor",
    "destruct",
    "ObjectRegistry",
    "inShutDown",
    "destroy",
    "MResizable"
  ],
  "mappings": "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",
  "file": "MResizable.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007 David Pérez Carmona\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * David Perez Carmona (david-perez)\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Provides resizing behavior to any widget.\n */\nqx.Mixin.define(\"qx.ui.core.MResizable\",\n{\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    // Register listeners to the content\n    var content = this.getContentElement();\n    content.addListener(\"pointerdown\", this.__onResizePointerDown, this, true);\n    content.addListener(\"pointerup\", this.__onResizePointerUp, this);\n    content.addListener(\"pointermove\", this.__onResizePointerMove, this);\n    content.addListener(\"pointerout\", this.__onResizePointerOut, this);\n    content.addListener(\"losecapture\", this.__onResizeLoseCapture, this);\n\n    // Get a reference of the drag and drop handler\n    var domElement = content.getDomElement();\n    if (domElement == null) {\n      domElement = window;\n    }\n\n    this.__dragDropHandler = qx.event.Registration.getManager(domElement).getHandler(qx.event.handler.DragDrop);\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Whether the top edge is resizable */\n    resizableTop :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n    /** Whether the right edge is resizable */\n    resizableRight :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n    /** Whether the bottom edge is resizable */\n    resizableBottom :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n    /** Whether the left edge is resizable */\n    resizableLeft :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n    /**\n     * Property group to configure the resize behaviour for all edges at once\n     */\n    resizable :\n    {\n      group : [ \"resizableTop\", \"resizableRight\", \"resizableBottom\", \"resizableLeft\" ],\n      mode  : \"shorthand\"\n    },\n\n    /** The tolerance to activate resizing */\n    resizeSensitivity :\n    {\n      check : \"Integer\",\n      init : 5\n    },\n\n    /** Whether a frame replacement should be used during the resize sequence */\n    useResizeFrame :\n    {\n      check : \"Boolean\",\n      init : true\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __dragDropHandler : null,\n    __resizeFrame : null,\n    __resizeActive : null,\n    __resizeLeft : null,\n    __resizeTop : null,\n    __resizeStart : null,\n    __resizeRange : null,\n\n\n    RESIZE_TOP : 1,\n    RESIZE_BOTTOM : 2,\n    RESIZE_LEFT : 4,\n    RESIZE_RIGHT : 8,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CORE FEATURES\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get the widget, which draws the resize/move frame. The resize frame is\n     * shared by all widgets and is added to the root widget.\n     *\n     * @return {qx.ui.core.Widget} The resize frame\n     */\n    _getResizeFrame : function()\n    {\n      var frame = this.__resizeFrame;\n      if (!frame)\n      {\n        frame = this.__resizeFrame = new qx.ui.core.Widget();\n        frame.setAppearance(\"resize-frame\");\n        frame.exclude();\n\n        qx.core.Init.getApplication().getRoot().add(frame);\n      }\n\n      return frame;\n    },\n\n\n    /**\n     * Creates, shows and syncs the frame with the widget.\n     */\n    __showResizeFrame : function()\n    {\n      var location = this.getContentLocation();\n      var frame = this._getResizeFrame();\n      frame.setUserBounds(\n        location.left,\n        location.top,\n        location.right - location.left,\n        location.bottom - location.top\n      );\n      frame.show();\n      frame.setZIndex(this.getZIndex()+1);\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      RESIZE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Computes the new boundaries at each interval\n     * of the resize sequence.\n     *\n     * @param e {qx.event.type.Pointer} Last pointer event\n     * @return {Map} A map with the computed boundaries\n     */\n    __computeResizeResult : function(e)\n    {\n      // Detect mode\n      var resizeActive = this.__resizeActive;\n\n      // Read size hint\n      var hint = this.getSizeHint();\n      var range = this.__resizeRange;\n\n      // Read original values\n      var start = this.__resizeStart;\n      var width = start.width;\n      var height = start.height;\n      var left = start.left;\n      var top = start.top;\n      var diff;\n\n      if (\n        (resizeActive & this.RESIZE_TOP) ||\n        (resizeActive & this.RESIZE_BOTTOM)\n      )\n      {\n        diff = Math.max(range.top, Math.min(range.bottom, e.getDocumentTop())) - this.__resizeTop;\n\n        if (resizeActive & this.RESIZE_TOP) {\n          height -= diff;\n        } else {\n          height += diff;\n        }\n\n        if (height < hint.minHeight) {\n          height = hint.minHeight;\n        } else if (height > hint.maxHeight) {\n          height = hint.maxHeight;\n        }\n\n        if (resizeActive & this.RESIZE_TOP) {\n          top += start.height - height;\n        }\n      }\n\n      if (\n        (resizeActive & this.RESIZE_LEFT) ||\n        (resizeActive & this.RESIZE_RIGHT)\n      )\n      {\n        diff = Math.max(range.left, Math.min(range.right, e.getDocumentLeft())) - this.__resizeLeft;\n\n        if (resizeActive & this.RESIZE_LEFT) {\n          width -= diff;\n        } else {\n          width += diff;\n        }\n\n        if (width < hint.minWidth) {\n          width = hint.minWidth;\n        } else if (width > hint.maxWidth) {\n          width = hint.maxWidth;\n        }\n\n        if (resizeActive & this.RESIZE_LEFT) {\n          left += start.width - width;\n        }\n      }\n\n      return {\n        // left and top of the visible widget\n        viewportLeft : left,\n        viewportTop : top,\n\n        parentLeft : start.bounds.left + left - start.left,\n        parentTop : start.bounds.top + top - start.top,\n\n        // dimensions of the visible widget\n        width : width,\n        height : height\n      };\n    },\n\n\n    /**\n     * @type {Map} Maps internal states to cursor symbols to use\n     *\n     * @lint ignoreReferenceField(__resizeCursors)\n     */\n    __resizeCursors :\n    {\n      1  : \"n-resize\",\n      2  : \"s-resize\",\n      4  : \"w-resize\",\n      8  : \"e-resize\",\n\n      5  : \"nw-resize\",\n      6  : \"sw-resize\",\n      9  : \"ne-resize\",\n      10 : \"se-resize\"\n    },\n\n\n    /**\n     * Updates the internally stored resize mode\n     *\n     * @param e {qx.event.type.Pointer} Last pointer event\n     */\n    __computeResizeMode : function(e)\n    {\n      var location = this.getContentLocation();\n      var pointerTolerance = this.getResizeSensitivity();\n\n      var pointerLeft = e.getDocumentLeft();\n      var pointerTop = e.getDocumentTop();\n\n      var resizeActive = this.__computeResizeActive(\n        location, pointerLeft, pointerTop, pointerTolerance\n      );\n\n      // check again in case we have a corner [BUG #1200]\n      if (resizeActive > 0) {\n        // this is really a | (or)!\n        resizeActive = resizeActive | this.__computeResizeActive(\n          location, pointerLeft, pointerTop, pointerTolerance * 2\n        );\n      }\n\n      this.__resizeActive = resizeActive;\n    },\n\n\n    /**\n     * Internal helper for computing the proper resize action based on the\n     * given parameters.\n     *\n     * @param location {Map} The current location of the widget.\n     * @param pointerLeft {Integer} The left position of the pointer.\n     * @param pointerTop {Integer} The top position of the pointer.\n     * @param pointerTolerance {Integer} The desired distance to the edge.\n     * @return {Integer} The resize active number.\n     */\n    __computeResizeActive : function(location, pointerLeft, pointerTop, pointerTolerance) {\n      var resizeActive = 0;\n\n      // TOP\n      if (\n        this.getResizableTop() &&\n        Math.abs(location.top - pointerTop) < pointerTolerance &&\n        pointerLeft > location.left - pointerTolerance &&\n        pointerLeft < location.right + pointerTolerance\n      ) {\n        resizeActive += this.RESIZE_TOP;\n\n      // BOTTOM\n      } else if (\n        this.getResizableBottom() &&\n        Math.abs(location.bottom - pointerTop) < pointerTolerance &&\n        pointerLeft > location.left - pointerTolerance &&\n        pointerLeft < location.right + pointerTolerance\n      ) {\n        resizeActive += this.RESIZE_BOTTOM;\n      }\n\n      // LEFT\n      if (\n        this.getResizableLeft() &&\n        Math.abs(location.left - pointerLeft) < pointerTolerance &&\n        pointerTop > location.top - pointerTolerance &&\n        pointerTop < location.bottom + pointerTolerance\n      ) {\n        resizeActive += this.RESIZE_LEFT;\n\n      // RIGHT\n      } else if (\n        this.getResizableRight() &&\n        Math.abs(location.right - pointerLeft) < pointerTolerance &&\n        pointerTop > location.top - pointerTolerance &&\n        pointerTop < location.bottom + pointerTolerance\n      ) {\n        resizeActive += this.RESIZE_RIGHT;\n      }\n      return resizeActive;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      RESIZE EVENT HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event handler for the pointer down event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event instance\n     */\n    __onResizePointerDown : function(e)\n    {\n      // Check for active resize\n      if (!this.__resizeActive || !this.getEnabled() || e.getPointerType() == \"touch\") {\n        return;\n      }\n\n      // Add resize state\n      this.addState(\"resize\");\n\n      // Store pointer coordinates\n      this.__resizeLeft = e.getDocumentLeft();\n      this.__resizeTop = e.getDocumentTop();\n\n      // Cache bounds\n      var location = this.getContentLocation();\n      var bounds   = this.getBounds();\n\n      this.__resizeStart = {\n        top : location.top,\n        left : location.left,\n        width : location.right - location.left,\n        height : location.bottom - location.top,\n        bounds : qx.lang.Object.clone(bounds)\n      };\n\n      // Compute range\n      var parent = this.getLayoutParent();\n      var parentLocation = parent.getContentLocation();\n      var parentBounds = parent.getBounds();\n\n      this.__resizeRange = {\n        left : parentLocation.left,\n        top : parentLocation.top,\n        right : parentLocation.left + parentBounds.width,\n        bottom : parentLocation.top + parentBounds.height\n      };\n\n      // Show frame if configured this way\n      if (this.getUseResizeFrame()) {\n        this.__showResizeFrame();\n      }\n\n      // Enable capturing\n      this.capture();\n\n      // Stop event\n      e.stop();\n    },\n\n\n    /**\n     * Event handler for the pointer up event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event instance\n     */\n    __onResizePointerUp : function(e)\n    {\n      // Check for active resize\n      if (!this.hasState(\"resize\") || !this.getEnabled() || e.getPointerType() == \"touch\") {\n        return;\n      }\n\n      // Hide frame afterwards\n      if (this.getUseResizeFrame()) {\n        this._getResizeFrame().exclude();\n      }\n\n      // Compute bounds\n      var bounds = this.__computeResizeResult(e);\n\n      // Sync with widget\n      this.setWidth(bounds.width);\n      this.setHeight(bounds.height);\n\n      // Update coordinate in canvas\n      if (this.getResizableLeft() || this.getResizableTop())\n      {\n        this.setLayoutProperties({\n          left : bounds.parentLeft,\n          top : bounds.parentTop\n        });\n      }\n\n      // Clear mode\n      this.__resizeActive = 0;\n\n      // Remove resize state\n      this.removeState(\"resize\");\n\n      // Reset cursor\n      this.resetCursor();\n      this.getApplicationRoot().resetGlobalCursor();\n\n      // Disable capturing\n      this.releaseCapture();\n\n      e.stopPropagation();\n    },\n\n\n    /**\n     * Event listener for <code>losecapture</code> event.\n     *\n     * @param e {qx.event.type.Event} Lose capture event\n     */\n    __onResizeLoseCapture : function(e)\n    {\n      // Check for active resize\n      if (!this.__resizeActive) {\n        return;\n      }\n\n      // Reset cursor\n      this.resetCursor();\n      this.getApplicationRoot().resetGlobalCursor();\n\n      // Remove drag state\n      this.removeState(\"move\");\n\n      // Hide frame afterwards\n      if (this.getUseResizeFrame()) {\n        this._getResizeFrame().exclude();\n      }\n    },\n\n\n    /**\n     * Event handler for the pointer move event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event instance\n     */\n    __onResizePointerMove : function(e)\n    {\n      if (!this.getEnabled() || e.getPointerType() == \"touch\") {\n        return;\n      }\n\n      if (this.hasState(\"resize\"))\n      {\n        var bounds = this.__computeResizeResult(e);\n\n        // Update widget\n        if (this.getUseResizeFrame())\n        {\n          // Sync new bounds to frame\n          var frame = this._getResizeFrame();\n          frame.setUserBounds(bounds.viewportLeft, bounds.viewportTop, bounds.width, bounds.height);\n        }\n        else\n        {\n          // Update size\n          this.setWidth(bounds.width);\n          this.setHeight(bounds.height);\n\n          // Update coordinate in canvas\n          if (this.getResizableLeft() || this.getResizableTop())\n          {\n            this.setLayoutProperties({\n              left : bounds.parentLeft,\n              top : bounds.parentTop\n            });\n          }\n        }\n\n        // Full stop for event\n        e.stopPropagation();\n      }\n      else if (!this.hasState(\"maximized\") && !this.__dragDropHandler.isSessionActive())\n      {\n        this.__computeResizeMode(e);\n\n        var resizeActive = this.__resizeActive;\n        var root = this.getApplicationRoot();\n\n        if (resizeActive)\n        {\n          var cursor = this.__resizeCursors[resizeActive];\n          this.setCursor(cursor);\n          root.setGlobalCursor(cursor);\n        }\n        else if (this.getCursor())\n        {\n          this.resetCursor();\n          root.resetGlobalCursor();\n        }\n      }\n    },\n\n\n    /**\n     * Event handler for the pointer out event\n     *\n     * @param e {qx.event.type.Pointer} The pointer event instance\n     */\n    __onResizePointerOut : function(e)\n    {\n      if (e.getPointerType() == \"touch\") {\n        return;\n      }\n      // When the pointer left the window and resizing is not yet\n      // active we must be sure to (especially) reset the global\n      // cursor.\n      if (this.getCursor() && !this.hasState(\"resize\"))\n      {\n        this.resetCursor();\n        this.getApplicationRoot().resetGlobalCursor();\n      }\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if(this.getCursor()) {\n      this.getApplicationRoot().resetGlobalCursor();\n    }\n    \n    if (this.__resizeFrame != null && !qx.core.ObjectRegistry.inShutDown)\n    {\n      this.__resizeFrame.destroy();\n      this.__resizeFrame = null;\n    }\n\n    this.__dragDropHandler = null;\n  }\n});\n"
  ]
}