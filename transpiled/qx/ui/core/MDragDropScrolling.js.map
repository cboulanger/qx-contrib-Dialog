{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/core/MDragDropScrolling.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "widget",
    "ui",
    "core",
    "DragDropScrolling",
    "_getWidget",
    "addListener",
    "__onDrag",
    "__onDragend",
    "__xDirs",
    "__yDirs",
    "properties",
    "dragScrollThresholdX",
    "check",
    "init",
    "dragScrollThresholdY",
    "dragScrollSlowDownFactor",
    "members",
    "__dragScrollTimer",
    "_findScrollableParent",
    "cur",
    "getLayoutParent",
    "_isScrollable",
    "Class",
    "hasMixin",
    "constructor",
    "scroll",
    "MScrollBarFactory",
    "_getBounds",
    "scrollable",
    "bounds",
    "getContentLocation",
    "getScrollAreaContainer",
    "_getEdgeType",
    "diff",
    "thresholdX",
    "thresholdY",
    "left",
    "top",
    "right",
    "bottom",
    "_getAxis",
    "edgeType",
    "indexOf",
    "Error",
    "_getThresholdByEdgeType",
    "getDragScrollThresholdX",
    "getDragScrollThresholdY",
    "_isScrollbarVisible",
    "axis",
    "_isChildControlVisible",
    "_isScrollbarExceedingMaxPos",
    "scrollbar",
    "amount",
    "newPos",
    "getPosition",
    "getMaximum",
    "_calculateThresholdExceedance",
    "threshold",
    "Math",
    "abs",
    "_calculateScrollAmount",
    "scrollbarSize",
    "exceedanceAmount",
    "floor",
    "getDragScrollSlowDownFactor",
    "_scrollBy",
    "getChildControl",
    "getBounds",
    "width",
    "height",
    "stop",
    "scrollBy",
    "e",
    "target",
    "getOriginalTarget",
    "Widget",
    "getWidgetByElement",
    "xPos",
    "getDocumentLeft",
    "yPos",
    "getDocumentTop",
    "dispose",
    "event",
    "Timer",
    "bind",
    "start",
    "stopPropagation",
    "destruct",
    "MDragDropScrolling"
  ],
  "mappings": "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",
  "file": "MDragDropScrolling.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Provides scrolling ability during drag session to the widget.\n */\nqx.Mixin.define(\"qx.ui.core.MDragDropScrolling\",\n{\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    var widget = this;\n\n    if (this instanceof qx.ui.core.DragDropScrolling) {\n      widget = this._getWidget();\n    }\n\n    widget.addListener(\"drag\", this.__onDrag, this);\n    widget.addListener(\"dragend\", this.__onDragend, this);\n\n    this.__xDirs = [\"left\", \"right\"];\n    this.__yDirs = [\"top\", \"bottom\"];\n  },\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The threshold for the x-axis (in pixel) to activate scrolling at the edges. */\n    dragScrollThresholdX :\n    {\n      check : \"Integer\",\n      init : 30\n    },\n\n    /** The threshold for the y-axis (in pixel) to activate scrolling at the edges. */\n    dragScrollThresholdY :\n    {\n      check : \"Integer\",\n      init : 30\n    },\n\n    /** The factor for slowing down the scrolling. */\n    dragScrollSlowDownFactor :\n    {\n      check : \"Float\",\n      init : 0.1\n    }\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __dragScrollTimer : null,\n    __xDirs : null,\n    __yDirs : null,\n\n    /**\n     * Finds the first scrollable parent (in the parent chain).\n     *\n     * @param widget {qx.ui.core.LayoutItem} The widget to start from.\n     * @return {qx.ui.core.Widget} A scrollable widget.\n     */\n    _findScrollableParent : function(widget)\n    {\n      var cur = widget;\n      if (cur === null) {\n        return null;\n      }\n\n      while (cur.getLayoutParent()) {\n        cur = cur.getLayoutParent();\n        if (this._isScrollable(cur)) {\n          return cur;\n        }\n      }\n      return null;\n    },\n\n    /**\n     * Whether the widget is scrollable.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to check.\n     * @return {Boolean} Whether the widget is scrollable.\n     */\n    _isScrollable : function(widget)\n    {\n      return qx.Class.hasMixin(widget.constructor, qx.ui.core.scroll.MScrollBarFactory);\n    },\n\n    /**\n     * Gets the bounds of the given scrollable.\n     *\n     * @param scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.\n     * @return {Map} A map with all four bounds (e.g. {\"left\":0, \"top\":20, \"right\":0, \"bottom\":80}).\n     */\n    _getBounds : function(scrollable)\n    {\n      var bounds = scrollable.getContentLocation();\n\n      // the scrollable may dictate a nested widget for more precise bounds\n      if (scrollable.getScrollAreaContainer) {\n        bounds = scrollable.getScrollAreaContainer().getContentLocation();\n      }\n\n      return bounds;\n    },\n\n    /**\n     * Gets the edge type or null if the pointer isn't within one of the thresholds.\n     *\n     * @param diff {Map} Difference map with all for edgeTypes.\n     * @param thresholdX {Number} x-axis threshold.\n     * @param thresholdY {Number} y-axis threshold.\n     * @return {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').\n     */\n    _getEdgeType : function(diff, thresholdX, thresholdY)\n    {\n      if ((diff.left * -1) <= thresholdX && diff.left < 0) {\n        return \"left\";\n      } else if ((diff.top * -1) <= thresholdY && diff.top < 0) {\n        return \"top\";\n      } else if (diff.right <= thresholdX && diff.right > 0) {\n        return \"right\";\n      } else if (diff.bottom <= thresholdY && diff.bottom > 0) {\n        return \"bottom\";\n      } else {\n        return null;\n      }\n    },\n\n    /**\n     * Gets the axis ('x' or 'y') by the edge type.\n     *\n     * @param edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').\n     * @throws {Error} If edgeType is not one of the distinct four ones.\n     * @return {String} Returns 'y' or 'x'.\n     */\n    _getAxis : function(edgeType)\n    {\n      if (this.__xDirs.indexOf(edgeType) !== -1) {\n        return \"x\";\n      } else if (this.__yDirs.indexOf(edgeType) !== -1) {\n        return \"y\";\n      } else {\n        throw new Error(\"Invalid edge type given (\"+edgeType+\"). Must be: 'left', 'right', 'top' or 'bottom'\");\n      }\n    },\n\n    /**\n     * Gets the threshold amount by edge type.\n     *\n     * @param edgeType {String} One of the four edgeTypes ('left', 'right', 'top', 'bottom').\n     * @return {Number} The threshold of the x or y axis.\n     */\n    _getThresholdByEdgeType : function(edgeType) {\n      if (this.__xDirs.indexOf(edgeType) !== -1) {\n        return this.getDragScrollThresholdX();\n      } else if(this.__yDirs.indexOf(edgeType) !== -1) {\n        return this.getDragScrollThresholdY();\n      }\n    },\n\n    /**\n     * Whether the scrollbar is visible.\n     *\n     * @param scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.\n     * @param axis {String} Can be 'y' or 'x'.\n     * @return {Boolean} Whether the scrollbar is visible.\n     */\n    _isScrollbarVisible : function(scrollable, axis)\n    {\n      if (scrollable && scrollable._isChildControlVisible) {\n        return scrollable._isChildControlVisible(\"scrollbar-\"+axis);\n      } else {\n        return false;\n      }\n    },\n\n    /**\n     * Whether the scrollbar is exceeding it's maximum position.\n     *\n     * @param scrollbar {qx.ui.core.scroll.IScrollBar} Scrollbar to check.\n     * @param axis {String} Can be 'y' or 'x'.\n     * @param amount {Number} Amount to scroll which may be negative.\n     * @return {Boolean} Whether the amount will exceed the scrollbar max position.\n     */\n    _isScrollbarExceedingMaxPos : function(scrollbar, axis, amount)\n    {\n      var newPos = 0;\n      if (!scrollbar) {\n        return true;\n      }\n      newPos = scrollbar.getPosition() + amount;\n      return (newPos > scrollbar.getMaximum() || newPos < 0);\n    },\n\n    /**\n     * Calculates the threshold exceedance (which may be negative).\n     *\n     * @param diff {Number} Difference value of one edgeType.\n     * @param threshold {Number} x-axis or y-axis threshold.\n     * @return {Number} Threshold exceedance amount (positive or negative).\n     */\n    _calculateThresholdExceedance : function(diff, threshold)\n    {\n      var amount = threshold - Math.abs(diff);\n      return diff < 0 ? (amount * -1) : amount;\n    },\n\n    /**\n     * Calculates the scroll amount (which may be negative).\n     * The amount is influenced by the scrollbar size (bigger = faster)\n     * the exceedanceAmount (bigger = faster) and the slowDownFactor.\n     *\n     * @param scrollbarSize {Number} Size of the scrollbar.\n     * @param exceedanceAmount {Number} Threshold exceedance amount (positive or negative).\n     * @return {Number} Scroll amount (positive or negative).\n     */\n    _calculateScrollAmount : function(scrollbarSize, exceedanceAmount)\n    {\n      return Math.floor(((scrollbarSize / 100) * exceedanceAmount) * this.getDragScrollSlowDownFactor());\n    },\n\n    /**\n     * Scrolls the given scrollable on the given axis for the given amount.\n     *\n     * @param scrollable {qx.ui.core.Widget} Scrollable which has scrollbar child controls.\n     * @param axis {String} Can be 'y' or 'x'.\n     * @param exceedanceAmount {Number} Threshold exceedance amount (positive or negative).\n     */\n    _scrollBy : function(scrollable, axis, exceedanceAmount) {\n      var scrollbar = scrollable.getChildControl(\"scrollbar-\"+axis, true);\n      if (!scrollbar) {\n        return;\n      }\n      var bounds = scrollbar.getBounds(),\n          scrollbarSize = axis === \"x\" ? bounds.width : bounds.height,\n          amount = this._calculateScrollAmount(scrollbarSize, exceedanceAmount);\n\n      if (this._isScrollbarExceedingMaxPos(scrollbar, axis, amount)) {\n        this.__dragScrollTimer.stop();\n      }\n\n      scrollbar.scrollBy(amount);\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n    EVENT HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Event handler for the drag event.\n     *\n     * @param e {qx.event.type.Drag} The drag event instance.\n     */\n    __onDrag : function(e)\n    {\n      if (this.__dragScrollTimer) {\n        // stop last scroll action\n        this.__dragScrollTimer.stop();\n      }\n\n      var target;\n      if (e.getOriginalTarget() instanceof qx.ui.core.Widget) {\n        target = e.getOriginalTarget();\n      }\n      else {\n        target = qx.ui.core.Widget.getWidgetByElement(e.getOriginalTarget());\n      }\n      if (!target) {\n        return;\n      }\n      var scrollable;\n      if (this._isScrollable(target)) {\n        scrollable = target;\n      } else {\n        scrollable = this._findScrollableParent(target);\n      }\n\n      while (scrollable) {\n        var bounds = this._getBounds(scrollable),\n            xPos = e.getDocumentLeft(),\n            yPos = e.getDocumentTop(),\n            diff = {\n              \"left\": bounds.left - xPos,\n              \"right\": bounds.right - xPos,\n              \"top\": bounds.top - yPos,\n              \"bottom\": bounds.bottom - yPos\n            },\n            edgeType = null,\n            axis = \"\",\n            exceedanceAmount = 0;\n\n        edgeType = this._getEdgeType(diff, this.getDragScrollThresholdX(), this.getDragScrollThresholdY());\n        if (!edgeType) {\n          scrollable = this._findScrollableParent(scrollable);\n          continue;\n        }\n        axis = this._getAxis(edgeType);\n\n        if (this._isScrollbarVisible(scrollable, axis)) {\n          exceedanceAmount = this._calculateThresholdExceedance(diff[edgeType], this._getThresholdByEdgeType(edgeType));\n\n          if (this.__dragScrollTimer) {\n            this.__dragScrollTimer.dispose();\n          }\n\n          this.__dragScrollTimer = new qx.event.Timer(50);\n          this.__dragScrollTimer.addListener(\"interval\",\n            function(scrollable, axis, amount) {\n              this._scrollBy(scrollable, axis, amount);\n            }.bind(this, scrollable, axis, exceedanceAmount));\n          this.__dragScrollTimer.start();\n          e.stopPropagation();\n          return;\n        } else {\n          scrollable = this._findScrollableParent(scrollable);\n        }\n      }\n    },\n\n    /**\n     * Event handler for the dragend event.\n     *\n     * @param e {qx.event.type.Drag} The drag event instance.\n     */\n    __onDragend : function(e)\n    {\n      if (this.__dragScrollTimer) {\n        this.__dragScrollTimer.stop();\n      }\n    }\n  },\n\n\n  destruct : function() {\n    if (this.__dragScrollTimer) {\n      this.__dragScrollTimer.dispose();\n    }\n  }\n});\n"
  ]
}