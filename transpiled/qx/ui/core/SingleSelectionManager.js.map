{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/core/SingleSelectionManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "selectionProvider",
    "Assert",
    "assertInterface",
    "ui",
    "ISingleSelectionProvider",
    "__selectionProvider",
    "events",
    "properties",
    "allowEmptySelection",
    "check",
    "init",
    "apply",
    "members",
    "__selected",
    "getSelected",
    "setSelected",
    "item",
    "__isChildElement",
    "Error",
    "__setSelected",
    "resetSelected",
    "isSelected",
    "isSelectionEmpty",
    "getSelectables",
    "all",
    "items",
    "getItems",
    "result",
    "i",
    "length",
    "isItemSelectable",
    "push",
    "getEnabled",
    "splice",
    "__applyAllowEmptySelection",
    "value",
    "old",
    "oldSelected",
    "newSelected",
    "isAllowEmptySelection",
    "firstElement",
    "fireDataEvent",
    "destruct",
    "toHashCode",
    "_disposeObjects",
    "SingleSelectionManager"
  ],
  "mappings": "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",
  "file": "SingleSelectionManager.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Responsible for the single selection management.\n *\n * The class manage a list of {@link qx.ui.core.Widget} which are returned from\n * {@link qx.ui.core.ISingleSelectionProvider#getItems}.\n *\n * @internal\n */\nqx.Class.define(\"qx.ui.core.SingleSelectionManager\",\n{\n  extend : qx.core.Object,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n\n  /**\n   * Construct the single selection manager.\n   *\n   * @param selectionProvider {qx.ui.core.ISingleSelectionProvider} The provider\n   * for selection.\n   */\n  construct : function(selectionProvider) {\n    this.base(arguments);\n\n    if (qx.core.Environment.get(\"qx.debug\")) {\n      qx.core.Assert.assertInterface(selectionProvider,\n        qx.ui.core.ISingleSelectionProvider,\n        \"Invalid selectionProvider!\");\n    }\n\n    this.__selectionProvider = selectionProvider;\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n\n  events :\n  {\n    /** Fires after the selection was modified */\n    \"changeSelected\" : \"qx.event.type.Data\"\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n\n  properties :\n  {\n    /**\n     * If the value is <code>true</code> the manager allows an empty selection,\n     * otherwise the first selectable element returned from the\n     * <code>qx.ui.core.ISingleSelectionProvider</code> will be selected.\n     */\n    allowEmptySelection :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"__applyAllowEmptySelection\"\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members :\n  {\n    /** @type {qx.ui.core.Widget} The selected widget. */\n    __selected : null,\n\n    /** @type {qx.ui.core.ISingleSelectionProvider} The provider for selection management */\n    __selectionProvider : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n       PUBLIC API\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Returns the current selected element.\n     *\n     * @return {qx.ui.core.Widget | null} The current selected widget or\n     *    <code>null</code> if the selection is empty.\n     */\n    getSelected : function() {\n      return this.__selected;\n    },\n\n    /**\n     * Selects the passed element.\n     *\n     * @param item {qx.ui.core.Widget} Element to select.\n     * @throws {Error} if the element is not a child element.\n     */\n    setSelected : function(item) {\n      if (!this.__isChildElement(item)) {\n        throw new Error(\"Could not select \" + item +\n          \", because it is not a child element!\");\n      }\n\n      this.__setSelected(item);\n    },\n\n    /**\n     * Reset the current selection. If {@link #allowEmptySelection} is set to\n     * <code>true</code> the first element will be selected.\n     */\n    resetSelected : function(){\n      this.__setSelected(null);\n    },\n\n    /**\n     * Return <code>true</code> if the passed element is selected.\n     *\n     * @param item {qx.ui.core.Widget} Element to check if selected.\n     * @return {Boolean} <code>true</code> if passed element is selected,\n     *    <code>false</code> otherwise.\n     * @throws {Error} if the element is not a child element.\n     */\n    isSelected : function(item) {\n      if (!this.__isChildElement(item)) {\n        throw new Error(\"Could not check if \" + item + \" is selected,\" +\n          \" because it is not a child element!\");\n      }\n      return this.__selected === item;\n    },\n\n    /**\n     * Returns <code>true</code> if selection is empty.\n     *\n     * @return {Boolean} <code>true</code> if selection is empty,\n     *    <code>false</code> otherwise.\n     */\n    isSelectionEmpty : function() {\n      return this.__selected == null;\n    },\n\n    /**\n     * Returns all elements which are selectable.\n     *\n     * @param all {Boolean} true for all selectables, false for the\n     *   selectables the user can interactively select\n     * @return {qx.ui.core.Widget[]} The contained items.\n     */\n    getSelectables : function(all)\n    {\n      var items = this.__selectionProvider.getItems();\n      var result = [];\n\n      for (var i = 0; i < items.length; i++)\n      {\n        if (this.__selectionProvider.isItemSelectable(items[i])) {\n          result.push(items[i]);\n        }\n      }\n\n      // in case of an user selectable list, remove the enabled items\n      if (!all) {\n        for (var i = result.length -1; i >= 0; i--) {\n          if (!result[i].getEnabled()) {\n            result.splice(i, 1);\n          }\n        };\n      }\n\n      return result;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       APPLY METHODS\n    ---------------------------------------------------------------------------\n    */\n\n\n    // apply method\n    __applyAllowEmptySelection : function(value, old)\n    {\n      if (!value) {\n        this.__setSelected(this.__selected);\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n       HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Set selected element.\n     *\n     * If passes value is <code>null</code>, the selection will be reseted.\n     *\n     * @param item {qx.ui.core.Widget | null} element to select, or\n     *    <code>null</code> to reset selection.\n     */\n    __setSelected : function(item) {\n      var oldSelected = this.__selected;\n      var newSelected = item;\n\n      if (newSelected != null && oldSelected === newSelected) {\n        return;\n      }\n\n      if (!this.isAllowEmptySelection() && newSelected == null) {\n        var firstElement = this.getSelectables(true)[0];\n\n        if (firstElement) {\n          newSelected = firstElement;\n        }\n      }\n\n      this.__selected = newSelected;\n      this.fireDataEvent(\"changeSelected\", newSelected, oldSelected);\n    },\n\n    /**\n     * Checks if passed element is a child element.\n     *\n     * @param item {qx.ui.core.Widget} Element to check if child element.\n     * @return {Boolean} <code>true</code> if element is child element,\n     *    <code>false</code> otherwise.\n     */\n    __isChildElement : function(item)\n    {\n      var items = this.__selectionProvider.getItems();\n\n      for (var i = 0; i < items.length; i++)\n      {\n        if (items[i] === item)\n        {\n          return true;\n        }\n      }\n      return false;\n    }\n  },\n\n\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n  destruct : function() {\n    if (this.__selectionProvider.toHashCode) {\n      this._disposeObjects(\"__selectionProvider\");\n    } else {\n      this.__selectionProvider = null;\n    }\n\n    this._disposeObjects(\"__selected\");\n  }\n});\n"
  ]
}