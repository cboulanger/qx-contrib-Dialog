{
  "className": "qx.ui.core.queue.Layout",
  "packageName": "qx.ui.core.queue",
  "name": "Layout",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 280,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The layout queue manages all widgets, which need a recalculation of their\nlayout. The {@link #flush} method computes the layout of all queued widgets\nand their dependent widgets."
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__queue": {
      "location": {
        "start": {
          "line": 30,
          "column": 4
        },
        "end": {
          "line": 30,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} This contains all the queued widgets for the next flush."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__nesting": {
      "location": {
        "start": {
          "line": 34,
          "column": 4
        },
        "end": {
          "line": 34,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Nesting level cache *"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "remove": {
      "location": {
        "start": {
          "line": 43,
          "column": 4
        },
        "end": {
          "line": 45,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Clears the widget from the internal queue. Normally only used\nduring interims disposes of one or a few widgets."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to clear",
            "paramName": "widget",
            "description": " The widget to clear",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "add": {
      "location": {
        "start": {
          "line": 56,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mark a widget's layout as invalid and add its layout root to\nthe queue.\n\nShould only be used by {@link qx.ui.core.Widget}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to add.",
            "paramName": "widget",
            "description": " Widget to add.",
            "type": "qx.ui.core.Widget"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isScheduled": {
      "location": {
        "start": {
          "line": 70,
          "column": 4
        },
        "end": {
          "line": 72,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check whether the queue has scheduled changes for a widget.\nNote that the layout parent can have changes scheduled that\naffect the children widgets."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} Widget to check.",
            "paramName": "widget",
            "description": " Widget to check.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the widget given has layout changes queued.",
            "type": "Boolean",
            "description": " Whether the widget given has layout changes queued."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "flush": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Update the layout of all widgets, which layout is marked as invalid.\n\nThis is used exclusively by the {@link qx.ui.core.queue.Manager}."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getNestingLevel": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 154,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the widget's nesting level. Top level widgets have a nesting level\nof <code>0</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "widget {qx.ui.core.Widget} The widget to query.",
            "paramName": "widget",
            "description": " The widget to query.",
            "type": "qx.ui.core.Widget"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The nesting level",
            "type": "Integer",
            "description": " The nesting level"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__getLevelGroupedWidgets": {
      "location": {
        "start": {
          "line": 163,
          "column": 4
        },
        "end": {
          "line": 197,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Group widget by their nesting level."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map[]} A sparse array. Each entry of the array contains a widget\nmap with all widgets of the same level as the array index.",
            "type": "Map[]",
            "description": " A sparse array. Each entry of the array contains a widget\nmap with all widgets of the same level as the array index."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getSortedQueue": {
      "location": {
        "start": {
          "line": 210,
          "column": 4
        },
        "end": {
          "line": 278,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Compute all layout roots of the given widgets. Layout roots are either\nroot widgets or widgets, which preferred size has not changed by the\nlayout changes of its children.\n\nThis function returns the roots ordered by their nesting factors. The\nlayout with the largest nesting level comes first."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget[]} Ordered list or layout roots.",
            "type": "qx.ui.core.Widget[]",
            "description": " Ordered list or layout roots."
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "descendants": []
}