{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/core/queue/Appearance.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__queue",
    "__lookup",
    "remove",
    "widget",
    "$$hash",
    "lang",
    "Array",
    "add",
    "unshift",
    "ui",
    "core",
    "queue",
    "Manager",
    "scheduleFlush",
    "has",
    "flush",
    "Visibility",
    "obj",
    "i",
    "length",
    "splice",
    "isVisible",
    "syncAppearance",
    "$$stateChanges",
    "Appearance"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAuBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,6BAAhB,EACA;AACEC,aACA;AACE;AACAC,eAAU,EAFZ;;AAIE;AACAC,gBAAW,EALb;;AAQE;;;;;;AAMAC,cAAS,gBAASC,MAAT,EAAiB;AACzB,YAAI,KAAKF,QAAL,CAAcE,OAAOC,MAArB,CAAJ,EAAkC;AACjCX,aAAGY,IAAH,CAAQC,KAAR,CAAcJ,MAAd,CAAqB,KAAKF,OAA1B,EAAmCG,MAAnC;AACA,iBAAO,KAAKF,QAAL,CAAcE,OAAOC,MAArB,CAAP;AACA;AACD,OAnBH;;AAsBE;;;;;;;AAOAG,WAAM,aAASJ,MAAT,EACN;AACE,YAAI,KAAKF,QAAL,CAAcE,OAAOC,MAArB,CAAJ,EAAkC;AAChC;AACD;;AAED,aAAKJ,OAAL,CAAaQ,OAAb,CAAqBL,MAArB;AACA,aAAKF,QAAL,CAAcE,OAAOC,MAArB,IAA+BD,MAA/B;AACAV,WAAGgB,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiBC,OAAjB,CAAyBC,aAAzB,CAAuC,YAAvC;AACD,OAtCH;;AAyCE;;;;;;AAMAC,WAAM,aAASX,MAAT,EAAiB;AACrB,eAAO,CAAC,CAAC,KAAKF,QAAL,CAAcE,OAAOC,MAArB,CAAT;AACD,OAjDH;;AAoDE;;;;;AAKAW,aAAQ,iBACR;AACE,YAAIC,aAAavB,GAAGgB,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiBK,UAAlC;;AAEA,YAAIL,QAAQ,KAAKX,OAAjB;AACA,YAAIiB,GAAJ;;AAEA,aAAK,IAAIC,IAAIP,MAAMQ,MAAN,GAAe,CAA5B,EAA+BD,KAAK,CAApC,EAAuCA,GAAvC,EACA;AACE;AACAD,gBAAMN,MAAMO,CAAN,CAAN;AACAP,gBAAMS,MAAN,CAAaF,CAAb,EAAgB,CAAhB;AACA,iBAAO,KAAKjB,QAAL,CAAcgB,IAAIb,MAAlB,CAAP;;AAEA;AACA,cAAIY,WAAWK,SAAX,CAAqBJ,GAArB,CAAJ,EAA+B;AAC7BA,gBAAIK,cAAJ;AACD,WAFD,MAEO;AACLL,gBAAIM,cAAJ,GAAqB,IAArB;AACD;AACF;AACF;AA9EH;AAFF,GADA,C;AAvBA9B,KAAGgB,EAAH,CAAMC,IAAN,CAAWC,KAAX,CAAiBa,UAAjB,CAA4B5B,aAA5B,GAA4CA,aAA5C",
  "file": "Appearance.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The AppearanceQueue registers all widgets which are influences through\n * state changes.\n */\nqx.Class.define(\"qx.ui.core.queue.Appearance\",\n{\n  statics :\n  {\n    /** @type {Array} This contains all the queued widgets for the next flush. */\n    __queue : [],\n    \n    /** @type {Map} map of widgets by hash code which are in the queue */\n    __lookup : {},\n\n\n    /**\n     * Clears the widget from the internal queue. Normally only used\n     * during interims disposes of one or a few widgets.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to clear\n     */\n    remove : function(widget) {\n    \tif (this.__lookup[widget.$$hash]) {\n    \t\tqx.lang.Array.remove(this.__queue, widget);\n    \t\tdelete this.__lookup[widget.$$hash];\n    \t}\n    },\n\n\n    /**\n     * Adds a widget to the queue.\n     *\n     * Should only be used by {@link qx.ui.core.Widget}.\n     *\n     * @param widget {qx.ui.core.Widget} The widget to add.\n     */\n    add : function(widget)\n    {\n      if (this.__lookup[widget.$$hash]) {\n        return;\n      }\n\n      this.__queue.unshift(widget);\n      this.__lookup[widget.$$hash] = widget;\n      qx.ui.core.queue.Manager.scheduleFlush(\"appearance\");\n    },\n\n\n    /**\n     * Whether the given widget is already queued\n     *\n     * @param widget {qx.ui.core.Widget} The widget to check\n     * @return {Boolean} <code>true</code> if the widget is queued\n     */\n    has : function(widget) {\n      return !!this.__lookup[widget.$$hash];\n    },\n\n\n    /**\n     * Flushes the appearance queue.\n     *\n     * This is used exclusively by the {@link qx.ui.core.queue.Manager}.\n     */\n    flush : function()\n    {\n      var Visibility = qx.ui.core.queue.Visibility;\n\n      var queue = this.__queue;\n      var obj;\n\n      for (var i = queue.length - 1; i >= 0; i--)\n      {\n        // Order is important to allow the same widget to be re-queued directly\n        obj = queue[i];\n        queue.splice(i, 1);\n        delete this.__lookup[obj.$$hash]\n\n        // Only apply to currently visible widgets\n        if (Visibility.isVisible(obj)) {\n          obj.syncAppearance();\n        } else {\n          obj.$$stateChanges = true;\n        }\n      }\n    }\n  }\n});\n"
  ]
}