{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/mobile/layout/Abstract.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "events",
    "updateLayout",
    "members",
    "_widget",
    "__cachedProperties",
    "__cachedChildLayoutProperties",
    "_getCssClasses",
    "Error",
    "_getSupportedChildLayoutProperties",
    "_setLayoutProperty",
    "widget",
    "property",
    "value",
    "setLayoutProperties",
    "properties",
    "supportedChildLayoutProperties",
    "_addPropertyToChildLayoutCache",
    "connectToWidget",
    "removeCssClasses",
    "addCssClasses",
    "reset",
    "set",
    "connectToChildWidget",
    "disconnectFromChildWidget",
    "action",
    "fireDataEvent",
    "_addCachedProperty",
    "_getChildLayoutPropertyValue",
    "cache",
    "__getChildLayoutPropertyCache",
    "hash",
    "toHashCode",
    "destruct",
    "ui",
    "mobile",
    "layout",
    "Abstract"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAyBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,8BAAhB,EACA;AACEC,YAASN,GAAGO,IAAH,CAAQC,MADnB;AAEEC,UAAO,UAFT;;AAKC;;;;;;AAMCC,YACA;AACE;AACAC,oBAAe;AAFjB,KAZF;;AAmBC;;;;;;AAMCC,aACA;AACEC,eAAU,IADZ;AAEEC,0BAAqB,IAFvB;AAGEC,qCAAgC,IAHlC;;AAME;;;;;AAKAC,sBAAgB,0BAChB;AAC2C;AACvC,gBAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF,OAhBH;;AAmBE;;;;;;AAMAC,0CAAqC,8CACrC;AACE,eAAO,IAAP;AACD,OA5BH;;AA+BE;;;;;;;;AAQAC,0BAAqB,4BAASC,MAAT,EAAiBC,QAAjB,EAA2BC,KAA3B,EACrB;AAC2C;AACvC,gBAAM,IAAIL,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF,OA5CH;;AA+CE;;;;;;AAMAM,2BAAsB,6BAASH,MAAT,EAAiBI,UAAjB,EACtB;AACE,YAAIA,cAAc,IAAlB,EAAwB;AACtB;AACD;;AAED,YAAIC,iCAAiC,KAAKP,kCAAL,EAArC;AACA,YAAI,CAACO,8BAAL,EAAqC;AACnC;AACD;;AAED,aAAK,IAAIJ,QAAT,IAAqBG,UAArB,EAAiC;AAC/B,cAAI,CAACC,+BAA+BJ,QAA/B,CAAL,EAA+C;AAC7C,kBAAM,IAAIJ,KAAJ,CAAU,qCAAqCI,QAArC,GAAgD,WAA1D,CAAN;AACD;AACD,cAAIC,QAAQE,WAAWH,QAAX,CAAZ;AACA,eAAKF,kBAAL,CAAwBC,MAAxB,EAAgCC,QAAhC,EAA0CC,KAA1C;AACA,eAAKI,8BAAL,CAAoCN,MAApC,EAA6CC,QAA7C,EAAuDC,KAAvD;AACD;AACF,OAxEH;;AA2EE;;;;;AAKAK,uBAAkB,yBAASP,MAAT,EAClB;AACE,YAAI,KAAKP,OAAT,EAAkB;AAChB,eAAKA,OAAL,CAAae,gBAAb,CAA8B,KAAKZ,cAAL,EAA9B;AACD;;AAED,aAAKH,OAAL,GAAeO,MAAf;AACA,YAAIA,MAAJ,EACA;AACEA,iBAAOS,aAAP,CAAqB,KAAKb,cAAL,EAArB;AACA,cAAI,KAAKF,kBAAT,EAA6B;AAC3B,iBAAK,IAAIO,QAAT,IAAqB,KAAKP,kBAA1B,EACA;AACE,mBAAKgB,KAAL,CAAWT,QAAX;AACA,mBAAKU,GAAL,CAASV,QAAT,EAAmB,KAAKP,kBAAL,CAAwBO,QAAxB,CAAnB;AACD;AACF;AACF,SAVD,MAUO;AACL,eAAKP,kBAAL,GAA0B,IAA1B;AACD;AACF,OApGH;;AAwGE;;;;;;AAMAkB,4BAAuB,8BAASZ,MAAT,EACvB,CAEC,CAjHH;;AAoHE;;;;;;AAMAa,iCAA4B,mCAASb,MAAT,EAC5B,CAEC,CA7HH;;AAgIE;;;;;;;AAOAT,oBAAe,sBAASS,MAAT,EAAiBc,MAAjB,EAAyBV,UAAzB,EAAqC;AAClD,aAAKW,aAAL,CAAmB,cAAnB,EAAmC;AACjCf,kBAASA,MADwB;AAEjCc,kBAASA,MAFwB;AAGjCV,sBAAaA;AAHoB,SAAnC;AAKD,OA7IH;;AAgJE;;;;;;;AAOAY,0BAAqB,4BAASf,QAAT,EAAmBC,KAAnB,EACrB;AACE,YAAI,CAAC,KAAKR,kBAAV,EAA8B;AAC5B,eAAKA,kBAAL,GAA0B,EAA1B;AACD;AACD,aAAKA,kBAAL,CAAwBO,QAAxB,IAAoCC,KAApC;AACD,OA7JH;;AAgKE;;;;;;;AAOAe,oCAA+B,sCAASjB,MAAT,EAAiBC,QAAjB,EAC/B;AACE,YAAIiB,QAAQ,KAAKC,6BAAL,CAAmCnB,MAAnC,CAAZ;AACA,eAAOkB,MAAMjB,QAAN,CAAP;AACD,OA3KH;;AA8KE;;;;;;;;AAQAK,sCAAiC,wCAASN,MAAT,EAAiBC,QAAjB,EAA2BC,KAA3B,EACjC;AACE,YAAIgB,QAAQ,KAAKC,6BAAL,CAAmCnB,MAAnC,CAAZ;AACA,YAAIE,SAAS,IAAb,EAAmB;AACjB,iBAAOgB,MAAMjB,QAAN,CAAP;AACD,SAFD,MAEO;AACLiB,gBAAMjB,QAAN,IAAkBC,KAAlB;AACD;AACF,OA9LH;;AAkME;;;;;;;AAOAiB,qCAAgC,uCAASnB,MAAT,EAChC;AACE,YAAI,CAAC,KAAKL,6BAAV,EAAyC;AACvC,eAAKA,6BAAL,GAAqC,EAArC;AACD;;AAED,YAAIuB,QAAQ,KAAKvB,6BAAjB;AACA,YAAIyB,OAAOpB,OAAOqB,UAAP,EAAX;AACA,YAAI,CAACH,MAAME,IAAN,CAAL,EAAkB;AAChBF,gBAAME,IAAN,IAAc,EAAd;AACD;AACD,eAAOF,MAAME,IAAN,CAAP;AACD;AArNH,KA1BF;;AAqPC;;;;;;AAMCE,cAAW,oBAAW;AACpB,WAAK7B,OAAL,GAAe,IAAf;AACD;AA7PH,GADA,C;AAzBAb,KAAG2C,EAAH,CAAMC,MAAN,CAAaC,MAAb,CAAoBC,QAApB,CAA6B3C,aAA7B,GAA6CA,aAA7C",
  "file": "Abstract.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * Base class for all layout managers.\n *\n * Custom layout managers must derive from\n * this class and implement the methods {@link #_getCssClasses},\n * {@link #_getSupportedChildLayoutProperties} and {@link #_setLayoutProperty}.\n */\nqx.Class.define(\"qx.ui.mobile.layout.Abstract\",\n{\n  extend : qx.core.Object,\n  type : \"abstract\",\n\n\n /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** Fired when the layout is updated. Data contains the \"widget\", \"action\", \"properties\" */\n    updateLayout : \"qx.event.type.Data\"\n  },\n\n\n\n /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members:\n  {\n    _widget : null,\n    __cachedProperties : null,\n    __cachedChildLayoutProperties : null,\n\n\n    /**\n     * Returns the css classes in an array that the layout is using.\n     *\n     * @return {Array} The css classes that the layout is using\n     */\n    _getCssClasses: function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        throw new Error(\"Abstract method call\");\n      }\n    },\n\n\n    /**\n     * Returns the supported child layout properties. Needed to validate\n     * the incoming layout properties. Override this function in your implementation.\n     *\n     * @return {Map} The supported child layout properties, e.g. <code>{\"property\":1}</code>\n     */\n    _getSupportedChildLayoutProperties : function()\n    {\n      return null;\n    },\n\n\n    /**\n     * Abstracts method. Override this in your implementation.\n     * The function is called for all given layout properties once.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The target widget\n     * @param property {String?null} Optional. The layout property to set.\n     * @param value {var?} Optional. The value of the layout property.\n     */\n    _setLayoutProperty : function(widget, property, value)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        throw new Error(\"Abstract method call\");\n      }\n    },\n\n\n    /**\n     * Sets the given layout properties to a widget.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The target widget\n     * @param properties {Map} The layout properties to set. Key / value pairs.\n     */\n    setLayoutProperties : function(widget, properties)\n    {\n      if (properties == null) {\n        return;\n      }\n\n      var supportedChildLayoutProperties = this._getSupportedChildLayoutProperties();\n      if (!supportedChildLayoutProperties) {\n        return;\n      }\n\n      for (var property in properties) {\n        if (!supportedChildLayoutProperties[property]) {\n          throw new Error(\"The layout does not support the \" + property + \" property\");\n        }\n        var value = properties[property];\n        this._setLayoutProperty(widget, property, value);\n        this._addPropertyToChildLayoutCache(widget,  property, value);\n      }\n    },\n\n\n    /**\n     * This method is called by the widget to connect the widget with the layout.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The widget to connect to\n     */\n    connectToWidget : function(widget)\n    {\n      if (this._widget) {\n        this._widget.removeCssClasses(this._getCssClasses());\n      }\n\n      this._widget = widget;\n      if (widget)\n      {\n        widget.addCssClasses(this._getCssClasses());\n        if (this.__cachedProperties) {\n          for (var property in this.__cachedProperties)\n          {\n            this.reset(property);\n            this.set(property, this.__cachedProperties[property]);\n          }\n        }\n      } else {\n        this.__cachedProperties = null;\n      }\n    },\n\n\n\n    /**\n     * Connects the layout to a given child widget. Can be overridden in a concrete\n     * interface implementation.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The widget to connect to\n     */\n    connectToChildWidget : function(widget)\n    {\n\n    },\n\n\n    /**\n     * Disconnects the layout from a given child widget. Can be overridden in a concrete\n     * interface implementation.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The widget to connect to\n     */\n    disconnectFromChildWidget : function(widget)\n    {\n\n    },\n\n\n    /**\n     * Updates the layout. Method is called by a widget, when it changes its state.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The target widget\n     * @param action {String} The causing action that triggered the layout update.\n     * @param properties {Map} The animation properties to set. Key / value pairs.\n     */\n    updateLayout : function(widget, action, properties) {\n      this.fireDataEvent(\"updateLayout\", {\n        widget : widget,\n        action : action,\n        properties : properties\n      });\n    },\n\n\n    /**\n     * Adds a property to the cache. Needed when the layout is not yet\n     * connected with the widget.\n     *\n     * @param property {String} The property to add\n     * @param value {var} The value of the property to add\n     */\n    _addCachedProperty : function(property, value)\n    {\n      if (!this.__cachedProperties) {\n        this.__cachedProperties = {};\n      }\n      this.__cachedProperties[property] = value;\n    },\n\n\n    /**\n     * Returns a child layout property value.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The target widget\n     * @param property {String} The property to retrieve the value from\n     * @return {var} The value of the given property\n     */\n    _getChildLayoutPropertyValue : function(widget, property)\n    {\n      var cache = this.__getChildLayoutPropertyCache(widget);\n      return cache[property];\n    },\n\n\n    /**\n     * Adds a child layout property to the cache. When the value is\n     * <code>null</code> the property will be deleted from the cache.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The target widget\n     * @param property {String} The property to add\n     * @param value {var} The value of the property to add\n     */\n    _addPropertyToChildLayoutCache : function(widget, property, value)\n    {\n      var cache = this.__getChildLayoutPropertyCache(widget);\n      if (value == null) {\n        delete cache[property];\n      } else {\n        cache[property] = value;\n      }\n    },\n\n\n\n    /**\n     * Returns the child layout property cache.\n     *\n     * @param widget {qx.ui.mobile.core.Widget} The target widget\n     * @return {Map} The child layout property cache for the given widget.\n     *     Key / value pairs.\n     */\n    __getChildLayoutPropertyCache : function(widget)\n    {\n      if (!this.__cachedChildLayoutProperties) {\n        this.__cachedChildLayoutProperties = {};\n      }\n\n      var cache = this.__cachedChildLayoutProperties;\n      var hash = widget.toHashCode();\n      if (!cache[hash]) {\n        cache[hash] = {};\n      }\n      return cache[hash];\n    }\n  },\n\n\n\n\n /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this._widget = null;\n  }\n});\n"
  ]
}