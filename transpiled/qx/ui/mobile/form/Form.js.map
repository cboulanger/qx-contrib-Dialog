{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/mobile/form/Form.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "form",
    "Form",
    "construct",
    "__invalidItems",
    "members",
    "__renderer",
    "setRenderer",
    "renderer",
    "validate",
    "validateResult",
    "resetForm",
    "groups",
    "getGroups",
    "i",
    "length",
    "group",
    "j",
    "items",
    "item",
    "isValid",
    "push",
    "showErrorForItem",
    "alert",
    "getInvalidMessage",
    "_domUpdated",
    "showRow",
    "groupIndex",
    "rowIndex",
    "_getItemByIndex",
    "showItem",
    "hideRow",
    "hideItem",
    "reset",
    "getInvalidItems",
    "mobile"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAoCAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,wBAAhB,EACA;AACEC,YAASN,GAAGO,EAAH,CAAMC,IAAN,CAAWC,IADtB;;AAGE;;;;;;AAMAC,eAAY,qBACZ;AACE;AACA,WAAKC,cAAL,GAAsB,EAAtB;AACD,KAbH;;AAeEC,aACA;AACE;;;AAGAC,kBAAa,IAJf;;AAOE;;;AAGAF,sBAAiB,IAVnB;;AAaE;;;;AAIAG,mBAAc,qBAASC,QAAT,EACd;AACE,aAAKF,UAAL,GAAkBE,QAAlB;AACD,OApBH;;AAuBE;;;;;;;AAOAC,gBAAW,oBACX;AACE,YAAIC,0EAAJ;;AAEA,aAAKN,cAAL,GAAsB,EAAtB;;AAEA,YAAG,KAAKE,UAAL,IAAmB,IAAtB,EAA4B;AAC1B,eAAKA,UAAL,CAAgBK,SAAhB;AACD;AACD,YAAIC,SAAS,KAAKC,SAAL,EAAb;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,OAAOG,MAA3B,EAAmCD,GAAnC,EACA;AACE,cAAIE,QAAQJ,OAAOE,CAAP,CAAZ;AACA,eAAI,IAAIG,IAAE,CAAV,EAAaA,IAAID,MAAME,KAAN,CAAYH,MAA7B,EAAqCE,GAArC,EACA;AACE,gBAAIE,OAAOH,MAAME,KAAN,CAAYD,CAAZ,CAAX;AACA,gBAAG,CAACE,KAAKC,OAAL,EAAJ,EACA;AACE,mBAAKhB,cAAL,CAAoBiB,IAApB,CAAyBF,IAAzB;;AAEA,kBAAG,KAAKb,UAAL,IAAmB,IAAtB,EACA;AACE,qBAAKA,UAAL,CAAgBgB,gBAAhB,CAAiCH,IAAjC;AACD,eAHD,MAKA;AACEI,sBAAM,WAASJ,KAAKK,iBAAL,EAAf;AACD;AACF;AACF;AACF;;AAED,YAAG,KAAKlB,UAAL,IAAmB,IAAtB,EAA4B;AAC1B,eAAKA,UAAL,CAAgBmB,WAAhB;AACD;;AAED,eAAOf,cAAP;AACD,OAnEH;;AAsEE;;;;;AAKAgB,eAAU,iBAASC,UAAT,EAAoBC,QAApB,EAA8B;AACtC,YAAIT,OAAO,KAAKU,eAAL,CAAqBF,UAArB,EAAiCC,QAAjC,CAAX;AACA,YAAGT,IAAH,EAAS;AACP,eAAKb,UAAL,CAAgBwB,QAAhB,CAAyBX,IAAzB;AACD;AACF,OAhFH;;AAmFE;;;;;AAKAY,eAAU,iBAASJ,UAAT,EAAqBC,QAArB,EAA+B;AACvC,YAAIT,OAAO,KAAKU,eAAL,CAAqBF,UAArB,EAAiCC,QAAjC,CAAX;AACA,YAAGT,IAAH,EAAS;AACP,eAAKb,UAAL,CAAgB0B,QAAhB,CAAyBb,IAAzB;AACD;AACF,OA7FH;;AAgGE;;;;;;AAMAU,uBAAkB,yBAASF,UAAT,EAAqBC,QAArB,EAA+B;AAC/C,YAAIhB,SAAS,KAAKC,SAAL,EAAb;AACA,YAAIG,QAAQJ,OAAOe,UAAP,CAAZ;AACA,YAAGX,KAAH,EAAU;AACR,cAAIG,OAAOH,MAAME,KAAN,CAAYU,QAAZ,CAAX;AACA,iBAAOT,IAAP;AACD;;AAED,eAAO,IAAP;AACD,OA/GH;;AAkHE;AACAc,aAAQ,iBAAW;AACjB;AACA,aAAK3B,UAAL,CAAgBK,SAAhB;AACD,OAtHH;;AAyHE;;;;;AAKAuB,uBAAkB,2BAAW;AAC3B,eAAO,KAAK9B,cAAZ;AACD;AAhIH;;AAhBF,GADA,C;AApCAX,KAAGO,EAAH,CAAMmC,MAAN,CAAalC,IAAb,CAAkBC,IAAlB,CAAuBN,aAAvB,GAAuCA,aAAvC",
  "file": "Form.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n************************************************************************ */\n\n/**\n * Representation of a form. A form widget can contain one or more {@link Row} widgets.\n *\n * *Example*\n *\n * Here is an example of how to use the widget.\n *\n * <pre class='javascript'>\n *   var title = new qx.ui.mobile.form.Title(\"Group\");\n *   var form = new qx.ui.mobile.form.Form();\n *   form.add(new qx.ui.mobile.form.TextField(), \"Username: \");\n *\n *   this.getRoot().add(title);\n *   this.getRoot().add(new qx.ui.mobile.form.renderer.Single(form));\n * </pre>\n *\n * This example creates a form and adds a row with a text field in it.\n */\nqx.Class.define(\"qx.ui.mobile.form.Form\",\n{\n  extend : qx.ui.form.Form,\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n    this.__invalidItems = [];\n  },\n\n  members :\n  {\n    /**\n     * the renderer this form uses to be displayed\n     */\n    __renderer : null,\n\n\n    /**\n     * Contains all invalid items.\n     */\n    __invalidItems : null,\n\n\n    /**\n     * Setter for the renderer private variable\n     * @param renderer {qx.ui.mobile.form.renderer.AbstractRenderer} the renderer\n     */\n    setRenderer : function(renderer)\n    {\n      this.__renderer = renderer;\n    },\n\n\n    /**\n     * Validates the form using the\n     * {@link qx.ui.form.validation.Manager#validate} method.\n     * @lint ignoreDeprecated(alert)\n     *\n     * @return {Boolean | null} The validation result.\n     */\n    validate : function()\n    {\n      var validateResult = this.base(arguments);\n\n      this.__invalidItems = [];\n\n      if(this.__renderer != null) {\n        this.__renderer.resetForm();\n      }\n      var groups = this.getGroups();\n      for (var i = 0; i < groups.length; i++)\n      {\n        var group = groups[i];\n        for(var j=0; j < group.items.length; j++)\n        {\n          var item = group.items[j];\n          if(!item.isValid())\n          {\n            this.__invalidItems.push(item);\n\n            if(this.__renderer != null)\n            {\n              this.__renderer.showErrorForItem(item);\n            }\n            else\n            {\n              alert('error '+item.getInvalidMessage());\n            }\n          }\n        }\n      }\n\n      if(this.__renderer != null) {\n        this.__renderer._domUpdated();\n      }\n\n      return validateResult;\n    },\n\n\n    /**\n     * Makes a row visible, identified by its group and row index.\n     * @param groupIndex {Integer} the index of the group to which the row belongs to\n     * @param rowIndex {Integer} the index of the row inside the target group\n     */\n    showRow : function(groupIndex,rowIndex) {\n      var item = this._getItemByIndex(groupIndex, rowIndex);\n      if(item) {\n        this.__renderer.showItem(item);\n      }\n    },\n\n\n    /**\n     * Makes a row invisible, identified by its group and row index.\n     * @param groupIndex {Integer} the index of the group to which the row belongs to\n     * @param rowIndex {Integer} the index of the row inside the target group\n     */\n    hideRow : function(groupIndex, rowIndex) {\n      var item = this._getItemByIndex(groupIndex, rowIndex);\n      if(item) {\n        this.__renderer.hideItem(item);\n      }\n    },\n\n\n    /**\n     * Gets the item with the given group and rowIndex.\n     * @param groupIndex {Integer} the index of the group to which the row belongs to\n     * @param rowIndex {Integer} the index of the row inside the target group\n     * @return {qx.ui.form.IForm | null} The validation result.\n     */\n    _getItemByIndex : function(groupIndex, rowIndex) {\n      var groups = this.getGroups();\n      var group = groups[groupIndex];\n      if(group) {\n        var item = group.items[rowIndex];\n        return item;\n      }\n\n      return null;\n    },\n\n\n    // overridden\n    reset : function() {\n      this.base(arguments);\n      this.__renderer.resetForm();\n    },\n\n\n    /**\n    * Returns the invalid items of the form, which were determined by {@link qx.ui.mobile.form.Form#validate} before.\n    * It returns an empty array if no items are invalid.\n    * @return {qx.ui.mobile.core.Widget[]} The invalid items of the form.\n    */\n    getInvalidItems : function() {\n      return this.__invalidItems;\n    }\n  }\n\n});\n"
  ]
}