{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/mobile/form/Label.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "mobile",
    "core",
    "Widget",
    "construct",
    "value",
    "setValue",
    "addCssClass",
    "_setLayout",
    "layout",
    "HBox",
    "set",
    "initWrap",
    "locale",
    "Manager",
    "getInstance",
    "addListener",
    "_onChangeLocale",
    "_onTap",
    "properties",
    "defaultCssClass",
    "refine",
    "init",
    "nullable",
    "apply",
    "event",
    "anonymous",
    "wrap",
    "check",
    "members",
    "__forWidget",
    "_getTagName",
    "_applyValue",
    "old",
    "html",
    "Environment",
    "get",
    "_setHtml",
    "_applyWrap",
    "removeCssClass",
    "_changeEnabled",
    "evt",
    "setEnabled",
    "getData",
    "setLabelFor",
    "elementId",
    "removeListener",
    "getWidgetById",
    "getEnabled",
    "_setAttribute",
    "target",
    "getContentElement",
    "Registration",
    "fireEvent",
    "type",
    "Tap",
    "getNativeEvent",
    "e",
    "content",
    "getValue",
    "translate",
    "destruct",
    "form",
    "Label"
  ],
  "mappings": "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",
  "file": "Label.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christopher Zuendorf (czuendorf)\n\n************************************************************************ */\n\n/**\n * The label widget displays a text or HTML content in form context.\n *\n * It uses the html tag <label>, for making it possible to set the\n * \"for\" attribute.\n *\n * The \"for\" attribute specifies which form element a label is bound to.\n * A tap on the label is forwarded to the bound element.\n *\n * *Example*\n *\n * Here is a little example of how to use the widget.\n *\n * <pre class='javascript'>\n *   var checkBox = new qx.ui.mobile.form.CheckBox();\n *   var label = new qx.ui.mobile.form.Label(\"Label for CheckBox\");\n *\n *   label.setLabelFor(checkBox.getId());\n *\n *   this.getRoot().add(label);\n *   this.getRoot().add(checkBox);\n * </pre>\n *\n * This example create a widget to display the label.\n *\n */\nqx.Class.define(\"qx.ui.mobile.form.Label\",\n{\n  extend : qx.ui.mobile.core.Widget,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param value {String?null} Text or HTML content to display\n   */\n  construct : function(value)\n  {\n    this.base(arguments);\n    if (value) {\n      this.setValue(value);\n    }\n\n    this.addCssClass(\"gap\");\n    this._setLayout(new qx.ui.mobile.layout.HBox().set({\n      \"alignY\": \"middle\",\n      \"alignX\": \"left\"\n    }));\n    this.initWrap();\n\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().addListener(\"changeLocale\", this._onChangeLocale, this);\n    }\n\n    this.addListener(\"tap\", this._onTap, this);\n  },\n\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    // overridden\n    defaultCssClass :\n    {\n      refine : true,\n      init : \"label\"\n    },\n\n\n    /**\n     * Text or HTML content to display\n     */\n    value :\n    {\n      nullable : true,\n      init : null,\n      apply : \"_applyValue\",\n      event : \"changeValue\"\n    },\n\n\n    // overridden\n    anonymous :\n    {\n      refine : true,\n      init : false\n    },\n\n\n    /**\n     * Controls whether text wrap is activated or not.\n     */\n    wrap :\n    {\n      check : \"Boolean\",\n      init : true,\n      apply : \"_applyWrap\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __forWidget : null,\n\n\n     // overridden\n    _getTagName : function()\n    {\n      return \"label\";\n    },\n\n\n    // property apply\n    _applyValue : function(value, old)\n    {\n      var html = value;\n\n      // [BUG #7871] Bugfix for IE 10 for enabling word-wrap within a flexbox layout.\n      if (qx.core.Environment.get(\"css.flexboxSyntax\") === \"flexbox\") {\n        html = \"<p>\" + value + \"</p>\";\n      }\n      this._setHtml(html);\n    },\n\n\n    // property apply\n    _applyWrap : function(value, old)\n    {\n      if (value) {\n        this.removeCssClass(\"no-wrap\");\n      } else {\n        this.addCssClass(\"no-wrap\");\n      }\n    },\n\n\n    /**\n    * Event handler for the <code>changeEnabled</code> event on the target.\n    * @param evt {qx.event.type.Data} the changeEnabled event.\n    */\n    _changeEnabled: function(evt) {\n      if (evt) {\n        this.setEnabled(evt.getData());\n      }\n    },\n\n\n    /**\n     * Setter for the \"for\" attribute of this label.\n     * The \"for\" attribute specifies which form element a label is bound to.\n     *\n     * @param elementId {String} The id of the element the label is bound to.\n     *\n     */\n    setLabelFor: function(elementId) {\n      if (this.__forWidget) {\n        this.__forWidget.removeListener(\"changeEnabled\", this._changeEnabled, this);\n      }\n\n      this.__forWidget = qx.ui.mobile.core.Widget.getWidgetById(elementId);\n\n      if (this.__forWidget) {\n        this.__forWidget.addListener(\"changeEnabled\", this._changeEnabled, this);\n        this.setEnabled(this.__forWidget.getEnabled());\n      }\n\n      this._setAttribute(\"for\", elementId);\n    },\n\n\n    /**\n     * Handler for <code>tap</code> event on the Label. This event will be delegated to target widget.\n     * @param evt {qx.event.type.Pointer} The tap event.\n     */\n    _onTap: function(evt) {\n      if (this.__forWidget && qx.core.Environment.get(\"event.dispatchevent\")) {\n        var target = this.__forWidget.getContentElement();\n        qx.event.Registration.fireEvent(\n          target,\n          \"tap\",\n          qx.event.type.Tap, [evt.getNativeEvent(), target, null, true, true]\n        );\n      }\n    },\n\n\n    /**\n     * Locale change event handler\n     *\n     * @signature function(e)\n     * @param e {Event} the change event\n     */\n    _onChangeLocale : qx.core.Environment.select(\"qx.dynlocale\",\n    {\n      \"true\" : function(e)\n      {\n        var content = this.getValue();\n        if (content && content.translate) {\n          this.setValue(content.translate());\n        }\n      },\n\n      \"false\" : null\n    })\n  },\n\n\n  destruct : function() {\n    this.removeListener(\"tap\", this._onTap, this);\n\n    if (this.__forWidget) {\n      this.__forWidget.removeListener(\"changeEnabled\", this._changeEnabled, this);\n      this.__forWidget = null;\n    }\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeListener(\"changeLocale\", this._onChangeLocale, this);\n    }\n  }\n});\n"
  ]
}