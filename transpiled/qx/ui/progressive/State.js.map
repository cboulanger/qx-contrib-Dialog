{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/ui/progressive/State.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "initialState",
    "setProgressive",
    "progressive",
    "setModel",
    "model",
    "setPane",
    "pane",
    "setBatchSize",
    "batchSize",
    "setRendererData",
    "rendererData",
    "setUserData",
    "userData",
    "properties",
    "nullable",
    "destruct",
    "ui",
    "State"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAqBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,yBAAhB,EACA;AACEC,YAAaN,GAAGO,IAAH,CAAQC,MADvB;;AAIE;;;;;;;;;;;;;;;;;;AAkBAC,eAAY,mBAASC,YAAT,EACZ;AACE;;AAEA,WAAKC,cAAL,CAAoBD,aAAaE,WAAjC;AACA,WAAKC,QAAL,CAAcH,aAAaI,KAA3B;AACA,WAAKC,OAAL,CAAaL,aAAaM,IAA1B;AACA,WAAKC,YAAL,CAAkBP,aAAaQ,SAA/B;AACA,WAAKC,eAAL,CAAqBT,aAAaU,YAAlC;AACA,WAAKC,WAAL,CAAiBX,aAAaY,QAA9B;AACD,KAhCH;;AAmCEC,gBACA;AACE;;;;AAIAX,mBAAiB,EAAEY,UAAW,IAAb,EALnB;;AAOE;;;;AAIAV,aAAiB,EAAEU,UAAW,IAAb,EAXnB;;AAaE;;;;AAIAR,YAAiB,EAAEQ,UAAW,IAAb,EAjBnB;;AAmBE;;;;AAIAN,iBAAiB,EAvBnB;;AAyBE;;;;;;;;;;;;;AAaAE,oBAAiB,EAtCnB;;AAwCE;;;;;;;;;AASAE,gBAAiB;AAjDnB,KApCF;;AAyFEG,cAAW,oBACX;AACE;AACA,WAAKd,cAAL,CAAoB,IAApB;AACA,WAAKE,QAAL,CAAc,IAAd;AACA,WAAKE,OAAL,CAAa,IAAb;AACD;AA/FH,GADA,C;AArBAf,KAAG0B,EAAH,CAAMd,WAAN,CAAkBe,KAAlB,CAAwBxB,aAAxB,GAAwCA,aAAxC",
  "file": "State.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2008 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman (derrell)\n\n************************************************************************ */\n\n/**\n * State of rendering by Progressive.\n */\nqx.Class.define(\"qx.ui.progressive.State\",\n{\n  extend     : qx.core.Object,\n\n\n  /**\n   * @param initialState {Map}\n   *   Map containing these members:\n   *   <dl>\n   *     <dt>progressive</dt>\n   *       <dd>see {@link #progressive}</dd>\n   *     <dt>model</dt>\n   *       <dd>see {@link #model}</dd>\n   *     <dt>pane</dt>\n   *       <dd>see {@link #pane}</dd>\n   *     <dt>batchSize</dt>\n   *       <dd>see {@link #batchSize}</dd>\n   *     <dt>rendererData</dt>\n   *       <dd>see {@link #rendererData}</dd>\n   *     <dt>userData</dt>\n   *       <dd>see {@link #userData}</dd>\n   *   </dl>\n   */\n  construct : function(initialState)\n  {\n    this.base(arguments);\n\n    this.setProgressive(initialState.progressive);\n    this.setModel(initialState.model);\n    this.setPane(initialState.pane);\n    this.setBatchSize(initialState.batchSize);\n    this.setRendererData(initialState.rendererData);\n    this.setUserData(initialState.userData);\n  },\n\n\n  properties :\n  {\n    /**\n     * The {@link qx.ui.progressive.Progressive} with which this {@link\n     * State} is associated. This property should be treated as read-only.\n     */\n    progressive    : { nullable : true },\n\n    /**\n     * The data model being used. This property should be treated as\n     * read-only.\n     */\n    model          : { nullable : true },\n\n    /**\n     * The widget in which the element data should be rendered.  This property\n     * should be treated as read-only.\n     */\n    pane           : { nullable : true },\n\n    /**\n     * How many elements are rendered at a time, before yielding to the\n     * browser.  This property should be treated as read-only.\n     */\n    batchSize      : { },\n\n    /**\n     * Add a place for renderers' private data.  If multiple renderers are\n     * being used, each renderer should place its own private data in the the\n     * state object area reserved for that renderer's use:\n     * state.getRendererData()[element.renderer].  This property should be\n     * accessed only by renderers, and all elements of the array other than a\n     * renderer's own element should be treated as read-only.\n     *\n     * IMPORTANT NOTE:  It is the renderer's responsibility to clean up its\n     *                  own mess.  If the renderer places data here, it should\n     *                  also add an event listener for \"renderEnd\" so that it\n     *                  can clean up.\n     */\n    rendererData   : { },\n\n    /**\n     * User data.  This is useful, for example, by communication between\n     * the renderStart event listener and the renderers.\n     *\n     * IMPORTANT NOTE:  It is the user's responsibility to clean up his\n     *                  own mess.  If you place data here, you should\n     *                  also add an event listener for \"renderEnd\" to\n     *                  dispose any objects you placed here.\n     */\n    userData       : { }\n  },\n\n\n  destruct : function()\n  {\n    // Remove references to other objects\n    this.setProgressive(null);\n    this.setModel(null);\n    this.setPane(null);\n  }\n});\n"
  ]
}