{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/data/store/Rest.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "resource",
    "actionName",
    "delegate",
    "setResource",
    "setActionName",
    "e",
    "dispose",
    "_delegate",
    "_marshaler",
    "data",
    "marshal",
    "Json",
    "lang",
    "Type",
    "isFunction",
    "configureRequest",
    "__configureRequest",
    "__onActionSuccessBound",
    "Function",
    "bind",
    "__onActionSuccess",
    "__addListeners",
    "properties",
    "check",
    "model",
    "nullable",
    "event",
    "members",
    "getResource",
    "getActionName",
    "addListener",
    "getData",
    "marshaler",
    "oldModel",
    "getModel",
    "manipulateData",
    "toClass",
    "toModel",
    "setModel",
    "destruct",
    "store",
    "Rest"
  ],
  "mappings": "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",
  "file": "Rest.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * Handles response associated to a resource's action. The model property is\n * populated with the marshaled response. Note the action is invoked on the\n * resource, not the store.\n */\nqx.Class.define(\"qx.data.store.Rest\",\n{\n  extend: qx.core.Object,\n\n  /**\n   * @param resource {qx.io.rest.Resource} The resource.\n   * @param actionName {String} The name of the resource's action to retrieve\n   *  the response from.\n   * @param delegate {Object?null} The delegate containing one of the methods\n   *  specified in {@link qx.data.store.IStoreDelegate}.\n   */\n  construct: function(resource, actionName, delegate)\n  {\n    this.base(arguments);\n\n    try {\n      this.setResource(resource);\n      this.setActionName(actionName);\n    } catch(e) {\n      this.dispose();\n      throw e;\n    }\n\n    this._delegate = delegate;\n    this._marshaler = new qx.data.marshal.Json(delegate);\n\n    if (delegate && qx.lang.Type.isFunction(delegate.configureRequest)) {\n      this.__configureRequest();\n    }\n\n    this.__onActionSuccessBound = qx.lang.Function.bind(this.__onActionSuccess, this);\n    this.__addListeners();\n  },\n\n  properties:\n  {\n    /**\n     * The resource.\n     */\n    resource: {\n      check: \"qx.io.rest.Resource\"\n    },\n\n    /**\n     * The name of the resource's action to retrieve the response from.\n     */\n    actionName: {\n      check: \"String\"\n    },\n\n    /**\n     * Populated with the marshaled response.\n     */\n    model: {\n      nullable: true,\n      event: \"changeModel\"\n    }\n  },\n\n  members:\n  {\n    _marshaler: null,\n    _delegate: null,\n\n    __onActionSuccessBound: null,\n\n    /**\n     * Configure the resource's request by processing the delegate.\n     */\n    __configureRequest: function() {\n      var resource = this.getResource(),\n          delegate = this._delegate;\n\n      // Overrides existing callback, if any\n      resource.configureRequest(delegate.configureRequest);\n    },\n\n    /**\n     * Listen to events fired by the resource.\n     */\n    __addListeners: function() {\n      var resource = this.getResource(),\n          actionName = this.getActionName();\n\n      if (resource && actionName) {\n        resource.addListener(this.getActionName() + \"Success\", this.__onActionSuccessBound);\n      }\n    },\n\n    /**\n     * Handle actionSuccess event.\n     *\n     * Updates model with marshaled response.\n     *\n     * @param e {qx.event.type.Rest} Rest event.\n     */\n    __onActionSuccess: function(e) {\n      var data = e.getData(),\n          marshaler = this._marshaler,\n          model,\n          oldModel = this.getModel(),\n          delegate = this._delegate;\n\n      // Skip if data is empty\n      if (data) {\n\n        // Manipulate received data\n        if (delegate && delegate.manipulateData) {\n          data = delegate.manipulateData(data);\n        }\n\n        // Create class suiting data and assign instance\n        // initialized with data to model property\n        marshaler.toClass(data, true);\n        model = marshaler.toModel(data);\n        if (model) {\n          this.setModel(model);\n        }\n      }\n\n      // Dispose instance marshaled before\n      if (oldModel && oldModel.dispose) {\n        oldModel.dispose();\n      }\n    }\n  },\n\n  destruct: function() {\n    var model = this.getModel();\n    if (model && typeof model.dispose === \"function\") {\n      model.dispose();\n    }\n\n    this._marshaler && this._marshaler.dispose();\n  }\n});\n"
  ]
}