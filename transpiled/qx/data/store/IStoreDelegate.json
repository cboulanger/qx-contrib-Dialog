{
  "className": "qx.data.store.IStoreDelegate",
  "packageName": "qx.data.store",
  "name": "IStoreDelegate",
  "superClass": "qx.data.marshal.IMarshalerDelegate",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 54,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nMartin Wittemann (martinwittemann)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Objects, which are used as delegates for a data binding store may\nimplement any of the methods described in this interface. The delegate does\nnot need implement all of the methods of this interface. If a method is not\nimplemented the store provides a default implementation.\n\nNote: This interface is meant to document the delegate but should not be\nlisted in the <code>implement</code> key of a class unless all methods are\nreally implemented."
        }
      ]
    }
  },
  "type": "interface",
  "members": {
    "manipulateData": {
      "location": {
        "start": {
          "line": 43,
          "column": 4
        },
        "end": {
          "line": 43,
          "column": 38
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method manipulates the data from the request and returns the\nmanipulated data."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {Object} The data received by the request.",
            "paramName": "data",
            "description": " The data received by the request.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The manipulated data.",
            "type": "Object",
            "description": " The manipulated data."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "configureRequest": {
      "location": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 52,
          "column": 43
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method can change the settings on the used request by the store."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "request {var} The created request, depending on the implementation\nof the data store.",
            "paramName": "request",
            "description": " The created request, depending on the implementation\nof the data store.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "ignore": {
      "type": "function",
      "name": "ignore",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.IMarshalerDelegate",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gives the possibility to ignore parts of the marshaled data and store the\noriginal data."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {String} A sorted order of propertynames\nseparated by \".",
            "paramName": "properties",
            "description": " A sorted order of propertynames\nseparated by \".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "parentProperty {String|null} If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "paramName": "parentProperty",
            "description": " If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "depth {Number} The depth level of the data.",
            "paramName": "depth",
            "description": " The depth level of the data.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the set should be ignored",
            "type": "Boolean",
            "description": " <code>true</code> if the set should be ignored"
          }
        ]
      }
    },
    "getPropertyMapping": {
      "type": "function",
      "name": "getPropertyMapping",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.IMarshalerDelegate",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gives the possibility to change the names given in the data to convert\nto something different."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "property {String} The name of the property from the data source.",
            "paramName": "property",
            "description": " The name of the property from the data source.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "properties {String} A sorted order of propertynames\nseparated by \".",
            "paramName": "properties",
            "description": " A sorted order of propertynames\nseparated by \".",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The new property name which should be used for that property in\nthe model.",
            "type": "String",
            "description": " The new property name which should be used for that property in\nthe model."
          }
        ]
      }
    },
    "getModelClass": {
      "type": "function",
      "name": "getModelClass",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.IMarshalerDelegate",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determines the user defined class for the given properties string.\nThis class could contain additional methods but needs to have the\nproperties with the given names. Also every property needs to have a\nchange event.\n\nIf this method is implemented, you have to add the superclass and mixins\nyourself to the returned class. This means that the methods\n{@link #getModelSuperClass} and {@link #getModelMixins} will not be\ncalled for the corresponding class."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {String} A sorted order of propertynames\nseparated by \".",
            "paramName": "properties",
            "description": " A sorted order of propertynames\nseparated by \".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "object {Map} The object for which an class is needed.",
            "paramName": "object",
            "description": " The object for which an class is needed.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "parentProperty {String|null} If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "paramName": "parentProperty",
            "description": " If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "depth {Number} The depth level of the data.",
            "paramName": "depth",
            "description": " The depth level of the data.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class|null} Returns the class containing the properties\ncorresponding to the given hash of the properties. If <code>null</code>\nwill be returned, the marshaler will create a class.",
            "type": "Class|null",
            "description": " Returns the class containing the properties\ncorresponding to the given hash of the properties. If <code>null</code>\nwill be returned, the marshaler will create a class."
          }
        ]
      }
    },
    "getModelSuperClass": {
      "type": "function",
      "name": "getModelSuperClass",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.IMarshalerDelegate",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the class which the created model class uses as superclass."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {String} A sorted order of propertynames\nseparated by \".",
            "paramName": "properties",
            "description": " A sorted order of propertynames\nseparated by \".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "parentProperty {String|null} If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "paramName": "parentProperty",
            "description": " If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "depth {Number} The depth level of the data.",
            "paramName": "depth",
            "description": " The depth level of the data.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class|null} Returns the class which should be used as superclass\ncorresponding to the given hash of the properties. If <code>null</code>\nwill be returned, {@link qx.core.Object} will be used as superclass.",
            "type": "Class|null",
            "description": " Returns the class which should be used as superclass\ncorresponding to the given hash of the properties. If <code>null</code>\nwill be returned, {@link qx.core.Object} will be used as superclass."
          }
        ]
      }
    },
    "getModelMixins": {
      "type": "function",
      "name": "getModelMixins",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.IMarshalerDelegate",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the mixins which should be included to the class, created by the\nmarshaler and identified by the given properties string."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {String} A sorted order of propertynames\nseparated by \".",
            "paramName": "properties",
            "description": " A sorted order of propertynames\nseparated by \".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "parentProperty {String|null} If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "paramName": "parentProperty",
            "description": " If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "depth {Number} The depth level of the data.",
            "paramName": "depth",
            "description": " The depth level of the data.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array|Mixin|null} Returns an array of mixins or a single mixin which\nwill be included into the given class identified by the properties\ngiven in the parameter. If <code>null</code> will be returned, no mixin\nwill be included.",
            "type": "Array|Mixin|null",
            "description": " Returns an array of mixins or a single mixin which\nwill be included into the given class identified by the properties\ngiven in the parameter. If <code>null</code> will be returned, no mixin\nwill be included."
          }
        ]
      }
    },
    "getValidationRule": {
      "type": "function",
      "name": "getValidationRule",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.IMarshalerDelegate",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the validation rules which should be added to the created class\nfor the given property. This method will be called for every property."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "properties {String} A sorted order of propertynames\nseparated by \".",
            "paramName": "properties",
            "description": " A sorted order of propertynames\nseparated by \".",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "propertyName {String} The name of the current property.",
            "paramName": "propertyName",
            "description": " The name of the current property.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function|null} If you want to have a validation rule for the\ncurrent property, you should return a validation function which will\nbe included into the property definition as validator.\n{@link qx.core.Property} for more details.",
            "type": "Function|null",
            "description": " If you want to have a validation rule for the\ncurrent property, you should return a validation function which will\nbe included into the property definition as validator.\n{@link qx.core.Property} for more details."
          }
        ]
      }
    },
    "getArrayClass": {
      "type": "function",
      "name": "getArrayClass",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.IMarshalerDelegate",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the array class which should be used by the marshaler. The passed\nparameters can be used to determine the array class. The return array class\nmust implement the {@link qx.data.IListData} interface."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "parentProperty {String|null} If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "paramName": "parentProperty",
            "description": " If there is a named parent property, the\nname is given here. This might be null in case of the root data.",
            "type": [
              "String",
              "null"
            ]
          },
          {
            "name": "@param",
            "body": "depth {Number} The depth level of the data.",
            "paramName": "depth",
            "description": " The depth level of the data.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class|null} Returns the class which should be used as array class.\nIf <code>null</code> will be returned, {@link qx.data.Array} will be used as array class.",
            "type": "Class|null",
            "description": " Returns the class which should be used as array class.\nIf <code>null</code> will be returned, {@link qx.data.Array} will be used as array class."
          }
        ]
      }
    },
    "getJsonHash": {
      "type": "function",
      "name": "getJsonHash",
      "abstract": true,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.data.marshal.IMarshalerDelegate",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Converts a given object into a hash which will be used to identify the\nclasses under the namespace <code>qx.data.model</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "data {Object} The JavaScript object from which the hash is\nrequired.",
            "paramName": "data",
            "description": " The JavaScript object from which the hash is\nrequired.",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "includeBubbleEvents {Boolean?false} Whether the model should\nsupport the bubbling of change events or not.",
            "paramName": "includeBubbleEvents",
            "description": " Whether the model should\nsupport the bubbling of change events or not.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The hash representation of the given JavaScript object.",
            "type": "String",
            "description": " The hash representation of the given JavaScript object."
          }
        ]
      }
    }
  },
  "abstract": true,
  "descendants": []
}