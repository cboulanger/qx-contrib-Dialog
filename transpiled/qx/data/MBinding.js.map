{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/data/MBinding.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "construct",
    "__objectHash",
    "toHashCode",
    "members",
    "bind",
    "sourcePropertyChain",
    "targetObject",
    "targetProperty",
    "options",
    "data",
    "SingleValueBinding",
    "bindAsync",
    "id",
    "initialPromise",
    "then",
    "Promise",
    "resolve",
    "removeBinding",
    "removeBindingFromObject",
    "removeRelatedBindings",
    "relatedObject",
    "removeAllBindings",
    "removeAllBindingsForObject",
    "getBindings",
    "getAllBindingsForObject",
    "destruct",
    "$$hash",
    "MBinding"
  ],
  "mappings": ";;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAuBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,kBAAhB,EACA;AACEC,eAAY,qBAAW;AACrB;AACA,WAAKC,YAAL,GAAoB,KAAKC,UAAL,EAApB;AACD,KAJH;;AAOEC,aACA;AACEF,oBAAe,IADjB;;AAGE;;;;;;;;;;;;;;;;;;;;;;AAsBAG,YAAO,cAASC,mBAAT,EAA8BC,YAA9B,EAA4CC,cAA5C,EAA4DC,OAA5D,EACP;AACE,eAAOd,GAAGe,IAAH,CAAQC,kBAAR,CAA2BN,IAA3B,CACL,IADK,EACCC,mBADD,EACsBC,YADtB,EACoCC,cADpC,EACoDC,OADpD,CAAP;AAGD,OA9BH;;AAiCE;;;;;;;;;;;;;;;;;;;;;;;;AAwBAG,iBACU,mBAASN,mBAAT,EAA8BC,YAA9B,EAA4CC,cAA5C,EAA4DC,OAA5D,EAAqE;AAC3E,YAAII,KAAKlB,GAAGe,IAAH,CAAQC,kBAAR,CAA2BN,IAA3B,CACP,IADO,EACDC,mBADC,EACoBC,YADpB,EACkCC,cADlC,EACkDC,OADlD,CAAT;AAGA,YAAII,GAAGC,cAAP,EAAuB;AACrB,iBAAOD,GAAGC,cAAH,CAAkBC,IAAlB,CAAuB,YAAW;AACvCF,eAAGC,cAAH,GAAoB,IAApB;AACA,mBAAOD,EAAP;AACD,WAHM,CAAP;AAID,SALD,MAKO;AACL,iBAAOlB,GAAGqB,OAAH,CAAWC,OAAX,CAAmBJ,EAAnB,CAAP;AACD;AACF,OAtEL;;AA6EE;;;;;;;AAOAK,qBAAe,uBAASL,EAAT,EAAY;AACzBlB,WAAGe,IAAH,CAAQC,kBAAR,CAA2BQ,uBAA3B,CAAmD,IAAnD,EAAyDN,EAAzD;AACD,OAtFH;;AAyFE;;;;;;;;AAQAO,6BAAwB,+BAASC,aAAT,EAAwB;AAC9C1B,WAAGe,IAAH,CAAQC,kBAAR,CAA2BS,qBAA3B,CAAiD,IAAjD,EAAuDC,aAAvD;AACD,OAnGH;;AAsGE;;;;;;;;AAQAC,yBAAmB,6BAAW;AAC5B3B,WAAGe,IAAH,CAAQC,kBAAR,CAA2BY,0BAA3B,CAAsD,IAAtD;AACD,OAhHH;;AAmHE;;;;;;;AAOAC,mBAAa,uBAAW;AACtB,eAAO7B,GAAGe,IAAH,CAAQC,kBAAR,CAA2Bc,uBAA3B,CAAmD,IAAnD,CAAP;AACD;AA5HH,KARF;;AAwIEC,cAAW,oBAAW;AACpB;AACA,WAAKC,MAAL,GAAc,KAAKzB,YAAnB;AACA,WAAKoB,iBAAL;AACA,aAAO,KAAKK,MAAZ;AACD;AA7IH,GADA,C;AAvBAhC,KAAGe,IAAH,CAAQkB,QAAR,CAAiB9B,aAAjB,GAAiCA,aAAjC",
  "file": "MBinding.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This mixin is forwarding the static methods of\n * {@link qx.data.SingleValueBinding} to the instance including the mixin.\n * The source object will be <code>this</code>.\n */\nqx.Mixin.define(\"qx.data.MBinding\",\n{\n  construct : function() {\n    // store the hash code for disposing object won't have a hash code after dispose.\n    this.__objectHash = this.toHashCode();\n  },\n\n\n  members :\n  {\n    __objectHash : null,\n\n    /**\n     * The bind method delegates the call to the\n     * {@link qx.data.SingleValueBinding#bind} function. As source, the current\n     * object (this) will be used.\n     *\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetProperty {String} The property name of the target object.\n     * @param options {Map?null} A map containing the options. See\n     *   {@link qx.data.SingleValueBinding#bind} for more\n     *   information.\n     *\n     * @return {var} Returns the internal id for that binding. This can be used\n     *   for referencing the binding e.g. for removing. This is not an atomic\n     *   id so you can't you use it as a hash-map index.\n     *\n     * @throws {qx.core.AssertionError} If the event is no data event or\n     *   there is no property definition for object and property (source and\n     *   target).\n     */\n    bind : function(sourcePropertyChain, targetObject, targetProperty, options)\n    {\n      return qx.data.SingleValueBinding.bind(\n        this, sourcePropertyChain, targetObject, targetProperty, options\n      );\n    },\n\n\n    /**\n     * The bind method delegates the call to the\n     * {@link qx.data.SingleValueBinding#bind} function. As source, the current\n     * object (this) will be used.\n     *\n     * @param sourcePropertyChain {String} The property chain which represents\n     *   the source property.\n     * @param targetObject {qx.core.Object} The object which the source should\n     *   be bind to.\n     * @param targetProperty {String} The property name of the target object.\n     * @param options {Map} A map containing the options. See\n     *   {@link qx.data.SingleValueBinding#bind} for more\n     *   information.\n     *\n     * @return {qx.Promise} A promise which is resolved when the initial value\n     * \t has been set on the target.  Note that this does NOT resolve when subsequent\n     *   values are returned.  The promise value is the internal id for that binding. \n     *   The id can be used for referencing the binding e.g. for removing. This is not \n     *   an atomic id so you can't you use it as a hash-map index.\n     *\n     * @throws {qx.core.AssertionError} If the event is no data event or\n     *   there is no property definition for object and property (source and\n     *   target).\n     */\n    bindAsync : qx.core.Environment.select(\"qx.promise\", {\n      \"true\": function(sourcePropertyChain, targetObject, targetProperty, options) {\n        var id = qx.data.SingleValueBinding.bind(\n          this, sourcePropertyChain, targetObject, targetProperty, options\n        );\n        if (id.initialPromise) {\n          return id.initialPromise.then(function() {\n            id.initialPromise = null;\n            return id;\n          });\n        } else {\n          return qx.Promise.resolve(id);\n        }\n      },\n      \"false\": function(sourcePropertyChain, targetObject, targetProperty, options) {\n        return this.bind(sourcePropertyChain, targetObject, targetProperty, options);\n      }\n    }),\n\n\n    /**\n     * Removes the binding with the given id from the current object. The\n     * id has to be the id returned by any of the bind functions.\n     *\n     * @param id {var} The id of the binding.\n     * @throws {Error} If the binding could not be found.\n     */\n    removeBinding: function(id){\n      qx.data.SingleValueBinding.removeBindingFromObject(this, id);\n    },\n\n\n    /**\n     * Removes all bindings between the object and the related one.\n     *\n     * @param relatedObject {qx.core.Object} The object of which related\n     *   bindings should be removed.\n     * @throws {Error} If one of the bindings listed internally can not be\n     *   removed.\n     */\n    removeRelatedBindings : function(relatedObject) {\n      qx.data.SingleValueBinding.removeRelatedBindings(this, relatedObject);\n    },\n\n\n    /**\n     * Removes all bindings from the object.\n     *\n     * @throws {qx.core.AssertionError} If the object is not in the internal\n     *   registry of the bindings.\n     * @throws {Error} If one of the bindings listed internally can not be\n     *   removed.\n     */\n    removeAllBindings: function() {\n      qx.data.SingleValueBinding.removeAllBindingsForObject(this);\n    },\n\n\n    /**\n     * Returns an array which lists all bindings for the object.\n     *\n     * @return {Array} An array of binding informations. Every binding\n     *   information is an array itself containing id, sourceObject, sourceEvent,\n     *   targetObject and targetProperty in that order.\n     */\n    getBindings: function() {\n      return qx.data.SingleValueBinding.getAllBindingsForObject(this);\n    }\n  },\n\n\n  destruct : function() {\n    // restore the object hash for disposing the bindings\n    this.$$hash = this.__objectHash;\n    this.removeAllBindings();\n    delete this.$$hash;\n  }\n});\n"
  ]
}