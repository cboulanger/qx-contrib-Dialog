{
  "className": "qx.data.Array",
  "packageName": "qx.data",
  "name": "Array",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.data.IListData"
  ],
  "mixins": [
    "qx.data.marshal.MEventBubbling"
  ],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0
      },
      "end": {
        "line": 1134,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nMartin Wittemann (martinwittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The data array is a special array used in the data binding context of\nqooxdoo. It does not extend the native array of JavaScript but its a wrapper\nfor it. All the native methods are included in the implementation and it\nalso fires events if the content or the length of the array changes in\nany way. Also the <code>.length</code> property is available on the array.\n\nThis class does not need to be disposed, unless you set the autoDisposeItems\nproperty to true and want the items to be disposed."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 47,
        "column": 2
      },
      "end": {
        "line": 88,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "Creates a new instance of an array."
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "param {var} The parameter can be some types.<br/>\nWithout a parameter a new blank array will be created.<br/>\nIf there is more than one parameter is given, the parameter will be\nadded directly to the new array.<br/>\nIf the parameter is a number, a new Array with the given length will be\ncreated.<br/>\nIf the parameter is a JavaScript array, a new array containing the given\nelements will be created.",
          "paramName": "param",
          "description": " The parameter can be some types.<br/>\nWithout a parameter a new blank array will be created.<br/>\nIf there is more than one parameter is given, the parameter will be\nadded directly to the new array.<br/>\nIf the parameter is a number, a new Array with the given length will be\ncreated.<br/>\nIf the parameter is a JavaScript array, a new array containing the given\nelements will be created.",
          "type": "var"
        }
      ]
    }
  },
  "properties": {
    "autoDisposeItems": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 106,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Flag to set the dispose behavior of the array. If the property is set to\n<code>true</code>, the array will dispose its content on dispose, too."
          }
        ]
      },
      "name": "autoDisposeItems",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "events": {
    "change": {
      "location": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The change event which will be fired if there is a change in the array.\nThe data contains a map with five key value pairs:\n<li>start: The start index of the change.</li>\n<li>end: The end index of the change.</li>\n<li>type: The type of the change as a String. This can be 'add',\n'remove', 'order' or 'add/remove'</li>\n<li>added: The items which has been added (as a JavaScript array)</li>\n<li>removed: The items which has been removed (as a JavaScript array)</li>"
          }
        ]
      },
      "name": "change",
      "type": "qx.event.type.Data"
    },
    "changeLength": {
      "location": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The changeLength event will be fired every time the length of the\narray changes."
          }
        ]
      },
      "name": "changeLength",
      "type": "qx.event.type.Data"
    }
  },
  "members": {
    "__array": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "private members"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "concat": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 161,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Concatenates the current and the given array into a new one."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {qx.data.Array|Array} The javaScript array which should be concatenated\nto the current array.",
            "paramName": "array",
            "description": " The javaScript array which should be concatenated\nto the current array.",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array containing the values of both former\narrays.",
            "type": "qx.data.Array",
            "description": " A new array containing the values of both former\narrays."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "join": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 175,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the array as a string using the given connector string to\nconnect the values."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "connector {String} the string which should be used to past in\nbetween of the array values.",
            "paramName": "connector",
            "description": " the string which should be used to past in\nbetween of the array values.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The array as a string.",
            "type": "String",
            "description": " The array as a string."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "pop": {
      "location": {
        "start": {
          "line": 184,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes and returns the last element of the array.\nAn change event will be fired."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The last element of the array.",
            "type": "var",
            "description": " The last element of the array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "push": {
      "location": {
        "start": {
          "line": 218,
          "column": 4
        },
        "end": {
          "line": 245,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds an element at the end of the array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} Multiple elements. Every element will be added to\nthe end of the array. An change event will be fired.",
            "paramName": "varargs",
            "description": " Multiple elements. Every element will be added to\nthe end of the array. An change event will be fired.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The new length of the array.",
            "type": "Number",
            "description": " The new length of the array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reverse": {
      "location": {
        "start": {
          "line": 251,
          "column": 4
        },
        "end": {
          "line": 273,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Reverses the order of the array. An change event will be fired."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "shift": {
      "location": {
        "start": {
          "line": 282,
          "column": 4
        },
        "end": {
          "line": 314,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes the first element of the array and returns it. An change event\nwill be fired."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the former first element.",
            "type": "var",
            "description": " the former first element."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "slice": {
      "location": {
        "start": {
          "line": 327,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a new array based on the range specified by the parameters."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {Number} The start index.",
            "paramName": "from",
            "description": " The start index.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "to {Number?null} The zero-based end index. <code>slice</code> extracts\nup to but not including <code>to</code>. If omitted, slice extracts to the\nend of the array.",
            "paramName": "to",
            "description": " The zero-based end index. <code>slice</code> extracts\nup to but not including <code>to</code>. If omitted, slice extracts to the\nend of the array.",
            "optional": true,
            "defaultValue": "null",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array containing the given range of values.",
            "type": "qx.data.Array",
            "description": " A new array containing the given range of values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "splice": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 428,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Method to remove and add new elements to the array. A change event\nwill be fired for every removal or addition unless the array is\nidentical before and after splicing."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "startIndex {Integer} The index where the splice should start",
            "paramName": "startIndex",
            "description": " The index where the splice should start",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "amount {Integer} Defines number of elements which will be removed\nat the given position.",
            "paramName": "amount",
            "description": " Defines number of elements which will be removed\nat the given position.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "varargs {var} All following parameters will be added at the given\nposition to the array.",
            "paramName": "varargs",
            "description": " All following parameters will be added at the given\nposition to the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} An data array containing the removed elements.\nKeep in to dispose this one, even if you don't use it!",
            "type": "qx.data.Array",
            "description": " An data array containing the removed elements.\nKeep in to dispose this one, even if you don't use it!"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "replace": {
      "location": {
        "start": {
          "line": 438,
          "column": 4
        },
        "end": {
          "line": 448,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Efficiently replaces the array with the contents of src; this will suppress the\nchange event if the array contents are the same, and will make sure that only\none change event is fired"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "src {qx.data.Array|Array} the new value to set the array to",
            "paramName": "src",
            "description": " the new value to set the array to",
            "type": [
              "qx.data.Array",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sort": {
      "location": {
        "start": {
          "line": 459,
          "column": 4
        },
        "end": {
          "line": 486,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sorts the array. If a function is given, this will be used to\ncompare the items. <code>changeBubble</code> event will only be fired,\nif sorting result differs from original array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} A compare function comparing two parameters and\nshould return a number.",
            "paramName": "func",
            "description": " A compare function comparing two parameters and\nshould return a number.",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "unshift": {
      "location": {
        "start": {
          "line": 496,
          "column": 4
        },
        "end": {
          "line": 523,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds the given items to the beginning of the array. For every element,\na change event will be fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {var} As many elements as you want to add to the beginning.",
            "paramName": "varargs",
            "description": " As many elements as you want to add to the beginning.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The new length of the array",
            "type": "Integer",
            "description": " The new length of the array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toArray": {
      "location": {
        "start": {
          "line": 534,
          "column": 4
        },
        "end": {
          "line": 536,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the list data as native array. Beware of the fact that the\ninternal representation will be returned and any manipulation of that\ncan cause a misbehavior of the array. This method should only be used for\ndebugging purposes."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} The native array.",
            "type": "qx.data.Array",
            "description": " The native array."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "getItem": {
      "location": {
        "start": {
          "line": 547,
          "column": 4
        },
        "end": {
          "line": 549,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Replacement function for the getting of the array value.\narray[0] should be array.getItem(0)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index requested of the array element.",
            "paramName": "index",
            "description": " The index requested of the array element.",
            "type": "Number"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The element at the given index.",
            "type": "var",
            "description": " The element at the given index."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "setItem": {
      "location": {
        "start": {
          "line": 561,
          "column": 4
        },
        "end": {
          "line": 593,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Replacement function for the setting of an array value.\narray[0] = \"a\" should be array.setItem(0, \"a\").\nA change event will be fired if the value changes. Setting the same\nvalue again will not lead to a change event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Number} The index of the array element.",
            "paramName": "index",
            "description": " The index of the array element.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "item {var} The new item to set.",
            "paramName": "item",
            "description": " The new item to set.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "getLength": {
      "location": {
        "start": {
          "line": 602,
          "column": 4
        },
        "end": {
          "line": 604,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method returns the current length stored under .length on each\narray."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The current length of the array.",
            "type": "Number",
            "description": " The current length of the array."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "indexOf": {
      "location": {
        "start": {
          "line": 614,
          "column": 4
        },
        "end": {
          "line": 616,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the index of the item in the array. If the item is not in the\narray, -1 will be returned."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item of which the index should be returned.",
            "paramName": "item",
            "description": " The item of which the index should be returned.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The Index of the given item.",
            "type": "Number",
            "description": " The Index of the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "lastIndexOf": {
      "location": {
        "start": {
          "line": 625,
          "column": 4
        },
        "end": {
          "line": 627,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the last index of the item in the array. If the item is not in the\narray, -1 will be returned."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item of which the index should be returned.",
            "paramName": "item",
            "description": " The item of which the index should be returned.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The Index of the given item.",
            "type": "Number",
            "description": " The Index of the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "contains": {
      "location": {
        "start": {
          "line": 655,
          "column": 4
        },
        "end": {
          "line": 657,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nIMPLEMENTATION OF THE QX.LANG.ARRAY METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Check if the given item is in the current array."
          }
        ],
        "@deprecated": [
          {
            "name": "@deprecated",
            "body": "{6.0} Please use the include method instead"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item which is possibly in the array.",
            "paramName": "item",
            "description": " The item which is possibly in the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the array contains the given item.",
            "type": "Boolean",
            "description": " true, if the array contains the given item."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.data.IListData",
      "appearsIn": [
        "qx.data.IListData"
      ]
    },
    "includes": {
      "location": {
        "start": {
          "line": 665,
          "column": 4
        },
        "end": {
          "line": 667,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check if the given item is in the current array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} The item which is possibly in the array.",
            "paramName": "item",
            "description": " The item which is possibly in the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true, if the array contains the given item.",
            "type": "Boolean",
            "description": " true, if the array contains the given item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "copy": {
      "location": {
        "start": {
          "line": 675,
          "column": 4
        },
        "end": {
          "line": 677,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return a copy of the given arr"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} copy of this",
            "type": "qx.data.Array",
            "description": " copy of this"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAt": {
      "location": {
        "start": {
          "line": 686,
          "column": 4
        },
        "end": {
          "line": 689,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert an element at a given position."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Position where to insert the item.",
            "paramName": "index",
            "description": " Position where to insert the item.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "item {var} The element to insert.",
            "paramName": "item",
            "description": " The element to insert.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertBefore": {
      "location": {
        "start": {
          "line": 698,
          "column": 4
        },
        "end": {
          "line": 707,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert an item into the array before a given item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "before {var} Insert item before this object.",
            "paramName": "before",
            "description": " Insert item before this object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "item {var} The item to be inserted.",
            "paramName": "item",
            "description": " The item to be inserted.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "insertAfter": {
      "location": {
        "start": {
          "line": 716,
          "column": 4
        },
        "end": {
          "line": 725,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Insert an element into the array after a given item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "after {var} Insert item after this object.",
            "paramName": "after",
            "description": " Insert item after this object.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "item {var} Object to be inserted.",
            "paramName": "item",
            "description": " Object to be inserted.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAt": {
      "location": {
        "start": {
          "line": 734,
          "column": 4
        },
        "end": {
          "line": 739,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove an element from the array at the given index."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "index {Integer} Index of the item to be removed.",
            "paramName": "index",
            "description": " Index of the item to be removed.",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed item.",
            "type": "var",
            "description": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeAll": {
      "location": {
        "start": {
          "line": 747,
          "column": 4
        },
        "end": {
          "line": 785,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove all elements from the array."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} A native array containing the removed elements.",
            "type": "qx.data.Array",
            "description": " A native array containing the removed elements."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "append": {
      "location": {
        "start": {
          "line": 795,
          "column": 4
        },
        "end": {
          "line": 839,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Append the items of the given array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array|qx.data.IListData} The items of this array will\nbe appended.",
            "paramName": "array",
            "description": " The items of this array will\nbe appended.",
            "type": [
              "Array",
              "qx.data.IListData"
            ]
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} if the argument is not an array.",
            "type": "Error",
            "description": " if the argument is not an array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "exclude": {
      "location": {
        "start": {
          "line": 847,
          "column": 4
        },
        "end": {
          "line": 853,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Removes all elements which are listed in the array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {Array} the elements of this array will be excluded from this one",
            "paramName": "array",
            "description": " the elements of this array will be excluded from this one",
            "type": "qx.data.Array"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "remove": {
      "location": {
        "start": {
          "line": 862,
          "column": 4
        },
        "end": {
          "line": 871,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove the given item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "item {var} Item to be removed from the array.",
            "paramName": "item",
            "description": " Item to be removed from the array.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The removed item.",
            "type": "var",
            "description": " The removed item."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "equals": {
      "location": {
        "start": {
          "line": 881,
          "column": 4
        },
        "end": {
          "line": 896,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check whether the given array has the same content as this.\nChecks only the equality of the arrays' content."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "array {qx.data.Array} The array to check.",
            "paramName": "array",
            "description": " The array to check.",
            "type": "qx.data.Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the two arrays are equal.",
            "type": "Boolean",
            "description": " Whether the two arrays are equal."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "sum": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 913,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the sum of all values in the array. Supports\nnumeric values only."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The sum of all values.",
            "type": "Number",
            "description": " The sum of all values."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "max": {
      "location": {
        "start": {
          "line": 923,
          "column": 4
        },
        "end": {
          "line": 935,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the highest value in the given array.\nSupports numeric values only."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number | null} The highest of all values or undefined if the\narray is empty.",
            "type": "Number | null",
            "description": " The highest of all values or undefined if the\narray is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "min": {
      "location": {
        "start": {
          "line": 945,
          "column": 4
        },
        "end": {
          "line": 957,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the lowest value in the array. Supports\nnumeric values only."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number | null} The lowest of all values or undefined\nif the array is empty.",
            "type": "Number | null",
            "description": " The lowest of all values or undefined\nif the array is empty."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "forEach": {
      "location": {
        "start": {
          "line": 968,
          "column": 4
        },
        "end": {
          "line": 973,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Invokes the given function for every item in the array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The function which will be call for every\nitem in the array. It will be invoked with three parameters:\nthe item, the index and the array itself.",
            "paramName": "callback",
            "description": " The function which will be call for every\nitem in the array. It will be invoked with three parameters:\nthe item, the index and the array itself.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "context {var?} The context in which the callback will be invoked.",
            "paramName": "context",
            "description": " The context in which the callback will be invoked.",
            "optional": true,
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "filter": {
      "location": {
        "start": {
          "line": 994,
          "column": 4
        },
        "end": {
          "line": 996,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nAdditional JS1.6 methods\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Creates a new array with all elements that pass the test implemented by\nthe provided function. It returns a new data array instance so make sure\nto think about disposing it."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array instance containing only the items\nwhich passed the test.",
            "type": "qx.data.Array",
            "description": " A new array instance containing only the items\nwhich passed the test."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "map": {
      "location": {
        "start": {
          "line": 1011,
          "column": 4
        },
        "end": {
          "line": 1013,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates a new array with the results of calling a provided function on every\nelement in this array. It returns a new data array instance so make sure\nto think about disposing it."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The mapping function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The mapping function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.data.Array} A new array instance containing the new created items.",
            "type": "qx.data.Array",
            "description": " A new array instance containing the new created items."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "some": {
      "location": {
        "start": {
          "line": 1027,
          "column": 4
        },
        "end": {
          "line": 1029,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Tests whether any element in the array passes the test implemented by the\nprovided function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if any element passed the test function.",
            "type": "Boolean",
            "description": " <code>true</code>, if any element passed the test function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "every": {
      "location": {
        "start": {
          "line": 1043,
          "column": 4
        },
        "end": {
          "line": 1045,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Tests whether every element in the array passes the test implemented by the\nprovided function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The test function, which will be executed for every\nitem in the array. The function will have three arguments.\n<li><code>item</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {var?undefined} The context of the callback.",
            "paramName": "self",
            "description": " The context of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if every element passed the test function.",
            "type": "Boolean",
            "description": " <code>true</code>, if every element passed the test function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduce": {
      "location": {
        "start": {
          "line": 1061,
          "column": 4
        },
        "end": {
          "line": 1063,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Apply a function against an accumulator and each value of the array\n(from left-to-right) as to reduce it to a single value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The accumulator function, which will be\nexecuted for every item in the array. The function will have four arguments.\n<li><code>previousItem</code>: the previous item</li>\n<li><code>currentItem</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The accumulator function, which will be\nexecuted for every item in the array. The function will have four arguments.\n<li><code>previousItem</code>: the previous item</li>\n<li><code>currentItem</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initValue {var?undefined} Object to use as the first argument to the first\ncall of the callback.",
            "paramName": "initValue",
            "description": " Object to use as the first argument to the first\ncall of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The returned value of the last accumulator call.",
            "type": "var",
            "description": " The returned value of the last accumulator call."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reduceRight": {
      "location": {
        "start": {
          "line": 1079,
          "column": 4
        },
        "end": {
          "line": 1081,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Apply a function against an accumulator and each value of the array\n(from right-to-left) as to reduce it to a single value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} The accumulator function, which will be\nexecuted for every item in the array. The function will have four arguments.\n<li><code>previousItem</code>: the previous item</li>\n<li><code>currentItem</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "paramName": "callback",
            "description": " The accumulator function, which will be\nexecuted for every item in the array. The function will have four arguments.\n<li><code>previousItem</code>: the previous item</li>\n<li><code>currentItem</code>: the current item in the array</li>\n<li><code>index</code>: the index of the current item</li>\n<li><code>array</code>: The native array instance, NOT the data array instance.</li>",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "initValue {var?undefined} Object to use as the first argument to the first\ncall of the callback.",
            "paramName": "initValue",
            "description": " Object to use as the first argument to the first\ncall of the callback.",
            "optional": true,
            "defaultValue": "undefined",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The returned value of the last accumulator call.",
            "type": "var",
            "description": " The returned value of the last accumulator call."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__updateLength": {
      "location": {
        "start": {
          "line": 1094,
          "column": 4
        },
        "end": {
          "line": 1098,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINTERNAL HELPERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Internal function which updates the length property of the array.\nEvery time the length will be updated, a {@link #changeLength} data\nevent will be fired."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__updateEventPropagation": {
      "location": {
        "start": {
          "line": 1106,
          "column": 4
        },
        "end": {
          "line": 1110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper to update the event propagation for a range of items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "from {Number} Start index.",
            "paramName": "from",
            "description": " Start index.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "to {Number} End index.",
            "paramName": "to",
            "description": " End index.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_applyEventPropagation": {
      "type": "function",
      "name": "_applyEventPropagation",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Apply function for every property created with the\n{@link qx.data.marshal.Json} marshaler. It fires and\n{@link #changeBubble} event on every change. It also adds the chaining\nlistener if possible which is necessary for the bubbling of the events."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      }
    },
    "_registerEventChaining": {
      "type": "function",
      "name": "_registerEventChaining",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "protected",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Registers for the given parameters the changeBubble listener, if\npossible. It also removes the old listener, if an old item with\na changeBubble event is given."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} The new value of the property.",
            "paramName": "value",
            "description": " The new value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "old {var} The old value of the property.",
            "paramName": "old",
            "description": " The old value of the property.",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "name {String} The name of the changed property.",
            "paramName": "name",
            "description": " The name of the changed property.",
            "type": "String"
          }
        ]
      }
    },
    "__changePropertyListener": {
      "type": "function",
      "name": "__changePropertyListener",
      "abstract": false,
      "mixin": true,
      "inherited": true,
      "access": "private",
      "overriddenFrom": "qx.data.marshal.MEventBubbling",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Listener responsible for formating the name and firing the change event\nfor the changed property."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the former properties.",
            "paramName": "name",
            "description": " The name of the former properties.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "e {qx.event.type.Data} The date event fired by the property\nchange.",
            "paramName": "e",
            "description": " The date event fired by the property\nchange.",
            "type": "qx.event.type.Data"
          }
        ]
      }
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getAutoDisposeItems": {
      "type": "function",
      "name": "getAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoDisposeItems"
          }
        ]
      }
    },
    "isAutoDisposeItems": {
      "type": "function",
      "name": "isAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for autoDisposeItems"
          }
        ]
      }
    },
    "setAutoDisposeItems": {
      "type": "function",
      "name": "setAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoDisposeItems</code>.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for autoDisposeItems"
          }
        ]
      }
    },
    "resetAutoDisposeItems": {
      "type": "function",
      "name": "resetAutoDisposeItems",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoDisposeItems</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoDisposeItems}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1121,
        "column": 2
      },
      "end": {
        "line": 1133,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}