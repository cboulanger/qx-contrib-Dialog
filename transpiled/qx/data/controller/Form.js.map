{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/data/controller/Form.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "model",
    "target",
    "selfUpdate",
    "_selfUpdate",
    "__bindingOptions",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "members",
    "__objectController",
    "addBindingOptions",
    "name",
    "model2target",
    "target2model",
    "getModel",
    "getTarget",
    "item",
    "getItems",
    "targetProperty",
    "__isModelSelectable",
    "removeTarget",
    "addTarget",
    "createModel",
    "includeBubbleEvents",
    "Error",
    "items",
    "data",
    "names",
    "split",
    "currentData",
    "i",
    "length",
    "clazz",
    "constructor",
    "itemValue",
    "hasInterface",
    "ui",
    "ISingleSelection",
    "getModelSelection",
    "getItem",
    "getValue",
    "converter",
    "marshal",
    "Json",
    "updateModel",
    "sourceProperty",
    "options",
    "SingleValueBinding",
    "updateTarget",
    "_applyTarget",
    "value",
    "old",
    "__tearDownBinding",
    "__setUpBinding",
    "_applyModel",
    "getValidationManager",
    "reset",
    "controller",
    "ex",
    "warn",
    "stack",
    "redefineResetter",
    "oldTarget",
    "form",
    "IModelSelection",
    "destruct",
    "dispose",
    "Form"
  ],
  "mappings": "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",
  "file": "Form.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * <h2>Form Controller</h2>\n *\n * *General idea*\n *\n * The form controller is responsible for connecting a form with a model. If no\n * model is given, a model can be created. This created model will fit exactly\n * to the given form and can be used for serialization. All the connections\n * between the form items and the model are handled by an internal\n * {@link qx.data.controller.Object}.\n *\n * *Features*\n *\n * * Connect a form to a model (bidirectional)\n * * Create a model for a given form\n *\n * *Usage*\n *\n * The controller only works if both a controller and a model are set.\n * Creating a model will automatically set the created model.\n *\n * *Cross reference*\n *\n * * If you want to bind single values, use {@link qx.data.controller.Object}\n * * If you want to bind a list like widget, use {@link qx.data.controller.List}\n * * If you want to bind a tree widget, use {@link qx.data.controller.Tree}\n */\nqx.Class.define(\"qx.data.controller.Form\",\n{\n  extend : qx.core.Object,\n  implement: [ qx.core.IDisposable ],\n  \n  /**\n   * @param model {qx.core.Object | null} The model to bind the target to. The\n   *   given object will be set as {@link #model} property.\n   * @param target {qx.ui.form.Form | null} The form which contains the form\n   *   items. The given form will be set as {@link #target} property.\n   * @param selfUpdate {Boolean?false} If set to true, you need to call the\n   *   {@link #updateModel} method to get the data in the form to the model.\n   *   Otherwise, the data will be synced automatically on every change of\n   *   the form.\n   */\n  construct : function(model, target, selfUpdate)\n  {\n    this.base(arguments);\n\n    this._selfUpdate = !!selfUpdate;\n    this.__bindingOptions = {};\n\n    if (model != null) {\n      this.setModel(model);\n    }\n\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n\n  properties :\n  {\n    /** Data object containing the data which should be shown in the target. */\n    model :\n    {\n      check: \"qx.core.Object\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n\n    /** The target widget which should show the data. */\n    target :\n    {\n      check: \"qx.ui.form.Form\",\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      nullable: true,\n      init: null,\n      dereference: true\n    }\n  },\n\n\n  members :\n  {\n    __objectController : null,\n    __bindingOptions : null,\n\n\n    /**\n     * The form controller uses for setting up the bindings the fundamental\n     * binding layer, the {@link qx.data.SingleValueBinding}. To achieve a\n     * binding in both directions, two bindings are needed. With this method,\n     * you have the opportunity to set the options used for the bindings.\n     *\n     * @param name {String} The name of the form item for which the options\n     *   should be used.\n     * @param model2target {Map} Options map used for the binding from model\n     *   to target. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     * @param target2model {Map} Options map used for the binding from target\n     *   to model. The possible options can be found in the\n     *   {@link qx.data.SingleValueBinding} class.\n     */\n    addBindingOptions : function(name, model2target, target2model)\n    {\n      this.__bindingOptions[name] = [model2target, target2model];\n\n      // return if not both, model and target are given\n      if (this.getModel() == null || this.getTarget() == null) {\n        return;\n      }\n\n      // renew the affected binding\n      var item = this.getTarget().getItems()[name];\n      var targetProperty =\n        this.__isModelSelectable(item) ? \"modelSelection[0]\" : \"value\";\n\n      // remove the binding\n      this.__objectController.removeTarget(item, targetProperty, name);\n      // set up the new binding with the options\n      this.__objectController.addTarget(\n        item, targetProperty, name, !this._selfUpdate, model2target, target2model\n      );\n    },\n\n\n    /**\n     * Creates and sets a model using the {@link qx.data.marshal.Json} object.\n     * Remember that this method can only work if the form is set. The created\n     * model will fit exactly that form. Changing the form or adding an item to\n     * the form will need a new model creation.\n     *\n     * @param includeBubbleEvents {Boolean} Whether the model should support\n     *   the bubbling of change events or not.\n     * @return {qx.core.Object} The created model.\n     */\n    createModel : function(includeBubbleEvents) {\n      var target = this.getTarget();\n\n      // throw an error if no target is set\n      if (target == null) {\n        throw new Error(\"No target is set.\");\n      }\n\n      var items = target.getItems();\n      var data = {};\n      for (var name in items) {\n        var names = name.split(\".\");\n        var currentData = data;\n        for (var i = 0; i < names.length; i++) {\n          // if its the last item\n          if (i + 1 == names.length) {\n            // check if the target is a selection\n            var clazz = items[name].constructor;\n            var itemValue = null;\n            if (qx.Class.hasInterface(clazz, qx.ui.core.ISingleSelection)) {\n              // use the first element of the selection because passed to the\n              // marshaler (and its single selection anyway) [BUG #3541]\n              itemValue = items[name].getModelSelection().getItem(0) || null;\n            } else {\n              itemValue = items[name].getValue();\n            }\n            // call the converter if available [BUG #4382]\n            if (this.__bindingOptions[name] && this.__bindingOptions[name][1]) {\n              itemValue = this.__bindingOptions[name][1].converter(itemValue);\n            }\n            currentData[names[i]] = itemValue;\n          } else {\n            // if its not the last element, check if the object exists\n            if (!currentData[names[i]]) {\n              currentData[names[i]] = {};\n            }\n            currentData = currentData[names[i]];\n          }\n        }\n      }\n\n      var model = qx.data.marshal.Json.createModel(data, includeBubbleEvents);\n      this.setModel(model);\n\n      return model;\n    },\n\n\n    /**\n     * Responsible for syncing the data from entered in the form to the model.\n     * Please keep in mind that this method only works if you create the form\n     * with <code>selfUpdate</code> set to true. Otherwise, this method will\n     * do nothing because updates will be synced automatically on every\n     * change.\n     */\n    updateModel: function(){\n      // only do stuff if self update is enabled and a model or target is set\n      if (!this._selfUpdate || !this.getModel() || !this.getTarget()) {\n        return;\n      }\n\n      var items = this.getTarget().getItems();\n      for (var name in items) {\n        var item = items[name];\n        var sourceProperty =\n          this.__isModelSelectable(item) ? \"modelSelection[0]\" : \"value\";\n\n        var options = this.__bindingOptions[name];\n        options = options && this.__bindingOptions[name][1];\n\n        qx.data.SingleValueBinding.updateTarget(\n          item, sourceProperty, this.getModel(), name, options\n        );\n      }\n    },\n\n\n    // apply method\n    _applyTarget : function(value, old) {\n      // if an old target is given, remove the binding\n      if (old != null) {\n        this.__tearDownBinding(old);\n      }\n\n      // do nothing if no target is set\n      if (this.getModel() == null) {\n        return;\n      }\n\n      // target and model are available\n      if (value != null) {\n        this.__setUpBinding();\n      }\n    },\n\n\n    // apply method\n    _applyModel : function(value, old) {\n\n      // set the model to null to reset all items before removing them\n      if (this.__objectController != null && value == null) {\n        this.__objectController.setModel(null);\n      }\n\n      // first, get rid off all bindings (avoids wrong data population)\n      if (this.__objectController != null && this.getTarget() != null) {\n        var items = this.getTarget().getItems();\n        for (var name in items) {\n          var item = items[name];\n          var targetProperty =\n            this.__isModelSelectable(item) ? \"modelSelection[0]\" : \"value\";\n          this.__objectController.removeTarget(item, targetProperty, name);\n        }\n      }\n\n      // set the model of the object controller if available\n      if (this.__objectController != null) {\n        this.__objectController.setModel(value);\n      }\n\n      // do nothing is no target is set\n      if (this.getTarget() == null) {\n        return;\n      }\n      else {\n        // if form was validated with errors and model changes\n        // the errors should be cleared see #8977\n        this.getTarget().getValidationManager().reset();\n      }\n\n      // model and target are available\n      if (value != null) {\n        this.__setUpBinding();\n      }\n    },\n\n\n    /**\n     * Internal helper for setting up the bindings using\n     * {@link qx.data.controller.Object#addTarget}. All bindings are set\n     * up bidirectional.\n     */\n    __setUpBinding : function() {\n      // create the object controller\n      if (this.__objectController == null) {\n        this.__objectController = new qx.data.controller.Object(this.getModel());\n      }\n\n      // get the form items\n      var items = this.getTarget().getItems();\n\n      // connect all items\n      for (var name in items) {\n        var item = items[name];\n        var targetProperty =\n          this.__isModelSelectable(item) ? \"modelSelection[0]\" : \"value\";\n        var options = this.__bindingOptions[name];\n\n        // try to bind all given items in the form\n        try {\n          if (options == null) {\n            this.__objectController.addTarget(item, targetProperty, name, !this._selfUpdate);\n          } else {\n            this.__objectController.addTarget(\n              item, targetProperty, name, !this._selfUpdate, options[0], options[1]\n            );\n          }\n        // ignore not working items\n        } catch (ex) {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            this.warn(\"Could not bind property \" + name + \" of \" + this.getModel() + \":\\n\" + ex.stack);\n          }\n        }\n      }\n      // make sure the initial values of the model are taken for resetting [BUG #5874]\n      this.getTarget().redefineResetter();\n    },\n\n\n    /**\n     * Internal helper for removing all set up bindings using\n     * {@link qx.data.controller.Object#removeTarget}.\n     *\n     * @param oldTarget {qx.ui.form.Form} The form which has been removed.\n     */\n    __tearDownBinding : function(oldTarget) {\n      // do nothing if the object controller has not been created\n      if (this.__objectController == null) {\n        return;\n      }\n\n      // get the items\n      var items = oldTarget.getItems();\n\n      // disconnect all items\n      for (var name in items) {\n        var item = items[name];\n        var targetProperty =\n          this.__isModelSelectable(item) ? \"modelSelection[0]\" : \"value\";\n        this.__objectController.removeTarget(item, targetProperty, name);\n      }\n    },\n\n\n    /**\n     * Returns whether the given item implements\n     * {@link qx.ui.core.ISingleSelection} and\n     * {@link qx.ui.form.IModelSelection}.\n     *\n     * @param item {qx.ui.form.IForm} The form item to check.\n     *\n     * @return {Boolean} true, if given item fits.\n     */\n    __isModelSelectable : function(item) {\n      return qx.Class.hasInterface(item.constructor, qx.ui.core.ISingleSelection) &&\n      qx.Class.hasInterface(item.constructor, qx.ui.form.IModelSelection);\n    }\n\n  },\n\n\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n   destruct : function() {\n     // dispose the object controller because the bindings need to be removed\n     if (this.__objectController) {\n       this.__objectController.dispose();\n     }\n   }\n});\n"
  ]
}