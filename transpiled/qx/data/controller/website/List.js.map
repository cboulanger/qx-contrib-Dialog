{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/data/controller/website/List.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "model",
    "target",
    "templateId",
    "setTemplateId",
    "setModel",
    "setTarget",
    "properties",
    "check",
    "apply",
    "event",
    "nullable",
    "dereference",
    "init",
    "delegate",
    "members",
    "__changeModelListenerId",
    "__changeBubbleModelListenerId",
    "_applyModel",
    "value",
    "old",
    "undefined",
    "removeListenerById",
    "addListener",
    "update",
    "getTarget",
    "__emptyTarget",
    "_applyTarget",
    "_applyTemplateId",
    "_applyDelegate",
    "i",
    "children",
    "length",
    "el",
    "$$model",
    "dom",
    "Element",
    "remove",
    "innerHTML",
    "data",
    "getModel",
    "util",
    "Serializer",
    "toNativeObject",
    "getTemplateId",
    "configureItem",
    "getDelegate",
    "filter",
    "createItem",
    "entry",
    "template",
    "bom",
    "Template",
    "get",
    "assertNotNull",
    "item",
    "getItem",
    "insertEnd",
    "controller",
    "website",
    "List"
  ],
  "mappings": "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",
  "file": "List.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n/**\n * <h2>website List Controller</h2>\n *\n * *General idea*\n * The list controller is responsible for synchronizing data given as model\n * to a DOM element. As definition for a single item, templates are used. More\n * details on templates can be found in {@link qx.bom.Template}.\n *\n * *Features*\n *\n * * Synchronize the model and the target\n * * Filtering\n *\n * *Usage*\n *\n * As model, {@link qx.data.Array}s and plain JavaScript Arrays work. As a\n * Target, you have to use a DOM element e.g. a plain DIV element. Make sure\n * you have the template you are referencing in the DOM.\n */\nqx.Class.define(\"qx.data.controller.website.List\",\n{\n  extend : qx.core.Object,\n\n  /**\n   * @param model {qx.data.IListData|Array?} The mode which can either be a\n   *   native array or a qooxdoo data list. Maps to the model property.\n   * @param target {Element?} A DOM element which should is the target for\n   *   the generation.\n   * @param templateId {String?} The id of the template.\n   */\n  construct : function(model, target, templateId)\n  {\n    this.base(arguments);\n\n    if (templateId != null) {\n      this.setTemplateId(templateId);\n    }\n    if (model != null) {\n      this.setModel(model);\n    }\n    if (target != null) {\n      this.setTarget(target);\n    }\n  },\n\n\n  properties : {\n    /** Array containing the data which should be shown in the list. */\n    model :\n    {\n      check: \"Array\",\n      apply: \"_applyModel\",\n      event: \"changeModel\",\n      nullable: true,\n      dereference: true\n    },\n\n\n    /** The target DOM node which should show the data. */\n    target :\n    {\n      check: \"Element\",\n      apply: \"_applyTarget\",\n      event: \"changeTarget\",\n      nullable: true,\n      init: null,\n      dereference: true\n    },\n\n\n    /**\n     * The id of the template which should be use. Check out\n     * {@link qx.bom.Template} for details on templating.\n     */\n    templateId :\n    {\n      apply: \"_applyTemplateId\",\n      event: \"changeTemplateId\",\n      nullable: true,\n      init: null\n    },\n\n\n    /**\n     * The delegate for the list controller which supports almost all methods\n     * documented in {@link qx.data.controller.IControllerDelegate} except\n     * <code>bindItem</code>.\n     */\n    delegate :\n    {\n      apply: \"_applyDelegate\",\n      event: \"changeDelegate\",\n      init: null,\n      nullable: true\n    }\n  },\n\n\n  members :\n  {\n    __changeModelListenerId : null,\n    __changeBubbleModelListenerId : null,\n\n    // property apply\n    _applyModel : function(value, old) {\n      // remove the old listener\n      if (old != undefined) {\n        if (this.__changeModelListenerId != undefined) {\n          old.removeListenerById(this.__changeModelListenerId);\n        }\n        if (this.__changeBubbleModelListenerId != undefined) {\n          old.removeListenerById(this.__changeBubbleModelListenerId);\n        }\n      }\n\n      // if a model is set\n      if (value != null) {\n        // only for qooxdoo models\n        if (value instanceof qx.core.Object) {\n          // add new listeners\n          this.__changeModelListenerId =\n            value.addListener(\"change\", this.update, this);\n          this.__changeBubbleModelListenerId =\n            value.addListener(\"changeBubble\", this.update, this);\n        }\n      } else {\n        var target = this.getTarget();\n        // if the model is set to null, we should remove all items in the target\n        if (target != null) {\n          this.__emptyTarget();\n        }\n      }\n\n      this.update();\n    },\n\n\n    // property apply\n    _applyTarget : function(value, old) {\n      this.update();\n    },\n\n\n    // property apply\n    _applyTemplateId : function(value, old) {\n      this.update();\n    },\n\n\n    // property apply\n    _applyDelegate : function(value, old) {\n      this.update();\n    },\n\n\n    /**\n     * Responsible for removing all items from the target element.\n     */\n    __emptyTarget : function() {\n      var target = this.getTarget();\n      for (var i= target.children.length -1; i >= 0; i--) {\n        var el = target.children[i];\n        el.$$model = null;\n        qx.dom.Element.remove(el);\n      };\n      target.innerHTML = \"\";\n    },\n\n\n    /**\n     * This is the main method which will take the data from the model and\n     * push it to the target view. If you are using a plain Array as model,\n     * you need to call that method every time you want to see the changed model\n     * in the view while using {@link qx.data.Array}s will do that\n     * automatically for you.\n     * This method also attaches to every created DOM element the model object\n     * which was used to create it at <code>.$$model</code>.\n     */\n    update : function() {\n      var target = this.getTarget();\n\n      // get the plain data\n      var data = this.getModel();\n      if (data instanceof qx.core.Object) {\n        data = qx.util.Serializer.toNativeObject(this.getModel());\n      }\n      var templateId = this.getTemplateId();\n\n      // only do something if everything is given\n      if (target == null || data == null || templateId == null) {\n        return;\n      }\n\n      // empty the target\n      this.__emptyTarget();\n\n      // delegate methods\n      var configureItem = this.getDelegate() && this.getDelegate().configureItem;\n      var filter = this.getDelegate() && this.getDelegate().filter;\n      var createItem = this.getDelegate() && this.getDelegate().createItem;\n\n      // get all items in the model\n      for (var i=0; i < data.length; i++) {\n        var entry = data[i];\n        // filter delegate\n        if (filter && !filter(entry)) {\n          continue;\n        }\n\n        // special case for printing the content of the array\n        if (typeof entry != \"object\") {\n          entry = {\".\" : data[i]};\n        }\n\n        // create the DOM object\n        var template;\n        if (createItem) {\n          template = createItem(data[i]);\n        } else {\n          template = qx.bom.Template.get(templateId, entry);\n        }\n\n        // handling for wrong template IDs\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          this.assertNotNull(template);\n        }\n\n        // configure item\n        if (configureItem) {\n          configureItem(template);\n        }\n\n        // append the model to the dom item\n        var model = this.getModel();\n        var item = model.getItem ? model.getItem(i) : model[i];\n        template.$$model = item;\n\n        qx.dom.Element.insertEnd(template, target);\n      };\n    }\n  }\n});\n"
  ]
}