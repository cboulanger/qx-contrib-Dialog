{
  "className": "qx.Mixin",
  "packageName": "qx",
  "name": "Mixin",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 413,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "This class is used to define mixins (similar to mixins in Ruby).\n\nMixins are collections of code and variables, which can be merged into\nother classes. They are similar to classes but don't support inheritance.\n\nSee the description of the {@link #define} method how a mixin is defined."
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.lang.normalize.Array"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "define": {
      "location": {
        "start": {
          "line": 85,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPUBLIC API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Define a new mixin.\n\nExample:\n<pre class='javascript'>\nqx.Mixin.define(\"name\",\n{\ninclude: [SuperMixins],\n\nproperties: {\ntabIndex: {type: \"number\", init: -1}\n},\n\nmembers:\n{\nprop1: \"foo\",\nmeth1: function() {},\nmeth2: function() {}\n}\n});\n</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} name of the mixin",
            "paramName": "name",
            "description": " name of the mixin",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {Map ? null} Mixin definition structure. The configuration map has the following keys:\n<table>\n<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n<tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each\nclass including this mixin. The constructor takes no parameters.</td></tr>\n<tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>\n<tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>\n<tr><th>statics</th><td>Map</td><td>\nMap of statics of the mixin. The statics will not get copied into the target class. They remain\naccessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).\n</td></tr>\n<tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>\n<tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n{@link qx.core.Property}.</td></tr>\n<tr><th>events</th><td>Map</td><td>\nMap of events the mixin fires. The keys are the names of the events and the values are\ncorresponding event type classes.\n</td></tr>\n</table>",
            "paramName": "config",
            "description": " Mixin definition structure. The configuration map has the following keys:\n<table>\n<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n<tr><th>construct</th><td>Function</td><td>An optional mixin constructor. It is called on instantiation each\nclass including this mixin. The constructor takes no parameters.</td></tr>\n<tr><th>destruct</th><td>Function</td><td>An optional mixin destructor.</td></tr>\n<tr><th>include</th><td>Mixin[]</td><td>Array of mixins, which will be merged into the mixin.</td></tr>\n<tr><th>statics</th><td>Map</td><td>\nMap of statics of the mixin. The statics will not get copied into the target class. They remain\naccessible from the mixin. This is the same behaviour as statics in interfaces ({@link qx.Interface#define}).\n</td></tr>\n<tr><th>members</th><td>Map</td><td>Map of members of the mixin.</td></tr>\n<tr><th>properties</th><td>Map</td><td>Map of property definitions. For a description of the format of a property definition see\n{@link qx.core.Property}.</td></tr>\n<tr><th>events</th><td>Map</td><td>\nMap of events the mixin fires. The keys are the names of the events and the values are\ncorresponding event type classes.\n</td></tr>\n</table>",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Mixin} The configured mixin",
            "type": "qx.Mixin",
            "description": " The configured mixin"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "checkCompatibility": {
      "location": {
        "start": {
          "line": 178,
          "column": 4
        },
        "end": {
          "line": 225,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check compatibility between mixins (including their includes)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mixins {Mixin[]} an array of mixins",
            "paramName": "mixins",
            "description": " an array of mixins",
            "type": "Mixin[]"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when there is a conflict between the mixins",
            "type": "Error",
            "description": " when there is a conflict between the mixins"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code> if the mixin passed the compatibility check",
            "type": "Boolean",
            "description": " <code>true</code> if the mixin passed the compatibility check"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCompatible": {
      "location": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 241,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks if a class is compatible to the given mixin (no conflicts)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mixin {Mixin} mixin to check",
            "paramName": "mixin",
            "description": " mixin to check",
            "type": "qx.Mixin"
          },
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "qx.Class"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when the given mixin is incompatible to the class",
            "type": "Error",
            "description": " when the given mixin is incompatible to the class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if the mixin is compatible to the given class",
            "type": "Boolean",
            "description": " true if the mixin is compatible to the given class"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getByName": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 252,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a mixin by name"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} class name to resolve",
            "paramName": "name",
            "description": " class name to resolve",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class} the class",
            "type": "qx.Class",
            "description": " the class"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isDefined": {
      "location": {
        "start": {
          "line": 261,
          "column": 4
        },
        "end": {
          "line": 263,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine if mixin exists"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} mixin name to check",
            "paramName": "name",
            "description": " mixin name to check",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if mixin exists",
            "type": "Boolean",
            "description": " true if mixin exists"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTotalNumber": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 273,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine the number of mixins which are defined"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} the number of mixins",
            "type": "Number",
            "description": " the number of mixins"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "flatten": {
      "location": {
        "start": {
          "line": 283,
          "column": 4
        },
        "end": {
          "line": 300,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Generates a list of all mixins given plus all the\nmixins these includes plus... (deep)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "mixins {Mixin[] ? []} List of mixins",
            "paramName": "mixins",
            "description": " List of mixins",
            "optional": true,
            "defaultValue": "[]",
            "type": "Mixin[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} List of all mixins",
            "type": "Array",
            "description": " List of all mixins"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "genericToString": {
      "location": {
        "start": {
          "line": 319,
          "column": 4
        },
        "end": {
          "line": 321,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPRIVATE/INTERNAL API\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "This method will be attached to all mixins to return\na nice identifier for them."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The mixin identifier",
            "type": "String",
            "description": " The mixin identifier"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$$registry": {
      "location": {
        "start": {
          "line": 325,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Registers all defined mixins"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__allowedKeys": {
      "location": {
        "start": {
          "line": 329,
          "column": 4
        },
        "end": {
          "line": 343,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} allowed keys in mixin definition"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__validateConfig": {
      "location": {
        "start": {
          "line": 353,
          "column": 4
        },
        "end": {
          "line": 411,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Validates incoming configuration and checks keys and values"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(name, config)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The name of the class",
            "paramName": "name",
            "description": " The name of the class",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {Map} Configuration map",
            "paramName": "config",
            "description": " Configuration map",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "descendants": []
}