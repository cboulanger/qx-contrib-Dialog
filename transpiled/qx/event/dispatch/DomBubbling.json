{
  "className": "qx.event.dispatch.DomBubbling",
  "packageName": "qx.event.dispatch",
  "name": "DomBubbling",
  "superClass": "qx.event.dispatch.AbstractBubbling",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 53,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\nSebastian Werner (wpbasti)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Event dispatcher for all bubbling events on DOM elements."
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 31,
          "column": 4
        },
        "end": {
          "line": 31,
          "column": 52
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this dispatcher"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "_getParent": {
      "location": {
        "start": {
          "line": 38,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target which parent should be found",
            "paramName": "target",
            "description": " The target which parent should be found",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The parent of the given target",
            "type": "var",
            "description": " The parent of the given target"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "appearsIn": [
        "qx.event.dispatch.AbstractBubbling"
      ]
    },
    "canDispatchEvent": {
      "location": {
        "start": {
          "line": 44,
          "column": 4
        },
        "end": {
          "line": 46,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Element|Event} The event dispatch target",
            "paramName": "target",
            "description": " The event dispatch target",
            "type": [
              "Element",
              "Event"
            ]
          },
          {
            "name": "@param",
            "body": "event {qx.event.type.Event} The event object",
            "paramName": "event",
            "description": " The event object",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "type {String} the event type",
            "paramName": "type",
            "description": " the event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event dispatcher is responsible for the this event",
            "type": "Boolean",
            "description": " Whether the event dispatcher is responsible for the this event"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "appearsIn": [
        "qx.event.dispatch.AbstractBubbling",
        "qx.event.IEventDispatcher"
      ]
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.dispatch.AbstractBubbling",
      "property": "reset"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 50,
        "column": 2
      },
      "end": {
        "line": 52,
        "column": 3
      }
    }
  },
  "descendants": []
}