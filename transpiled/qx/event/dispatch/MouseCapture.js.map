{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/dispatch/MouseCapture.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "dispatch",
    "AbstractBubbling",
    "construct",
    "manager",
    "registration",
    "__window",
    "getWindow",
    "__registration",
    "addListener",
    "releaseCapture",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_FIRST",
    "members",
    "__captureElement",
    "__containerCapture",
    "_getParent",
    "target",
    "parentNode",
    "canDispatchEvent",
    "type",
    "__captureEvents",
    "dispatchEvent",
    "stopPropagation",
    "dom",
    "Hierarchy",
    "contains",
    "activateCapture",
    "element",
    "containerCapture",
    "hasNativeCapture",
    "nativeSetCapture",
    "self",
    "onNativeListener",
    "bom",
    "Event",
    "removeNativeListener",
    "addNativeListener",
    "fireEvent",
    "getCaptureElement",
    "nativeReleaseCapture",
    "core",
    "Environment",
    "get",
    "parseInt",
    "select",
    "setCapture",
    "defer",
    "addDispatcher",
    "MouseCapture"
  ],
  "mappings": "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",
  "file": "MouseCapture.js",
  "sourcesContent": [
    " /* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Implementation of the Internet Explorer specific event capturing mode for\n * mouse events http://msdn2.microsoft.com/en-us/library/ms536742.aspx.\n *\n * This class is used internally by {@link qx.event.Manager} to do mouse event\n * capturing.\n *\n * @use(qx.event.handler.Focus)\n * @use(qx.event.handler.Window)\n * @use(qx.event.handler.Capture)\n */\nqx.Class.define(\"qx.event.dispatch.MouseCapture\",\n{\n  extend : qx.event.dispatch.AbstractBubbling,\n\n\n  /**\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   * @param registration {qx.event.Registration} The event registration to use\n   */\n  construct : function(manager, registration)\n  {\n    this.base(arguments, manager);\n    this.__window = manager.getWindow();\n    this.__registration = registration;\n\n    manager.addListener(this.__window, \"blur\", this.releaseCapture, this);\n    manager.addListener(this.__window, \"focus\", this.releaseCapture, this);\n    manager.addListener(this.__window, \"scroll\", this.releaseCapture, this);\n  },\n\n\n  statics :\n  {\n    /** @type {Integer} Priority of this dispatcher */\n    PRIORITY : qx.event.Registration.PRIORITY_FIRST\n  },\n\n\n  members:\n  {\n    __registration : null,\n    __captureElement : null,\n    __containerCapture : true,\n    __window : null,\n\n\n    // overridden\n    _getParent : function(target) {\n      return target.parentNode;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT DISPATCHER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // overridden\n    canDispatchEvent : function(target, event, type)\n    {\n      return !!(\n        this.__captureElement &&\n        this.__captureEvents[type]\n      );\n    },\n\n\n    // overridden\n    dispatchEvent : function(target, event, type)\n    {\n      if (type == \"click\") {\n        event.stopPropagation();\n\n        this.releaseCapture();\n        return;\n      }\n\n      if (\n        this.__containerCapture ||\n        !qx.dom.Hierarchy.contains(this.__captureElement, target)\n      ) {\n        target = this.__captureElement;\n      }\n\n      return this.base(arguments, target, event, type);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @lint ignoreReferenceField(__captureEvents)\n     */\n    __captureEvents :\n    {\n      \"mouseup\": 1,\n      \"mousedown\": 1,\n      \"click\": 1,\n      \"dblclick\": 1,\n      \"mousemove\": 1,\n      \"mouseout\": 1,\n      \"mouseover\": 1,\n\n      \"pointerdown\" : 1,\n      \"pointerup\" : 1,\n      \"pointermove\" : 1,\n      \"pointerover\" : 1,\n      \"pointerout\" : 1,\n      \"tap\" : 1,\n      \"dbltap\" : 1\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      USER ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Set the given element as target for event\n     *\n     * @param element {Element} The element which should capture the mouse events.\n     * @param containerCapture {Boolean?true} If true all events originating in\n     *   the container are captured. IF false events originating in the container\n     *   are not captured.\n     */\n    activateCapture : function(element, containerCapture)\n    {\n      var containerCapture = containerCapture !== false;\n\n      if (\n        this.__captureElement === element &&\n        this.__containerCapture == containerCapture\n      ) {\n        return;\n      }\n\n\n      if (this.__captureElement) {\n        this.releaseCapture();\n      }\n\n      // turn on native mouse capturing if the browser supports it\n      if (this.hasNativeCapture) {\n        this.nativeSetCapture(element, containerCapture);\n        var self = this;\n        var onNativeListener = function()\n        {\n          qx.bom.Event.removeNativeListener(element, \"losecapture\", onNativeListener);\n          self.releaseCapture();\n        };\n        qx.bom.Event.addNativeListener(element, \"losecapture\", onNativeListener);\n      }\n\n      this.__containerCapture = containerCapture;\n      this.__captureElement = element;\n      this.__registration.fireEvent(element, \"capture\", qx.event.type.Event, [true, false]);\n    },\n\n\n    /**\n     * Get the element currently capturing events.\n     *\n     * @return {Element|null} The current capture element. This value may be\n     *    null.\n     */\n    getCaptureElement : function() {\n      return this.__captureElement;\n    },\n\n\n    /**\n     * Stop capturing of mouse events.\n     */\n    releaseCapture : function()\n    {\n      var element = this.__captureElement;\n\n      if (!element) {\n        return;\n      }\n\n      this.__captureElement = null;\n      this.__registration.fireEvent(element, \"losecapture\", qx.event.type.Event, [true, false]);\n\n      // turn off native mouse capturing if the browser supports it\n      this.nativeReleaseCapture(element);\n    },\n\n\n    /** Whether the browser should use native mouse capturing */\n    hasNativeCapture : (qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n      qx.core.Environment.get(\"browser.documentmode\") < 9 ||\n      (parseInt(qx.core.Environment.get(\"os.version\"), 10) > 7 && qx.core.Environment.get(\"browser.documentmode\") > 9)\n    ),\n\n\n    /**\n     * If the browser supports native mouse capturing, sets the mouse capture to\n     * the object that belongs to the current document.\n     *\n     * Please note that under Windows 7 (but not Windows 8), capturing is\n     * not only applied to mouse events as expected, but also to native pointer events.\n     *\n     * @param element {Element} The capture DOM element\n     * @param containerCapture {Boolean?true} If true all events originating in\n     *   the container are captured. If false events originating in the container\n     *   are not captured.\n     * @signature function(element, containerCapture)\n     */\n    nativeSetCapture : qx.core.Environment.select(\"engine.name\",\n    {\n      \"mshtml\" : function(element, containerCapture) {\n        element.setCapture(containerCapture !== false);\n      },\n\n      \"default\" : (function() {})\n    }),\n\n\n    /**\n     * If the browser supports native mouse capturing, removes mouse capture\n     * from the object in the current document.\n     *\n     * @param element {Element} The DOM element to release the capture for\n     * @signature function(element)\n     */\n    nativeReleaseCapture : qx.core.Environment.select(\"engine.name\",\n    {\n      \"mshtml\" : function(element) {\n        element.releaseCapture();\n      },\n\n      \"default\" : (function() {})\n    })\n  },\n\n\n  defer : function(statics) {\n    qx.event.Registration.addDispatcher(statics);\n  }\n});\n"
  ]
}