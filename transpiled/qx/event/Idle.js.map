{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/Idle.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "type",
    "construct",
    "events",
    "properties",
    "timeoutInterval",
    "check",
    "init",
    "apply",
    "members",
    "__timer",
    "_applyTimeoutInterval",
    "value",
    "setInterval",
    "_onInterval",
    "fireEvent",
    "__startTimer",
    "hasListener",
    "timer",
    "event",
    "Timer",
    "getTimeoutInterval",
    "addListener",
    "start",
    "__stopTimer",
    "stop",
    "dispose",
    "listener",
    "self",
    "capture",
    "result",
    "addListenerOnce",
    "removeListener",
    "removeListenerById",
    "id",
    "destruct",
    "Idle"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA4BAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,eAAhB,EACA;AACEC,YAASN,GAAGO,IAAH,CAAQC,MADnB;AAEEC,eAAY,CAAET,GAAGO,IAAH,CAAQG,WAAV,CAFd;AAGEC,UAAO,WAHT;;AAKEC,eAAY,qBACZ;AACE;AACD,KARH;;AAWE;;;;;;AAMAC,YACA;AACE;AACA,kBAAa;AAFf,KAlBF;;AAwBE;;;;;;AAMAC,gBACA;AACE;;;;AAIAC,uBACA;AACEC,eAAO,QADT;AAEEC,cAAO,GAFT;AAGEC,eAAQ;AAHV;AANF,KA/BF;;AA8CEC,aACA;;AAEEC,eAAU,IAFZ;;AAIE;AACAC,6BAAwB,+BAASC,KAAT,EAAgB;AACtC,YAAI,KAAKF,OAAT,EAAkB;AAChB,eAAKA,OAAL,CAAaG,WAAb,CAAyBD,KAAzB;AACD;AACF,OATH;;AAWE;;;AAGAE,mBAAc,uBAAW;AACvB,aAAKC,SAAL,CAAe,UAAf;AACD,OAhBH;;AAkBE;;;AAGAC,oBAAc,wBAAW;AACvB,YAAI,CAAC,KAAKN,OAAN,IAAiB,KAAKO,WAAL,CAAiB,UAAjB,CAArB,EAAmD;AAC/C,cAAIC,QAAQ,IAAI5B,GAAG6B,KAAH,CAASC,KAAb,CAAmB,KAAKC,kBAAL,EAAnB,CAAZ;AACAH,gBAAMI,WAAN,CAAkB,UAAlB,EAA8B,KAAKR,WAAnC,EAAgD,IAAhD;AACAI,gBAAMK,KAAN;;AAEA,eAAKb,OAAL,GAAeQ,KAAf;AACH;AACF,OA7BH;;AA+BE;;;AAGAM,mBAAa,uBAAW;AACtB,YAAI,KAAKd,OAAL,IAAgB,CAAC,KAAKO,WAAL,CAAiB,UAAjB,CAArB,EAAmD;AACjD,eAAKP,OAAL,CAAae,IAAb;AACA,eAAKf,OAAL,CAAagB,OAAb;AACA,eAAKhB,OAAL,GAAe,IAAf;AACD;AACF,OAxCH;;AA0CE;;;AAGAY,mBAAa,qBAASrB,IAAT,EAAe0B,QAAf,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACnD,YAAIC,6DAA8B7B,IAA9B,EAAoC0B,QAApC,EAA8CC,IAA9C,EAAoDC,OAApD,CAAJ;AACA,aAAKb,YAAL;AACA,eAAOc,MAAP;AACD,OAjDH;;AAmDE;;;AAGAC,uBAAiB,yBAAS9B,IAAT,EAAe0B,QAAf,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACvD,YAAIC,iEAA8B7B,IAA9B,EAAoC0B,QAApC,EAA8CC,IAA9C,EAAoDC,OAApD,CAAJ;AACA,aAAKb,YAAL;AACA,eAAOc,MAAP;AACD,OA1DH;;AA4DE;;;AAGAE,sBAAgB,wBAAS/B,IAAT,EAAe0B,QAAf,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACtD,YAAIC,gEAA8B7B,IAA9B,EAAoC0B,QAApC,EAA8CC,IAA9C,EAAoDC,OAApD,CAAJ;AACA,aAAKL,WAAL;AACA,eAAOM,MAAP;AACD,OAnEH;;AAqEE;;;AAGAG,0BAAoB,4BAASC,EAAT,EAAa;AAC/B,YAAIJ,oEAA8BI,EAA9B,CAAJ;AACA,aAAKV,WAAL;AACA,eAAOM,MAAP;AACD;;AA5EH,KA/CF;;AA+HE;;;;;;AAMAK,cAAW,oBACX;AACE,UAAI,KAAKzB,OAAT,EAAkB;AAChB,aAAKA,OAAL,CAAae,IAAb;AACD;;AAED,WAAKf,OAAL,GAAe,IAAf;AACD;;AA5IH,GADA,C;AA5BApB,KAAG6B,KAAH,CAASiB,IAAT,CAAc3C,aAAd,GAA8BA,aAA9B",
  "file": "Idle.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Jonathan Wei√ü (jonathan_rass)\n\n************************************************************************ */\n\n\n/**\n * A generic singleton that fires an \"interval\" event all 100 milliseconds. It\n * can be used whenever one needs to run code periodically. The main purpose of\n * this class is reduce the number of timers.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\n\nqx.Class.define(\"qx.event.Idle\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.core.IDisposable ],\n  type : \"singleton\",\n\n  construct : function()\n  {\n    this.base(arguments);\n  },\n\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events :\n  {\n    /** This event if fired each time the interval time has elapsed */\n    \"interval\" : \"qx.event.type.Event\"\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * Interval for the timer, which periodically fires the \"interval\" event,\n     * in milliseconds.\n     */\n    timeoutInterval :\n    {\n      check: \"Number\",\n      init : 100,\n      apply : \"_applyTimeoutInterval\"\n    }\n  },\n\n\n\n  members :\n  {\n\n    __timer : null,\n\n    // property apply\n    _applyTimeoutInterval : function(value) {\n      if (this.__timer) {\n        this.__timer.setInterval(value);\n      }\n    },\n\n    /**\n     * Fires an \"interval\" event\n     */\n    _onInterval : function() {\n      this.fireEvent(\"interval\");\n    },\n\n    /**\n     * Starts the timer but only if there are listeners for the \"interval\" event\n     */\n    __startTimer: function() {\n      if (!this.__timer && this.hasListener(\"interval\")) {\n          var timer = new qx.event.Timer(this.getTimeoutInterval());\n          timer.addListener(\"interval\", this._onInterval, this);\n          timer.start();\n\n          this.__timer = timer;\n      }\n    },\n\n    /**\n     * Stops the timer but only if there are no listeners for the interval event\n     */\n    __stopTimer: function() {\n      if (this.__timer && !this.hasListener(\"interval\")) {\n        this.__timer.stop();\n        this.__timer.dispose();\n        this.__timer = null;\n      }\n    },\n\n    /*\n     * @Override\n     */\n    addListener: function(type, listener, self, capture) {\n      var result = this.base(arguments, type, listener, self, capture);\n      this.__startTimer();\n      return result;\n    },\n\n    /*\n     * @Override\n     */\n    addListenerOnce: function(type, listener, self, capture) {\n      var result = this.base(arguments, type, listener, self, capture);\n      this.__startTimer();\n      return result;\n    },\n\n    /*\n     * @Override\n     */\n    removeListener: function(type, listener, self, capture) {\n      var result = this.base(arguments, type, listener, self, capture);\n      this.__stopTimer();\n      return result;\n    },\n\n    /*\n     * @Override\n     */\n    removeListenerById: function(id) {\n      var result = this.base(arguments, id);\n      this.__stopTimer();\n      return result;\n    }\n\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if (this.__timer) {\n      this.__timer.stop();\n    }\n\n    this.__timer = null;\n  }\n\n});\n"
  ]
}