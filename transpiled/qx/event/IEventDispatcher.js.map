{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/IEventDispatcher.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Interface",
    "define",
    "members",
    "canDispatchEvent",
    "target",
    "event",
    "type",
    "assertInstance",
    "Event",
    "assertString",
    "dispatchEvent",
    "IEventDispatcher"
  ],
  "mappings": ";;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAuBAH,GAAGI,SAAH,CAAaC,MAAb,CAAoB,2BAApB,EACA;AACEC,aACA;AACE;;;;;;;;AAQAC,wBAAmB,0BAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EACnB;AACE,aAAKC,cAAL,CAAoBF,KAApB,EAA2BT,GAAGS,KAAH,CAASC,IAAT,CAAcE,KAAzC;AACA,aAAKC,YAAL,CAAkBH,IAAlB;AACD,OAbH;;AAgBE;;;;;;;;AAQAI,qBAAgB,uBAASN,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAChB;AACE,aAAKC,cAAL,CAAoBF,KAApB,EAA2BT,GAAGS,KAAH,CAASC,IAAT,CAAcE,KAAzC;AACA,aAAKC,YAAL,CAAkBH,IAAlB;AACD;AA5BH;AAFF,GADA,C;AAvBAV,KAAGS,KAAH,CAASM,gBAAT,CAA0BZ,aAA1B,GAA0CA,aAA1C",
  "file": "IEventDispatcher.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * All event dispatchers must implement this interface. Event dispatchers must\n * register themselves at the event Manager using\n * {@link qx.event.Registration#addDispatcher}.\n */\nqx.Interface.define(\"qx.event.IEventDispatcher\",\n{\n  members:\n  {\n    /**\n     * Whether the dispatcher is responsible for the this event.\n     *\n     * @param target {Element|Event} The event dispatch target\n     * @param event {qx.event.type.Event} The event object\n     * @param type {String} the event type\n     * @return {Boolean} Whether the event dispatcher is responsible for the this event\n     */\n    canDispatchEvent : function(target, event, type)\n    {\n      this.assertInstance(event, qx.event.type.Event);\n      this.assertString(type);\n    },\n\n\n    /**\n     * This function dispatches the event to the event listeners.\n     *\n     * @param target {Element|Event} The event dispatch target\n     * @param event {qx.event.type.Event} event object to dispatch\n     * @param type {String} the event type\n     * @return {qx.Promise?} a promise, if one or more of the event handlers returned a promise\n     */\n    dispatchEvent : function(target, event, type)\n    {\n      this.assertInstance(event, qx.event.type.Event);\n      this.assertString(type);\n    }\n  }\n});\n"
  ]
}