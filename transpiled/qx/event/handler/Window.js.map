{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/handler/Window.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventHandler",
    "IDisposable",
    "construct",
    "manager",
    "_manager",
    "_window",
    "getWindow",
    "_initWindowObserver",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "error",
    "load",
    "beforeunload",
    "unload",
    "resize",
    "scroll",
    "beforeshutdown",
    "TARGET_CHECK",
    "TARGET_WINDOW",
    "IGNORE_CAN_HANDLE",
    "members",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "_onNativeWrapper",
    "lang",
    "Function",
    "listener",
    "_onNative",
    "types",
    "handler",
    "Window",
    "key",
    "bom",
    "Event",
    "addNativeListener",
    "_stopWindowObserver",
    "removeNativeListener",
    "callback",
    "Environment",
    "select",
    "GlobalError",
    "observeMethod",
    "__onNativeHandler",
    "apply",
    "arguments",
    "e",
    "isDisposed",
    "win",
    "doc",
    "document",
    "ex",
    "html",
    "documentElement",
    "getTarget",
    "createEvent",
    "Native",
    "dispatchEvent",
    "result",
    "getReturnValue",
    "returnValue",
    "destruct",
    "defer",
    "addHandler"
  ],
  "mappings": "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",
  "file": "Window.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * This handler provides event for the window object.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.event.type.Native)\n * @require(qx.event.Pool)\n */\nqx.Class.define(\"qx.event.handler.Window\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.event.IEventHandler, qx.core.IDisposable ],\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct : function(manager)\n  {\n    this.base(arguments);\n\n    // Define shorthands\n    this._manager = manager;\n    this._window = manager.getWindow();\n\n    // Initialize observers\n    this._initWindowObserver();\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY : qx.event.Registration.PRIORITY_NORMAL,\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES :\n    {\n      error : 1,\n      load : 1,\n      beforeunload : 1,\n      unload : 1,\n      resize : 1,\n      scroll : 1,\n      beforeshutdown : 1\n    },\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK : qx.event.IEventHandler.TARGET_WINDOW,\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE : true\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent : function(target, type) {},\n\n\n    // interface implementation\n    registerEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n    // interface implementation\n    unregisterEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER INIT/STOP\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the native window event listeners.\n     *\n     */\n    _initWindowObserver : function()\n    {\n      this._onNativeWrapper = qx.lang.Function.listener(this._onNative, this);\n      var types = qx.event.handler.Window.SUPPORTED_TYPES;\n\n      for (var key in types) {\n        qx.bom.Event.addNativeListener(this._window, key, this._onNativeWrapper);\n      }\n    },\n\n\n    /**\n     * Disconnect the native window event listeners.\n     *\n     */\n    _stopWindowObserver : function()\n    {\n      var types = qx.event.handler.Window.SUPPORTED_TYPES;\n\n      for (var key in types) {\n        qx.bom.Event.removeNativeListener(this._window, key, this._onNativeWrapper);\n      }\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE EVENT SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * When qx.globalErrorHandling is enabled the callback will observed\n     */\n    _onNative: function () {\n      var callback = qx.core.Environment.select(\"qx.globalErrorHandling\", {\n        \"true\": qx.event.GlobalError.observeMethod(this.__onNativeHandler),\n        \"false\": this.__onNativeHandler\n      });\n      callback.apply(this, arguments);\n    },\n\n\n    /**\n     * Native listener for all supported events.\n     *\n     * @param e {Event} Native event\n     * @return {String|undefined}\n     */\n    __onNativeHandler: function (e) {\n      if (this.isDisposed()) {\n        return;\n      }\n\n      var win = this._window;\n      var doc;\n      try {\n        doc = win.document;\n      } catch(ex) {\n        // IE7 sometimes dispatches \"unload\" events on protected windows\n        // Ignore these events\n        return;\n      }\n\n      var html = doc.documentElement;\n\n      // At least Safari 3.1 and Opera 9.2.x have a bubbling scroll event\n      // which needs to be ignored here.\n      //\n      // In recent WebKit nightlies scroll events do no longer bubble\n      //\n      // Internet Explorer does not have a target in resize events.\n      var target = qx.bom.Event.getTarget(e);\n      if (target == null || target === win || target === doc || target === html) {\n        var event = qx.event.Registration.createEvent(e.type, qx.event.type.Native, [e, win]);\n        qx.event.Registration.dispatchEvent(win, event);\n\n        var result = event.getReturnValue();\n        if (result != null) {\n          e.returnValue = result;\n          return result;\n        }\n      }\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._stopWindowObserver();\n    this._manager = this._window = null;\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics) {\n    qx.event.Registration.addHandler(statics);\n  }\n});\n"
  ]
}