{
  "className": "qx.event.handler.DragDrop",
  "packageName": "qx.event.handler",
  "name": "DragDrop",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.event.IEventHandler",
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0
      },
      "end": {
        "line": 987,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Event handler, which supports drag events on DOM elements.\n\nNOTE: Instances of this class must be disposed of after use"
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.event.handler.Gesture"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Keyboard"
        },
        {
          "name": "@require",
          "body": "qx.event.handler.Capture"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 45,
        "column": 2
      },
      "end": {
        "line": 61,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "manager {qx.event.Manager} Event manager for the window to use",
          "paramName": "manager",
          "description": " Event manager for the window to use",
          "type": "qx.event.Manager"
        }
      ]
    }
  },
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 75,
          "column": 4
        },
        "end": {
          "line": 75,
          "column": 52
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this handler"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SUPPORTED_TYPES": {
      "location": {
        "start": {
          "line": 78,
          "column": 4
        },
        "end": {
          "line": 88,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Supported event types"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "IGNORE_CAN_HANDLE": {
      "location": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 91,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Whether the method \"canHandleEvent\" must be called"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "ALLOWED_BUTTONS": {
      "location": {
        "start": {
          "line": 98,
          "column": 4
        },
        "end": {
          "line": 98,
          "column": 29
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Array of strings holding the names of the allowed mouse buttons\nfor Drag & Drop. The default is \"left\" but could be extended with\n\"middle\" or \"right\""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "MIN_DRAG_DISTANCE": {
      "location": {
        "start": {
          "line": 104,
          "column": 4
        },
        "end": {
          "line": 104,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The distance needed to change the mouse position before a drag session start."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "properties": {
    "cursor": {
      "location": {
        "start": {
          "line": 113,
          "column": 4
        },
        "end": {
          "line": 117,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Widget instance of the drag & drop cursor. If non is given, the default\n{@link qx.ui.core.DragDropCursor} will be used."
          }
        ]
      },
      "name": "cursor",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "qx.ui.core.Widget"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__manager": {
      "location": {
        "start": {
          "line": 129,
          "column": 4
        },
        "end": {
          "line": 129,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__root": {
      "location": {
        "start": {
          "line": 130,
          "column": 4
        },
        "end": {
          "line": 130,
          "column": 17
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dropTarget": {
      "location": {
        "start": {
          "line": 131,
          "column": 4
        },
        "end": {
          "line": 131,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dragTarget": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__types": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__actions": {
      "location": {
        "start": {
          "line": 134,
          "column": 4
        },
        "end": {
          "line": 134,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__keys": {
      "location": {
        "start": {
          "line": 135,
          "column": 4
        },
        "end": {
          "line": 135,
          "column": 17
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__cache": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__currentType": {
      "location": {
        "start": {
          "line": 137,
          "column": 4
        },
        "end": {
          "line": 137,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__currentAction": {
      "location": {
        "start": {
          "line": 138,
          "column": 4
        },
        "end": {
          "line": 138,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__sessionActive": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 139,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__validDrop": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 140,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__validAction": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 25
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dragTargetWidget": {
      "location": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 142,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__startConfig": {
      "location": {
        "start": {
          "line": 143,
          "column": 4
        },
        "end": {
          "line": 143,
          "column": 24
        }
      },
      "type": "variable",
      "access": "private"
    },
    "canHandleEvent": {
      "location": {
        "start": {
          "line": 153,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 46
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLER INTERFACE\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target to, which the event handler should\nbe attached",
            "paramName": "target",
            "description": " The target to, which the event handler should\nbe attached",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event handler can handle events of the\ngiven type.",
            "type": "Boolean",
            "description": " Whether the event handler can handle events of the\ngiven type."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "registerEvent": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 159,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target to, which the event handler should\nbe attached",
            "paramName": "target",
            "description": " The target to, which the event handler should\nbe attached",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "unregisterEvent": {
      "location": {
        "start": {
          "line": 163,
          "column": 4
        },
        "end": {
          "line": 165,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target from, which the event handler should\nbe removed",
            "paramName": "target",
            "description": " The target from, which the event handler should\nbe removed",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "addType": {
      "location": {
        "start": {
          "line": 182,
          "column": 4
        },
        "end": {
          "line": 184,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPUBLIC METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Registers a supported type"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} The type to add",
            "paramName": "type",
            "description": " The type to add",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addAction": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 194,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Registers a supported action. One of <code>move</code>,\n<code>copy</code> or <code>alias</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The action to add",
            "paramName": "action",
            "description": " The action to add",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "supportsType": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the current drag target supports the given type"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any type",
            "paramName": "type",
            "description": " Any type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the type is supported",
            "type": "Boolean",
            "description": " Whether the type is supported"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "supportsAction": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 216,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the current drag target supports the given action"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any type",
            "paramName": "type",
            "description": " Any type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the action is supported",
            "type": "Boolean",
            "description": " Whether the action is supported"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDropAllowed": {
      "location": {
        "start": {
          "line": 223,
          "column": 4
        },
        "end": {
          "line": 226,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the current drop target allows the current drag target."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "isAllowed {Boolean} False if a drop should be disallowed",
            "paramName": "isAllowed",
            "description": " False if a drop should be disallowed",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getData": {
      "location": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 261,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the data of the given type during the <code>drop</code> event\non the drop target. This method fires a <code>droprequest</code> at\nthe drag target which should be answered by calls to {@link #addData}.\n\nNote that this is a synchronous method and if any of the drag and drop\nevents handlers are implemented using Promises, this may fail; @see\n`getDataAsync`."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any supported type",
            "paramName": "type",
            "description": " Any supported type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The result data in a promise",
            "type": "var",
            "description": " The result data in a promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDataAsync": {
      "location": {
        "start": {
          "line": 272,
          "column": 4
        },
        "end": {
          "line": 298,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the data of the given type during the <code>drop</code> event\non the drop target. This method fires a <code>droprequest</code> at\nthe drag target which should be answered by calls to {@link #addData}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any supported type",
            "paramName": "type",
            "description": " Any supported type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise} The result data in a promise",
            "type": "qx.Promise",
            "description": " The result data in a promise"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentAction": {
      "location": {
        "start": {
          "line": 307,
          "column": 4
        },
        "end": {
          "line": 310,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the currently selected action (by user keyboard modifiers)"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} One of <code>move</code>, <code>copy</code> or\n<code>alias</code>",
            "type": "String",
            "description": " One of <code>move</code>, <code>copy</code> or\n<code>alias</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentActionAsync": {
      "location": {
        "start": {
          "line": 319,
          "column": 4
        },
        "end": {
          "line": 325,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the currently selected action (by user keyboard modifiers)"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|String} One of <code>move</code>, <code>copy</code> or\n<code>alias</code>",
            "type": "qx.Promise|String",
            "description": " One of <code>move</code>, <code>copy</code> or\n<code>alias</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDragTarget": {
      "location": {
        "start": {
          "line": 332,
          "column": 4
        },
        "end": {
          "line": 334,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the widget which has been the target of the drag start."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The widget on which the drag started.",
            "type": "qx.ui.core.Widget",
            "description": " The widget on which the drag started."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addData": {
      "location": {
        "start": {
          "line": 344,
          "column": 4
        },
        "end": {
          "line": 346,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds data of the given type to the internal storage. The data\nis available until the <code>dragend</code> event is fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any valid type",
            "paramName": "type",
            "description": " Any valid type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} Any data to store",
            "paramName": "data",
            "description": " Any data to store",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentType": {
      "location": {
        "start": {
          "line": 354,
          "column": 4
        },
        "end": {
          "line": 356,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the type which was requested last."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The last requested data type",
            "type": "String",
            "description": " The last requested data type"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isSessionActive": {
      "location": {
        "start": {
          "line": 364,
          "column": 4
        },
        "end": {
          "line": 366,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns if a drag session is currently active"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} active drag session",
            "type": "Boolean",
            "description": " active drag session"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__rebuildStructures": {
      "location": {
        "start": {
          "line": 378,
          "column": 4
        },
        "end": {
          "line": 384,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nINTERNAL UTILS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Rebuilds the internal data storage used during a drag&drop session"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__detectAction": {
      "location": {
        "start": {
          "line": 394,
          "column": 4
        },
        "end": {
          "line": 457,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects the current action and stores it under the private\nfield <code>__currentAction</code>. Also fires the event\n<code>dragchange</code> on every modification."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|null}",
            "type": "qx.Promise|null",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__fireEvent": {
      "location": {
        "start": {
          "line": 473,
          "column": 4
        },
        "end": {
          "line": 500,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Wrapper for {@link qx.event.Registration#fireEvent} for drag&drop events\nneeded in this class."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Event type",
            "paramName": "type",
            "description": " Event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "target {Object} Target to fire on",
            "paramName": "target",
            "description": " Target to fire on",
            "type": "qx.event.handler.Object"
          },
          {
            "name": "@param",
            "body": "relatedTarget {Object} Related target, i.e. drag or drop target\ndepending on the drag event",
            "paramName": "relatedTarget",
            "description": " Related target, i.e. drag or drop target\ndepending on the drag event",
            "type": "qx.event.handler.Object"
          },
          {
            "name": "@param",
            "body": "cancelable {Boolean} Whether the event is cancelable",
            "paramName": "cancelable",
            "description": " Whether the event is cancelable",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "original {qx.event.type.Pointer} Original pointer event",
            "paramName": "original",
            "description": " Original pointer event",
            "type": "qx.event.type.Pointer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|Boolean} <code>true</code> if the event's default behavior was\nnot prevented",
            "type": "qx.Promise|Boolean",
            "description": " <code>true</code> if the event's default behavior was\nnot prevented"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__findDraggable": {
      "location": {
        "start": {
          "line": 511,
          "column": 4
        },
        "end": {
          "line": 523,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Finds next draggable parent of the given element. Maybe the element itself as well.\n\nLooks for the attribute <code>qxDraggable</code> with the value <code>on</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} The element to query",
            "paramName": "elem",
            "description": " The element to query",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The next parent element which is draggable. May also be <code>null</code>",
            "type": "qx.event.handler.Element",
            "description": " The next parent element which is draggable. May also be <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__findDroppable": {
      "location": {
        "start": {
          "line": 534,
          "column": 4
        },
        "end": {
          "line": 546,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Finds next droppable parent of the given element. Maybe the element itself as well.\n\nLooks for the attribute <code>qxDroppable</code> with the value <code>on</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} The element to query",
            "paramName": "elem",
            "description": " The element to query",
            "type": "qx.event.handler.Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The next parent element which is droppable. May also be <code>null</code>",
            "type": "qx.event.handler.Element",
            "description": " The next parent element which is droppable. May also be <code>null</code>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "clearSession": {
      "location": {
        "start": {
          "line": 554,
          "column": 4
        },
        "end": {
          "line": 593,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Cleans up a drag&drop session when <code>dragstart</code> was fired before."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise?} promise, if one was created by event handlers",
            "type": "qx.Promise?",
            "description": " promise, if one was created by event handlers"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_onLongtap": {
      "location": {
        "start": {
          "line": 609,
          "column": 4
        },
        "end": {
          "line": 617,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Handler for long tap which takes care of starting the drag & drop session for\ntouch interactions."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Tap} The longtap event.",
            "paramName": "e",
            "description": " The longtap event.",
            "type": "qx.event.type.Tap"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_start": {
      "location": {
        "start": {
          "line": 628,
          "column": 4
        },
        "end": {
          "line": 674,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper to start the drag & drop session. It is responsible for firing the\ndragstart event and attaching the key listener."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} Either a longtap or pointermove event.",
            "paramName": "e",
            "description": " Either a longtap or pointermove event.",
            "type": "qx.event.type.Pointer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Returns <code>false</code> if drag session should be\ncanceled.",
            "type": "Boolean",
            "description": " Returns <code>false</code> if drag session should be\ncanceled."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerdown": {
      "location": {
        "start": {
          "line": 681,
          "column": 4
        },
        "end": {
          "line": 693,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the pointerdown event which stores the initial targets and the coordinates."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointerdown event.",
            "paramName": "e",
            "description": " The pointerdown event.",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointermove": {
      "location": {
        "start": {
          "line": 701,
          "column": 4
        },
        "end": {
          "line": 823,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler for the pointermove event which starts the drag session and\nis responsible for firing the drag, dragover and dragleave event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointermove event.",
            "paramName": "e",
            "description": " The pointermove event.",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getDelta": {
      "location": {
        "start": {
          "line": 834,
          "column": 4
        },
        "end": {
          "line": 847,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper function to compute the delta between current cursor position from given event\nand the stored coordinates at {@link #_onPointerdown}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointer event",
            "paramName": "e",
            "description": " The pointer event",
            "type": "qx.event.type.Pointer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} containing the deltaX as x, and deltaY as y.",
            "type": "Map",
            "description": " containing the deltaX as x, and deltaY as y."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onPointerup": {
      "location": {
        "start": {
          "line": 854,
          "column": 4
        },
        "end": {
          "line": 878,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Handler for the pointerup event which is responsible fore firing the drop event."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Pointer} The pointerup event",
            "paramName": "e",
            "description": " The pointerup event",
            "type": "qx.event.type.Pointer"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onRoll": {
      "location": {
        "start": {
          "line": 885,
          "column": 4
        },
        "end": {
          "line": 887,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Roll listener to stop scrolling on touch devices."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Roll} The roll event.",
            "paramName": "e",
            "description": " The roll event.",
            "type": "qx.event.type.Roll"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onWindowBlur": {
      "location": {
        "start": {
          "line": 895,
          "column": 4
        },
        "end": {
          "line": 897,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for window's <code>blur</code> event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Event object",
            "paramName": "e",
            "description": " Event object",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyDown": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 918,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for root's <code>keydown</code> event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} Event object",
            "paramName": "e",
            "description": " Event object",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyUp": {
      "location": {
        "start": {
          "line": 926,
          "column": 4
        },
        "end": {
          "line": 939,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for root's <code>keyup</code> event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} Event object",
            "paramName": "e",
            "description": " Event object",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onKeyPress": {
      "location": {
        "start": {
          "line": 947,
          "column": 4
        },
        "end": {
          "line": 954,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event listener for root's <code>keypress</code> event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.KeySequence} Event object",
            "paramName": "e",
            "description": " Event object",
            "type": "qx.event.type.KeySequence"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getCursor": {
      "type": "function",
      "name": "getCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>cursor</code>.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.ui.core.Widget",
            "desc": "Returns the value for cursor"
          }
        ]
      }
    },
    "setCursor": {
      "type": "function",
      "name": "setCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>cursor</code>.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.ui.core.Widget",
            "paramName": "value",
            "desc": "Value for cursor"
          }
        ]
      }
    },
    "resetCursor": {
      "type": "function",
      "name": "resetCursor",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>cursor</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #cursor}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 966,
        "column": 2
      },
      "end": {
        "line": 973,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 984,
        "column": 2
      },
      "end": {
        "line": 986,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDEFER\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}