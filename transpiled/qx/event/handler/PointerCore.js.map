{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/handler/PointerCore.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "implement",
    "core",
    "IDisposable",
    "statics",
    "MOUSE_TO_POINTER_MAPPING",
    "mousedown",
    "mouseup",
    "mousemove",
    "mouseout",
    "mouseover",
    "TOUCH_TO_POINTER_MAPPING",
    "touchstart",
    "touchend",
    "touchmove",
    "touchcancel",
    "MSPOINTER_TO_POINTER_MAPPING",
    "MSPointerDown",
    "MSPointerMove",
    "MSPointerUp",
    "MSPointerCancel",
    "MSPointerLeave",
    "MSPointerEnter",
    "MSPointerOver",
    "MSPointerOut",
    "POINTER_TO_GESTURE_MAPPING",
    "pointerdown",
    "pointerup",
    "pointercancel",
    "pointermove",
    "LEFT_BUTTON",
    "Environment",
    "get",
    "SIM_MOUSE_DISTANCE",
    "SIM_MOUSE_DELAY",
    "__lastTouch",
    "construct",
    "target",
    "emitter",
    "__defaultTarget",
    "__emitter",
    "__eventNames",
    "__buttonStates",
    "__activeTouches",
    "_processedFlag",
    "classname",
    "substr",
    "lastIndexOf",
    "engineName",
    "docMode",
    "parseInt",
    "_initPointerObserver",
    "__nativePointerEvents",
    "_initObserver",
    "_onTouchEvent",
    "_onMouseEvent",
    "members",
    "__wrappedListener",
    "__lastButtonState",
    "__primaryIdentifier",
    "_onPointerEvent",
    "callback",
    "useEmitter",
    "lang",
    "Function",
    "listener",
    "forEach",
    "type",
    "dom",
    "Node",
    "isDocument",
    "$$emitter",
    "event",
    "Emitter",
    "on",
    "bom",
    "Event",
    "addNativeListener",
    "bind",
    "domEvent",
    "toLowerCase",
    "indexOf",
    "stopPropagation",
    "handler",
    "PointerCore",
    "getTarget",
    "evt",
    "Pointer",
    "_fireEvent",
    "changedTouches",
    "_determineActiveTouches",
    "touches",
    "length",
    "i",
    "cancelEvent",
    "identifier",
    "pointerType",
    "pointerId",
    "l",
    "touch",
    "touchTarget",
    "view",
    "document",
    "elementFromPoint",
    "clientX",
    "clientY",
    "touchProps",
    "pageX",
    "pageY",
    "screenX",
    "screenY",
    "overEvt",
    "isPrimary",
    "button",
    "buttons",
    "Date",
    "getTime",
    "outEvt",
    "_isSimulatedMouseEvent",
    "which",
    "ctrlKey",
    "buttonsPressed",
    "Array",
    "sum",
    "mouseProps",
    "moveEvt",
    "push",
    "updatedActiveTouches",
    "add",
    "j",
    "x",
    "y",
    "timeSinceTouch",
    "time",
    "dist",
    "distX",
    "Math",
    "abs",
    "distY",
    "_stopObserver",
    "removeNativeListener",
    "gestureEvent",
    "normalize",
    "srcElement",
    "ex",
    "tracker",
    "Utils",
    "then",
    "dispatchEvent",
    "promise",
    "currentTarget",
    "_stopped",
    "emit",
    "parentNode",
    "dispose"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAyBAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,8BAApB,EAAoD;;AAElDC,YAASC,MAFyC;AAGlDC,eAAW,CAAEP,GAAGQ,IAAH,CAAQC,WAAV,CAHuC;;AAKlDC,aAAU;AACRC,gCAA0B;AACxBC,mBAAW,aADa;AAExBC,iBAAS,WAFe;AAGxBC,mBAAW,aAHa;AAIxBC,kBAAU,YAJc;AAKxBC,mBAAW;AALa,OADlB;;AASRC,gCAA0B;AACxBC,oBAAY,aADY;AAExBC,kBAAU,WAFc;AAGxBC,mBAAW,aAHa;AAIxBC,qBAAa;AAJW,OATlB;;AAgBRC,oCAA8B;AAC5BC,uBAAgB,aADY;AAE5BC,uBAAgB,aAFY;AAG5BC,qBAAc,WAHc;AAI5BC,yBAAkB,eAJU;AAK5BC,wBAAiB,cALW;AAM5BC,wBAAgB,cANY;AAO5BC,uBAAgB,aAPY;AAQ5BC,sBAAe;AARa,OAhBtB;;AA2BRC,kCAA6B;AAC3BC,qBAAc,cADa;AAE3BC,mBAAY,eAFe;AAG3BC,uBAAgB,eAHW;AAI3BC,qBAAc;AAJa,OA3BrB;;AAkCRC,mBAAepC,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,QAA1C,IACbtC,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,KAAmD,CADvC,GAC4C,CAD5C,GACgD,CAnCtD;;AAqCRC,0BAAqB,EArCb;;AAuCRC,uBAAkB,IAvCV;;AAyCR;;;;;;;AAOAC,mBAAc;AAhDN,KALwC;;AAwDlD;;;;;;;AAOAC,eAAY,mBAASC,MAAT,EAAiBC,OAAjB,EAA0B;AACpC,WAAKC,eAAL,GAAuBF,MAAvB;AACA,WAAKG,SAAL,GAAiBF,OAAjB;AACA,WAAKG,YAAL,GAAoB,EAApB;AACA,WAAKC,cAAL,GAAsB,EAAtB;AACA,WAAKC,eAAL,GAAuB,EAAvB;AACA,WAAKC,cAAL,GAAsB,SACpB,KAAKC,SAAL,CAAeC,MAAf,CAAsB,KAAKD,SAAL,CAAeE,WAAf,CAA2B,GAA3B,IAAkC,CAAxD,CADoB,GAEpB,WAFF;;AAIA,UAAIC,aAAatD,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,CAAjB;AACA,UAAIiB,UAAUC,SAASxD,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,CAAT,EAA0D,EAA1D,CAAd;AACA,UAAIgB,cAAc,QAAd,IAA0BC,WAAW,EAAzC,EAA6C;AAC3C;AACA,aAAKR,YAAL,GAAoB,CAClB,eADkB,EACD,eADC,EACgB,aADhB,EAC+B,iBAD/B,EACkD,eADlD,EACmE,cADnE,EAElB,aAFkB,EAEH,aAFG,EAEY,WAFZ,EAEyB,eAFzB,EAE0C,aAF1C,EAEyD,YAFzD,CAApB;AAIA,aAAKU,oBAAL;AACD,OAPD,MAOO;AACL,YAAIzD,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,CAAJ,EAAgD;AAC9C,eAAKoB,qBAAL,GAA6B,IAA7B;AACD;AACD,aAAKX,YAAL,GAAoB,CAClB,aADkB,EACH,aADG,EACY,WADZ,EACyB,eADzB,EAC0C,aAD1C,EACyD,YADzD,CAApB;AAGA,aAAKU,oBAAL;AACD;AACD,UAAI,CAACzD,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,CAAL,EAAiD;AAC/C,YAAItC,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,cAAxB,CAAJ,EAA6C;AAC3C,eAAKS,YAAL,GAAoB,CAAC,YAAD,EAAe,UAAf,EAA2B,WAA3B,EAAwC,aAAxC,CAApB;AACA,eAAKY,aAAL,CAAmB,KAAKC,aAAxB;AACD;;AAED,aAAKb,YAAL,GAAoB,CAClB,WADkB,EACL,SADK,EACM,WADN,EACmB,WADnB,EACgC,UADhC,EAC4C,aAD5C,CAApB;AAGA,aAAKY,aAAL,CAAmB,KAAKE,aAAxB;AACD;AACF,KAtGiD;;AAyGlDC,aAAU;AACRjB,uBAAkB,IADV;AAERC,iBAAY,IAFJ;AAGRC,oBAAe,IAHP;AAIRW,6BAAwB,KAJhB;AAKRK,yBAAoB,IALZ;AAMRC,yBAAoB,CANZ;AAORhB,sBAAiB,IAPT;AAQRiB,2BAAsB,IARd;AASRhB,uBAAkB,IATV;AAURC,sBAAiB,IAVT;;AAYR;;;AAGAO,4BAAuB,gCAAW;AAChC,aAAKE,aAAL,CAAmB,KAAKO,eAAxB;AACD,OAjBO;;AAoBR;;;;;;AAMAP,qBAAgB,uBAASQ,QAAT,EAAmBC,UAAnB,EAA+B;AAC7C,aAAKL,iBAAL,GAAyB/D,GAAGqE,IAAH,CAAQC,QAAR,CAAiBC,QAAjB,CAA0BJ,QAA1B,EAAoC,IAApC,CAAzB;AACA,aAAKpB,YAAL,CAAkByB,OAAlB,CAA0B,UAASC,IAAT,EAAe;AACvC,cAAIL,cAAcpE,GAAG0E,GAAH,CAAOC,IAAP,CAAYC,UAAZ,CAAuB,KAAK/B,eAA5B,CAAlB,EAAgE;AAC9D,gBAAI,CAAC,KAAKA,eAAL,CAAqBgC,SAA1B,EAAqC;AACnC,mBAAKhC,eAAL,CAAqBgC,SAArB,GAAiC,IAAI7E,GAAG8E,KAAH,CAASC,OAAb,EAAjC;AACD;AACD,iBAAKlC,eAAL,CAAqBgC,SAArB,CAA+BG,EAA/B,CAAkCP,IAAlC,EAAwC,KAAKV,iBAA7C;AACD,WALD,MAKO;AACL/D,eAAGiF,GAAH,CAAOC,KAAP,CAAaC,iBAAb,CAA+B,KAAKtC,eAApC,EAAqD4B,IAArD,EAA2D,KAAKV,iBAAhE;AACD;AACF,SATyB,CASxBqB,IATwB,CASnB,IATmB,CAA1B;AAUD,OAtCO;;AAwCR;;;;AAIAlB,uBAAkB,yBAASmB,QAAT,EAAmB;AACnC,YAAI,CAACrF,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,CAAD;AACA;AACCtC,WAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,MAAoD,EAApD,IAA0D+C,SAASZ,IAAT,CAAca,WAAd,GAA4BC,OAA5B,CAAoC,IAApC,KAA6C,CAAC,CAF7G,EAIA;AACE;AACD;AACD,YAAI,CAAC,KAAK7B,qBAAV,EAAiC;AAC/B2B,mBAASG,eAAT;AACD;AACD,YAAIf,OAAOzE,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BpE,4BAA7B,CAA0D+D,SAASZ,IAAnE,KAA4EY,SAASZ,IAAhG;AACA,YAAI9B,SAAS3C,GAAGiF,GAAH,CAAOC,KAAP,CAAaS,SAAb,CAAuBN,QAAvB,CAAb;AACA,YAAIO,MAAM,IAAI5F,GAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8BpB,IAA9B,EAAoCY,QAApC,CAAV;AACA,aAAKS,UAAL,CAAgBF,GAAhB,EAAqBnB,IAArB,EAA2B9B,MAA3B;AACD,OA3DO;;AA8DR;;;;AAIAiB,qBAAe,uBAASyB,QAAT,EAAmB;AAChC,YAAIA,SAAS,KAAKnC,cAAd,CAAJ,EAAmC;AACjC;AACD;AACDmC,iBAAS,KAAKnC,cAAd,IAAgC,IAAhC;AACA,YAAIuB,OAAOzE,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BzE,wBAA7B,CAAsDoE,SAASZ,IAA/D,CAAX;AACA,YAAIsB,iBAAiBV,SAASU,cAA9B;;AAEA,aAAKC,uBAAL,CAA6BX,SAASZ,IAAtC,EAA4CsB,cAA5C;;AAEA;AACA,YAAIV,SAASY,OAAT,CAAiBC,MAAjB,GAA0B,KAAKjD,eAAL,CAAqBiD,MAAnD,EAA2D;AACzD;AACA,eAAK,IAAIC,IAAI,KAAKlD,eAAL,CAAqBiD,MAArB,GAA8B,CAA3C,EAA8CC,KAAK,CAAnD,EAAsDA,GAAtD,EAA2D;AACzD,gBAAIC,cAAc,IAAIpG,GAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8B,eAA9B,EAA+CR,QAA/C,EAAyD;AACzEgB,0BAAY,KAAKpD,eAAL,CAAqBkD,CAArB,EAAwBE,UADqC;AAEzE1D,sBAAQ0C,SAAS1C,MAFwD;AAGzE2D,2BAAa,OAH4D;AAIzEC,yBAAW,KAAKtD,eAAL,CAAqBkD,CAArB,EAAwBE,UAAxB,GAAqC;AAJyB,aAAzD,CAAlB;;AAOA,iBAAKP,UAAL,CAAgBM,WAAhB,EAA6B,eAA7B,EAA8Cf,SAAS1C,MAAvD;AACD;;AAED;AACA,eAAKsB,mBAAL,GAA2B,IAA3B;;AAEA;AACA,eAAKhB,eAAL,GAAuB,EAAvB;;AAEA;AACA;AACD;;AAED,YAAIoC,SAASZ,IAAT,IAAiB,YAAjB,IAAiC,KAAKR,mBAAL,KAA6B,IAAlE,EAAwE;AACtE,eAAKA,mBAAL,GAA2B8B,eAAe,CAAf,EAAkBM,UAA7C;AACD;;AAED,aAAK,IAAIF,IAAI,CAAR,EAAWK,IAAIT,eAAeG,MAAnC,EAA2CC,IAAIK,CAA/C,EAAkDL,GAAlD,EAAuD;AACrD,cAAIM,QAAQV,eAAeI,CAAf,CAAZ;;AAEA,cAAIO,cAAcrB,SAASsB,IAAT,CAAcC,QAAd,CAAuBC,gBAAvB,CAAwCJ,MAAMK,OAA9C,EAAsDL,MAAMM,OAA5D,KAAwE1B,SAAS1C,MAAnG;;AAEA,cAAIqE,aAAa;AACfF,qBAASL,MAAMK,OADA;AAEfC,qBAASN,MAAMM,OAFA;AAGfE,mBAAOR,MAAMQ,KAHE;AAIfC,mBAAOT,MAAMS,KAJE;AAKfb,wBAAYI,MAAMJ,UALH;AAMfc,qBAASV,MAAMU,OANA;AAOfC,qBAASX,MAAMW,OAPA;AAQfzE,oBAAQ+D,WARO;AASfJ,yBAAa,OATE;AAUfC,uBAAWE,MAAMJ,UAAN,GAAmB;AAVf,WAAjB;;AAaA,cAAIhB,SAASZ,IAAT,IAAiB,YAArB,EAAmC;AACjC;AACA,gBAAI4C,UAAU,IAAIrH,GAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8B,aAA9B,EAA6CR,QAA7C,EAAuD2B,UAAvD,CAAd;AACA,iBAAKlB,UAAL,CAAgBuB,OAAhB,EAAyB,aAAzB,EAAwCL,WAAWrE,MAAnD;AACD;;AAED,cAAI8D,MAAMJ,UAAN,IAAoB,KAAKpC,mBAA7B,EAAkD;AAChD+C,uBAAWM,SAAX,GAAuB,IAAvB;AACA;AACAN,uBAAWO,MAAX,GAAoB,CAApB;AACAP,uBAAWQ,OAAX,GAAqB,CAArB;AACAxH,eAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BjD,WAA7B,GAA2C;AACzC,mBAAKgE,MAAMK,OAD8B;AAEzC,mBAAKL,MAAMM,OAF8B;AAGzC,sBAAQ,IAAIU,IAAJ,GAAWC,OAAX;AAHiC,aAA3C;AAKD;;AAED,cAAI9B,MAAM,IAAI5F,GAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8BpB,IAA9B,EAAoCY,QAApC,EAA8C2B,UAA9C,CAAV;;AAEA,eAAKlB,UAAL,CAAgBF,GAAhB,EAAqBnB,IAArB,EAA2BuC,WAAWrE,MAAtC;;AAEA,cAAI0C,SAASZ,IAAT,IAAiB,UAAjB,IAA+BY,SAASZ,IAAT,IAAiB,aAApD,EAAmE;AACjE;AACA,gBAAIkD,SAAS,IAAI3H,GAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8B,YAA9B,EAA4CR,QAA5C,EAAsD2B,UAAtD,CAAb;AACA;AACA,iBAAKlB,UAAL,CAAgB6B,MAAhB,EAAwB,YAAxB,EAAsCtC,SAAS1C,MAA/C;;AAEA,gBAAI,KAAKsB,mBAAL,IAA4BwC,MAAMJ,UAAtC,EAAkD;AAChD,mBAAKpC,mBAAL,GAA2B,IAA3B;AACD;AACF;AACF;AACF,OA3JO;;AA8JR;;;;AAIAJ,qBAAgB,uBAASwB,QAAT,EAAmB;AACjC,YAAIA,SAAS,KAAKnC,cAAd,CAAJ,EAAmC;AACjC;AACD;AACDmC,iBAAS,KAAKnC,cAAd,IAAgC,IAAhC;;AAEA,YAAI,KAAK0E,sBAAL,CAA4BvC,SAASyB,OAArC,EAA8CzB,SAAS0B,OAAvD,CAAJ,EAAqE;AACnE;;;;AAIA;AACD;;AAED,YAAI1B,SAASZ,IAAT,IAAiB,WAArB,EAAkC;AAChC,eAAKzB,cAAL,CAAoBqC,SAASwC,KAA7B,IAAsC,CAAtC;AACD,SAFD,MAEO,IAAIxC,SAASZ,IAAT,IAAiB,SAArB,EAAgC;AACrC,cAAIzE,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,SAAxB,KAAsC,KAAtC,IAA+CtC,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,aAAxB,KAA0C,OAA7F,EAAsG;AACpG,gBAAI,KAAKU,cAAL,CAAoBqC,SAASwC,KAA7B,KAAuC,CAAvC,IAA4CxC,SAASyC,OAAzD,EAAkE;AAChE,mBAAK9E,cAAL,CAAoB,CAApB,IAAyB,CAAzB;AACD;AACF;;AAED,eAAKA,cAAL,CAAoBqC,SAASwC,KAA7B,IAAsC,CAAtC;AACD;;AAED,YAAIpD,OAAOzE,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6B/E,wBAA7B,CAAsD0E,SAASZ,IAA/D,CAAX;AACA,YAAI9B,SAAS3C,GAAGiF,GAAH,CAAOC,KAAP,CAAaS,SAAb,CAAuBN,QAAvB,CAAb;;AAEA,YAAI0C,iBAAiB/H,GAAGqE,IAAH,CAAQ2D,KAAR,CAAcC,GAAd,CAAkB,KAAKjF,cAAvB,CAArB;;AAEA,YAAIkF,aAAa,EAAC5B,aAAc,OAAf,EAAwBC,WAAW,CAAnC,EAAjB;;AAEA;AACA,YAAI,KAAKvC,iBAAL,IAA0B+D,cAA1B,IAA4CA,mBAAmB,CAA/D,IAAoE,KAAK/D,iBAAL,KAA2B,CAAnG,EAAsG;AACpG,cAAImE,UAAU,IAAInI,GAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8B,aAA9B,EAA6CR,QAA7C,EAAuD6C,UAAvD,CAAd;AACA,eAAKpC,UAAL,CAAgBqC,OAAhB,EAAyB,aAAzB,EAAwCxF,MAAxC;AACD;AACD,aAAKqB,iBAAL,GAAyB+D,cAAzB;;AAEA;AACA,YAAI1C,SAASZ,IAAT,IAAiB,WAAjB,IAAgCsD,iBAAiB,CAArD,EAAwD;AACtD;AACD;;AAED;AACA,YAAI1C,SAASZ,IAAT,IAAiB,SAAjB,IAA8BsD,iBAAiB,CAAnD,EAAsD;AACpD;AACD;;AAED,YAAI1C,SAASZ,IAAT,IAAiB,aAArB,EAAoC;AAClC,eAAKzB,cAAL,CAAoBqC,SAASwC,KAA7B,IAAsC,CAAtC;AACA;AACD;;AAED,YAAIjC,MAAM,IAAI5F,GAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CAA8BpB,IAA9B,EAAoCY,QAApC,EAA8C6C,UAA9C,CAAV;AACA,aAAKpC,UAAL,CAAgBF,GAAhB,EAAqBnB,IAArB,EAA2B9B,MAA3B;AACD,OA3NO;;AA8NR;;;;;AAKAqD,+BAAyB,iCAASvB,IAAT,EAAesB,cAAf,EAA+B;AACtD,YAAItB,QAAQ,YAAZ,EAA0B;AACxB,eAAK,IAAI0B,IAAI,CAAb,EAAgBA,IAAIJ,eAAeG,MAAnC,EAA2CC,GAA3C,EAAgD;AAC9C,iBAAKlD,eAAL,CAAqBmF,IAArB,CAA0BrC,eAAeI,CAAf,CAA1B;AACD;AACF,SAJD,MAIO,IAAI1B,QAAQ,UAAR,IAAsBA,QAAQ,aAAlC,EAAiD;AACtD,cAAI4D,uBAAuB,EAA3B;;AAEA,eAAK,IAAIlC,IAAI,CAAb,EAAgBA,IAAI,KAAKlD,eAAL,CAAqBiD,MAAzC,EAAiDC,GAAjD,EAAsD;AACpD,gBAAImC,MAAM,IAAV;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIxC,eAAeG,MAAnC,EAA2CqC,GAA3C,EAAgD;AAC9C,kBAAI,KAAKtF,eAAL,CAAqBkD,CAArB,EAAwBE,UAAxB,IAAsCN,eAAewC,CAAf,EAAkBlC,UAA5D,EAAwE;AACtEiC,sBAAM,KAAN;AACA;AACD;AACF;;AAED,gBAAIA,GAAJ,EAAS;AACPD,mCAAqBD,IAArB,CAA0B,KAAKnF,eAAL,CAAqBkD,CAArB,CAA1B;AACD;AACF;AACD,eAAKlD,eAAL,GAAuBoF,oBAAvB;AACD;AACF,OA1PO;;AA6PR;;;;;;;AAOAT,8BAAwB,gCAASY,CAAT,EAAYC,CAAZ,EAAe;AACrC,YAAIhC,QAAQzG,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BjD,WAAzC;AACA,YAAIgE,KAAJ,EAAW;AACT,cAAIiC,iBAAiB,IAAIjB,IAAJ,GAAWC,OAAX,KAAuBjB,MAAMkC,IAAlD;AACA,cAAIC,OAAO5I,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BnD,kBAAxC;AACA,cAAIsG,QAAQC,KAAKC,GAAL,CAASP,IAAIxI,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BjD,WAA7B,CAAyC+F,CAAtD,CAAZ;AACA,cAAIQ,QAAQF,KAAKC,GAAL,CAASN,IAAIzI,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BjD,WAA7B,CAAyCgG,CAAtD,CAAZ;AACA,cAAIC,iBAAiB1I,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BlD,eAAlD,EAAmE;AACjE,gBAAIqG,QAAQD,IAAR,IAAgBI,QAAQJ,IAA5B,EAAkC;AAChC,qBAAO,IAAP;AACD;AACF;AACF;AACD,eAAO,KAAP;AACD,OAlRO;;AAqRR;;;AAGAK,qBAAgB,yBAAW;AACzB,aAAK,IAAI9C,IAAI,CAAb,EAAgBA,IAAI,KAAKpD,YAAL,CAAkBmD,MAAtC,EAA8CC,GAA9C,EAAmD;AACjDnG,aAAGiF,GAAH,CAAOC,KAAP,CAAagE,oBAAb,CAAkC,KAAKrG,eAAvC,EAAwD,KAAKE,YAAL,CAAkBoD,CAAlB,CAAxD,EAA8E,KAAKpC,iBAAnF;AACD;AACF,OA5RO;;AA8RR;;;;;;;;AAQA+B,kBAAa,oBAAST,QAAT,EAAmBZ,IAAnB,EAAyB9B,MAAzB,EACb;AACEA,iBAASA,UAAU0C,SAAS1C,MAA5B;AACA8B,eAAOA,QAAQY,SAASZ,IAAxB;;AAEA,YAAI0E,YAAJ;AACA,YAAI,CAAC9D,SAASiB,WAAT,KAAyB,OAAzB,IACAjB,SAASkC,MAAT,IAAmBvH,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BtD,WADjD,MAEDqC,QAAQ,aAAR,IAAyBA,QAAQ,WAAjC,IAAgDA,QAAQ,aAFvD,CAAJ,EAGA;AACE0E,yBAAe,IAAInJ,GAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAtB,CACb7F,GAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6B3D,0BAA7B,CAAwD0C,IAAxD,CADa,EAEbY,QAFa,CAAf;AAGArF,aAAG8E,KAAH,CAASL,IAAT,CAAcC,GAAd,CAAkBmB,OAAlB,CAA0BuD,SAA1B,CAAoCD,YAApC;AACA,cAAI;AACFA,yBAAaE,UAAb,GAA0B1G,MAA1B;AACD,WAFD,CAEC,OAAM2G,EAAN,EAAU;AACT;AACD;AACF;;AAED,YAAItJ,GAAGQ,IAAH,CAAQ6B,WAAR,CAAoBC,GAApB,CAAwB,qBAAxB,CAAJ,EAAoD;AAClD,cAAIiH,UAAU,EAAd;AACA,cAAI,CAAC,KAAK7F,qBAAV,EAAiC;AAC/B1D,eAAG8E,KAAH,CAAS0E,KAAT,CAAeC,IAAf,CAAoBF,OAApB,EAA6B,YAAW;AACtC,qBAAO5G,OAAO+G,aAAP,CAAqBrE,QAArB,CAAP;AACD,aAFD;AAGD;AACD,cAAI8D,YAAJ,EAAkB;AAChBnJ,eAAG8E,KAAH,CAAS0E,KAAT,CAAeC,IAAf,CAAoBF,OAApB,EAA6B,YAAW;AACtC,qBAAO5G,OAAO+G,aAAP,CAAqBP,YAArB,CAAP;AACD,aAFD;AAGD;AACD,iBAAOI,QAAQI,OAAf;AACD,SAbD,MAaO;AACL;AACA,cAAI;AACFtE,qBAASgE,UAAT,GAAsB1G,MAAtB;AACD,WAFD,CAEC,OAAM2G,EAAN,EAAU;AACT;AACD;;AAED,iBAAO3G,MAAP,EAAe;AACb,gBAAIA,OAAOkC,SAAX,EAAsB;AACpBQ,uBAASuE,aAAT,GAAyBjH,MAAzB;AACA,kBAAI,CAAC0C,SAASwE,QAAd,EAAwB;AACtBlH,uBAAOkC,SAAP,CAAiBiF,IAAjB,CAAsBrF,IAAtB,EAA4BY,QAA5B;AACD;AACD,kBAAI8D,gBAAgB,CAACA,aAAaU,QAAlC,EAA4C;AAC1CV,6BAAaS,aAAb,GAA6BjH,MAA7B;AACAA,uBAAOkC,SAAP,CAAiBiF,IAAjB,CAAsBX,aAAa1E,IAAnC,EAAyC0E,YAAzC;AACD;AACF;AACDxG,qBAASA,OAAOoH,UAAhB;AACD;AACF;AACF,OA9VO;;AAgWR;;;AAGAC,eAAU,mBAAW;AACnB,aAAKf,aAAL;AACA,aAAKpG,eAAL,GAAuB,KAAKC,SAAL,GAAiB,IAAxC;AACD;AAtWO;AAzGwC,GAApD,C;AAzBA9C,KAAG8E,KAAH,CAASW,OAAT,CAAiBC,WAAjB,CAA6BvF,aAA7B,GAA6CA,aAA7C",
  "file": "PointerCore.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christopher Zuendorf (czuendorf)\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Low-level pointer event handler.\n *\n * @require(qx.bom.client.Event)\n * @require(qx.bom.client.Device)\n */\nqx.Bootstrap.define(\"qx.event.handler.PointerCore\", {\n\n  extend : Object,\n  implement: [ qx.core.IDisposable ],\n\n  statics : {\n    MOUSE_TO_POINTER_MAPPING: {\n      mousedown: \"pointerdown\",\n      mouseup: \"pointerup\",\n      mousemove: \"pointermove\",\n      mouseout: \"pointerout\",\n      mouseover: \"pointerover\"\n    },\n\n    TOUCH_TO_POINTER_MAPPING: {\n      touchstart: \"pointerdown\",\n      touchend: \"pointerup\",\n      touchmove: \"pointermove\",\n      touchcancel: \"pointercancel\"\n    },\n\n    MSPOINTER_TO_POINTER_MAPPING: {\n      MSPointerDown : \"pointerdown\",\n      MSPointerMove : \"pointermove\",\n      MSPointerUp : \"pointerup\",\n      MSPointerCancel : \"pointercancel\",\n      MSPointerLeave : \"pointerleave\",\n      MSPointerEnter: \"pointerenter\",\n      MSPointerOver : \"pointerover\",\n      MSPointerOut : \"pointerout\"\n    },\n\n    POINTER_TO_GESTURE_MAPPING : {\n      pointerdown : \"gesturebegin\",\n      pointerup : \"gesturefinish\",\n      pointercancel : \"gesturecancel\",\n      pointermove : \"gesturemove\"\n    },\n\n    LEFT_BUTTON : (qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n      qx.core.Environment.get(\"browser.documentmode\") <= 8) ? 1 : 0,\n\n    SIM_MOUSE_DISTANCE : 25,\n\n    SIM_MOUSE_DELAY : 2500,\n\n    /**\n     * Coordinates of the last touch. This needs to be static because the target could\n     * change between touch and simulated mouse events. Touch events will be detected\n     * by one instance which moves the target. The simulated mouse events will be fired with\n     * a delay which causes another target and with that, another instance of this handler.\n     * last touch was.\n     */\n    __lastTouch : null\n  },\n\n  /**\n   * Create a new instance\n   *\n   * @param target {Element} element on which to listen for native touch events\n   * @param emitter {qx.event.Emitter?} Event emitter (used if dispatchEvent\n   * is not supported, e.g. in IE8)\n   */\n  construct : function(target, emitter) {\n    this.__defaultTarget = target;\n    this.__emitter = emitter;\n    this.__eventNames = [];\n    this.__buttonStates = [];\n    this.__activeTouches = [];\n    this._processedFlag = \"$$qx\" +\n      this.classname.substr(this.classname.lastIndexOf(\".\") + 1) +\n      \"Processed\";\n\n    var engineName = qx.core.Environment.get(\"engine.name\");\n    var docMode = parseInt(qx.core.Environment.get(\"browser.documentmode\"), 10);\n    if (engineName == \"mshtml\" && docMode == 10) {\n      // listen to native prefixed events and custom unprefixed (see bug #8921)\n      this.__eventNames = [\n        \"MSPointerDown\", \"MSPointerMove\", \"MSPointerUp\", \"MSPointerCancel\", \"MSPointerOver\", \"MSPointerOut\",\n        \"pointerdown\", \"pointermove\", \"pointerup\", \"pointercancel\", \"pointerover\", \"pointerout\"\n      ];\n      this._initPointerObserver();\n    } else {\n      if (qx.core.Environment.get(\"event.mspointer\")) {\n        this.__nativePointerEvents = true;\n      }\n      this.__eventNames = [\n        \"pointerdown\", \"pointermove\", \"pointerup\", \"pointercancel\", \"pointerover\", \"pointerout\"\n      ];\n      this._initPointerObserver();\n    }\n    if (!qx.core.Environment.get(\"event.mspointer\")) {\n      if (qx.core.Environment.get(\"device.touch\")) {\n        this.__eventNames = [\"touchstart\", \"touchend\", \"touchmove\", \"touchcancel\"];\n        this._initObserver(this._onTouchEvent);\n      }\n\n      this.__eventNames = [\n        \"mousedown\", \"mouseup\", \"mousemove\", \"mouseover\", \"mouseout\", \"contextmenu\"\n      ];\n      this._initObserver(this._onMouseEvent);\n    }\n  },\n\n\n  members : {\n    __defaultTarget : null,\n    __emitter : null,\n    __eventNames : null,\n    __nativePointerEvents : false,\n    __wrappedListener : null,\n    __lastButtonState : 0,\n    __buttonStates : null,\n    __primaryIdentifier : null,\n    __activeTouches : null,\n    _processedFlag : null,\n\n    /**\n     * Adds listeners to native pointer events if supported\n     */\n    _initPointerObserver : function() {\n      this._initObserver(this._onPointerEvent);\n    },\n\n\n    /**\n     * Register native event listeners\n     * @param callback {Function} listener callback\n     * @param useEmitter {Boolean} attach listener to Emitter instead of\n     * native event\n     */\n    _initObserver : function(callback, useEmitter) {\n      this.__wrappedListener = qx.lang.Function.listener(callback, this);\n      this.__eventNames.forEach(function(type) {\n        if (useEmitter && qx.dom.Node.isDocument(this.__defaultTarget)) {\n          if (!this.__defaultTarget.$$emitter) {\n            this.__defaultTarget.$$emitter = new qx.event.Emitter();\n          }\n          this.__defaultTarget.$$emitter.on(type, this.__wrappedListener);\n        } else {\n          qx.bom.Event.addNativeListener(this.__defaultTarget, type, this.__wrappedListener);\n        }\n      }.bind(this));\n    },\n\n    /**\n     * Handler for native pointer events\n     * @param domEvent {Event}  Native DOM event\n     */\n    _onPointerEvent : function(domEvent) {\n      if (!qx.core.Environment.get(\"event.mspointer\") ||\n          // workaround for bug #8533\n          (qx.core.Environment.get(\"browser.documentmode\") === 10 && domEvent.type.toLowerCase().indexOf(\"ms\") == -1)\n        )\n      {\n        return;\n      }\n      if (!this.__nativePointerEvents) {\n        domEvent.stopPropagation();\n      }\n      var type = qx.event.handler.PointerCore.MSPOINTER_TO_POINTER_MAPPING[domEvent.type] || domEvent.type;\n      var target = qx.bom.Event.getTarget(domEvent);\n      var evt = new qx.event.type.dom.Pointer(type, domEvent);\n      this._fireEvent(evt, type, target);\n    },\n\n\n    /**\n     * Handler for touch events\n     * @param domEvent {Event} Native DOM event\n     */\n    _onTouchEvent: function(domEvent) {\n      if (domEvent[this._processedFlag]) {\n        return;\n      }\n      domEvent[this._processedFlag] = true;\n      var type = qx.event.handler.PointerCore.TOUCH_TO_POINTER_MAPPING[domEvent.type];\n      var changedTouches = domEvent.changedTouches;\n\n      this._determineActiveTouches(domEvent.type, changedTouches);\n\n      // Detecting vacuum touches. (Touches which are not active anymore, but did not fire a touchcancel event)\n      if (domEvent.touches.length < this.__activeTouches.length) {\n        // Firing pointer cancel for previously active touches.\n        for (var i = this.__activeTouches.length - 1; i >= 0; i--) {\n          var cancelEvent = new qx.event.type.dom.Pointer(\"pointercancel\", domEvent, {\n            identifier: this.__activeTouches[i].identifier,\n            target: domEvent.target,\n            pointerType: \"touch\",\n            pointerId: this.__activeTouches[i].identifier + 2\n          });\n\n          this._fireEvent(cancelEvent, \"pointercancel\", domEvent.target);\n        }\n\n        // Reset primary identifier\n        this.__primaryIdentifier = null;\n\n        // cleanup of active touches array.\n        this.__activeTouches = [];\n\n        // Do nothing after pointer cancel.\n        return;\n      }\n\n      if (domEvent.type == \"touchstart\" && this.__primaryIdentifier === null) {\n        this.__primaryIdentifier = changedTouches[0].identifier;\n      }\n\n      for (var i = 0, l = changedTouches.length; i < l; i++) {\n        var touch = changedTouches[i];\n\n        var touchTarget = domEvent.view.document.elementFromPoint(touch.clientX,touch.clientY) || domEvent.target;\n\n        var touchProps = {\n          clientX: touch.clientX,\n          clientY: touch.clientY,\n          pageX: touch.pageX,\n          pageY: touch.pageY,\n          identifier: touch.identifier,\n          screenX: touch.screenX,\n          screenY: touch.screenY,\n          target: touchTarget,\n          pointerType: \"touch\",\n          pointerId: touch.identifier + 2\n        };\n\n        if (domEvent.type == \"touchstart\") {\n          // Fire pointerenter before pointerdown\n          var overEvt = new qx.event.type.dom.Pointer(\"pointerover\", domEvent, touchProps);\n          this._fireEvent(overEvt, \"pointerover\", touchProps.target);\n        }\n\n        if (touch.identifier == this.__primaryIdentifier) {\n          touchProps.isPrimary = true;\n          // always simulate left click on touch interactions for primary pointer\n          touchProps.button = 0;\n          touchProps.buttons = 1;\n          qx.event.handler.PointerCore.__lastTouch = {\n            \"x\": touch.clientX,\n            \"y\": touch.clientY,\n            \"time\": new Date().getTime()\n          };\n        }\n\n        var evt = new qx.event.type.dom.Pointer(type, domEvent, touchProps);\n\n        this._fireEvent(evt, type, touchProps.target);\n\n        if (domEvent.type == \"touchend\" || domEvent.type == \"touchcancel\") {\n          // Fire pointerout after pointerup\n          var outEvt = new qx.event.type.dom.Pointer(\"pointerout\", domEvent, touchProps);\n          // fire on the original target to make sure over / out event are on the same target\n          this._fireEvent(outEvt, \"pointerout\", domEvent.target);\n\n          if (this.__primaryIdentifier == touch.identifier) {\n            this.__primaryIdentifier = null;\n          }\n        }\n      }\n    },\n\n\n    /**\n    * Handler for touch events\n    * @param domEvent {Event} Native DOM event\n    */\n    _onMouseEvent : function(domEvent) {\n      if (domEvent[this._processedFlag]) {\n        return;\n      }\n      domEvent[this._processedFlag] = true;\n\n      if (this._isSimulatedMouseEvent(domEvent.clientX, domEvent.clientY)) {\n        /*\n          Simulated MouseEvents are fired by browsers directly after TouchEvents\n          for improving compatibility. They should not trigger PointerEvents.\n        */\n        return;\n      }\n\n      if (domEvent.type == \"mousedown\") {\n        this.__buttonStates[domEvent.which] = 1;\n      } else if (domEvent.type == \"mouseup\") {\n        if (qx.core.Environment.get(\"os.name\") == \"osx\" && qx.core.Environment.get(\"engine.name\") == \"gecko\") {\n          if (this.__buttonStates[domEvent.which] != 1 && domEvent.ctrlKey) {\n            this.__buttonStates[1] = 0;\n          }\n        }\n\n        this.__buttonStates[domEvent.which] = 0;\n      }\n\n      var type = qx.event.handler.PointerCore.MOUSE_TO_POINTER_MAPPING[domEvent.type];\n      var target = qx.bom.Event.getTarget(domEvent);\n\n      var buttonsPressed = qx.lang.Array.sum(this.__buttonStates);\n\n      var mouseProps = {pointerType : \"mouse\", pointerId: 1};\n\n      // if the button state changes but not from or to zero\n      if (this.__lastButtonState != buttonsPressed && buttonsPressed !== 0 && this.__lastButtonState !== 0) {\n        var moveEvt = new qx.event.type.dom.Pointer(\"pointermove\", domEvent, mouseProps);\n        this._fireEvent(moveEvt, \"pointermove\", target);\n      }\n      this.__lastButtonState = buttonsPressed;\n\n      // pointerdown should only trigger form the first pressed button.\n      if (domEvent.type == \"mousedown\" && buttonsPressed > 1) {\n        return;\n      }\n\n      // pointerup should only trigger if user releases all buttons.\n      if (domEvent.type == \"mouseup\" && buttonsPressed > 0) {\n        return;\n      }\n\n      if (domEvent.type == \"contextmenu\") {\n        this.__buttonStates[domEvent.which] = 0;\n        return;\n      }\n\n      var evt = new qx.event.type.dom.Pointer(type, domEvent, mouseProps);\n      this._fireEvent(evt, type, target);\n    },\n\n\n    /**\n     * Determines the current active touches.\n     * @param type {String} the DOM event type.\n     * @param changedTouches {Array} the current changed touches.\n     */\n    _determineActiveTouches: function(type, changedTouches) {\n      if (type == \"touchstart\") {\n        for (var i = 0; i < changedTouches.length; i++) {\n          this.__activeTouches.push(changedTouches[i]);\n        }\n      } else if (type == \"touchend\" || type == \"touchcancel\") {\n        var updatedActiveTouches = [];\n\n        for (var i = 0; i < this.__activeTouches.length; i++) {\n          var add = true;\n          for (var j = 0; j < changedTouches.length; j++) {\n            if (this.__activeTouches[i].identifier == changedTouches[j].identifier) {\n              add = false;\n              break;\n            }\n          }\n\n          if (add) {\n            updatedActiveTouches.push(this.__activeTouches[i]);\n          }\n        }\n        this.__activeTouches = updatedActiveTouches;\n      }\n    },\n\n\n    /**\n     * Detects whether the given MouseEvent position is identical to the previously fired TouchEvent position.\n     * If <code>true</code> the corresponding event can be identified as simulated.\n     * @param x {Integer} current mouse x\n     * @param y {Integer} current mouse y\n     * @return {Boolean} <code>true</code> if passed mouse position is a synthetic MouseEvent.\n     */\n    _isSimulatedMouseEvent: function(x, y) {\n      var touch = qx.event.handler.PointerCore.__lastTouch;\n      if (touch) {\n        var timeSinceTouch = new Date().getTime() - touch.time;\n        var dist = qx.event.handler.PointerCore.SIM_MOUSE_DISTANCE;\n        var distX = Math.abs(x - qx.event.handler.PointerCore.__lastTouch.x);\n        var distY = Math.abs(y - qx.event.handler.PointerCore.__lastTouch.y);\n        if (timeSinceTouch < qx.event.handler.PointerCore.SIM_MOUSE_DELAY) {\n          if (distX < dist || distY < dist) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n\n    /**\n     * Removes native pointer event listeners.\n     */\n    _stopObserver : function() {\n      for (var i = 0; i < this.__eventNames.length; i++) {\n        qx.bom.Event.removeNativeListener(this.__defaultTarget, this.__eventNames[i], this.__wrappedListener);\n      }\n    },\n\n    /**\n     * Fire a touch event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String ? null} type of the event\n     * @param target {Element ? null} event target\n     * @return {qx.Promise?} a promise, if one was returned by event handlers\n     */\n    _fireEvent : function(domEvent, type, target)\n    {\n      target = target || domEvent.target;\n      type = type || domEvent.type;\n\n      var gestureEvent;\n      if ((domEvent.pointerType !== \"mouse\" ||\n           domEvent.button <= qx.event.handler.PointerCore.LEFT_BUTTON) &&\n        (type == \"pointerdown\" || type == \"pointerup\" || type == \"pointermove\"))\n      {\n        gestureEvent = new qx.event.type.dom.Pointer(\n          qx.event.handler.PointerCore.POINTER_TO_GESTURE_MAPPING[type],\n          domEvent);\n        qx.event.type.dom.Pointer.normalize(gestureEvent);\n        try {\n          gestureEvent.srcElement = target;\n        }catch(ex) {\n          // Nothing - strict mode prevents writing to read only properties\n        }\n      }\n\n      if (qx.core.Environment.get(\"event.dispatchevent\")) {\n        var tracker = {};\n        if (!this.__nativePointerEvents) {\n          qx.event.Utils.then(tracker, function() {\n            return target.dispatchEvent(domEvent);\n          });\n        }\n        if (gestureEvent) {\n          qx.event.Utils.then(tracker, function() {\n            return target.dispatchEvent(gestureEvent);\n          });\n        }\n        return tracker.promise;\n      } else {\n        // ensure compatibility with native events for IE8\n        try {\n          domEvent.srcElement = target;\n        }catch(ex) {\n          // Nothing - strict mode prevents writing to read only properties\n        }\n\n        while (target) {\n          if (target.$$emitter) {\n            domEvent.currentTarget = target;\n            if (!domEvent._stopped) {\n              target.$$emitter.emit(type, domEvent);\n            }\n            if (gestureEvent && !gestureEvent._stopped) {\n              gestureEvent.currentTarget = target;\n              target.$$emitter.emit(gestureEvent.type, gestureEvent);\n            }\n          }\n          target = target.parentNode;\n        }\n      }\n    },\n\n    /**\n     * Dispose this object\n     */\n    dispose : function() {\n      this._stopObserver();\n      this.__defaultTarget = this.__emitter = null;\n    }\n  }\n});\n"
  ]
}