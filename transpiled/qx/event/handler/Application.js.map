{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/handler/Application.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventHandler",
    "IDisposable",
    "construct",
    "manager",
    "_window",
    "getWindow",
    "__domReady",
    "__loaded",
    "__isReady",
    "__isUnloaded",
    "_initObserver",
    "handler",
    "Application",
    "$$instance",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "ready",
    "shutdown",
    "TARGET_CHECK",
    "TARGET_WINDOW",
    "IGNORE_CAN_HANDLE",
    "onScriptLoaded",
    "inst",
    "__fireReady",
    "members",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "$$loader",
    "scriptLoaded",
    "Environment",
    "get",
    "hasListener",
    "fireEvent",
    "isApplicationReady",
    "$$domReady",
    "document",
    "readyState",
    "_onNativeLoadWrapped",
    "lang",
    "Function",
    "bind",
    "_onNativeLoad",
    "bom",
    "Event",
    "addNativeListener",
    "self",
    "timer",
    "documentElement",
    "doScroll",
    "body",
    "error",
    "window",
    "setTimeout",
    "_onNativeUnloadWrapped",
    "_onNativeUnload",
    "_stopObserver",
    "removeNativeListener",
    "callback",
    "select",
    "GlobalError",
    "observeMethod",
    "__onNativeLoadHandler",
    "apply",
    "arguments",
    "__onNativeUnloadHandler",
    "e",
    "destruct",
    "defer",
    "addHandler"
  ],
  "mappings": "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",
  "file": "Application.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This handler provides events for qooxdoo application startup/shutdown logic.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.bom.client.Engine)\n */\nqx.Class.define(\"qx.event.handler.Application\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.event.IEventHandler, qx.core.IDisposable ],\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct : function(manager)\n  {\n    this.base(arguments);\n\n    // Define shorthands\n    this._window = manager.getWindow();\n\n    this.__domReady = false;\n    this.__loaded = false;\n    this.__isReady = false;\n    this.__isUnloaded = false;\n\n    // Initialize observers\n    this._initObserver();\n\n    // Store instance (only supported for main app window, this\n    // is the reason why this is OK here)\n    qx.event.handler.Application.$$instance = this;\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY : qx.event.Registration.PRIORITY_NORMAL,\n\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES :\n    {\n      ready : 1,\n      shutdown : 1\n    },\n\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK : qx.event.IEventHandler.TARGET_WINDOW,\n\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE : true,\n\n\n    /**\n     * Sends the currently running application the ready signal. Used\n     * exclusively by package loader system.\n     *\n     * @internal\n     */\n    onScriptLoaded : function()\n    {\n      var inst = qx.event.handler.Application.$$instance;\n      if (inst) {\n        inst.__fireReady();\n      }\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent : function(target, type) {},\n\n\n    // interface implementation\n    registerEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n    // interface implementation\n    unregisterEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n    __isReady : null,\n    __domReady : null,\n    __loaded : null,\n    __isUnloaded : null,\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      USER ACCESS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fires a global ready event.\n     *\n     */\n    __fireReady : function()\n    {\n      // Wrapper qxloader needed to be compatible with old generator\n      if (!this.__isReady && this.__domReady && qx.$$loader.scriptLoaded)\n      {\n        // If qooxdoo is loaded within a frame in IE, the document is ready before\n        // the \"ready\" listener can be added. To avoid any startup issue check\n        // for the availability of the \"ready\" listener before firing the event.\n        // So at last the native \"load\" will trigger the \"ready\" event.\n        if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n        {\n          if (qx.event.Registration.hasListener(this._window, \"ready\"))\n          {\n            this.__isReady = true;\n\n            // Fire user event\n            qx.event.Registration.fireEvent(this._window, \"ready\");\n          }\n        }\n        else\n        {\n          this.__isReady = true;\n\n          // Fire user event\n          qx.event.Registration.fireEvent(this._window, \"ready\");\n        }\n      }\n    },\n\n\n    /**\n     * Whether the application is ready.\n     *\n     * @return {Boolean} ready status\n     */\n    isApplicationReady : function() {\n      return this.__isReady;\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER INIT/STOP\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the native application event listeners.\n     *\n     */\n    _initObserver : function()\n    {\n      // in Firefox the loader script sets the ready state\n      if (qx.$$domReady || document.readyState == \"complete\" || document.readyState == \"ready\")\n      {\n        this.__domReady = true;\n        this.__fireReady();\n      }\n      else\n      {\n        this._onNativeLoadWrapped = qx.lang.Function.bind(this._onNativeLoad, this);\n\n        if (\n          qx.core.Environment.get(\"engine.name\") == \"gecko\" ||\n          qx.core.Environment.get(\"engine.name\") == \"opera\" ||\n          qx.core.Environment.get(\"engine.name\") == \"webkit\" ||\n          (qx.core.Environment.get(\"engine.name\") == \"mshtml\" && qx.core.Environment.get(\"browser.documentmode\") > 8)\n        ) {\n          // Using native method supported by Mozilla, Webkit, Opera and IE >= 9\n          qx.bom.Event.addNativeListener(this._window, \"DOMContentLoaded\", this._onNativeLoadWrapped);\n        }\n        else {\n          var self = this;\n\n          // Continually check to see if the document is ready\n          var timer = function()\n          {\n            try\n            {\n              // If IE is used, use the trick by Diego Perini\n              // http://javascript.nwbox.com/IEContentLoaded/\n              document.documentElement.doScroll(\"left\");\n              if (document.body) {\n                self._onNativeLoadWrapped();\n              }\n            }\n            catch(error) {\n              window.setTimeout(timer, 100);\n            }\n          };\n\n          timer();\n        }\n\n        // Additional load listener as fallback\n        qx.bom.Event.addNativeListener(this._window, \"load\", this._onNativeLoadWrapped);\n      }\n\n      this._onNativeUnloadWrapped = qx.lang.Function.bind(this._onNativeUnload, this);\n      qx.bom.Event.addNativeListener(this._window, \"unload\", this._onNativeUnloadWrapped);\n    },\n\n\n    /**\n     * Disconnect the native application event listeners.\n     *\n     */\n    _stopObserver : function()\n    {\n      if (this._onNativeLoadWrapped) {\n        qx.bom.Event.removeNativeListener(this._window, \"load\", this._onNativeLoadWrapped);\n      }\n      qx.bom.Event.removeNativeListener(this._window, \"unload\", this._onNativeUnloadWrapped);\n\n      this._onNativeLoadWrapped = null;\n      this._onNativeUnloadWrapped = null;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE LISTENER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * When qx.globalErrorHandling is enabled the callback will observed\n     */\n    _onNativeLoad: function () {\n      var callback = qx.core.Environment.select(\"qx.globalErrorHandling\", {\n        \"true\": qx.event.GlobalError.observeMethod(this.__onNativeLoadHandler),\n        \"false\": this.__onNativeLoadHandler\n      });\n      callback.apply(this, arguments);\n    },\n\n\n    /**\n     * Event listener for native load event\n     */\n    __onNativeLoadHandler: function () {\n      this.__domReady = true;\n      this.__fireReady();\n    },\n\n\n    /**\n     * When qx.globalErrorHandling is enabled the callback will observed\n     */\n    _onNativeUnload: function () {\n      var callback = qx.core.Environment.select(\"qx.globalErrorHandling\", {\n        \"true\": qx.event.GlobalError.observeMethod(this.__onNativeUnloadHandler),\n        \"false\": this.__onNativeUnloadHandler\n      });\n      callback.apply(this, arguments);\n    },\n\n\n    /**\n     * Event listener for native unload event\n     */\n    __onNativeUnloadHandler: function () {\n      if (!this.__isUnloaded) {\n        this.__isUnloaded = true;\n\n        try {\n          // Fire user event\n          qx.event.Registration.fireEvent(this._window, \"shutdown\");\n        }\n        catch (e) {\n          // IE doesn't execute the \"finally\" block if no \"catch\" block is present\n          throw e;\n        }\n      }\n    }\n\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this._stopObserver();\n\n    this._window = null;\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics) {\n    qx.event.Registration.addHandler(statics);\n  }\n});\n"
  ]
}