{
  "className": "qx.event.handler.Input",
  "packageName": "qx.event.handler",
  "name": "Input",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.event.IEventHandler"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 53,
        "column": 0
      },
      "end": {
        "line": 612,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nFabian Jakobs (fjakobs)\nChristian Hagendorn (chris_schmidt)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Original behavior:"
        },
        {
          "name": "@description",
          "body": "================================================================"
        },
        {
          "name": "@description",
          "body": "Normally a \"change\" event should occur on blur of the element"
        },
        {
          "name": "@description",
          "body": "http://www.w3.org/TR/DOM-Level-2-Events/events.html"
        },
        {
          "name": "@description",
          "body": "However this is not true for \"file\" upload fields"
        },
        {
          "name": "@description",
          "body": "And this is also not true for checkboxes and radiofields (all non mshtml)"
        },
        {
          "name": "@description",
          "body": "And this is also not true for select boxes where the selections"
        },
        {
          "name": "@description",
          "body": "happens in the opened popup (Gecko + Webkit)"
        },
        {
          "name": "@description",
          "body": "Normalized behavior:"
        },
        {
          "name": "@description",
          "body": "================================================================"
        },
        {
          "name": "@description",
          "body": "Change on blur for textfields, textareas and file"
        },
        {
          "name": "@description",
          "body": "Instant change event on checkboxes, radiobuttons"
        },
        {
          "name": "@description",
          "body": "Select field fires on select (when using popup or size>1)"
        },
        {
          "name": "@description",
          "body": "but differs when using keyboard:"
        },
        {
          "name": "@description",
          "body": "mshtml+opera=keypress; mozilla+safari=blur"
        },
        {
          "name": "@description",
          "body": "Input event for textareas does not work in Safari 3 beta (WIN)"
        },
        {
          "name": "@description",
          "body": "Safari 3 beta (WIN) repeats change event for select box on blur when selected using popup"
        },
        {
          "name": "@description",
          "body": "Opera fires \"change\" on radio buttons two times for each change"
        },
        {
          "name": "@description",
          "body": "This handler provides an \"change\" event for all form fields and an\n\"input\" event for form fields of type \"text\" and \"textarea\".\n\nTo let these events work it is needed to create the elements using\n{@link qx.bom.Input}"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 67,
        "column": 2
      },
      "end": {
        "line": 81,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "statics": {
    "PRIORITY": {
      "location": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 52
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Priority of this handler"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SUPPORTED_TYPES": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 104,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Supported event types"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "TARGET_CHECK": {
      "location": {
        "start": {
          "line": 107,
          "column": 4
        },
        "end": {
          "line": 107,
          "column": 56
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Which target check to use"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "IGNORE_CAN_HANDLE": {
      "location": {
        "start": {
          "line": 110,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 29
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Integer} Whether the method \"canHandleEvent\" must be called"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    }
  },
  "members": {
    "__enter": {
      "location": {
        "start": {
          "line": 126,
          "column": 4
        },
        "end": {
          "line": 126,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "special handling for opera"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__onInputTimeoutId": {
      "location": {
        "start": {
          "line": 127,
          "column": 4
        },
        "end": {
          "line": 127,
          "column": 29
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__oldValue": {
      "location": {
        "start": {
          "line": 130,
          "column": 4
        },
        "end": {
          "line": 130,
          "column": 21
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "stores the former set value for opera and IE"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__oldInputValue": {
      "location": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 133,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "stores the former set value for IE"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "canHandleEvent": {
      "location": {
        "start": {
          "line": 142,
          "column": 4
        },
        "end": {
          "line": 155,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLER INTERFACE\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target to, which the event handler should\nbe attached",
            "paramName": "target",
            "description": " The target to, which the event handler should\nbe attached",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the event handler can handle events of the\ngiven type.",
            "type": "Boolean",
            "description": " Whether the event handler can handle events of the\ngiven type."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "registerEvent": {
      "location": {
        "start": {
          "line": 159,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target to, which the event handler should\nbe attached",
            "paramName": "target",
            "description": " The target to, which the event handler should\nbe attached",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "__registerInputListener": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 257,
          "column": 6
        }
      },
      "type": "variable",
      "access": "private"
    },
    "unregisterEvent": {
      "location": {
        "start": {
          "line": 261,
          "column": 4
        },
        "end": {
          "line": 317,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "interface implementation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {var} The target from, which the event handler should\nbe removed",
            "paramName": "target",
            "description": " The target from, which the event handler should\nbe removed",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "type {String} event type",
            "paramName": "type",
            "description": " event type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "capture {Boolean} Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "paramName": "capture",
            "description": " Whether to attach the event to the\ncapturing phase or the bubbling phase of the event.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.IEventHandler",
      "appearsIn": [
        "qx.event.IEventHandler"
      ]
    },
    "__unregisterInputListener": {
      "location": {
        "start": {
          "line": 320,
          "column": 4
        },
        "end": {
          "line": 359,
          "column": 6
        }
      },
      "type": "variable",
      "access": "private"
    },
    "_onKeyPress": {
      "location": {
        "start": {
          "line": 377,
          "column": 4
        },
        "end": {
          "line": 400,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFOR OPERA AND IE (KEYPRESS TO SIMULATE CHANGE EVENT)\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Handler for fixing the different behavior when pressing the enter key.\n\nFF and Safari fire a \"change\" event if the user presses the enter key.\nIE and Opera fire the event only if the focus is changed."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e, target)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} DOM event object",
            "paramName": "e",
            "description": " DOM event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_inputFix": {
      "location": {
        "start": {
          "line": 420,
          "column": 4
        },
        "end": {
          "line": 435,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFOR IE (KEYUP TO SIMULATE INPUT EVENT)\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Handler for fixing the different behavior when pressing the backspace or\ndelete key.\n\nThe other browsers fire a \"input\" event if the user presses the backspace\nor delete key.\nIE fire the event only for other keys."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e, target)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} DOM event object",
            "paramName": "e",
            "description": " DOM event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "target {Element} The event target",
            "paramName": "target",
            "description": " The event target",
            "type": "qx.event.handler.Element"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onKeyDown": {
      "location": {
        "start": {
          "line": 450,
          "column": 4
        },
        "end": {
          "line": 461,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFOR OPERA ONLY LISTENER (KEY AND BLUR)\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Key event listener for opera which recognizes if the enter key has been\npressed."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} DOM event object",
            "paramName": "e",
            "description": " DOM event object",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onKeyUp": {
      "location": {
        "start": {
          "line": 471,
          "column": 4
        },
        "end": {
          "line": 482,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Key event listener for opera which recognizes if the enter key has been\npressed."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} DOM event object",
            "paramName": "e",
            "description": " DOM event object",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onInput": {
      "location": {
        "start": {
          "line": 497,
          "column": 4
        },
        "end": {
          "line": 514,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nNATIVE EVENT HANDLERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Internal function called by input elements created using {@link qx.bom.Input}."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Native DOM event",
            "paramName": "e",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onChangeValue": {
      "location": {
        "start": {
          "line": 523,
          "column": 4
        },
        "end": {
          "line": 540,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal function called by input elements created using {@link qx.bom.Input}."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Native DOM event",
            "paramName": "e",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onChangeChecked": {
      "location": {
        "start": {
          "line": 549,
          "column": 4
        },
        "end": {
          "line": 563,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal function called by input elements created using {@link qx.bom.Input}."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Native DOM event",
            "paramName": "e",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "_onProperty": {
      "location": {
        "start": {
          "line": 572,
          "column": 4
        },
        "end": {
          "line": 596,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal function called by input elements created using {@link qx.bom.Input}."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(e)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {Event} Native DOM event",
            "paramName": "e",
            "description": " Native DOM event",
            "type": "Event"
          }
        ]
      },
      "type": "variable",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 609,
        "column": 2
      },
      "end": {
        "line": 611,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDEFER\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}