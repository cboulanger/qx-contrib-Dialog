{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/handler/DragDrop.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventHandler",
    "IDisposable",
    "construct",
    "manager",
    "__manager",
    "__root",
    "getWindow",
    "document",
    "documentElement",
    "addListener",
    "_onLongtap",
    "_onPointerdown",
    "Registration",
    "window",
    "_onWindowBlur",
    "__rebuildStructures",
    "statics",
    "PRIORITY",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "dragstart",
    "dragend",
    "dragover",
    "dragleave",
    "drop",
    "drag",
    "dragchange",
    "droprequest",
    "IGNORE_CAN_HANDLE",
    "ALLOWED_BUTTONS",
    "MIN_DRAG_DISTANCE",
    "properties",
    "cursor",
    "check",
    "nullable",
    "init",
    "members",
    "__dropTarget",
    "__dragTarget",
    "__types",
    "__actions",
    "__keys",
    "__cache",
    "__currentType",
    "__currentAction",
    "__sessionActive",
    "__validDrop",
    "__validAction",
    "__dragTargetWidget",
    "__startConfig",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "addType",
    "addAction",
    "action",
    "supportsType",
    "supportsAction",
    "setDropAllowed",
    "isAllowed",
    "__detectAction",
    "getData",
    "Error",
    "__fireEvent",
    "getDataAsync",
    "tracker",
    "self",
    "Utils",
    "then",
    "getCurrentAction",
    "getCurrentActionAsync",
    "Promise",
    "resolve",
    "getDragTarget",
    "addData",
    "data",
    "getCurrentType",
    "isSessionActive",
    "reject",
    "actions",
    "keys",
    "current",
    "Shift",
    "Control",
    "alias",
    "Alt",
    "copy",
    "move",
    "old",
    "catch",
    "validAction",
    "relatedTarget",
    "cancelable",
    "original",
    "async",
    "dragEvent",
    "createEvent",
    "Drag",
    "setRelatedTarget",
    "result",
    "dispatchEvent",
    "undefined",
    "getDefaultPrevented",
    "error",
    "__findDraggable",
    "elem",
    "nodeType",
    "getAttribute",
    "parentNode",
    "__findDroppable",
    "clearSession",
    "removeListener",
    "_onPointermove",
    "_onPointerup",
    "_onKeyDown",
    "_onKeyUp",
    "_onKeyPress",
    "_onRoll",
    "removeState",
    "e",
    "getPointerType",
    "_start",
    "isButtonOk",
    "handler",
    "DragDrop",
    "indexOf",
    "getButton",
    "isPrimary",
    "getTarget",
    "draggable",
    "widgetOriginalTarget",
    "ui",
    "Widget",
    "getWidgetByElement",
    "isAnonymous",
    "getLayoutParent",
    "addState",
    "getOriginalTarget",
    "left",
    "getDocumentLeft",
    "top",
    "getDocumentTop",
    "delta",
    "_getDelta",
    "distance",
    "Math",
    "abs",
    "x",
    "y",
    "el",
    "getNativeEvent",
    "view",
    "elementFromPoint",
    "getCursor",
    "DragDropCursor",
    "getInstance",
    "cursorEl",
    "getContentElement",
    "getDomElement",
    "contains",
    "display",
    "bom",
    "element",
    "Style",
    "get",
    "set",
    "droppable",
    "dropLeaveTarget",
    "innerTracker",
    "validDrop",
    "isCtrlPressed",
    "isShiftPressed",
    "isAltPressed",
    "deltaX",
    "deltaY",
    "stopPropagation",
    "stop",
    "iden",
    "getKeyIdentifier",
    "destruct",
    "defer",
    "addHandler"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA4BAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,2BAAhB,EACA;AACEC,YAASN,GAAGO,IAAH,CAAQC,MADnB;AAEEC,eAAY,CAAET,GAAGU,KAAH,CAASC,aAAX,EAA0BX,GAAGO,IAAH,CAAQK,WAAlC,CAFd;;AAME;;;;;;AAMA;;;AAGAC,eAAY,mBAASC,OAAT,EACZ;AACE;;AAEA;AACA,WAAKC,SAAL,GAAiBD,OAAjB;AACA,WAAKE,MAAL,GAAcF,QAAQG,SAAR,GAAoBC,QAApB,CAA6BC,eAA3C;;AAEA;AACA,WAAKJ,SAAL,CAAeK,WAAf,CAA2B,KAAKJ,MAAhC,EAAwC,SAAxC,EAAmD,KAAKK,UAAxD,EAAoE,IAApE;AACA,WAAKN,SAAL,CAAeK,WAAf,CAA2B,KAAKJ,MAAhC,EAAwC,aAAxC,EAAuD,KAAKM,cAA5D,EAA4E,IAA5E,EAAkF,IAAlF;;AAEAtB,SAAGU,KAAH,CAASa,YAAT,CAAsBH,WAAtB,CAAkCI,MAAlC,EAA0C,MAA1C,EAAkD,KAAKC,aAAvD,EAAsE,IAAtE;;AAEA;AACA,WAAKC,mBAAL;AACD,KA/BH;;AAoCE;;;;;;AAMAC,aACA;AACE;AACAC,gBAAW5B,GAAGU,KAAH,CAASa,YAAT,CAAsBM,eAFnC;;AAIE;AACAC,uBACA;AACEC,mBAAY,CADd;AAEEC,iBAAU,CAFZ;AAGEC,kBAAW,CAHb;AAIEC,mBAAY,CAJd;AAKEC,cAAO,CALT;AAMEC,cAAO,CANT;AAOEC,oBAAa,CAPf;AAQEC,qBAAc;AARhB,OANF;;AAiBE;AACAC,yBAAoB,IAlBtB;;AAoBE;;;;;AAKAC,uBAAiB,CAAC,MAAD,CAzBnB;;AA4BE;;;AAGAC,yBAAoB;AA/BtB,KA3CF;;AA8EEC,gBAAa;AACX;;;;AAIAC,cAAS;AACPC,eAAQ,mBADD;AAEPC,kBAAW,IAFJ;AAGPC,cAAO;AAHA;AALE,KA9Ef;;AA2FE;;;;;;AAMAC,aACA;AACEhC,iBAAY,IADd;AAEEC,cAAS,IAFX;AAGEgC,oBAAe,IAHjB;AAIEC,oBAAe,IAJjB;AAKEC,eAAU,IALZ;AAMEC,iBAAY,IANd;AAOEC,cAAS,IAPX;AAQEC,eAAU,IARZ;AASEC,qBAAgB,IATlB;AAUEC,uBAAkB,IAVpB;AAWEC,uBAAkB,KAXpB;AAYEC,mBAAc,KAZhB;AAaEC,qBAAgB,KAblB;AAcEC,0BAAqB,IAdvB;AAeEC,qBAAgB,IAflB;;AAkBE;;;;;;AAMA;AACAC,sBAAiB,wBAASC,MAAT,EAAiBC,IAAjB,EAAuB,CAAE,CAzB5C;;AA4BE;AACAC,qBAAgB,uBAASF,MAAT,EAAiBC,IAAjB,EAAuBE,OAAvB,EAAgC;AAC9C;AACD,OA/BH;;AAkCE;AACAC,uBAAkB,yBAASJ,MAAT,EAAiBC,IAAjB,EAAuBE,OAAvB,EAAgC;AAChD;AACD,OArCH;;AA2CE;;;;;;AAMA;;;;;AAKAE,eAAU,iBAASJ,IAAT,EAAe;AACvB,aAAKb,OAAL,CAAaa,IAAb,IAAqB,IAArB;AACD,OAxDH;;AA0DE;;;;;;AAMAK,iBAAY,mBAASC,MAAT,EAAiB;AAC3B,aAAKlB,SAAL,CAAekB,MAAf,IAAyB,IAAzB;AACD,OAlEH;;AAqEE;;;;;;AAMAC,oBAAe,sBAASP,IAAT,EAAe;AAC5B,eAAO,CAAC,CAAC,KAAKb,OAAL,CAAaa,IAAb,CAAT;AACD,OA7EH;;AAgFE;;;;;;AAMAQ,sBAAiB,wBAASR,IAAT,EAAe;AAC9B,eAAO,CAAC,CAAC,KAAKZ,SAAL,CAAeY,IAAf,CAAT;AACD,OAxFH;;AA0FE;;;;;AAKAS,sBAAiB,wBAASC,SAAT,EAAoB;AACnC,aAAKhB,WAAL,GAAmBgB,SAAnB;AACA,aAAKC,cAAL;AACD,OAlGH;;AAoGE;;;;;;;;;;;;AAYAC,eAAU,iBAASZ,IAAT,EACV;AACE,YAAI,CAAC,KAAKN,WAAN,IAAqB,CAAC,KAAKT,YAA/B,EAA6C;AAC3C,gBAAM,IAAI4B,KAAJ,CAAU,+DAAV,CAAN;AACD;;AAED,YAAI,CAAC,KAAK1B,OAAL,CAAaa,IAAb,CAAL,EAAyB;AACvB,gBAAM,IAAIa,KAAJ,CAAU,4BAA4Bb,IAA5B,GAAmC,GAA7C,CAAN;AACD;;AAED,YAAI,CAAC,KAAKV,OAAL,CAAaU,IAAb,CAAL,EACA;AACE,eAAKT,aAAL,GAAqBS,IAArB;AACA,eAAKc,WAAL,CAAiB,aAAjB,EAAgC,KAAK5B,YAArC,EAAmD,KAAKD,YAAxD,EAAsE,KAAtE,EAA6E,KAA7E;AACD;;AAED,YAAI,CAAC,KAAKK,OAAL,CAAaU,IAAb,CAAL,EAAyB;AACvB,gBAAM,IAAIa,KAAJ,CAAU,qFAAV,CAAN;AACD;;AAED,eAAO,KAAKvB,OAAL,CAAaU,IAAb,KAAsB,IAA7B;AACD,OArIH;;AAwIE;;;;;;;;AAQAe,oBAAe,sBAASf,IAAT,EACf;AACE,YAAI,CAAC,KAAKN,WAAN,IAAqB,CAAC,KAAKT,YAA/B,EAA6C;AAC3C,gBAAM,IAAI4B,KAAJ,CAAU,+DAAV,CAAN;AACD;;AAED,YAAI,CAAC,KAAK1B,OAAL,CAAaa,IAAb,CAAL,EAAyB;AACvB,gBAAM,IAAIa,KAAJ,CAAU,4BAA4Bb,IAA5B,GAAmC,GAA7C,CAAN;AACD;;AAED,YAAIgB,UAAU,EAAd;AACA,YAAIC,OAAO,IAAX;AACA,YAAI,CAAC,KAAK3B,OAAL,CAAaU,IAAb,CAAL,EAAyB;AACvB/D,aAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAY;AACvCC,iBAAK1B,aAAL,GAAqBS,IAArB;AACA,mBAAOiB,KAAKH,WAAL,CAAiB,aAAjB,EAAgCG,KAAK/B,YAArC,EAAmD+B,KAAKhC,YAAxD,EAAsE,KAAtE,CAAP;AACD,WAHD;AAID;;AAED,eAAOhD,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAY;AAC9C,cAAI,CAAC,KAAK1B,OAAL,CAAaU,IAAb,CAAL,EAAyB;AACvB,kBAAM,IAAIa,KAAJ,CAAU,qFAAV,CAAN;AACD;;AAED,iBAAO,KAAKvB,OAAL,CAAaU,IAAb,KAAsB,IAA7B;AACD,SANM,CAAP;AAOD,OA1KH;;AA6KE;;;;;;AAMAoB,wBAAmB,4BAAW;AAC5B,aAAKT,cAAL;AACA,eAAO,KAAKnB,eAAZ;AACD,OAtLH;;AAyLE;;;;;;AAMA6B,6BAAwB,iCAAW;AACjC,YAAIJ,OAAO,IAAX;AACA,eAAOhF,GAAGqF,OAAH,CAAWC,OAAX,CAAmBN,KAAKN,cAAL,EAAnB,EACJQ,IADI,CACC,YAAW;AACf,iBAAOF,KAAKzB,eAAZ;AACD,SAHI,CAAP;AAID,OArMH;;AAwME;;;;AAIAgC,qBAAgB,yBAAW;AACzB,eAAO,KAAK5B,kBAAZ;AACD,OA9MH;;AAiNE;;;;;;;AAOA6B,eAAU,iBAASzB,IAAT,EAAe0B,IAAf,EAAqB;AAC7B,aAAKpC,OAAL,CAAaU,IAAb,IAAqB0B,IAArB;AACD,OA1NH;;AA6NE;;;;;AAKAC,sBAAiB,0BAAW;AAC1B,eAAO,KAAKpC,aAAZ;AACD,OApOH;;AAuOE;;;;;AAKAqC,uBAAkB,2BAAW;AAC3B,eAAO,KAAKnC,eAAZ;AACD,OA9OH;;AAiPE;;;;;;AAMA;;;AAGA9B,2BAAsB,+BACtB;AACE,aAAKwB,OAAL,GAAe,EAAf;AACA,aAAKC,SAAL,GAAiB,EAAjB;AACA,aAAKC,MAAL,GAAc,EAAd;AACA,aAAKC,OAAL,GAAe,EAAf;AACD,OAhQH;;AAmQE;;;;;;;AAOAqB,sBAAiB,0BACjB;AACE,YAAI,KAAKzB,YAAL,IAAqB,IAAzB,EAA+B;AACc;AACzC,mBAAOjD,GAAGqF,OAAH,CAAWO,MAAX,EAAP;AACD;AAGF;;AAED,YAAIC,UAAU,KAAK1C,SAAnB;AACA,YAAI2C,OAAO,KAAK1C,MAAhB;AACA,YAAI2C,UAAU,IAAd;;AAEA,YAAI,KAAKtC,WAAT,EACA;AACE,cAAIqC,KAAKE,KAAL,IAAcF,KAAKG,OAAnB,IAA8BJ,QAAQK,KAA1C,EAAiD;AAC/CH,sBAAU,OAAV;AACD,WAFD,MAEO,IAAID,KAAKE,KAAL,IAAcF,KAAKK,GAAnB,IAA0BN,QAAQO,IAAtC,EAA4C;AACjDL,sBAAU,MAAV;AACD,WAFM,MAEA,IAAID,KAAKE,KAAL,IAAcH,QAAQQ,IAA1B,EAAgC;AACrCN,sBAAU,MAAV;AACD,WAFM,MAEA,IAAID,KAAKK,GAAL,IAAYN,QAAQK,KAAxB,EAA+B;AACpCH,sBAAU,OAAV;AACD,WAFM,MAEA,IAAID,KAAKG,OAAL,IAAgBJ,QAAQO,IAA5B,EAAkC;AACvCL,sBAAU,MAAV;AACD,WAFM,MAEA,IAAIF,QAAQQ,IAAZ,EAAkB;AACvBN,sBAAU,MAAV;AACD,WAFM,MAEA,IAAIF,QAAQO,IAAZ,EAAkB;AACvBL,sBAAU,MAAV;AACD,WAFM,MAEA,IAAIF,QAAQK,KAAZ,EAAmB;AACxBH,sBAAU,OAAV;AACD;AACF;;AAED,YAAIf,OAAO,IAAX;AACA,YAAID,UAAU,EAAd;AACA,YAAIuB,MAAM,KAAK/C,eAAf;AACA,YAAIwC,WAAWO,GAAf,EAAoB;AAClB,cAAI,KAAKtD,YAAT,EAAuB;AACrBhD,eAAGU,KAAH,CAASuE,KAAT,CAAesB,KAAf,CAAqB,YAAY;AAC/BvB,mBAAKtB,aAAL,GAAqB,KAArB;AACAqC,wBAAU,IAAV;AACD,aAHD;AAIA/F,eAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAY;AACvCC,mBAAKzB,eAAL,GAAuBwC,OAAvB;AACA,qBAAOf,KAAKH,WAAL,CAAiB,YAAjB,EAA+BG,KAAKhC,YAApC,EAAkDgC,KAAK/B,YAAvD,EAAqE,IAArE,CAAP;AACD,aAHD;AAIAjD,eAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,UAAUyB,WAAV,EAAuB;AAClDxB,mBAAKtB,aAAL,GAAqB8C,WAArB;AACA,kBAAI,CAACA,WAAL,EAAkB;AAChBT,0BAAU,IAAV;AACD;AACF,aALD;AAMD;AACF;;AAED,eAAO/F,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AAC7C,cAAIgB,WAAWO,GAAf,EAAoB;AAClBtB,iBAAKzB,eAAL,GAAuBwC,OAAvB;AACA,mBAAOf,KAAKH,WAAL,CAAiB,YAAjB,EAA+BG,KAAK/B,YAApC,EAAkD+B,KAAKhC,YAAvD,EAAqE,KAArE,CAAP;AACD;AACF,SALM,CAAP;AAMD,OAzUH;;AA4UE;;;;;;;;;;;;;AAaA6B,mBAAc,qBAASd,IAAT,EAAeD,MAAf,EAAuB2C,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,EAA4DC,KAA5D,EACd;AACE,YAAIrF,eAAevB,GAAGU,KAAH,CAASa,YAA5B;AACA,YAAIsF,YAAYtF,aAAauF,WAAb,CAAyB/C,IAAzB,EAA+B/D,GAAGU,KAAH,CAASqD,IAAT,CAAcgD,IAA7C,EAAmD,CAAEL,UAAF,EAAcC,QAAd,CAAnD,CAAhB;;AAEA,YAAI7C,WAAW2C,aAAf,EAA8B;AAC5BI,oBAAUG,gBAAV,CAA2BP,aAA3B;AACD;;AAED,YAAIQ,SAAS1F,aAAa2F,aAAb,CAA2BpD,MAA3B,EAAmC+C,SAAnC,CAAb;AAC2C;AACzC,cAAID,UAAUO,SAAV,IAAuBP,KAA3B,EAAkC;AAChC,mBAAO5G,GAAGqF,OAAH,CAAWC,OAAX,CAAmB2B,MAAnB,EACJ/B,IADI,CACC,YAAW;AACf,qBAAO,CAAC2B,UAAUO,mBAAV,EAAR;AACD,aAHI,CAAP;AAID,WALD,MAKO;AACoC;AACvC,kBAAIH,kBAAkBjH,GAAGqF,OAAzB,EAAkC;AAChC,qBAAKgC,KAAL,CAAW,sBAAsBtD,IAAtB,GAA6B,kIAAxC;AACD;AACF;AACD,mBAAOkD,MAAP;AACD;AACF;AAGF,OApXH;;AAuXE;;;;;;;;AAQAK,uBAAkB,yBAASC,IAAT,EAClB;AACE,eAAOA,QAAQA,KAAKC,QAAL,IAAiB,CAAhC,EACA;AACE,cAAID,KAAKE,YAAL,CAAkB,aAAlB,KAAoC,IAAxC,EAA8C;AAC5C,mBAAOF,IAAP;AACD;;AAEDA,iBAAOA,KAAKG,UAAZ;AACD;;AAED,eAAO,IAAP;AACD,OA3YH;;AA8YE;;;;;;;;AAQAC,uBAAkB,yBAASJ,IAAT,EAClB;AACE,eAAOA,QAAQA,KAAKC,QAAL,IAAiB,CAAhC,EACA;AACE,cAAID,KAAKE,YAAL,CAAkB,aAAlB,KAAoC,IAAxC,EAA8C;AAC5C,mBAAOF,IAAP;AACD;;AAEDA,iBAAOA,KAAKG,UAAZ;AACD;;AAED,eAAO,IAAP;AACD,OAlaH;;AAqaE;;;;;AAKAE,oBAAe,wBACf;AACE;;AAEA;AACA,aAAK7G,SAAL,CAAe8G,cAAf,CAA8B,KAAK7G,MAAnC,EAA2C,aAA3C,EAA0D,KAAK8G,cAA/D,EAA+E,IAA/E;AACA,aAAK/G,SAAL,CAAe8G,cAAf,CAA8B,KAAK7G,MAAnC,EAA2C,WAA3C,EAAwD,KAAK+G,YAA7D,EAA2E,IAA3E,EAAiF,IAAjF;;AAEA,aAAKhH,SAAL,CAAe8G,cAAf,CAA8B,KAAK7G,MAAnC,EAA2C,SAA3C,EAAsD,KAAKgH,UAA3D,EAAuE,IAAvE,EAA6E,IAA7E;AACA,aAAKjH,SAAL,CAAe8G,cAAf,CAA8B,KAAK7G,MAAnC,EAA2C,OAA3C,EAAoD,KAAKiH,QAAzD,EAAmE,IAAnE,EAAyE,IAAzE;AACA,aAAKlH,SAAL,CAAe8G,cAAf,CAA8B,KAAK7G,MAAnC,EAA2C,UAA3C,EAAuD,KAAKkH,WAA5D,EAAyE,IAAzE,EAA+E,IAA/E;AACA,aAAKnH,SAAL,CAAe8G,cAAf,CAA8B,KAAK7G,MAAnC,EAA2C,MAA3C,EAAmD,KAAKmH,OAAxD,EAAiE,IAAjE,EAAuE,IAAvE;;AAEA,YAAIpD,UAAU,EAAd;AACA,YAAIC,OAAO,IAAX;;AAEA;AACA,YAAI,KAAK/B,YAAT,EAAuB;AACrBjD,aAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AACtC,mBAAOC,KAAKH,WAAL,CAAiB,SAAjB,EAA4BG,KAAK/B,YAAjC,EAA+C+B,KAAKhC,YAApD,EAAkE,KAAlE,CAAP;AACD,WAFD;AAGD;;AAED,eAAOhD,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AAC7C;AACAC,eAAKvB,WAAL,GAAmB,KAAnB;AACAuB,eAAKhC,YAAL,GAAoB,IAApB;AACA,cAAIgC,KAAKrB,kBAAT,EAA6B;AAC3BqB,iBAAKrB,kBAAL,CAAwByE,WAAxB,CAAoC,MAApC;AACApD,iBAAKrB,kBAAL,GAA0B,IAA1B;AACD;;AAED;AACA;AACAqB,eAAK/B,YAAL,GAAoB,IAApB;AACA+B,eAAKxB,eAAL,GAAuB,KAAvB;AACAwB,eAAKpB,aAAL,GAAqB,IAArB;AACAoB,eAAKtD,mBAAL;AACD,SAfM,CAAP;AAgBD,OAjdH;;AAsdE;;;;;;AAMA;;;;;AAKAL,kBAAa,oBAASgH,CAAT,EAAY;AACvB;AACA,YAAIA,EAAEC,cAAF,MAAsB,OAA1B,EAAmC;AACjC;AACD;AACD;AACA,aAAKvH,SAAL,CAAeK,WAAf,CAA2B,KAAKJ,MAAhC,EAAwC,MAAxC,EAAgD,KAAKmH,OAArD,EAA8D,IAA9D,EAAoE,IAApE;AACA,eAAO,KAAKI,MAAL,CAAYF,CAAZ,CAAP;AACD,OAzeH;;AA4eE;;;;;;;;AAQAE,cAAS,gBAASF,CAAT,EAAY;AACnB;AACA,YAAIG,aAAaxI,GAAGU,KAAH,CAAS+H,OAAT,CAAiBC,QAAjB,CAA0BlG,eAA1B,CAA0CmG,OAA1C,CAAkDN,EAAEO,SAAF,EAAlD,MAAqE,CAAC,CAAvF;AACA,YAAI,CAACP,EAAEQ,SAAF,EAAD,IAAkB,CAACL,UAAvB,EAAmC;AACjC,iBAAO,KAAP;AACD;;AAED;AACA;AACA,YAAI1E,SAAS,KAAKF,aAAL,GAAqB,KAAKA,aAAL,CAAmBE,MAAxC,GAAiDuE,EAAES,SAAF,EAA9D;AACA,YAAIC,YAAY,KAAKzB,eAAL,CAAqBxD,MAArB,CAAhB;AACA,YAAIiF,SAAJ,EAAe;AACb;AACA;AACA,eAAK9F,YAAL,GAAoB8F,SAApB;;AAEA,cAAIC,uBAAuBhJ,GAAGiJ,EAAH,CAAM1I,IAAN,CAAW2I,MAAX,CAAkBC,kBAAlB,CAAqC,KAAKvF,aAAL,CAAmB+C,QAAxD,CAA3B;AACA,iBAAOqC,wBAAwBA,qBAAqBI,WAArB,EAA/B,EAAmE;AACjEJ,mCAAuBA,qBAAqBK,eAArB,EAAvB;AACD;AACD,cAAIL,oBAAJ,EAA0B;AACxB,iBAAKrF,kBAAL,GAA0BqF,oBAA1B;AACAA,iCAAqBM,QAArB,CAA8B,MAA9B;AACD;;AAED;AACA,cAAItE,OAAO,IAAX;AACA,cAAID,UAAU,EAAd;AACA/E,aAAGU,KAAH,CAASuE,KAAT,CAAesB,KAAf,CAAqB,YAAW;AAC9B;AACAvB,iBAAKxB,eAAL,GAAuB,KAAvB;AACD,WAHD;AAIAxD,aAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AACtC,mBAAOC,KAAKH,WAAL,CAAiB,WAAjB,EAA8BG,KAAK/B,YAAnC,EAAiD+B,KAAKhC,YAAtD,EAAoE,IAApE,EAA0EqF,CAA1E,CAAP;AACD,WAFD;AAGA,iBAAOrI,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,UAASyB,WAAT,EAAsB;AACxD,gBAAI,CAACA,WAAL,EAAkB;AAChB;AACD;AACD;AACAxB,iBAAKjE,SAAL,CAAeK,WAAf,CAA2B4D,KAAKhE,MAAhC,EAAwC,SAAxC,EAAmDgE,KAAKgD,UAAxD,EAAoEhD,IAApE,EAA0E,IAA1E;AACAA,iBAAKjE,SAAL,CAAeK,WAAf,CAA2B4D,KAAKhE,MAAhC,EAAwC,OAAxC,EAAiDgE,KAAKiD,QAAtD,EAAgEjD,IAAhE,EAAsE,IAAtE;AACAA,iBAAKjE,SAAL,CAAeK,WAAf,CAA2B4D,KAAKhE,MAAhC,EAAwC,UAAxC,EAAoDgE,KAAKkD,WAAzD,EAAsElD,IAAtE,EAA4E,IAA5E;AACAA,iBAAKxB,eAAL,GAAuB,IAAvB;AACD,WATM,CAAP;AAUD;AACF,OAliBH;;AAqiBE;;;;AAIAlC,sBAAiB,wBAAS+G,CAAT,EAAY;AAC3B,YAAIA,EAAEQ,SAAF,EAAJ,EAAmB;AACjB,eAAKjF,aAAL,GAAqB;AACnBE,oBAAQuE,EAAES,SAAF,EADW;AAEnBnC,sBAAU0B,EAAEkB,iBAAF,EAFS;AAGnBC,kBAAOnB,EAAEoB,eAAF,EAHY;AAInBC,iBAAMrB,EAAEsB,cAAF;AAJa,WAArB;;AAOA,eAAK5I,SAAL,CAAeK,WAAf,CAA2B,KAAKJ,MAAhC,EAAwC,aAAxC,EAAuD,KAAK8G,cAA5D,EAA4E,IAA5E;AACA,eAAK/G,SAAL,CAAeK,WAAf,CAA2B,KAAKJ,MAAhC,EAAwC,WAAxC,EAAqD,KAAK+G,YAA1D,EAAwE,IAAxE,EAA8E,IAA9E;AACD;AACF,OArjBH;;AAwjBE;;;;;AAKAD,sBAAiB,wBAASO,CAAT,EAAY;AAC3B;AACA,YAAI,CAACA,EAAEQ,SAAF,EAAL,EAAoB;AAClB;AACD;;AAED;;AAEA,YAAI7D,OAAO,IAAX;AACA,YAAID,UAAU,EAAd;;AAEA/E,WAAGU,KAAH,CAASuE,KAAT,CAAesB,KAAf,CAAqB,YAAW;AAC9B,iBAAOvB,KAAK4C,YAAL,EAAP;AACD,SAFD;;AAIA;AACA,YAAI,CAAC5C,KAAKxB,eAAN,IAAyB6E,EAAEC,cAAF,MAAsB,OAAnD,EAA4D;AAC1D,cAAIsB,QAAQ5E,KAAK6E,SAAL,CAAexB,CAAf,CAAZ;AACA;AACA,cAAIyB,WAAW9J,GAAGU,KAAH,CAAS+H,OAAT,CAAiBC,QAAjB,CAA0BjG,iBAAzC;AACA,cAAImH,UAAUG,KAAKC,GAAL,CAASJ,MAAMK,CAAf,IAAoBH,QAApB,IAAgCC,KAAKC,GAAL,CAASJ,MAAMM,CAAf,IAAoBJ,QAA9D,CAAJ,EAA6E;AAC3E;AACA9J,eAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AACtC,qBAAOC,KAAKuD,MAAL,CAAYF,CAAZ,CAAP;AACD,aAFD;AAGD;AACF;;AAED,eAAOrI,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AAC7C;AACA,cAAI,CAACC,KAAKxB,eAAV,EAA2B;AACzB;AACA;AACD;;AAED,cAAIuB,UAAU,EAAd;AACA/E,aAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AACtC;AACA,mBAAOC,KAAKH,WAAL,CAAiB,MAAjB,EAAyBG,KAAK/B,YAA9B,EAA4C+B,KAAKhC,YAAjD,EAA+D,IAA/D,EAAqEqF,CAArE,CAAP;AACD,WAHD;AAIArI,aAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,UAASyB,WAAT,EAAsB;AACjD,gBAAI,CAACA,WAAL,EAAkB;AAChB,mBAAKoB,YAAL;AACD;;AAED;AACA;AACA,gBAAIuC,KAAK9B,EAAES,SAAF,EAAT;AACA,gBAAI9D,KAAKpB,aAAL,CAAmBE,MAAnB,KAA8BqG,EAAlC,EAAsC;AACpC;AACAA,mBAAK9B,EAAE+B,cAAF,GAAmBC,IAAnB,CAAwBnJ,QAAxB,CAAiCoJ,gBAAjC,CAAkDjC,EAAEoB,eAAF,EAAlD,EAAuEpB,EAAEsB,cAAF,EAAvE,CAAL;AACD;AACD,gBAAIhH,SAASqC,KAAKuF,SAAL,EAAb;AACA,gBAAI,CAAC5H,MAAL,EAAa;AACXA,uBAAS3C,GAAGiJ,EAAH,CAAM1I,IAAN,CAAWiK,cAAX,CAA0BC,WAA1B,EAAT;AACD;AACD,gBAAIC,WAAW/H,OAAOgI,iBAAP,GAA2BC,aAA3B,EAAf;AACA,gBAAIF,aAAaP,OAAOO,QAAP,IAAmBA,SAASG,QAAT,CAAkBV,EAAlB,CAAhC,CAAJ,EAA4D;AAC1D,kBAAIW,UAAU9K,GAAG+K,GAAH,CAAOC,OAAP,CAAeC,KAAf,CAAqBC,GAArB,CAAyBR,QAAzB,EAAmC,SAAnC,CAAd;AACA;AACA1K,iBAAG+K,GAAH,CAAOC,OAAP,CAAeC,KAAf,CAAqBE,GAArB,CAAyBT,QAAzB,EAAmC,SAAnC,EAA8C,MAA9C;AACAP,mBAAK9B,EAAE+B,cAAF,GAAmBC,IAAnB,CAAwBnJ,QAAxB,CAAiCoJ,gBAAjC,CAAkDjC,EAAEoB,eAAF,EAAlD,EAAuEpB,EAAEsB,cAAF,EAAvE,CAAL;AACA3J,iBAAG+K,GAAH,CAAOC,OAAP,CAAeC,KAAf,CAAqBE,GAArB,CAAyBT,QAAzB,EAAmC,SAAnC,EAA8CI,OAA9C;AACD;;AAED,gBAAIX,OAAOO,QAAX,EAAqB;AACnB,kBAAIU,YAAYpG,KAAK2C,eAAL,CAAqBwC,EAArB,CAAhB;;AAEA;AACA,kBAAIiB,aAAaA,aAAapG,KAAKhC,YAAnC,EAAiD;AAC/C,oBAAIqI,kBAAkBrG,KAAKhC,YAA3B;;AAEAgC,qBAAKvB,WAAL,GAAmB,IAAnB,CAH+C,CAGtB;AACzBuB,qBAAKhC,YAAL,GAAoBoI,SAApB;;AAEA,oBAAIE,eAAe,EAAnB;AACAtL,mBAAGU,KAAH,CAASuE,KAAT,CAAesB,KAAf,CAAqB+E,YAArB,EAAmC,YAAY;AAC7CtG,uBAAKhC,YAAL,GAAoB,IAApB;AACAgC,uBAAKvB,WAAL,GAAmB,KAAnB;AACD,iBAHD;;AAKA;AACA,oBAAI4H,eAAJ,EAAqB;AACnBrL,qBAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBoG,YAApB,EAAkC,YAAY;AAC5C,2BAAOtG,KAAKH,WAAL,CAAiB,WAAjB,EAA8BwG,eAA9B,EAA+CrG,KAAK/B,YAApD,EAAkE,KAAlE,EAAyEoF,CAAzE,CAAP;AACD,mBAFD;AAGD;;AAEDrI,mBAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBoG,YAApB,EAAkC,YAAY;AAC5C,yBAAOtG,KAAKH,WAAL,CAAiB,UAAjB,EAA6BuG,SAA7B,EAAwCpG,KAAK/B,YAA7C,EAA2D,IAA3D,EAAiEoF,CAAjE,CAAP;AACD,iBAFD;;AAIA,uBAAOrI,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBoG,YAApB,EAAkC,UAAUC,SAAV,EAAqB;AAC5DvG,uBAAKvB,WAAL,GAAmB8H,SAAnB;AACD,iBAFM,CAAP;AAGD;;AAED;AA5BA,mBA6BK,IAAI,CAACH,SAAD,IAAcpG,KAAKhC,YAAvB,EAAqC;AACxC,sBAAIsI,eAAe,EAAnB;AACAtL,qBAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBoG,YAApB,EAAkC,YAAY;AAC5C,2BAAOtG,KAAKH,WAAL,CAAiB,WAAjB,EAA8BG,KAAKhC,YAAnC,EAAiDgC,KAAK/B,YAAtD,EAAoE,KAApE,EAA2EoF,CAA3E,CAAP;AACD,mBAFD;AAGA,yBAAOrI,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBoG,YAApB,EAAkC,YAAY;AACnDtG,yBAAKhC,YAAL,GAAoB,IAApB;AACAgC,yBAAKvB,WAAL,GAAmB,KAAnB;;AAEA,2BAAOuB,KAAKN,cAAL,EAAP;AACD,mBALM,CAAP;AAMD;AACF;AACF,WAvED;AAwEA,iBAAO1E,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AAC7C;AACA,gBAAIe,OAAOd,KAAK5B,MAAhB;AACA0C,iBAAKG,OAAL,GAAeoC,EAAEmD,aAAF,EAAf;AACA1F,iBAAKE,KAAL,GAAaqC,EAAEoD,cAAF,EAAb;AACA3F,iBAAKK,GAAL,GAAWkC,EAAEqD,YAAF,EAAX;AACA,mBAAO1G,KAAKN,cAAL,EAAP;AACD,WAPM,CAAP;AAQD,SA5FM,CAAP;AA8FD,OAvrBH;;AA0rBE;;;;;;;;AAQAmF,iBAAY,mBAASxB,CAAT,EACZ;AACE,YAAI,CAAC,KAAKzE,aAAV,EAAyB;AACvB,iBAAO,IAAP;AACD;;AAED,YAAI+H,SAAStD,EAAEoB,eAAF,KAAsB,KAAK7F,aAAL,CAAmB4F,IAAtD;AACA,YAAIoC,SAASvD,EAAEsB,cAAF,KAAqB,KAAK/F,aAAL,CAAmB8F,GAArD;;AAEA,eAAO;AACL,eAAKiC,MADA;AAEL,eAAKC;AAFA,SAAP;AAID,OA/sBH;;AAktBE;;;;AAIA7D,oBAAe,sBAASM,CAAT,EAAY;AACzB,YAAI,CAACA,EAAEQ,SAAF,EAAL,EAAoB;AAClB;AACD;;AAED,YAAI9D,UAAU,EAAd;AACA,YAAIC,OAAO,IAAX;;AAEA;AACA,YAAI,KAAKvB,WAAL,IAAoB,KAAKC,aAA7B,EAA4C;AAC1C1D,aAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AACtC,mBAAOC,KAAKH,WAAL,CAAiB,MAAjB,EAAyBG,KAAKhC,YAA9B,EAA4CgC,KAAK/B,YAAjD,EAA+D,KAA/D,EAAsEoF,CAAtE,CAAP;AACD,WAFD;AAGD;;AAED,eAAOrI,GAAGU,KAAH,CAASuE,KAAT,CAAeC,IAAf,CAAoBH,OAApB,EAA6B,YAAW;AAC7C;AACA,cAAIsD,EAAES,SAAF,MAAiB9D,KAAK/B,YAA1B,EAAwC;AACtCoF,cAAEwD,eAAF;AACD;;AAED;AACA,iBAAO7G,KAAK4C,YAAL,EAAP;AACD,SARM,CAAP;AASD,OA9uBH;;AAivBE;;;;AAIAO,eAAU,iBAASE,CAAT,EAAY;AACpBA,UAAEyD,IAAF;AACD,OAvvBH;;AA0vBE;;;;;AAKArK,qBAAgB,uBAAS4G,CAAT,EAAY;AAC1B,eAAO,KAAKT,YAAL,EAAP;AACD,OAjwBH;;AAowBE;;;;;AAKAI,kBAAa,oBAASK,CAAT,EAAY;AACvB,YAAI0D,OAAO1D,EAAE2D,gBAAF,EAAX;AACA,gBAAOD,IAAP;AAEE,eAAK,KAAL;AACA,eAAK,SAAL;AACA,eAAK,OAAL;AACE,gBAAI,CAAC,KAAK3I,MAAL,CAAY2I,IAAZ,CAAL,EACA;AACE,mBAAK3I,MAAL,CAAY2I,IAAZ,IAAoB,IAApB;AACA,qBAAO,KAAKrH,cAAL,EAAP;AACD;AATL;AAWD,OAtxBH;;AAyxBE;;;;;AAKAuD,gBAAW,kBAASI,CAAT,EAAY;AACrB,YAAI0D,OAAO1D,EAAE2D,gBAAF,EAAX;AACA,gBAAOD,IAAP;AAEE,eAAK,KAAL;AACA,eAAK,SAAL;AACA,eAAK,OAAL;AACE,gBAAI,KAAK3I,MAAL,CAAY2I,IAAZ,CAAJ,EACA;AACE,mBAAK3I,MAAL,CAAY2I,IAAZ,IAAoB,KAApB;AACA,qBAAO,KAAKrH,cAAL,EAAP;AACD;AATL;AAWD,OA3yBH;;AA8yBE;;;;;AAKAwD,mBAAc,qBAASG,CAAT,EAAY;AACxB,YAAI0D,OAAO1D,EAAE2D,gBAAF,EAAX;AACA,gBAAOD,IAAP;AAEE,eAAK,QAAL;AACE,mBAAO,KAAKnE,YAAL,EAAP;AAHJ;AAKD;AA1zBH,KAlGF;;AAk6BE;;;;;;AAMAqE,cAAW,oBACX;AACEjM,SAAGU,KAAH,CAASa,YAAT,CAAsBsG,cAAtB,CAAqCrG,MAArC,EAA6C,MAA7C,EAAqD,KAAKC,aAA1D,EAAyE,IAAzE;;AAEA;AACA,WAAKwB,YAAL,GAAoB,KAAKD,YAAL,GAAoB,KAAKjC,SAAL,GAAiB,KAAKC,MAAL,GACvD,KAAKkC,OAAL,GAAe,KAAKC,SAAL,GAAiB,KAAKC,MAAL,GAAc,KAAKC,OAAL,GAAe,IAD/D;AAED,KA/6BH;;AAo7BE;;;;;;AAMA6I,WAAQ,eAASvK,OAAT,EAAkB;AACxB3B,SAAGU,KAAH,CAASa,YAAT,CAAsB4K,UAAtB,CAAiCxK,OAAjC;AACD;AA57BH,GADA,C;AA5BA3B,KAAGU,KAAH,CAAS+H,OAAT,CAAiBC,QAAjB,CAA0BvI,aAA1B,GAA0CA,aAA1C",
  "file": "DragDrop.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Event handler, which supports drag events on DOM elements.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.event.handler.Gesture)\n * @require(qx.event.handler.Keyboard)\n * @require(qx.event.handler.Capture)\n */\nqx.Class.define(\"qx.event.handler.DragDrop\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.event.IEventHandler, qx.core.IDisposable ],\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct : function(manager)\n  {\n    this.base(arguments);\n\n    // Define shorthands\n    this.__manager = manager;\n    this.__root = manager.getWindow().document.documentElement;\n\n    // Initialize listener\n    this.__manager.addListener(this.__root, \"longtap\", this._onLongtap, this);\n    this.__manager.addListener(this.__root, \"pointerdown\", this._onPointerdown, this, true);\n\n    qx.event.Registration.addListener(window, \"blur\", this._onWindowBlur, this);\n\n    // Initialize data structures\n    this.__rebuildStructures();\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY : qx.event.Registration.PRIORITY_NORMAL,\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES :\n    {\n      dragstart : 1,\n      dragend : 1,\n      dragover : 1,\n      dragleave : 1,\n      drop : 1,\n      drag : 1,\n      dragchange : 1,\n      droprequest : 1\n    },\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE : true,\n\n    /**\n     * Array of strings holding the names of the allowed mouse buttons\n     * for Drag & Drop. The default is \"left\" but could be extended with\n     * \"middle\" or \"right\"\n     */\n    ALLOWED_BUTTONS: [\"left\"],\n\n\n    /**\n     * The distance needed to change the mouse position before a drag session start.\n     */\n    MIN_DRAG_DISTANCE : 5\n  },\n\n\n  properties : {\n    /**\n     * Widget instance of the drag & drop cursor. If non is given, the default\n     * {@link qx.ui.core.DragDropCursor} will be used.\n     */\n    cursor : {\n      check : \"qx.ui.core.Widget\",\n      nullable : true,\n      init : null\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __manager : null,\n    __root : null,\n    __dropTarget : null,\n    __dragTarget : null,\n    __types : null,\n    __actions : null,\n    __keys : null,\n    __cache : null,\n    __currentType : null,\n    __currentAction : null,\n    __sessionActive : false,\n    __validDrop : false,\n    __validAction : false,\n    __dragTargetWidget : null,\n    __startConfig : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent : function(target, type) {},\n\n\n    // interface implementation\n    registerEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n    // interface implementation\n    unregisterEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC METHODS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Registers a supported type\n     *\n     * @param type {String} The type to add\n     */\n    addType : function(type) {\n      this.__types[type] = true;\n    },\n\n    /**\n     * Registers a supported action. One of <code>move</code>,\n     * <code>copy</code> or <code>alias</code>.\n     *\n     * @param action {String} The action to add\n     */\n    addAction : function(action) {\n      this.__actions[action] = true;\n    },\n\n\n    /**\n     * Whether the current drag target supports the given type\n     *\n     * @param type {String} Any type\n     * @return {Boolean} Whether the type is supported\n     */\n    supportsType : function(type) {\n      return !!this.__types[type];\n    },\n\n\n    /**\n     * Whether the current drag target supports the given action\n     *\n     * @param type {String} Any type\n     * @return {Boolean} Whether the action is supported\n     */\n    supportsAction : function(type) {\n      return !!this.__actions[type];\n    },\n\n    /**\n     * Whether the current drop target allows the current drag target.\n     *\n     * @param isAllowed {Boolean} False if a drop should be disallowed\n     */\n    setDropAllowed : function(isAllowed) {\n      this.__validDrop = isAllowed;\n      this.__detectAction();\n    },\n\n    /**\n     * Returns the data of the given type during the <code>drop</code> event\n     * on the drop target. This method fires a <code>droprequest</code> at\n     * the drag target which should be answered by calls to {@link #addData}.\n     *\n     * Note that this is a synchronous method and if any of the drag and drop\n     * events handlers are implemented using Promises, this may fail; @see\n     * `getDataAsync`.\n     *\n     * @param type {String} Any supported type\n     * @return {var} The result data in a promise\n     */\n    getData : function(type)\n    {\n      if (!this.__validDrop || !this.__dropTarget) {\n        throw new Error(\"This method must not be used outside the drop event listener!\");\n      }\n\n      if (!this.__types[type]) {\n        throw new Error(\"Unsupported data type: \" + type + \"!\");\n      }\n\n      if (!this.__cache[type])\n      {\n        this.__currentType = type;\n        this.__fireEvent(\"droprequest\", this.__dragTarget, this.__dropTarget, false, false);\n      }\n\n      if (!this.__cache[type]) {\n        throw new Error(\"Please use a droprequest listener to the drag source to fill the manager with data!\");\n      }\n\n      return this.__cache[type] || null;\n    },\n\n\n    /**\n     * Returns the data of the given type during the <code>drop</code> event\n     * on the drop target. This method fires a <code>droprequest</code> at\n     * the drag target which should be answered by calls to {@link #addData}.\n     *\n     * @param type {String} Any supported type\n     * @return {qx.Promise} The result data in a promise\n     */\n    getDataAsync : function(type)\n    {\n      if (!this.__validDrop || !this.__dropTarget) {\n        throw new Error(\"This method must not be used outside the drop event listener!\");\n      }\n\n      if (!this.__types[type]) {\n        throw new Error(\"Unsupported data type: \" + type + \"!\");\n      }\n\n      var tracker = {};\n      var self = this;\n      if (!this.__cache[type]) {\n        qx.event.Utils.then(tracker, function () {\n          self.__currentType = type;\n          return self.__fireEvent(\"droprequest\", self.__dragTarget, self.__dropTarget, false);\n        });\n      }\n\n      return qx.event.Utils.then(tracker, function () {\n        if (!this.__cache[type]) {\n          throw new Error(\"Please use a droprequest listener to the drag source to fill the manager with data!\");\n        }\n\n        return this.__cache[type] || null;\n      });\n    },\n\n\n    /**\n     * Returns the currently selected action (by user keyboard modifiers)\n     *\n     * @return {String} One of <code>move</code>, <code>copy</code> or\n     *    <code>alias</code>\n     */\n    getCurrentAction : function() {\n      this.__detectAction();\n      return this.__currentAction;\n    },\n\n\n    /**\n     * Returns the currently selected action (by user keyboard modifiers)\n     *\n     * @return {qx.Promise|String} One of <code>move</code>, <code>copy</code> or\n     *    <code>alias</code>\n     */\n    getCurrentActionAsync : function() {\n      var self = this;\n      return qx.Promise.resolve(self.__detectAction())\n        .then(function() {\n          return self.__currentAction;\n        });\n    },\n\n\n    /**\n     * Returns the widget which has been the target of the drag start.\n     * @return {qx.ui.core.Widget} The widget on which the drag started.\n     */\n    getDragTarget : function() {\n      return this.__dragTargetWidget;\n    },\n\n\n    /**\n     * Adds data of the given type to the internal storage. The data\n     * is available until the <code>dragend</code> event is fired.\n     *\n     * @param type {String} Any valid type\n     * @param data {var} Any data to store\n     */\n    addData : function(type, data) {\n      this.__cache[type] = data;\n    },\n\n\n    /**\n     * Returns the type which was requested last.\n     *\n     * @return {String} The last requested data type\n     */\n    getCurrentType : function() {\n      return this.__currentType;\n    },\n\n\n    /**\n     * Returns if a drag session is currently active\n     *\n     * @return {Boolean} active drag session\n     */\n    isSessionActive : function() {\n      return this.__sessionActive;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL UTILS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Rebuilds the internal data storage used during a drag&drop session\n     */\n    __rebuildStructures : function()\n    {\n      this.__types = {};\n      this.__actions = {};\n      this.__keys = {};\n      this.__cache = {};\n    },\n\n\n    /**\n     * Detects the current action and stores it under the private\n     * field <code>__currentAction</code>. Also fires the event\n     * <code>dragchange</code> on every modification.\n     *\n     * @return {qx.Promise|null}\n     */\n    __detectAction : function()\n    {\n      if (this.__dragTarget == null) {\n        if (qx.core.Environment.get(\"qx.promise\")) {\n          return qx.Promise.reject();\n        } else {\n          return null;\n        }\n      }\n\n      var actions = this.__actions;\n      var keys = this.__keys;\n      var current = null;\n\n      if (this.__validDrop)\n      {\n        if (keys.Shift && keys.Control && actions.alias) {\n          current = \"alias\";\n        } else if (keys.Shift && keys.Alt && actions.copy) {\n          current = \"copy\";\n        } else if (keys.Shift && actions.move) {\n          current = \"move\";\n        } else if (keys.Alt && actions.alias) {\n          current = \"alias\";\n        } else if (keys.Control && actions.copy) {\n          current = \"copy\";\n        } else if (actions.move) {\n          current = \"move\";\n        } else if (actions.copy) {\n          current = \"copy\";\n        } else if (actions.alias) {\n          current = \"alias\";\n        }\n      }\n\n      var self = this;\n      var tracker = {};\n      var old = this.__currentAction;\n      if (current != old) {\n        if (this.__dropTarget) {\n          qx.event.Utils.catch(function () {\n            self.__validAction = false;\n            current = null;\n          });\n          qx.event.Utils.then(tracker, function () {\n            self.__currentAction = current;\n            return self.__fireEvent(\"dragchange\", self.__dropTarget, self.__dragTarget, true);\n          });\n          qx.event.Utils.then(tracker, function (validAction) {\n            self.__validAction = validAction;\n            if (!validAction) {\n              current = null;\n            }\n          });\n        }\n      }\n\n      return qx.event.Utils.then(tracker, function() {\n        if (current != old) {\n          self.__currentAction = current;\n          return self.__fireEvent(\"dragchange\", self.__dragTarget, self.__dropTarget, false);\n        }\n      });\n    },\n\n\n    /**\n     * Wrapper for {@link qx.event.Registration#fireEvent} for drag&drop events\n     * needed in this class.\n     *\n     * @param type {String} Event type\n     * @param target {Object} Target to fire on\n     * @param relatedTarget {Object} Related target, i.e. drag or drop target\n     *    depending on the drag event\n     * @param cancelable {Boolean} Whether the event is cancelable\n     * @param original {qx.event.type.Pointer} Original pointer event\n     * @return {qx.Promise|Boolean} <code>true</code> if the event's default behavior was\n     * not prevented\n     */\n    __fireEvent : function(type, target, relatedTarget, cancelable, original, async)\n    {\n      var Registration = qx.event.Registration;\n      var dragEvent = Registration.createEvent(type, qx.event.type.Drag, [ cancelable, original ]);\n\n      if (target !== relatedTarget) {\n        dragEvent.setRelatedTarget(relatedTarget);\n      }\n\n      var result = Registration.dispatchEvent(target, dragEvent);\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        if (async === undefined || async) {\n          return qx.Promise.resolve(result)\n            .then(function() {\n              return !dragEvent.getDefaultPrevented();\n            });\n        } else {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            if (result instanceof qx.Promise) {\n              this.error(\"DragDrop event \\\"\" + type + \"\\\" returned a promise but a synchronous event was required, drag and drop may not work as expected (consider using getDataAsync)\");\n            }\n          }\n          return result;\n        }\n      } else {\n        return result;\n      }\n    },\n\n\n    /**\n     * Finds next draggable parent of the given element. Maybe the element itself as well.\n     *\n     * Looks for the attribute <code>qxDraggable</code> with the value <code>on</code>.\n     *\n     * @param elem {Element} The element to query\n     * @return {Element} The next parent element which is draggable. May also be <code>null</code>\n     */\n    __findDraggable : function(elem)\n    {\n      while (elem && elem.nodeType == 1)\n      {\n        if (elem.getAttribute(\"qxDraggable\") == \"on\") {\n          return elem;\n        }\n\n        elem = elem.parentNode;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Finds next droppable parent of the given element. Maybe the element itself as well.\n     *\n     * Looks for the attribute <code>qxDroppable</code> with the value <code>on</code>.\n     *\n     * @param elem {Element} The element to query\n     * @return {Element} The next parent element which is droppable. May also be <code>null</code>\n     */\n    __findDroppable : function(elem)\n    {\n      while (elem && elem.nodeType == 1)\n      {\n        if (elem.getAttribute(\"qxDroppable\") == \"on\") {\n          return elem;\n        }\n\n        elem = elem.parentNode;\n      }\n\n      return null;\n    },\n\n\n    /**\n     * Cleans up a drag&drop session when <code>dragstart</code> was fired before.\n     *\n     * @return {qx.Promise?} promise, if one was created by event handlers\n     */\n    clearSession : function()\n    {\n      //this.debug(\"clearSession\");\n\n      // Deregister from root events\n      this.__manager.removeListener(this.__root, \"pointermove\", this._onPointermove, this);\n      this.__manager.removeListener(this.__root, \"pointerup\", this._onPointerup, this, true);\n\n      this.__manager.removeListener(this.__root, \"keydown\", this._onKeyDown, this, true);\n      this.__manager.removeListener(this.__root, \"keyup\", this._onKeyUp, this, true);\n      this.__manager.removeListener(this.__root, \"keypress\", this._onKeyPress, this, true);\n      this.__manager.removeListener(this.__root, \"roll\", this._onRoll, this, true);\n\n      var tracker = {};\n      var self = this;\n\n      // Fire dragend event\n      if (this.__dragTarget) {\n        qx.event.Utils.then(tracker, function() {\n          return self.__fireEvent(\"dragend\", self.__dragTarget, self.__dropTarget, false);\n        });\n      }\n\n      return qx.event.Utils.then(tracker, function() {\n        // Cleanup\n        self.__validDrop = false;\n        self.__dropTarget = null;\n        if (self.__dragTargetWidget) {\n          self.__dragTargetWidget.removeState(\"drag\");\n          self.__dragTargetWidget = null;\n        }\n\n        // Clear init\n        //self.debug(\"Clearing drag target\");\n        self.__dragTarget = null;\n        self.__sessionActive = false;\n        self.__startConfig = null;\n        self.__rebuildStructures();\n      });\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for long tap which takes care of starting the drag & drop session for\n     * touch interactions.\n     * @param e {qx.event.type.Tap} The longtap event.\n     */\n    _onLongtap : function(e) {\n      // only for touch\n      if (e.getPointerType() != \"touch\") {\n        return;\n      }\n      // prevent scrolling\n      this.__manager.addListener(this.__root, \"roll\", this._onRoll, this, true);\n      return this._start(e);\n    },\n\n\n    /**\n     * Helper to start the drag & drop session. It is responsible for firing the\n     * dragstart event and attaching the key listener.\n     * @param e {qx.event.type.Pointer} Either a longtap or pointermove event.\n     *\n     * @return {Boolean} Returns <code>false</code> if drag session should be\n     * canceled.\n     */\n    _start : function(e) {\n      // only for primary pointer and allowed buttons\n      var isButtonOk = qx.event.handler.DragDrop.ALLOWED_BUTTONS.indexOf(e.getButton()) !== -1;\n      if (!e.isPrimary() || !isButtonOk) {\n        return false;\n      }\n\n      // start target can be none as the drag & drop handler might\n      // be created after the first start event\n      var target = this.__startConfig ? this.__startConfig.target : e.getTarget();\n      var draggable = this.__findDraggable(target);\n      if (draggable) {\n        // This is the source target\n        //this.debug(\"Setting dragtarget = \" + draggable);\n        this.__dragTarget = draggable;\n\n        var widgetOriginalTarget = qx.ui.core.Widget.getWidgetByElement(this.__startConfig.original);\n        while (widgetOriginalTarget && widgetOriginalTarget.isAnonymous()) {\n          widgetOriginalTarget = widgetOriginalTarget.getLayoutParent();\n        }\n        if (widgetOriginalTarget) {\n          this.__dragTargetWidget = widgetOriginalTarget;\n          widgetOriginalTarget.addState(\"drag\");\n        }\n\n        // fire cancelable dragstart\n        var self = this;\n        var tracker = {};\n        qx.event.Utils.catch(function() {\n          //self.debug(\"dragstart FAILED, setting __sessionActive=false\");\n          self.__sessionActive = false;\n        });\n        qx.event.Utils.then(tracker, function() {\n          return self.__fireEvent(\"dragstart\", self.__dragTarget, self.__dropTarget, true, e);\n        });\n        return qx.event.Utils.then(tracker, function(validAction) {\n          if (!validAction) {\n            return;\n          }\n          //self.debug(\"dragstart ok, setting __sessionActive=true\")\n          self.__manager.addListener(self.__root, \"keydown\", self._onKeyDown, self, true);\n          self.__manager.addListener(self.__root, \"keyup\", self._onKeyUp, self, true);\n          self.__manager.addListener(self.__root, \"keypress\", self._onKeyPress, self, true);\n          self.__sessionActive = true;\n        });\n      }\n    },\n\n\n    /**\n     * Event handler for the pointerdown event which stores the initial targets and the coordinates.\n     * @param e {qx.event.type.Pointer} The pointerdown event.\n     */\n    _onPointerdown : function(e) {\n      if (e.isPrimary()) {\n        this.__startConfig = {\n          target: e.getTarget(),\n          original: e.getOriginalTarget(),\n          left : e.getDocumentLeft(),\n          top : e.getDocumentTop()\n        };\n\n        this.__manager.addListener(this.__root, \"pointermove\", this._onPointermove, this);\n        this.__manager.addListener(this.__root, \"pointerup\", this._onPointerup, this, true);\n      }\n    },\n\n\n    /**\n     * Event handler for the pointermove event which starts the drag session and\n     * is responsible for firing the drag, dragover and dragleave event.\n     * @param e {qx.event.type.Pointer} The pointermove event.\n     */\n    _onPointermove : function(e) {\n      // only allow drag & drop for primary pointer\n      if (!e.isPrimary()) {\n        return;\n      }\n\n      //this.debug(\"_onPointermove: start\");\n\n      var self = this;\n      var tracker = {};\n\n      qx.event.Utils.catch(function() {\n        return self.clearSession();\n      });\n\n      // start the drag session for mouse\n      if (!self.__sessionActive && e.getPointerType() == \"mouse\") {\n        var delta = self._getDelta(e);\n        // if the mouse moved a bit in any direction\n        var distance = qx.event.handler.DragDrop.MIN_DRAG_DISTANCE;\n        if (delta && (Math.abs(delta.x) > distance || Math.abs(delta.y) > distance)) {\n          //self.debug(\"_onPointermove: outside min drag distance\");\n          qx.event.Utils.then(tracker, function() {\n            return self._start(e);\n          });\n        }\n      }\n\n      return qx.event.Utils.then(tracker, function() {\n        // check if the session has been activated\n        if (!self.__sessionActive) {\n          //self.debug(\"not active\");\n          return;\n        }\n\n        var tracker = {};\n        qx.event.Utils.then(tracker, function() {\n          //self.debug(\"active, firing drag\");\n          return self.__fireEvent(\"drag\", self.__dragTarget, self.__dropTarget, true, e);\n        });\n        qx.event.Utils.then(tracker, function(validAction) {\n          if (!validAction) {\n            this.clearSession();\n          }\n\n          //self.debug(\"drag\");\n          // find current hovered droppable\n          var el = e.getTarget();\n          if (self.__startConfig.target === el) {\n            // on touch devices the native events return wrong elements as target (its always the element where the dragging started)\n            el = e.getNativeEvent().view.document.elementFromPoint(e.getDocumentLeft(), e.getDocumentTop());\n          }\n          var cursor = self.getCursor();\n          if (!cursor) {\n            cursor = qx.ui.core.DragDropCursor.getInstance();\n          }\n          var cursorEl = cursor.getContentElement().getDomElement();\n          if (cursorEl && (el === cursorEl || cursorEl.contains(el))) {\n            var display = qx.bom.element.Style.get(cursorEl, \"display\");\n            // get the cursor out of the way\n            qx.bom.element.Style.set(cursorEl, \"display\", \"none\");\n            el = e.getNativeEvent().view.document.elementFromPoint(e.getDocumentLeft(), e.getDocumentTop());\n            qx.bom.element.Style.set(cursorEl, \"display\", display);\n          }\n\n          if (el !== cursorEl) {\n            var droppable = self.__findDroppable(el);\n\n            // new drop target detected\n            if (droppable && droppable != self.__dropTarget) {\n              var dropLeaveTarget = self.__dropTarget;\n              \n              self.__validDrop = true; // initial value should be true\n              self.__dropTarget = droppable;\n\n              var innerTracker = {};\n              qx.event.Utils.catch(innerTracker, function () {\n                self.__dropTarget = null;\n                self.__validDrop = false;\n              });\n              \n              // fire dragleave for previous drop target\n              if (dropLeaveTarget) {\n                qx.event.Utils.then(innerTracker, function () {\n                  return self.__fireEvent(\"dragleave\", dropLeaveTarget, self.__dragTarget, false, e);\n                });\n              }\n              \n              qx.event.Utils.then(innerTracker, function () {\n                return self.__fireEvent(\"dragover\", droppable, self.__dragTarget, true, e);\n              });\n              \n              return qx.event.Utils.then(innerTracker, function (validDrop) {\n                self.__validDrop = validDrop;\n              });\n            }\n\n            // only previous drop target\n            else if (!droppable && self.__dropTarget) {\n              var innerTracker = {};\n              qx.event.Utils.then(innerTracker, function () {\n                return self.__fireEvent(\"dragleave\", self.__dropTarget, self.__dragTarget, false, e);\n              });\n              return qx.event.Utils.then(innerTracker, function () {\n                self.__dropTarget = null;\n                self.__validDrop = false;\n\n                return self.__detectAction();\n              });\n            }\n          }\n        });\n        return qx.event.Utils.then(tracker, function() {\n          // Reevaluate current action\n          var keys = self.__keys;\n          keys.Control = e.isCtrlPressed();\n          keys.Shift = e.isShiftPressed();\n          keys.Alt = e.isAltPressed();\n          return self.__detectAction();\n        });\n      });\n\n    },\n\n\n    /**\n     * Helper function to compute the delta between current cursor position from given event\n     * and the stored coordinates at {@link #_onPointerdown}.\n     *\n     * @param e {qx.event.type.Pointer} The pointer event\n     *\n     * @return {Map} containing the deltaX as x, and deltaY as y.\n     */\n    _getDelta : function(e)\n    {\n      if (!this.__startConfig) {\n        return null;\n      }\n\n      var deltaX = e.getDocumentLeft() - this.__startConfig.left;\n      var deltaY = e.getDocumentTop() - this.__startConfig.top;\n\n      return {\n        \"x\": deltaX,\n        \"y\": deltaY\n      };\n    },\n\n\n    /**\n     * Handler for the pointerup event which is responsible fore firing the drop event.\n     * @param e {qx.event.type.Pointer} The pointerup event\n     */\n    _onPointerup : function(e) {\n      if (!e.isPrimary()) {\n        return;\n      }\n\n      var tracker = {};\n      var self = this;\n\n      // Fire drop event in success case\n      if (this.__validDrop && this.__validAction) {\n        qx.event.Utils.then(tracker, function() {\n          return self.__fireEvent(\"drop\", self.__dropTarget, self.__dragTarget, false, e);\n        });\n      }\n\n      return qx.event.Utils.then(tracker, function() {\n        // Stop event\n        if (e.getTarget() == self.__dragTarget) {\n          e.stopPropagation();\n        }\n\n        // Clean up\n        return self.clearSession();\n      });\n    },\n\n\n    /**\n     * Roll listener to stop scrolling on touch devices.\n     * @param e {qx.event.type.Roll} The roll event.\n     */\n    _onRoll : function(e) {\n      e.stop();\n    },\n\n\n    /**\n     * Event listener for window's <code>blur</code> event\n     *\n     * @param e {qx.event.type.Event} Event object\n     */\n    _onWindowBlur : function(e) {\n      return this.clearSession();\n    },\n\n\n    /**\n     * Event listener for root's <code>keydown</code> event\n     *\n     * @param e {qx.event.type.KeySequence} Event object\n     */\n    _onKeyDown : function(e) {\n      var iden = e.getKeyIdentifier();\n      switch(iden)\n      {\n        case \"Alt\":\n        case \"Control\":\n        case \"Shift\":\n          if (!this.__keys[iden])\n          {\n            this.__keys[iden] = true;\n            return this.__detectAction();\n          }\n      }\n    },\n\n\n    /**\n     * Event listener for root's <code>keyup</code> event\n     *\n     * @param e {qx.event.type.KeySequence} Event object\n     */\n    _onKeyUp : function(e) {\n      var iden = e.getKeyIdentifier();\n      switch(iden)\n      {\n        case \"Alt\":\n        case \"Control\":\n        case \"Shift\":\n          if (this.__keys[iden])\n          {\n            this.__keys[iden] = false;\n            return this.__detectAction();\n          }\n      }\n    },\n\n\n    /**\n     * Event listener for root's <code>keypress</code> event\n     *\n     * @param e {qx.event.type.KeySequence} Event object\n     */\n    _onKeyPress : function(e) {\n      var iden = e.getKeyIdentifier();\n      switch(iden)\n      {\n        case \"Escape\":\n          return this.clearSession();\n      }\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    qx.event.Registration.removeListener(window, \"blur\", this._onWindowBlur, this);\n\n    // Clear fields\n    this.__dragTarget = this.__dropTarget = this.__manager = this.__root =\n      this.__types = this.__actions = this.__keys = this.__cache = null;\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics) {\n    qx.event.Registration.addHandler(statics);\n  }\n});\n"
  ]
}