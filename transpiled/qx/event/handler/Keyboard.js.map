{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/handler/Keyboard.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventHandler",
    "IDisposable",
    "construct",
    "manager",
    "__manager",
    "__window",
    "getWindow",
    "Environment",
    "get",
    "__root",
    "document",
    "documentElement",
    "__lastUpDownType",
    "_initKeyObserver",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "keyup",
    "keydown",
    "keypress",
    "keyinput",
    "TARGET_CHECK",
    "TARGET_DOMNODE",
    "IGNORE_CAN_HANDLE",
    "members",
    "__onKeyUpDownWrapper",
    "__lastKeyCode",
    "__inputListeners",
    "__onKeyPressWrapper",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "_fireInputEvent",
    "domEvent",
    "charCode",
    "__getEventTarget",
    "tracker",
    "self",
    "offsetWidth",
    "createEvent",
    "KeyInput",
    "Utils",
    "then",
    "dispatchEvent",
    "fireEvent",
    "Data",
    "promise",
    "_fireSequenceEvent",
    "keyIdentifier",
    "keyCode",
    "KeySequence",
    "getDefaultPrevented",
    "util",
    "Keyboard",
    "isNonPrintableKeyCode",
    "_emulateKeyPress",
    "focusHandler",
    "getHandler",
    "handler",
    "Focus",
    "getActive",
    "getFocus",
    "body",
    "lang",
    "Function",
    "listener",
    "__onKeyUpDown",
    "__onKeyPress",
    "Event",
    "bom",
    "addNativeListener",
    "_stopKeyObserver",
    "removeNativeListener",
    "key",
    "callback",
    "GlobalError",
    "observeMethod",
    "select",
    "track",
    "_idealKeyHandler",
    "isModifierDown",
    "ctrlKey",
    "altKey",
    "metaKey",
    "__firefoxInputFix",
    "tagName",
    "toLowerCase",
    "getAttribute",
    "hash",
    "ObjectRegistry",
    "toHashCode",
    "stopPropagation",
    "window",
    "_charCode2KeyCode",
    "keyCodeToIdentifierMap",
    "eventType",
    "keyCodeToIdentifier",
    "charCodeToIdentifier",
    "_identifierToKeyCode",
    "identifierToKeyCodeMap",
    "charCodeAt",
    "destruct",
    "defer",
    "addHandler"
  ],
  "mappings": "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",
  "file": "Keyboard.js",
  "sourcesContent": [
    "\n/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class provides unified key event handler for Internet Explorer,\n * Firefox, Opera and Safari.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * @require(qx.event.handler.UserAction)\n */\nqx.Class.define(\"qx.event.handler.Keyboard\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.event.IEventHandler, qx.core.IDisposable ],\n\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct : function(manager)\n  {\n    this.base(arguments);\n\n    // Define shorthands\n    this.__manager = manager;\n    this.__window = manager.getWindow();\n\n    // Gecko ignores key events when not explicitly clicked in the document.\n    if ((qx.core.Environment.get(\"engine.name\") == \"gecko\")) {\n      this.__root = this.__window;\n    } else {\n      this.__root = this.__window.document.documentElement;\n    }\n\n    // Internal sequence cache\n    this.__lastUpDownType = {};\n\n    // Initialize observer\n    this._initKeyObserver();\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY : qx.event.Registration.PRIORITY_NORMAL,\n\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES :\n    {\n      keyup : 1,\n      keydown : 1,\n      keypress : 1,\n      keyinput : 1\n    },\n\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK : qx.event.IEventHandler.TARGET_DOMNODE,\n\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE : true\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    __onKeyUpDownWrapper  : null,\n    __manager : null,\n    __window : null,\n    __root : null,\n    __lastUpDownType : null,\n    __lastKeyCode : null,\n    __inputListeners : null,\n    __onKeyPressWrapper : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent : function(target, type) {},\n\n\n    // interface implementation\n    registerEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n    // interface implementation\n    unregisterEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Fire a key input event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param charCode {Integer} character code\n     * @return {qx.Promise?} a promise if the event handlers created one\n     */\n    _fireInputEvent : function(domEvent, charCode)\n    {\n      var target = this.__getEventTarget();\n      var tracker = {};\n      var self = this;\n\n      // Only fire when target is defined and visible\n      if (target && target.offsetWidth != 0)\n      {\n        var event = qx.event.Registration.createEvent(\"keyinput\", qx.event.type.KeyInput, [domEvent, target, charCode]);\n        qx.event.Utils.then(tracker, function() { self.__manager.dispatchEvent(target, event); });\n      }\n\n      // Fire user action event\n      // Needs to check if still alive first\n      if (this.__window) {\n        var self = this;\n        qx.event.Utils.then(tracker, function() {\n          return qx.event.Registration.fireEvent(self.__window, \"useraction\", qx.event.type.Data, [\"keyinput\"]);\n        });\n      }\n      \n      return tracker.promise;\n    },\n\n\n    /**\n     * Fire a key up/down/press event with the given parameters\n     *\n     * @param domEvent {Event} DOM event\n     * @param type {String} type og the event\n     * @param keyIdentifier {String} key identifier\n     * @return {qx.Promise?} a promise, if any of the event handlers returned a promise\n     */\n    _fireSequenceEvent : function(domEvent, type, keyIdentifier)\n    {\n      var target = this.__getEventTarget();\n      var keyCode = domEvent.keyCode;\n      var tracker = {};\n      var self = this;\n\n      // Fire key event\n      var event = qx.event.Registration.createEvent(type, qx.event.type.KeySequence, [domEvent, target, keyIdentifier]);\n      qx.event.Utils.then(tracker, function() {\n        return self.__manager.dispatchEvent(target, event);\n      });\n\n      // IE and Safari suppress a \"keypress\" event if the \"keydown\" event's\n      // default action was prevented. In this case we emulate the \"keypress\"\n      //\n      // FireFox suppresses \"keypress\" when \"keydown\" default action is prevented.\n      // from version 29: https://bugzilla.mozilla.org/show_bug.cgi?id=935876.\n      if (event.getDefaultPrevented() && type == \"keydown\") {\n        if (qx.core.Environment.get(\"engine.name\") == \"mshtml\" ||\n            qx.core.Environment.get(\"engine.name\") == \"webkit\" ||\n            (qx.core.Environment.get(\"engine.name\") == \"gecko\" && qx.core.Environment.get(\"browser.version\") >= 29)) {\n\n          // some key press events are already emulated. Ignore these events.\n          if (!qx.event.util.Keyboard.isNonPrintableKeyCode(keyCode) && !this._emulateKeyPress[keyCode]) {\n            qx.event.Utils.then(tracker, function() {\n              return self._fireSequenceEvent(domEvent, \"keypress\", keyIdentifier);\n            });\n          }\n        }\n      }\n      \n      // Fire user action event\n      // Needs to check if still alive first\n      if (this.__window) {\n        qx.event.Utils.then(tracker, function() {\n          return qx.event.Registration.fireEvent(self.__window, \"useraction\", qx.event.type.Data, [type]);\n        });\n      }\n      \n      return tracker.promise;\n    },\n\n\n    /**\n     * Get the target element for key events\n     *\n     * @return {Element} the event target element\n     */\n    __getEventTarget : function()\n    {\n      var focusHandler = this.__manager.getHandler(qx.event.handler.Focus);\n      var target = focusHandler.getActive();\n\n      // Fallback to focused element when active is null or invisible\n      if (!target || target.offsetWidth == 0) {\n        target = focusHandler.getFocus();\n      }\n\n      // Fallback to body when focused is null or invisible\n      if (!target || target.offsetWidth == 0) {\n        target = this.__manager.getWindow().document.body;\n      }\n\n      return target;\n    },\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER INIT/STOP\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the native key event listeners.\n     *\n     * @signature function()\n     */\n    _initKeyObserver : function()\n    {\n      this.__onKeyUpDownWrapper = qx.lang.Function.listener(this.__onKeyUpDown, this);\n      this.__onKeyPressWrapper = qx.lang.Function.listener(this.__onKeyPress, this);\n\n      var Event = qx.bom.Event;\n\n      Event.addNativeListener(this.__root, \"keyup\", this.__onKeyUpDownWrapper);\n      Event.addNativeListener(this.__root, \"keydown\", this.__onKeyUpDownWrapper);\n      Event.addNativeListener(this.__root, \"keypress\", this.__onKeyPressWrapper);\n    },\n\n\n    /**\n     * Stops the native key event listeners.\n     *\n     * @signature function()\n     */\n    _stopKeyObserver : function()\n    {\n      var Event = qx.bom.Event;\n\n      Event.removeNativeListener(this.__root, \"keyup\", this.__onKeyUpDownWrapper);\n      Event.removeNativeListener(this.__root, \"keydown\", this.__onKeyUpDownWrapper);\n      Event.removeNativeListener(this.__root, \"keypress\", this.__onKeyPressWrapper);\n\n      for (var key in (this.__inputListeners || {}))\n      {\n        var listener = this.__inputListeners[key];\n        Event.removeNativeListener(listener.target, \"keypress\", listener.callback);\n      }\n      delete(this.__inputListeners);\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE EVENT OBSERVERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Low level handler for \"keyup\" and \"keydown\" events\n     *\n     * @internal\n     * @signature function(domEvent)\n     * @param domEvent {Event} DOM event object\n     */\n    __onKeyUpDown : qx.event.GlobalError.observeMethod(qx.core.Environment.select(\"engine.name\",\n    {\n      \"gecko|webkit|mshtml\" : function(domEvent)\n      {\n        var keyCode = 0;\n        var charCode = 0;\n        var type = domEvent.type;\n\n        keyCode = domEvent.keyCode;\n        \n        var tracker = {};\n        var self = this;\n\n        qx.event.Utils.track(tracker, this._idealKeyHandler(keyCode, charCode, type, domEvent));\n\n        // On non print-able character be sure to add a keypress event\n        if (type == \"keydown\")\n        {\n          /*\n           * We need an artificial keypress event for every keydown event.\n           * Newer browsers do not fire keypress for a regular charachter key (e.g when typing 'a')\n           * if it was typed with the CTRL, ALT or META Key pressed during typing, like\n           * doing it when typing the combination CTRL+A\n           */\n          var isModifierDown = domEvent.ctrlKey || domEvent.altKey || domEvent.metaKey;\n\n          // non-printable, backspace, tab or the modfier keys are down\n          if (qx.event.util.Keyboard.isNonPrintableKeyCode(keyCode) || this._emulateKeyPress[keyCode] || isModifierDown) {\n            qx.event.Utils.then(tracker, function() {\n              return self._idealKeyHandler(keyCode, charCode, \"keypress\", domEvent);\n            });\n          }\n        }\n\n        // Store last type\n        this.__lastUpDownType[keyCode] = type;\n        \n        return tracker.promise;\n      },\n\n      \"opera\" : function(domEvent)\n      {\n        this.__lastKeyCode = domEvent.keyCode;\n        return this._idealKeyHandler(domEvent.keyCode, 0, domEvent.type, domEvent);\n      }\n    })),\n\n\n    /**\n     * some keys like \"up\", \"down\", \"pageup\", \"pagedown\" do not bubble a\n     * \"keypress\" event in Firefox. To work around this bug we attach keypress\n     * listeners directly to the input events.\n     *\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=467513\n     *\n     * @signature function(target, type, keyCode)\n     * @param target {Element} The event target\n     * @param type {String} The event type\n     * @param keyCode {Integer} the key code\n     */\n    __firefoxInputFix : qx.core.Environment.select(\"engine.name\",\n    {\n      \"gecko\" : function(target, type, keyCode)\n      {\n        if (\n          type === \"keydown\" &&\n          (keyCode == 33 || keyCode == 34 || keyCode == 38 || keyCode == 40) &&\n          target.type == \"text\" &&\n          target.tagName.toLowerCase() === \"input\" &&\n          target.getAttribute(\"autoComplete\") !== \"off\"\n        )\n        {\n          if (!this.__inputListeners) {\n            this.__inputListeners = {};\n          }\n          var hash = qx.core.ObjectRegistry.toHashCode(target);\n          if (this.__inputListeners[hash]) {\n            return;\n          }\n          var self = this;\n          this.__inputListeners[hash] = {\n            target: target,\n            callback : function(domEvent)\n            {\n              qx.bom.Event.stopPropagation(domEvent);\n              self.__onKeyPress(domEvent);\n            }\n          };\n          var listener = qx.event.GlobalError.observeMethod(this.__inputListeners[hash].callback);\n          qx.bom.Event.addNativeListener(target, \"keypress\", listener);\n        }\n      },\n\n      \"default\" : null\n    }),\n\n\n    /**\n     * Low level key press handler\n     *\n     * @signature function(domEvent)\n     * @param domEvent {Event} DOM event object\n     */\n    __onKeyPress : qx.event.GlobalError.observeMethod(qx.core.Environment.select(\"engine.name\",\n    {\n      \"mshtml\" : function(domEvent)\n      {\n        domEvent = window.event || domEvent;\n\n        if (this._charCode2KeyCode[domEvent.keyCode]) {\n          return this._idealKeyHandler(this._charCode2KeyCode[domEvent.keyCode], 0, domEvent.type, domEvent);\n        } else {\n          return this._idealKeyHandler(0, domEvent.keyCode, domEvent.type, domEvent);\n        }\n      },\n\n      \"gecko\" : function(domEvent)\n      {\n        if(qx.core.Environment.get(\"engine.version\") < 66) {\n          var charCode = domEvent.charCode;\n          var type = domEvent.type;\n\n           return this._idealKeyHandler(domEvent.keyCode, charCode, type, domEvent);\n        } else {\n          if (this._charCode2KeyCode[domEvent.keyCode]) {\n            return this._idealKeyHandler(this._charCode2KeyCode[domEvent.keyCode], 0, domEvent.type, domEvent);\n          } else {\n            return this._idealKeyHandler(0, domEvent.keyCode, domEvent.type, domEvent);\n          }\n        }\n      },\n\n      \"webkit\" : function(domEvent)\n      {\n        if (this._charCode2KeyCode[domEvent.keyCode]) {\n          return this._idealKeyHandler(this._charCode2KeyCode[domEvent.keyCode], 0, domEvent.type, domEvent);\n        } else {\n          return this._idealKeyHandler(0, domEvent.keyCode, domEvent.type, domEvent);\n        }\n      },\n\n      \"opera\" : function(domEvent)\n      {\n        var keyCode = domEvent.keyCode;\n        var type = domEvent.type;\n\n        // Some keys are identified differently for key up/down and keypress\n        // (e.g. \"v\" gets identified as \"F7\").\n        // So we store the last key up/down keycode and compare it to the\n        // current keycode.\n        // See http://bugzilla.qooxdoo.org/show_bug.cgi?id=603\n        if(keyCode != this.__lastKeyCode)\n        {\n          return this._idealKeyHandler(0, this.__lastKeyCode, type, domEvent);\n        }\n        else\n        {\n          if (qx.event.util.Keyboard.keyCodeToIdentifierMap[domEvent.keyCode]) {\n            return this._idealKeyHandler(domEvent.keyCode, 0, domEvent.type, domEvent);\n          } else {\n            return this._idealKeyHandler(0, domEvent.keyCode, domEvent.type, domEvent);\n          }\n        }\n\n      }\n    })),\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      IDEAL KEY HANDLER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Key handler for an idealized browser.\n     * Runs after the browser specific key handlers have normalized the key events.\n     *\n     * @param keyCode {String} keyboard code\n     * @param charCode {String} character code\n     * @param eventType {String} type of the event (keydown, keypress, keyup)\n     * @param domEvent {Element} DomEvent\n     * @return {qx.Promise?} a promise, if an event handler created one\n     */\n    _idealKeyHandler : function(keyCode, charCode, eventType, domEvent)\n    {\n      var keyIdentifier;\n\n      // Use: keyCode\n      if (keyCode || (!keyCode && !charCode))\n      {\n        keyIdentifier = qx.event.util.Keyboard.keyCodeToIdentifier(keyCode);\n\n        return this._fireSequenceEvent(domEvent, eventType, keyIdentifier);\n      }\n\n      // Use: charCode\n      else\n      {\n        keyIdentifier = qx.event.util.Keyboard.charCodeToIdentifier(charCode);\n\n        var tracker = {};\n        var self = this;\n        qx.event.Utils.track(tracker, this._fireSequenceEvent(domEvent, \"keypress\", keyIdentifier));\n        return qx.event.Utils.then(tracker, function() {\n          return self._fireInputEvent(domEvent, charCode);\n        });\n      }\n    },\n\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      KEY MAPS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * @type {Map} maps the charcodes of special keys for key press emulation\n     *\n     * @lint ignoreReferenceField(_emulateKeyPress)\n     */\n    _emulateKeyPress : qx.core.Environment.select(\"engine.name\",\n    {\n      \"mshtml\" : {\n        8: true,\n        9: true\n      },\n\n      \"webkit\" : {\n        8: true,\n        9: true,\n        27: true\n      },\n\n      \"gecko\" : (qx.core.Environment.get(\"browser.version\") >= 65) ?\n      {\n        8: true,\n        9: true,\n        27: true\n      }\n      :\n      {\n      },\n\n      \"default\" : {}\n    }),\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER METHODS\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * converts a key identifier back to a keycode\n     *\n     * @param keyIdentifier {String} The key identifier to convert\n     * @return {Integer} keyboard code\n     */\n    _identifierToKeyCode : function(keyIdentifier) {\n      return qx.event.util.Keyboard.identifierToKeyCodeMap[keyIdentifier] || keyIdentifier.charCodeAt(0);\n    }\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._stopKeyObserver();\n    this.__lastKeyCode = this.__manager = this.__window = this.__root = this.__lastUpDownType = null;\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics, members)\n  {\n    // register at the event handler\n    qx.event.Registration.addHandler(statics);\n\n    if ((qx.core.Environment.get(\"engine.name\") !== \"opera\"))\n    {\n      members._charCode2KeyCode =\n      {\n        13 : 13,\n        27 : 27\n      };\n    }\n  }\n});\n"
  ]
}