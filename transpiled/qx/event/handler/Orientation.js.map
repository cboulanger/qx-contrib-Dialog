{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/handler/Orientation.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "event",
    "IEventHandler",
    "IDisposable",
    "construct",
    "manager",
    "__manager",
    "__window",
    "getWindow",
    "_initObserver",
    "statics",
    "PRIORITY",
    "Registration",
    "PRIORITY_NORMAL",
    "SUPPORTED_TYPES",
    "orientationchange",
    "TARGET_CHECK",
    "TARGET_WINDOW",
    "IGNORE_CAN_HANDLE",
    "members",
    "__nativeEventType",
    "_currentOrientation",
    "__onNativeWrapper",
    "canHandleEvent",
    "target",
    "type",
    "registerEvent",
    "capture",
    "unregisterEvent",
    "lang",
    "Function",
    "listener",
    "_onNative",
    "bom",
    "Event",
    "supportsEvent",
    "addNativeListener",
    "_stopObserver",
    "removeNativeListener",
    "GlobalError",
    "observeMethod",
    "domEvent",
    "detectOrientationChangeDelay",
    "Environment",
    "get",
    "delay",
    "_onOrientationChange",
    "Viewport",
    "orientation",
    "getOrientation",
    "mode",
    "isLandscape",
    "fireEvent",
    "Orientation",
    "destruct",
    "defer",
    "addHandler",
    "handler"
  ],
  "mappings": "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",
  "file": "Orientation.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2010 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tino Butz (tbtz)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * Unify Project\n\n     Homepage:\n       http://unify-project.org\n\n     Copyright:\n       2009-2010 Deutsche Telekom AG, Germany, http://telekom.com\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * This class provides a handler for the orientation event.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.event.handler.Orientation\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.event.IEventHandler, qx.core.IDisposable ],\n\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   *\n   * @param manager {qx.event.Manager} Event manager for the window to use\n   */\n  construct : function(manager)\n  {\n    this.base(arguments);\n\n    // Define shorthands\n    this.__manager = manager;\n    this.__window = manager.getWindow();\n    this._initObserver();\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Integer} Priority of this handler */\n    PRIORITY : qx.event.Registration.PRIORITY_NORMAL,\n\n    /** @type {Map} Supported event types */\n    SUPPORTED_TYPES :\n    {\n      orientationchange : 1\n    },\n\n    /** @type {Integer} Which target check to use */\n    TARGET_CHECK : qx.event.IEventHandler.TARGET_WINDOW,\n\n    /** @type {Integer} Whether the method \"canHandleEvent\" must be called */\n    IGNORE_CAN_HANDLE : true\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __manager : null,\n    __window : null,\n    __nativeEventType : null,\n    _currentOrientation : null,\n    __onNativeWrapper : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLER INTERFACE\n    ---------------------------------------------------------------------------\n    */\n\n    // interface implementation\n    canHandleEvent : function(target, type) {\n      // Nothing needs to be done here\n    },\n\n\n    // interface implementation\n    registerEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n    // interface implementation\n    unregisterEvent : function(target, type, capture) {\n      // Nothing needs to be done here\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER INIT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Initializes the native orientation change event listeners.\n     */\n    _initObserver : function()\n    {\n      this.__onNativeWrapper = qx.lang.Function.listener(this._onNative, this);\n\n      // Handle orientation change event for Android devices by the resize event.\n      // See http://stackoverflow.com/questions/1649086/detect-rotation-of-android-phone-in-the-browser-with-javascript\n      // for more information.\n      this.__nativeEventType = qx.bom.Event.supportsEvent(this.__window, \"orientationchange\") ?\n            \"orientationchange\" : \"resize\";\n\n      var Event = qx.bom.Event;\n      Event.addNativeListener(this.__window, this.__nativeEventType, this.__onNativeWrapper);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      OBSERVER STOP\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Disconnects the native orientation change event listeners.\n     */\n    _stopObserver : function()\n    {\n      var Event = qx.bom.Event;\n      Event.removeNativeListener(this.__window, this.__nativeEventType, this.__onNativeWrapper);\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      NATIVE EVENT OBSERVERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handler for the native orientation change event.\n     *\n     * @signature function(domEvent)\n     * @param domEvent {Event} The touch event from the browser.\n     */\n    _onNative: qx.event.GlobalError.observeMethod(function(domEvent) {\n      var detectOrientationChangeDelay = 0;\n\n      if (qx.core.Environment.get(\"os.name\") == \"android\") {\n        // On Android Devices the detection of orientation mode has to be delayed.\n        // See: http://stackoverflow.com/questions/8985805/orientation-change-in-android-using-javascript\n        detectOrientationChangeDelay = 300;\n      }\n\n      qx.lang.Function.delay(this._onOrientationChange, detectOrientationChangeDelay, this, domEvent);\n    }),\n\n\n    /**\n     * Handler for the detection of an orientation change.\n     * @param domEvent {Event} The touch event from the browser.\n     */\n    _onOrientationChange: function(domEvent) {\n      var Viewport = qx.bom.Viewport;\n      var orientation = Viewport.getOrientation(domEvent.target);\n\n      if (this._currentOrientation != orientation) {\n        this._currentOrientation = orientation;\n        var mode = Viewport.isLandscape(domEvent.target) ? \"landscape\" : \"portrait\";\n        qx.event.Registration.fireEvent(\n        this.__window,\n          \"orientationchange\",\n        qx.event.type.Orientation, [orientation, mode]);\n      }\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this._stopObserver();\n    this.__manager = this.__window = null;\n  },\n\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics) {\n    qx.event.Registration.addHandler(statics);\n  }\n});\n"
  ]
}