{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/type/Rest.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "event",
    "type",
    "Data",
    "properties",
    "request",
    "check",
    "action",
    "phase",
    "id",
    "members",
    "init",
    "data",
    "old",
    "cancelable",
    "setRequest",
    "setAction",
    "setPhase",
    "setId",
    "parseInt",
    "toHashCode",
    "clone",
    "embryo",
    "getAction",
    "getPhase",
    "getRequest",
    "Rest"
  ],
  "mappings": ";;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAqBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,oBAAhB,EACA;AACEC,YAAQN,GAAGO,KAAH,CAASC,IAAT,CAAcC,IADxB;;AAGEC,gBACA;AACE;;;AAGAC,eAAS;AACPC,eAAO;AADA,OAJX;;AAQE;;;AAGAC,cAAQ;AACND,eAAO;AADD,OAXV;;AAeE;;;AAGAE,aAAO;AACLF,eAAO;AADF,OAlBT;;AAsBE;;;AAGAG,UAAI;AACFH,eAAO;AADL;AAzBN,KAJF;;AAkCEI,aACA;AACE;;;;;;;;;;;;;;;;AAgBAC,YAAM,cAASC,IAAT,EAAeC,GAAf,EAAoBC,UAApB,EAAgCT,OAAhC,EAAyCE,MAAzC,EAAiDC,KAAjD,EAAwD;AAC5D,0DAAqBI,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC;;AAEA,aAAKC,UAAL,CAAgBV,OAAhB;AACA,aAAKW,SAAL,CAAeT,MAAf;AACA,aAAKU,QAAL,CAAcT,KAAd;AACA,aAAKU,KAAL,CAAWC,SAASd,QAAQe,UAAR,EAAT,EAA+B,EAA/B,CAAX;;AAEA,eAAO,IAAP;AACD,OA1BH;;AA4BE;;;;;;;;;AASAC,aAAO,eAASC,MAAT,EAAiB;AACtB,YAAID,2DAA6BC,MAA7B,CAAJ;AACAD,cAAML,SAAN,CAAgB,KAAKO,SAAL,EAAhB;AACAF,cAAMJ,QAAN,CAAe,KAAKO,QAAL,EAAf;AACAH,cAAMN,UAAN,CAAiB,KAAKU,UAAL,EAAjB;AACA,eAAOJ,KAAP;AACD;AA3CH;AAnCF,GADA,C;AArBA3B,KAAGO,KAAH,CAASC,IAAT,CAAcwB,IAAd,CAAmB7B,aAAnB,GAAmCA,aAAnC",
  "file": "Rest.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * Rest event object.\n */\nqx.Class.define(\"qx.event.type.Rest\",\n{\n  extend: qx.event.type.Data,\n\n  properties:\n  {\n    /**\n     * The request of the event.\n     */\n    request: {\n      check: \"qx.io.request.AbstractRequest\"\n    },\n\n    /**\n     * The action that invoked the request.\n     */\n    action: {\n      check: \"String\"\n    },\n\n    /**\n     * The phase of the request.\n     */\n    phase: {\n      check: \"String\"\n    },\n\n    /**\n     * The id of the request.\n     */\n    id: {\n      check: \"Number\"\n    }\n  },\n\n  members:\n  {\n    /**\n     * Initializes an event object.\n     *\n     * @param data {var} Then event's new data\n     * @param old {var?null} The event's old data\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *  action prevented. The default action can either be the browser's\n     *  default action of a native event (e.g. open the context menu on a\n     *  right click) or the default action of a qooxdoo class (e.g. close\n     *  the window widget). The default action can be prevented by calling\n     *  {@link qx.event.type.Event#preventDefault}\n     * @param request {qx.io.request.AbstractRequest} The associated request.\n     * @param action {String} The associated action.\n     * @param phase {String} The associated phase.\n     * @return {qx.event.type.Data} The initialized instance.\n     */\n    init: function(data, old, cancelable, request, action, phase) {\n      this.base(arguments, data, old, cancelable);\n\n      this.setRequest(request);\n      this.setAction(action);\n      this.setPhase(phase);\n      this.setId(parseInt(request.toHashCode(), 10));\n\n      return this;\n    },\n\n    /**\n     * Get a copy of this object\n     *\n     * @param embryo {qx.event.type.Data?null} Optional event class, which will\n     *  be configured using the data of this event instance. The event must be\n     *  an instance of this event class. If the data is <code>null</code>,\n     *  a new pooled instance is created.\n     * @return {qx.event.type.Data} A copy of this object.\n     */\n    clone: function(embryo) {\n      var clone = this.base(arguments, embryo);\n      clone.setAction(this.getAction());\n      clone.setPhase(this.getPhase());\n      clone.setRequest(this.getRequest());\n      return clone;\n    }\n  }\n});\n"
  ]
}