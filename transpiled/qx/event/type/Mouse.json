{
  "className": "qx.event.type.Mouse",
  "packageName": "qx.event.type",
  "name": "Mouse",
  "superClass": "qx.event.type.Dom",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 28,
        "column": 0
      },
      "end": {
        "line": 309,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nFabian Jakobs (fjakobs)\nChristian Hagendorn (chris_schmidt)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Mouse event object.\n\nthe interface of this class is based on the DOM Level 2 mouse event\ninterface: http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mouseevents"
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "_cloneNativeEvent": {
      "location": {
        "start": {
          "line": 44,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "nativeEvent {Event} The native browser event",
            "paramName": "nativeEvent",
            "description": " The native browser event",
            "type": "qx.event.type.Event"
          },
          {
            "name": "@param",
            "body": "clone {Object} The initialized clone.",
            "paramName": "clone",
            "description": " The initialized clone.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The cloned event",
            "type": "Object",
            "description": " The cloned event"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "overriddenFrom": "qx.event.type.Dom",
      "appearsIn": [
        "qx.event.type.Dom",
        "qx.event.type.Native"
      ]
    },
    "__buttonsDom2EventModel": {
      "location": {
        "start": {
          "line": 79,
          "column": 4
        },
        "end": {
          "line": 84,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the button ID to identifier data."
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__buttonsDom2EventModel)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__buttonsDom3EventModel": {
      "location": {
        "start": {
          "line": 92,
          "column": 4
        },
        "end": {
          "line": 98,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the button ID to identifier data."
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__buttonsDom3EventModel)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__buttonsMshtmlEventModel": {
      "location": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 111,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Contains the button ID to identifier data."
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreReferenceField(__buttonsMshtmlEventModel)"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "stop": {
      "location": {
        "start": {
          "line": 115,
          "column": 4
        },
        "end": {
          "line": 117,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "getButton": {
      "location": {
        "start": {
          "line": 145,
          "column": 4
        },
        "end": {
          "line": 172,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "During mouse events caused by the depression or release of a mouse button,\nthis method can be used to check which mouse button changed state.\n\nOnly internet explorer can compute the button during mouse move events. For\nall other browsers the button only contains sensible data during\n\"click\" events like \"click\", \"dblclick\", \"mousedown\", \"mouseup\" or \"contextmenu\".\n\nBut still, browsers act different on click:\n<pre>\n<- = left mouse button\n-> = right mouse button\n^  = middle mouse button\n\nBrowser | click, dblclick | contextmenu\n---------------------------------------\nFirefox | <- ^ ->         | ->\nChrome  | <- ^            | ->\nSafari  | <- ^            | ->\nIE      | <- (^ is <-)    | ->\nOpera   | <-              | -> (twice)\n</pre>"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} One of \"left\", \"right\", \"middle\" or \"none\"",
            "type": "String",
            "description": " One of \"left\", \"right\", \"middle\" or \"none\""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isLeftPressed": {
      "location": {
        "start": {
          "line": 180,
          "column": 4
        },
        "end": {
          "line": 182,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the left button is pressed"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the left button is pressed",
            "type": "Boolean",
            "description": " true when the left button is pressed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isMiddlePressed": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 192,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the middle button is pressed"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the middle button is pressed",
            "type": "Boolean",
            "description": " true when the middle button is pressed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isRightPressed": {
      "location": {
        "start": {
          "line": 200,
          "column": 4
        },
        "end": {
          "line": 202,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the right button is pressed"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true when the right button is pressed",
            "type": "Boolean",
            "description": " true when the right button is pressed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRelatedTarget": {
      "location": {
        "start": {
          "line": 214,
          "column": 4
        },
        "end": {
          "line": 216,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get a secondary event target related to an UI event. This attribute is\nused with the mouseover event to indicate the event target which the\npointing device exited and with the mouseout event to indicate the\nevent target which the pointing device entered."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} The secondary event target.",
            "type": "Element",
            "description": " The secondary event target."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "getViewportLeft": {
      "location": {
        "start": {
          "line": 225,
          "column": 4
        },
        "end": {
          "line": 227,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the he horizontal coordinate at which the event occurred relative\nto the viewport."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The horizontal mouse position",
            "type": "Integer",
            "description": " The horizontal mouse position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getViewportTop": {
      "location": {
        "start": {
          "line": 237,
          "column": 4
        },
        "end": {
          "line": 239,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the vertical coordinate at which the event occurred relative\nto the viewport."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The vertical mouse position",
            "type": "Integer",
            "description": " The vertical mouse position"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentLeft": {
      "location": {
        "start": {
          "line": 249,
          "column": 4
        },
        "end": {
          "line": 259,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The horizontal mouse position in the document.",
            "type": "Integer",
            "description": " The horizontal mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentTop": {
      "location": {
        "start": {
          "line": 269,
          "column": 4
        },
        "end": {
          "line": 279,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The vertical mouse position in the document.",
            "type": "Integer",
            "description": " The vertical mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenLeft": {
      "location": {
        "start": {
          "line": 291,
          "column": 4
        },
        "end": {
          "line": 293,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the horizontal coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.\n\nNote: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The horizontal mouse position on the screen.",
            "type": "Integer",
            "description": " The horizontal mouse position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenTop": {
      "location": {
        "start": {
          "line": 305,
          "column": 4
        },
        "end": {
          "line": 307,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the vertical coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.\n\nNote: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The vertical mouse position on the screen.",
            "type": "Integer",
            "description": " The vertical mouse position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Dom",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Dom",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Dom",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Dom",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Dom",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.event.type.Dom",
      "property": "reset"
    }
  },
  "descendants": [
    "qx.event.type.MouseWheel",
    "qx.event.type.Pointer"
  ]
}