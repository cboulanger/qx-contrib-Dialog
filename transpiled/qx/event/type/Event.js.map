{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/event/type/Event.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "CAPTURING_PHASE",
    "AT_TARGET",
    "BUBBLING_PHASE",
    "members",
    "_promises",
    "init",
    "canBubble",
    "cancelable",
    "undefined",
    "Assert",
    "assertBoolean",
    "_type",
    "_target",
    "_currentTarget",
    "_relatedTarget",
    "_originalTarget",
    "_stopPropagation",
    "_preventDefault",
    "_bubbles",
    "_cancelable",
    "_timeStamp",
    "Date",
    "getTime",
    "_eventPhase",
    "clone",
    "embryo",
    "event",
    "Pool",
    "getInstance",
    "getObject",
    "constructor",
    "stop",
    "stopPropagation",
    "preventDefault",
    "assertTrue",
    "getType",
    "getPropagationStopped",
    "addPromise",
    "promise",
    "push",
    "getPromises",
    "getDefaultPrevented",
    "Promise",
    "reject",
    "resolve",
    "all",
    "setType",
    "type",
    "getEventPhase",
    "setEventPhase",
    "eventPhase",
    "getTimeStamp",
    "getTarget",
    "setTarget",
    "target",
    "getCurrentTarget",
    "setCurrentTarget",
    "currentTarget",
    "getRelatedTarget",
    "setRelatedTarget",
    "relatedTarget",
    "getOriginalTarget",
    "setOriginalTarget",
    "originalTarget",
    "getBubbles",
    "setBubbles",
    "bubbles",
    "isCancelable",
    "setCancelable",
    "Event"
  ],
  "mappings": "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",
  "file": "Event.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Basic event object.\n *\n * Please note:\n * Event objects are only valid during the event dispatch. After the dispatch\n * event objects are pooled or disposed. If you want to safe a reference to an\n * event instance use the {@link #clone} method.\n *\n * The interface is modeled after the DOM level 2 event interface:\n * http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface\n *\n * @use(qx.event.Registration)\n */\nqx.Class.define(\"qx.event.type.Event\",\n{\n  extend : qx.core.Object,\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** The current event phase is the capturing phase. */\n    CAPTURING_PHASE : 1,\n\n    /** The event is currently being evaluated at the target */\n    AT_TARGET       : 2,\n\n    /** The current event phase is the bubbling phase. */\n    BUBBLING_PHASE  : 3\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n  \t/** {qx.Promise[]} promises returned by event handlers */\n  \t_promises: null,\n  \t\n    /**\n     * Initialize the fields of the event. The event must be initialized before\n     * it can be dispatched.\n     *\n     * @param canBubble {Boolean?false} Whether or not the event is a bubbling event.\n     *     If the event is bubbling, the bubbling can be stopped using\n     *     {@link #stopPropagation}\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *     action prevented. The default action can either be the browser's\n     *     default action of a native event (e.g. open the context menu on a\n     *     right click) or the default action of a qooxdoo class (e.g. close\n     *     the window widget). The default action can be prevented by calling\n     *     {@link #preventDefault}\n     * @return {qx.event.type.Event} The initialized event instance\n     */\n    init : function(canBubble, cancelable)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (canBubble !== undefined)\n        {\n          qx.core.Assert.assertBoolean(canBubble, \"Invalid argument value 'canBubble'.\");\n        }\n\n        if (cancelable !== undefined)\n        {\n          qx.core.Assert.assertBoolean(cancelable, \"Invalid argument value 'cancelable'.\");\n        }\n      }\n\n      this._type = null;\n      this._target = null;\n      this._currentTarget = null;\n      this._relatedTarget = null;\n      this._originalTarget = null;\n      this._stopPropagation = false;\n      this._preventDefault = false;\n      this._bubbles = !!canBubble;\n      this._cancelable = !!cancelable;\n      this._timeStamp = (new Date()).getTime();\n      this._eventPhase = null;\n      this._promises = null;\n\n      return this;\n    },\n\n\n    /**\n     * Create a clone of the event object, which is not automatically disposed\n     * or pooled after an event dispatch.\n     *\n     * @param embryo {qx.event.type.Event?null} Optional event class, which will\n     *     be configured using the data of this event instance. The event must be\n     *     an instance of this event class. If the value is <code>null</code>,\n     *     a new pooled instance is created.\n     * @return {qx.event.type.Event} a clone of this class.\n     */\n    clone : function(embryo)\n    {\n      if (embryo) {\n        var clone = embryo;\n      } else {\n        var clone = qx.event.Pool.getInstance().getObject(this.constructor);\n      }\n\n      clone._type = this._type;\n      clone._target = this._target;\n      clone._currentTarget = this._currentTarget;\n      clone._relatedTarget = this._relatedTarget;\n      clone._originalTarget = this._originalTarget;\n      clone._stopPropagation = this._stopPropagation;\n      clone._bubbles = this._bubbles;\n      clone._preventDefault = this._preventDefault;\n      clone._cancelable = this._cancelable;\n      clone._promises = this._promises;\n\n      return clone;\n    },\n\n\n\n    /**\n     * Stops event from all further processing. Execute this when the\n     * current handler should have \"exclusive rights\" to the event\n     * and no further reaction by anyone else should happen.\n     */\n    stop : function()\n    {\n      if (this._bubbles) {\n        this.stopPropagation();\n      }\n\n      if (this._cancelable) {\n        this.preventDefault();\n      }\n    },\n\n\n    /**\n     * This method is used to prevent further propagation of an event during event\n     * flow. If this method is called by any event listener the event will cease\n     * propagating through the tree. The event will complete dispatch to all listeners\n     * on the current event target before event flow stops.\n     *\n     */\n    stopPropagation : function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertTrue(this._bubbles, \"Cannot stop propagation on a non bubbling event: \" + this.getType());\n      }\n      this._stopPropagation = true;\n    },\n\n\n    /**\n     * Get whether further event propagation has been stopped.\n     *\n     * @return {Boolean} Whether further propagation has been stopped.\n     */\n    getPropagationStopped : function() {\n      return !!this._stopPropagation;\n    },\n\n\n    /**\n     * Prevent the default action of cancelable events, e.g. opening the context\n     * menu, ...\n     *\n     */\n    preventDefault : function()\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertTrue(this._cancelable, \"Cannot prevent default action on a non cancelable event: \" + this.getType());\n      }\n      this._preventDefault = true;\n    },\n    \n    \n    /**\n     * Adds a promise to the list of promises returned by event handlers\n     * @param promise {qx.Promise} the promise to add\n     */\n    addPromise: qx.core.Environment.select(\"qx.promise\", {\n      \"true\": function(promise) {\n          if (this._promises === null) {\n            this._promises = [promise];\n          } else {\n            this._promises.push(promise);\n          }\n        },\n      \"false\": function() {\n        throw new Error(this.classname + \".addPromise not supported because qx.promise==false\");\n      }\n    }),\n    \n    \n    /**\n     * Returns the array of promises, or null if there are no promises\n     * @return {qx.Promise[]?}\n     */\n    getPromises: qx.core.Environment.select(\"qx.promise\", {\n      \"true\": function() {\n        return this._promises;\n      },\n      \"false\": function() {\n        throw new Error(this.classname + \".getPromises not supported because qx.promise==false\");\n      }\n    }),\n    \n    \n    /**\n     * Returns a promise for this event; if the event is defaultPrevented, the promise\n     * is a rejected promise, otherwise it is fulfilled.  The promise returned will only\n     * be fulfilled when the promises added via {@link addPromise} are also fulfilled\n     */\n    promise: qx.core.Environment.select(\"qx.promise\", {\n      \"true\": function() {\n        if (this.getDefaultPrevented()) {\n          return qx.Promise.reject();\n        }\n        if (this._promises === null) {\n          return qx.Promise.resolve(true);\n        }\n        return qx.Promise.all(this._promises);\n      },\n      \"false\": function() {\n        throw new Error(this.classname + \".promise not supported because qx.promise==false\");\n      }\n    }),\n\n\n    /**\n     * Get whether the default action has been prevented\n     *\n     * @return {Boolean} Whether the default action has been prevented\n     */\n    getDefaultPrevented : function() {\n      return !!this._preventDefault;\n    },\n\n\n    /**\n     * The name of the event\n     *\n     * @return {String} name of the event\n     */\n    getType : function() {\n      return this._type;\n    },\n\n\n    /**\n     * Override the event type\n     *\n     * @param type {String} new event type\n     */\n    setType : function(type) {\n      this._type = type;\n    },\n\n\n    /**\n     * Used to indicate which phase of event flow is currently being evaluated.\n     *\n     * @return {Integer} The current event phase. Possible values are\n     *         {@link #CAPTURING_PHASE}, {@link #AT_TARGET} and {@link #BUBBLING_PHASE}.\n     */\n    getEventPhase : function() {\n      return this._eventPhase;\n    },\n\n\n    /**\n     * Override the event phase\n     *\n     * @param eventPhase {Integer} new event phase\n     */\n    setEventPhase : function(eventPhase) {\n      this._eventPhase = eventPhase;\n    },\n\n\n    /**\n     * The time (in milliseconds relative to the epoch) at which the event was created.\n     *\n     * @return {Integer} the timestamp the event was created.\n     */\n    getTimeStamp : function() {\n      return this._timeStamp;\n    },\n\n\n    /**\n     * Returns the event target to which the event was originally\n     * dispatched.\n     *\n     * @return {Element} target to which the event was originally\n     *       dispatched.\n     */\n    getTarget : function() {\n      return this._target;\n    },\n\n\n    /**\n     * Override event target.\n     *\n     * @param target {Element} new event target\n     */\n    setTarget : function(target) {\n      this._target = target;\n    },\n\n\n    /**\n     * Get the event target node whose event listeners are currently being\n     * processed. This is particularly useful during event capturing and\n     * bubbling.\n     *\n     * @return {Element} The target the event listener is currently\n     *       dispatched on.\n     */\n    getCurrentTarget : function() {\n      return this._currentTarget || this._target;\n    },\n\n\n    /**\n     * Override current target.\n     *\n     * @param currentTarget {Element} new current target\n     */\n    setCurrentTarget : function(currentTarget) {\n      this._currentTarget = currentTarget;\n    },\n\n\n    /**\n     * Get the related event target. This is only configured for\n     * events which also had an influences on another element e.g.\n     * mouseover/mouseout, focus/blur, ...\n     *\n     * @return {Element} The related target\n     */\n    getRelatedTarget : function() {\n      return this._relatedTarget;\n    },\n\n\n    /**\n     * Override related target.\n     *\n     * @param relatedTarget {Element} new related target\n     */\n    setRelatedTarget : function(relatedTarget) {\n      this._relatedTarget = relatedTarget;\n    },\n\n\n    /**\n     * Get the original event target. This is only configured\n     * for events which are fired by another event (often when\n     * the target should be reconfigured for another view) e.g.\n     * low-level DOM event to widget event.\n     *\n     * @return {Element} The original target\n     */\n    getOriginalTarget : function() {\n      return this._originalTarget;\n    },\n\n\n    /**\n     * Override original target.\n     *\n     * @param originalTarget {Element} new original target\n     */\n    setOriginalTarget : function(originalTarget) {\n      this._originalTarget = originalTarget;\n    },\n\n\n    /**\n     * Check whether or not the event is a bubbling event. If the event can\n     * bubble the value is true, else the value is false.\n     *\n     * @return {Boolean} Whether the event bubbles\n     */\n    getBubbles : function() {\n      return this._bubbles;\n    },\n\n\n    /**\n     * Set whether the event bubbles.\n     *\n     * @param bubbles {Boolean} Whether the event bubbles\n     */\n    setBubbles : function(bubbles) {\n      this._bubbles = bubbles;\n    },\n\n\n    /**\n     * Get whether the event is cancelable\n     *\n     * @return {Boolean} Whether the event is cancelable\n     */\n    isCancelable : function() {\n      return this._cancelable;\n    },\n\n\n    /**\n     * Set whether the event is cancelable\n     *\n     * @param cancelable {Boolean} Whether the event is cancelable\n     */\n    setCancelable : function(cancelable) {\n      this._cancelable = cancelable;\n    }\n  }\n});\n"
  ]
}