{
  "className": "qx.event.type.Drag",
  "packageName": "qx.event.type",
  "name": "Drag",
  "superClass": "qx.event.type.Event",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 25,
        "column": 0
      },
      "end": {
        "line": 310,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nFabian Jakobs (fjakobs)\nChristian Hagendorn (chris_schmidt)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Event object class for drag events"
        }
      ]
    }
  },
  "type": "class",
  "members": {
    "init": {
      "location": {
        "start": {
          "line": 51,
          "column": 4
        },
        "end": {
          "line": 67,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Initialize the fields of the event. The event must be initialized before\nit can be dispatched."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "cancelable {Boolean?false} Whether or not an event can have its default\naction prevented. The default action can either be the browser's\ndefault action of a native event (e.g. open the context menu on a\nright click) or the default action of a qooxdoo class (e.g. close\nthe window widget). The default action can be prevented by calling\n{@link qx.event.type.Event#preventDefault}",
            "paramName": "cancelable",
            "description": " Whether or not an event can have its default\naction prevented. The default action can either be the browser's\ndefault action of a native event (e.g. open the context menu on a\nright click) or the default action of a qooxdoo class (e.g. close\nthe window widget). The default action can be prevented by calling\n{@link qx.event.type.Event#preventDefault}",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "originalEvent {qx.event.type.Track} The original (mouse) event to use",
            "paramName": "originalEvent",
            "description": " The original (mouse) event to use",
            "type": "qx.event.type.Track"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} The initialized event instance",
            "type": "qx.event.type.Event",
            "description": " The initialized event instance"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event"
      ]
    },
    "clone": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 78,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "embryo {qx.event.type.Event?null} Optional event class, which will\nbe configured using the data of this event instance. The event must be\nan instance of this event class. If the value is <code>null</code>,\na new pooled instance is created.",
            "paramName": "embryo",
            "description": " Optional event class, which will\nbe configured using the data of this event instance. The event must be\nan instance of this event class. If the value is <code>null</code>,\na new pooled instance is created.",
            "optional": true,
            "defaultValue": "null",
            "type": "qx.event.type.Event"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.type.Event} a clone of this class.",
            "type": "qx.event.type.Event",
            "description": " a clone of this class."
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.event.type.Event",
      "appearsIn": [
        "qx.event.type.Event",
        "qx.core.Object"
      ]
    },
    "getDocumentLeft": {
      "location": {
        "start": {
          "line": 88,
          "column": 4
        },
        "end": {
          "line": 104,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The horizontal mouse position in the document.",
            "type": "Integer",
            "description": " The horizontal mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentTop": {
      "location": {
        "start": {
          "line": 114,
          "column": 4
        },
        "end": {
          "line": 131,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The vertical mouse position in the document.",
            "type": "Integer",
            "description": " The vertical mouse position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getManager": {
      "location": {
        "start": {
          "line": 139,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the drag&drop event handler responsible for the target"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.event.handler.DragDrop} The drag&drop handler",
            "type": "qx.event.handler.DragDrop",
            "description": " The drag&drop handler"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addType": {
      "location": {
        "start": {
          "line": 150,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Used during <code>dragstart</code> listener to\ninform the manager about supported data types."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Data type to add to list of supported types",
            "paramName": "type",
            "description": " Data type to add to list of supported types",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addAction": {
      "location": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 163,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Used during <code>dragstart</code> listener to\ninform the manager about supported drop actions."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to add to the list of supported actions",
            "paramName": "action",
            "description": " Action to add to the list of supported actions",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "supportsType": {
      "location": {
        "start": {
          "line": 176,
          "column": 4
        },
        "end": {
          "line": 178,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the given type is supported by the drag\ntarget (source target).\n\nThis is used in the event listeners for <code>dragover</code>\nor <code>dragdrop</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} The type to look for",
            "paramName": "type",
            "description": " The type to look for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the given type is supported",
            "type": "Boolean",
            "description": " Whether the given type is supported"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "supportsAction": {
      "location": {
        "start": {
          "line": 191,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the given action is supported by the drag\ntarget (source target).\n\nThis is used in the event listeners for <code>dragover</code>\nor <code>dragdrop</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The action to look for",
            "paramName": "action",
            "description": " The action to look for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the given action is supported",
            "type": "Boolean",
            "description": " Whether the given action is supported"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "addData": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 205,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds data of the given type to the internal storage. The data\nis available until the <code>dragend</code> event is fired."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any valid type",
            "paramName": "type",
            "description": " Any valid type",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "data {var} Any data to store",
            "paramName": "data",
            "description": " Any data to store",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getData": {
      "location": {
        "start": {
          "line": 218,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the data of the given type. Used in the <code>drop</code> listener.\n\nNote that this is a synchronous method and if any of the drag and drop\nevents handlers are implemented using Promises, this may fail; @see\n`getDataAsync`."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any of the supported types.",
            "paramName": "type",
            "description": " Any of the supported types.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The data for the given type",
            "type": "var",
            "description": " The data for the given type"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDataAsync": {
      "location": {
        "start": {
          "line": 229,
          "column": 4
        },
        "end": {
          "line": 231,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the data of the given type. Used in the <code>drop</code> listener."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Any of the supported types.",
            "paramName": "type",
            "description": " Any of the supported types.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|var} The data for the given type",
            "type": "qx.Promise|var",
            "description": " The data for the given type"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentType": {
      "location": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 242,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the type which was requested last, to be used\nin the <code>droprequest</code> listener."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The last requested data type",
            "type": "String",
            "description": " The last requested data type"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentAction": {
      "location": {
        "start": {
          "line": 255,
          "column": 4
        },
        "end": {
          "line": 260,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the currently selected action. Depends on the\nsupported actions of the source target and the modification\nkeys pressed by the user.\n\nUsed in the <code>droprequest</code> listener."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The action. May be one of <code>move</code>,\n<code>copy</code> or <code>alias</code>.",
            "type": "String",
            "description": " The action. May be one of <code>move</code>,\n<code>copy</code> or <code>alias</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCurrentActionAsync": {
      "location": {
        "start": {
          "line": 272,
          "column": 4
        },
        "end": {
          "line": 277,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the currently selected action. Depends on the\nsupported actions of the source target and the modification\nkeys pressed by the user.\n\nUsed in the <code>droprequest</code> listener."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise|String} The action. May be one of <code>move</code>,\n<code>copy</code> or <code>alias</code>.",
            "type": "qx.Promise|String",
            "description": " The action. May be one of <code>move</code>,\n<code>copy</code> or <code>alias</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setDropAllowed": {
      "location": {
        "start": {
          "line": 289,
          "column": 4
        },
        "end": {
          "line": 291,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the current drop target allows the current drag target.\n\nThis can be called from within the \"drag\" event to enable/disable\na drop target selectively, for example based on the child item,\nabove and beyond the one-time choice made by the the \"dragover\"\nevent for the droppable widget itself."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "isAllowed {Boolean} False if a drop should be disallowed",
            "paramName": "isAllowed",
            "description": " False if a drop should be disallowed",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDragTarget": {
      "location": {
        "start": {
          "line": 298,
          "column": 4
        },
        "end": {
          "line": 300,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the target which has been initially tapped on."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.ui.core.Widget} The tapped widget.",
            "type": "qx.ui.core.Widget",
            "description": " The tapped widget."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "stopSession": {
      "location": {
        "start": {
          "line": 306,
          "column": 4
        },
        "end": {
          "line": 308,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Stops the drag&drop session and fires a <code>dragend</code> event."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "descendants": []
}