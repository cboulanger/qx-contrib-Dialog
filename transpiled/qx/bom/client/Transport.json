{
  "className": "qx.bom.client.Transport",
  "packageName": "qx.bom.client",
  "name": "Transport",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0
      },
      "end": {
        "line": 175,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nCarsten Lergenmueller (carstenl)\nFabian Jakobs (fbjakobs)\nMartin Wittemann (martinwittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Determines browser-dependent information about the transport layer.\n\nThis class is used by {@link qx.core.Environment} and should not be used\ndirectly. Please check its class comment for details how to use it."
        }
      ],
      "@internal": [
        {
          "name": "@internal",
          "body": ""
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "getMaxConcurrentRequestCount": {
      "location": {
        "start": {
          "line": 55,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the maximum number of parallel requests the current browser\nsupports per host addressed.\n\nNote that this assumes one connection can support one request at a time\nonly. Technically, this is not correct when pipelining is enabled (which\nit currently is only for IE 8 and Opera). In this case, the number\nreturned will be too low, as one connection supports multiple pipelined\nrequests. This is accepted for now because pipelining cannot be\ndetected from JavaScript and because modern browsers have enough\nparallel connections already - it's unlikely an app will require more\nthan 4 parallel XMLHttpRequests to one server at a time."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Maximum number of parallel requests",
            "type": "Integer",
            "description": " Maximum number of parallel requests"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSsl": {
      "location": {
        "start": {
          "line": 124,
          "column": 4
        },
        "end": {
          "line": 126,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks whether the app is loaded with SSL enabled which means via https."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the app runs on https",
            "type": "Boolean",
            "description": " <code>true</code>, if the app runs on https"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getXmlHttpRequest": {
      "location": {
        "start": {
          "line": 140,
          "column": 4
        },
        "end": {
          "line": 167,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks what kind of XMLHttpRequest object the browser supports\nfor the current protocol, if any.\n\nThe standard XMLHttpRequest is preferred over ActiveX XMLHTTP."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}\n<code>\"xhr\"</code>, if the browser provides standard XMLHttpRequest.<br/>\n<code>\"activex\"</code>, if the browser provides ActiveX XMLHTTP.<br/>\n<code>\"\"</code>, if there is not XHR support at all.",
            "type": "String",
            "description": "\n<code>\"xhr\"</code>, if the browser provides standard XMLHttpRequest.<br/>\n<code>\"activex\"</code>, if the browser provides ActiveX XMLHTTP.<br/>\n<code>\"\"</code>, if there is not XHR support at all."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 170,
        "column": 2
      },
      "end": {
        "line": 174,
        "column": 3
      }
    }
  },
  "descendants": []
}