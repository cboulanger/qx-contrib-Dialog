{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/bom/client/Browser.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "getName",
    "agent",
    "navigator",
    "userAgent",
    "reg",
    "RegExp",
    "bom",
    "client",
    "Browser",
    "__agents",
    "match",
    "name",
    "toLowerCase",
    "engine",
    "Engine",
    "indexOf",
    "OperatingSystem",
    "getVersion",
    "version",
    "$2",
    "$1",
    "getDocumentMode",
    "document",
    "documentMode",
    "getQuirksMode",
    "parseFloat",
    "DOCUMENT_MODE",
    "compatMode",
    "defer",
    "core",
    "Environment",
    "add"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA8CAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,uBAApB,EACA;AACEC,aACA;AACE;;;;;AAKAC,eAAU,mBAAW;AACnB,YAAIC,QAAQC,UAAUC,SAAtB;AACA,YAAIC,MAAM,IAAIC,MAAJ,CAAW,MAAMX,GAAGY,GAAH,CAAOC,MAAP,CAAcC,OAAd,CAAsBC,QAA5B,GAAuC,wBAAlD,CAAV;AACA,YAAIC,QAAQT,MAAMS,KAAN,CAAYN,GAAZ,CAAZ;AACA,YAAI,CAACM,KAAL,EAAY;AACV,iBAAO,EAAP;AACD;;AAED,YAAIC,OAAOD,MAAM,CAAN,EAASE,WAAT,EAAX;;AAEA,YAAIC,SAASnB,GAAGY,GAAH,CAAOC,MAAP,CAAcO,MAAd,CAAqBd,OAArB,EAAb;AACA,YAAIa,WAAW,QAAf,EACA;AACE,cAAIZ,MAAMS,KAAN,CAAY,gBAAZ,CAAJ,EAAmC;AACjCC,mBAAO,MAAP;AACD,WAFD,MAGK,IAAIA,SAAS,SAAb,EACL;AACE;AACAA,mBAAO,eAAP;AACD,WAJI,MAKA,IAAIV,MAAMc,OAAN,CAAc,eAAd,MAAmC,CAAC,CAApC,IAAyCd,MAAMc,OAAN,CAAc,SAAd,MAA6B,CAAC,CAA3E,EACL;AACE;AACAJ,mBAAO,eAAP;AACD,WAJI,MAKA,IAAIV,MAAMc,OAAN,CAAc,OAAd,KAA0B,CAAC,CAA/B,EAAkC;AACrCJ,mBAAO,OAAP;AACD;AACF,SAlBD,MAmBK,IAAIE,WAAY,QAAhB,EACL;AACE;AACA,cAAIF,SAAS,MAAT,IAAmBA,SAAS,SAAhC,EACA;AACEA,mBAAO,IAAP;;AAEA;AACA,gBAAIjB,GAAGY,GAAH,CAAOC,MAAP,CAAcS,eAAd,CAA8BC,UAA9B,OAA+C,IAAnD,EAAyD;AACvDN,qBAAO,UAAP;AACD;;AAED,gBAAIP,MAAM,IAAIC,MAAJ,CAAW,UAAX,CAAV;AACA,gBAAIJ,MAAMS,KAAN,CAAYN,GAAZ,CAAJ,EAAsB;AACpBO,qBAAO,UAAP;AACD;AACF;AACF,SAjBI,MAkBA,IAAIE,WAAW,OAAf,EACL;AACE,cAAIF,SAAS,YAAb,EAA2B;AACzBA,mBAAO,aAAP;AACD,WAFD,MAEO,IAAIA,SAAS,YAAb,EAA2B;AAChCA,mBAAO,WAAP;AACD;AACF;;AAED,eAAOA,IAAP;AACD,OAhEH;;AAmEE;;;;;AAKAM,kBAAa,sBAAW;AACtB,YAAIhB,QAAQC,UAAUC,SAAtB;AACA,YAAIC,MAAM,IAAIC,MAAJ,CAAW,MAAMX,GAAGY,GAAH,CAAOC,MAAP,CAAcC,OAAd,CAAsBC,QAA5B,GAAuC,uBAAlD,CAAV;AACA,YAAIC,QAAQT,MAAMS,KAAN,CAAYN,GAAZ,CAAZ;AACA,YAAI,CAACM,KAAL,EAAY;AACV,iBAAO,EAAP;AACD;;AAED,YAAIC,OAAOD,MAAM,CAAN,EAASE,WAAT,EAAX;AACA,YAAIM,UAAUR,MAAM,CAAN,CAAd;;AAEA;AACA,YAAIT,MAAMS,KAAN,CAAY,8BAAZ,CAAJ,EAAiD;AAC/CQ,oBAAUb,OAAOc,EAAjB;AACD;;AAED,YAAIzB,GAAGY,GAAH,CAAOC,MAAP,CAAcO,MAAd,CAAqBd,OAArB,MAAkC,QAAtC,EACA;AACE;AACA;AACAkB,oBAAUxB,GAAGY,GAAH,CAAOC,MAAP,CAAcO,MAAd,CAAqBG,UAArB,EAAV;;AAEA,cAAIN,SAAS,MAAT,IAAmBjB,GAAGY,GAAH,CAAOC,MAAP,CAAcS,eAAd,CAA8BC,UAA9B,MAA8C,IAArE,EAA2E;AACzE;AACAC,sBAAU,KAAV;AACD;AACF;;AAED,YAAIxB,GAAGY,GAAH,CAAOC,MAAP,CAAcO,MAAd,CAAqBd,OAArB,MAAkC,QAAlC,IACAN,GAAGY,GAAH,CAAOC,MAAP,CAAcC,OAAd,CAAsBR,OAAtB,MAAmC,OADvC,EAEA;AACE,cAAIC,MAAMS,KAAN,CAAY,0BAAZ,CAAJ,EAA6C;AAC3CQ,sBAAUb,OAAOc,EAAjB;AACD;AACD,cAAIlB,MAAMS,KAAN,CAAY,mBAAZ,CAAJ,EAAsC;AACpCQ,sBAAUb,OAAOe,EAAjB;AACD;AACF;;AAED,eAAOF,OAAP;AACD,OAhHH;;AAmHE;;;;;;AAMAG,uBAAkB,2BAAW;AAC3B,YAAIC,SAASC,YAAb,EAA2B;AACzB,iBAAOD,SAASC,YAAhB;AACD;AACD,eAAO,CAAP;AACD,OA9HH;;AAiIE;;;;;;AAMAC,qBAAgB,yBAAW;AACzB,YAAG9B,GAAGY,GAAH,CAAOC,MAAP,CAAcO,MAAd,CAAqBd,OAArB,MAAkC,QAAlC,IACDyB,WAAW/B,GAAGY,GAAH,CAAOC,MAAP,CAAcO,MAAd,CAAqBG,UAArB,EAAX,KAAiD,CADnD,EAEA;AACE,iBAAOvB,GAAGY,GAAH,CAAOC,MAAP,CAAcO,MAAd,CAAqBY,aAArB,KAAuC,CAA9C;AACD,SAJD,MAIO;AACL,iBAAOJ,SAASK,UAAT,KAAwB,YAA/B;AACD;AACF,OA/IH;;AAkJE;;;AAGAlB,gBAAW;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAW,+HARF;;AAUT;AACA,iBAAU,wEAXD;;AAaT;AACA,kBAAW,+BAdF;;AAgBT;AACA,iBAAU;AAjBD,QAkBTf,GAAGY,GAAH,CAAOC,MAAP,CAAcO,MAAd,CAAqBd,OAArB,EAlBS;AArJb,KAFF;;AA4KE4B,WAAQ,eAAS7B,OAAT,EAAkB;AACxBL,SAAGmC,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,cAAxB,EAAwChC,QAAQC,OAAhD;AACAN,SAAGmC,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,iBAAxB,EAA2ChC,QAAQkB,UAAnD;AACAvB,SAAGmC,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,sBAAxB,EAAgDhC,QAAQsB,eAAxD;AACA3B,SAAGmC,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,oBAAxB,EAA8ChC,QAAQyB,aAAtD;AACD;AAjLH,GADA,C;AA9CA9B,KAAGY,GAAH,CAAOC,MAAP,CAAcC,OAAd,CAAsBX,aAAtB,GAAsCA,aAAtC",
  "file": "Browser.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Christian Hagendorn (chris_schmidt)\n     * Martin Wittemann (martinwittemann)\n\n   ======================================================================\n\n   This class contains code from:\n\n   * Unify Project\n\n     Homepage:\n       http://unify-project.org\n\n     Copyright:\n       2009-2010 Deutsche Telekom AG, Germany, http://telekom.com\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n     Authors:\n       * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * Basic browser detection for qooxdoo.\n *\n * This class is used by {@link qx.core.Environment} and should not be used\n * directly. Please check its class comment for details how to use it.\n *\n * @require(qx.bom.client.OperatingSystem#getVersion)\n * @internal\n */\nqx.Bootstrap.define(\"qx.bom.client.Browser\",\n{\n  statics :\n  {\n    /**\n     * Checks for the name of the browser and returns it.\n     * @return {String} The name of the current browser.\n     * @internal\n     */\n    getName : function() {\n      var agent = navigator.userAgent;\n      var reg = new RegExp(\"(\" + qx.bom.client.Browser.__agents + \")(/|)?([0-9]+\\.[0-9])?\");\n      var match = agent.match(reg);\n      if (!match) {\n        return \"\";\n      }\n\n      var name = match[1].toLowerCase();\n\n      var engine = qx.bom.client.Engine.getName();\n      if (engine === \"webkit\")\n      {\n        if (agent.match(/Edge\\/\\d+\\.\\d+/)) {\n          name = \"edge\";\n        }\n        else if (name === \"android\")\n        {\n          // Fix Chrome name (for instance wrongly defined in user agent on Android 1.6)\n          name = \"mobile chrome\";\n        }\n        else if (agent.indexOf(\"Mobile Safari\") !== -1 || agent.indexOf(\"Mobile/\") !== -1)\n        {\n          // Fix Safari name\n          name = \"mobile safari\";\n        }\n        else if (agent.indexOf(\" OPR/\") != -1) {\n          name = \"opera\";\n        }\n      }\n      else if (engine ===  \"mshtml\")\n      {\n        // IE 11's ua string no longer contains \"MSIE\" or even \"IE\"\n        if (name === \"msie\" || name === \"trident\")\n        {\n          name = \"ie\";\n\n          // Fix IE mobile before Microsoft added IEMobile string\n          if (qx.bom.client.OperatingSystem.getVersion() === \"ce\") {\n            name = \"iemobile\";\n          }\n\n          var reg = new RegExp(\"IEMobile\");\n          if (agent.match(reg)) {\n            name = \"iemobile\";\n          }\n        }\n      }\n      else if (engine === \"opera\")\n      {\n        if (name === \"opera mobi\") {\n          name = \"operamobile\";\n        } else if (name === \"opera mini\") {\n          name = \"operamini\";\n        }\n      }\n\n      return name;\n    },\n\n\n    /**\n     * Determines the version of the current browser.\n     * @return {String} The name of the current browser.\n     * @internal\n     */\n    getVersion : function() {\n      var agent = navigator.userAgent;\n      var reg = new RegExp(\"(\" + qx.bom.client.Browser.__agents + \")(/| )([0-9]+\\.[0-9])\");\n      var match = agent.match(reg);\n      if (!match) {\n        return \"\";\n      }\n\n      var name = match[1].toLowerCase();\n      var version = match[3];\n\n      // Support new style version string used by Opera and Safari\n      if (agent.match(/Version(\\/| )([0-9]+\\.[0-9])/)) {\n        version = RegExp.$2;\n      }\n\n      if (qx.bom.client.Engine.getName() == \"mshtml\")\n      {\n        // Use the Engine version, because IE8 and higher change the user agent\n        // string to an older version in compatibility mode\n        version = qx.bom.client.Engine.getVersion();\n\n        if (name === \"msie\" && qx.bom.client.OperatingSystem.getVersion() == \"ce\") {\n          // Fix IE mobile before Microsoft added IEMobile string\n          version = \"5.0\";\n        }\n      }\n\n      if (qx.bom.client.Engine.getName() == \"webkit\" ||\n          qx.bom.client.Browser.getName() == \"opera\")\n      {\n        if (agent.match(/OPR(\\/| )([0-9]+\\.[0-9])/)) {\n          version = RegExp.$2;\n        }\n        if (agent.match(/Edge\\/([\\d+\\.*]+)/)) {\n          version = RegExp.$1;\n        }\n      }\n\n      return version;\n    },\n\n\n    /**\n     * Returns in which document mode the current document is (only for IE).\n     *\n     * @internal\n     * @return {Number} The mode in which the browser is.\n     */\n    getDocumentMode : function() {\n      if (document.documentMode) {\n        return document.documentMode;\n      }\n      return 0;\n    },\n\n\n    /**\n     * Check if in quirks mode.\n     *\n     * @internal\n     * @return {Boolean} <code>true</code>, if the environment is in quirks mode\n     */\n    getQuirksMode : function() {\n      if(qx.bom.client.Engine.getName() == \"mshtml\" &&\n        parseFloat(qx.bom.client.Engine.getVersion()) >= 8)\n      {\n        return qx.bom.client.Engine.DOCUMENT_MODE === 5;\n      } else {\n        return document.compatMode !== \"CSS1Compat\";\n      }\n    },\n\n\n    /**\n     * Internal helper map for picking the right browser names to check.\n     */\n    __agents : {\n      // Safari should be the last one to check, because some other Webkit-based browsers\n      // use this identifier together with their own one.\n      // \"Version\" is used in Safari 4 to define the Safari version. After \"Safari\" they place the\n      // Webkit version instead. Silly.\n      // Palm Pre uses both Safari (contains Webkit version) and \"Version\" contains the \"Pre\" version. But\n      // as \"Version\" is not Safari here, we better detect this as the Pre-Browser version. So place\n      // \"Pre\" in front of both \"Version\" and \"Safari\".\n      \"webkit\" : \"AdobeAIR|Titanium|Fluid|Chrome|Android|Epiphany|Konqueror|iCab|iPad|iPhone|OmniWeb|Maxthon|Pre|PhantomJS|Mobile Safari|Safari\",\n\n      // Better security by keeping Firefox the last one to match\n      \"gecko\" : \"prism|Fennec|Camino|Kmeleon|Galeon|Netscape|SeaMonkey|Namoroka|Firefox\",\n\n      // No idea what other browsers based on IE's engine\n      \"mshtml\" : \"IEMobile|Maxthon|MSIE|Trident\",\n\n      // Keep \"Opera\" the last one to correctly prefer/match the mobile clients\n      \"opera\" : \"Opera Mini|Opera Mobi|Opera\"\n    }[qx.bom.client.Engine.getName()]\n  },\n\n  defer : function(statics) {\n    qx.core.Environment.add(\"browser.name\", statics.getName);\n    qx.core.Environment.add(\"browser.version\", statics.getVersion);\n    qx.core.Environment.add(\"browser.documentmode\", statics.getDocumentMode);\n    qx.core.Environment.add(\"browser.quirksmode\", statics.getQuirksMode);\n  }\n});\n"
  ]
}