{
  "className": "qx.bom.element.Location",
  "packageName": "qx.bom.element",
  "name": "Location",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 48,
        "column": 0
      },
      "end": {
        "line": 465,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\n\n======================================================================\n\nThis class contains code based on the following work:\n\njQuery Dimension Plugin\nhttp://jquery.com/\nVersion 1.1.3\n\nCopyright:\n(c) 2007, Paul Bakaus & Brandon Aaron\n\nLicense:\nMIT: http://www.opensource.org/licenses/mit-license.php\n\nAuthors:\nPaul Bakaus\nBrandon Aaron\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Query the location of an arbitrary DOM element in relation to its top\nlevel body element. Works in all major browsers:\n\n* Mozilla 1.5 + 2.0\n* Internet Explorer 6.0 + 7.0 (both standard & quirks mode)\n* Opera 9.2\n* Safari 3.0 beta"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "SVGElement"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__style": {
      "location": {
        "start": {
          "line": 59,
          "column": 4
        },
        "end": {
          "line": 61,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Queries a style property for the given element"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "style {String} Style property",
            "paramName": "style",
            "description": " Style property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Value of given style property",
            "type": "String",
            "description": " Value of given style property"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__num": {
      "location": {
        "start": {
          "line": 71,
          "column": 4
        },
        "end": {
          "line": 73,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Queries a style property for the given element and parses it to an integer value"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "style {String} Style property",
            "paramName": "style",
            "description": " Style property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Value of given style property",
            "type": "Integer",
            "description": " Value of given style property"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__computeScroll": {
      "location": {
        "start": {
          "line": 83,
          "column": 4
        },
        "end": {
          "line": 96,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the scroll offset of the given element relative to the document\n<code>body</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map which contains the <code>left</code> and <code>top</code> scroll offsets",
            "type": "Map",
            "description": " Map which contains the <code>left</code> and <code>top</code> scroll offsets"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__computeBody": {
      "location": {
        "start": {
          "line": 106,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the offset of the given element relative to the document\n<code>body</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map which contains the <code>left</code> and <code>top</code> offsets",
            "type": "Map",
            "description": " Map which contains the <code>left</code> and <code>top</code> offsets"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__computeOffset": {
      "location": {
        "start": {
          "line": 196,
          "column": 4
        },
        "end": {
          "line": 207,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the sum of all offsets of the given element node."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(elem)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map which contains the <code>left</code> and <code>top</code> offsets",
            "type": "Map",
            "description": " Map which contains the <code>left</code> and <code>top</code> offsets"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "get": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 320,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the location of the given element in context of\nthe document dimensions.\n\nSupported modes:\n\n* <code>margin</code>: Calculate from the margin box of the element (bigger than the visual appearance: including margins of given element)\n* <code>box</code>: Calculates the offset box of the element (default, uses the same size as visible)\n* <code>border</code>: Calculate the border box (useful to align to border edges of two elements).\n* <code>scroll</code>: Calculate the scroll box (relevant for absolute positioned content).\n* <code>padding</code>: Calculate the padding box (relevant for static/relative positioned content)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "mode {String?box} A supported option. See comment above.",
            "paramName": "mode",
            "description": " A supported option. See comment above.",
            "optional": true,
            "defaultValue": "box",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Returns a map with <code>left</code>, <code>top</code>,\n<code>right</code> and <code>bottom</code> which contains the distance\nof the element relative to the document.",
            "type": "Map",
            "description": " Returns a map with <code>left</code>, <code>top</code>,\n<code>right</code> and <code>bottom</code> which contains the distance\nof the element relative to the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__getBodyLocation": {
      "location": {
        "start": {
          "line": 328,
          "column": 4
        },
        "end": {
          "line": 342,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the location of the body element relative to the document."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "body {Element} The body element.",
            "paramName": "body",
            "description": " The body element.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} map with the keys <code>left</code> and <code>top</code>",
            "type": "Map",
            "description": " map with the keys <code>left</code> and <code>top</code>"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getLeft": {
      "location": {
        "start": {
          "line": 355,
          "column": 4
        },
        "end": {
          "line": 357,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the location of the given element in context of\nthe document dimensions. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "mode {String} A supported option. See comment above.",
            "paramName": "mode",
            "description": " A supported option. See comment above.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The left distance\nof the element relative to the document.",
            "type": "Integer",
            "description": " The left distance\nof the element relative to the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTop": {
      "location": {
        "start": {
          "line": 370,
          "column": 4
        },
        "end": {
          "line": 372,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the location of the given element in context of\nthe document dimensions. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "mode {String} A supported option. See comment above.",
            "paramName": "mode",
            "description": " A supported option. See comment above.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The top distance\nof the element relative to the document.",
            "type": "Integer",
            "description": " The top distance\nof the element relative to the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRight": {
      "location": {
        "start": {
          "line": 385,
          "column": 4
        },
        "end": {
          "line": 387,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the location of the given element in context of\nthe document dimensions. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "mode {String} A supported option. See comment above.",
            "paramName": "mode",
            "description": " A supported option. See comment above.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The right distance\nof the element relative to the document.",
            "type": "Integer",
            "description": " The right distance\nof the element relative to the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBottom": {
      "location": {
        "start": {
          "line": 400,
          "column": 4
        },
        "end": {
          "line": 402,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the location of the given element in context of\nthe document dimensions. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "mode {String} A supported option. See comment above.",
            "paramName": "mode",
            "description": " A supported option. See comment above.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The bottom distance\nof the element relative to the document.",
            "type": "Integer",
            "description": " The bottom distance\nof the element relative to the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRelative": {
      "location": {
        "start": {
          "line": 416,
          "column": 4
        },
        "end": {
          "line": 427,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the distance between two DOM elements. For supported modes please\nhave a look at the {@link qx.bom.element.Location#get} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem1 {Element} First element",
            "paramName": "elem1",
            "description": " First element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "elem2 {Element} Second element",
            "paramName": "elem2",
            "description": " Second element",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "mode1 {String?null} Mode for first element",
            "paramName": "mode1",
            "description": " Mode for first element",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "mode2 {String?null} Mode for second element",
            "paramName": "mode2",
            "description": " Mode for second element",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Returns a map with <code>left</code> and <code>top</code>\nwhich contains the distance of the elements from each other.",
            "type": "Map",
            "description": " Returns a map with <code>left</code> and <code>top</code>\nwhich contains the distance of the elements from each other."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPosition": {
      "location": {
        "start": {
          "line": 437,
          "column": 4
        },
        "end": {
          "line": 439,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the distance between the given element to its offset parent."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "elem {Element} DOM element to query",
            "paramName": "elem",
            "description": " DOM element to query",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Returns a map with <code>left</code> and <code>top</code>\nwhich contains the distance of the elements from each other.",
            "type": "Map",
            "description": " Returns a map with <code>left</code> and <code>top</code>\nwhich contains the distance of the elements from each other."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getOffsetParent": {
      "location": {
        "start": {
          "line": 448,
          "column": 4
        },
        "end": {
          "line": 463,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Detects the offset parent of the given element"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "element {Element} Element to query for offset parent",
            "paramName": "element",
            "description": " Element to query for offset parent",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} Detected offset parent",
            "type": "Element",
            "description": " Detected offset parent"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}