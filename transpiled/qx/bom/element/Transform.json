{
  "className": "qx.bom.element.Transform",
  "packageName": "qx.bom.element",
  "name": "Transform",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 27,
        "column": 0
      },
      "end": {
        "line": 371,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nMartin Wittemann (wittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "This class is responsible for applying CSS3 transforms to plain DOM elements.\nThe implementation is mostly a cross browser wrapper for applying the\ntransforms.\nThe API is keep to the spec as close as possible.\n\nhttp://www.w3.org/TR/css3-3d-transforms/"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__cssKeys": {
      "location": {
        "start": {
          "line": 32,
          "column": 4
        },
        "end": {
          "line": 32,
          "column": 56
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal storage of the CSS names"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "transform": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 60,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Method to apply multiple transforms at once to the given element. It\ntakes a map containing the transforms you want to apply plus the values\ne.g.<code>{scale: 2, rotate: \"5deg\"}</code>.\nThe values can be either singular, which means a single value will\nbe added to the CSS. If you give an array, the values will be split up\nand each array entry will be used for the X, Y or Z dimension in that\norder e.g. <code>{scale: [2, 0.5]}</code> will result in a element\ndouble the size in X direction and half the size in Y direction.\nThe values can be either singular, which means a single value will\nbe added to the CSS. If you give an array, the values will be join to\na string.\n3d suffixed properties will be taken for translate and scale if they are\navailable and an array with three values is given.\nMake sure your browser supports all transformations you apply."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "transforms {Map} The map containing the transforms and value.",
            "paramName": "transforms",
            "description": " The map containing the transforms and value.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "translate": {
      "location": {
        "start": {
          "line": 69,
          "column": 4
        },
        "end": {
          "line": 71,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Translates the given element by the given value. For further details, take\na look at the {@link #transform} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String|Array} The value to translate e.g. <code>\"10px\"</code>.",
            "paramName": "value",
            "description": " The value to translate e.g. <code>\"10px\"</code>.",
            "type": [
              "String",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "scale": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 82,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Scales the given element by the given value. For further details, take\na look at the {@link #transform} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {Number|Array} The value to scale.",
            "paramName": "value",
            "description": " The value to scale.",
            "type": [
              "Number",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "rotate": {
      "location": {
        "start": {
          "line": 91,
          "column": 4
        },
        "end": {
          "line": 93,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Rotates the given element by the given value. For further details, take\na look at the {@link #transform} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String|Array} The value to rotate e.g. <code>\"90deg\"</code>.",
            "paramName": "value",
            "description": " The value to rotate e.g. <code>\"90deg\"</code>.",
            "type": [
              "String",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "skew": {
      "location": {
        "start": {
          "line": 102,
          "column": 4
        },
        "end": {
          "line": 104,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Skews the given element by the given value. For further details, take\na look at the {@link #transform} method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The element to apply the transformation.",
            "paramName": "el",
            "description": " The element to apply the transformation.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String|Array} The value to skew e.g. <code>\"90deg\"</code>.",
            "paramName": "value",
            "description": " The value to skew e.g. <code>\"90deg\"</code>.",
            "type": [
              "String",
              "Array"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getCss": {
      "location": {
        "start": {
          "line": 114,
          "column": 4
        },
        "end": {
          "line": 121,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Converts the given map to a string which could be added to a css\nstylesheet."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "transforms {Map} The transforms map. For a detailed description,\ntake a look at the {@link #transform} method.",
            "paramName": "transforms",
            "description": " The transforms map. For a detailed description,\ntake a look at the {@link #transform} method.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The CSS value.",
            "type": "String",
            "description": " The CSS value."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setOrigin": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 136,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the transform-origin property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String} CSS position values like <code>50% 50%</code> or\n<code>left top</code>.",
            "paramName": "value",
            "description": " CSS position values like <code>50% 50%</code> or\n<code>left top</code>.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getOrigin": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 151,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the transform-origin property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#transform-origin-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The set property, e.g. <code>50% 50%</code>",
            "type": "String",
            "description": " The set property, e.g. <code>50% 50%</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setStyle": {
      "location": {
        "start": {
          "line": 161,
          "column": 4
        },
        "end": {
          "line": 165,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the transform-style property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String} Either <code>flat</code> or <code>preserve-3d</code>.",
            "paramName": "value",
            "description": " Either <code>flat</code> or <code>preserve-3d</code>.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getStyle": {
      "location": {
        "start": {
          "line": 176,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the transform-style property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#transform-style-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The set property, either <code>flat</code> or\n<code>preserve-3d</code>.",
            "type": "String",
            "description": " The set property, either <code>flat</code> or\n<code>preserve-3d</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setPerspective": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the perspective property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {Number} The perspective layer. Numbers between 100\nand 5000 give the best results.",
            "paramName": "value",
            "description": " The perspective layer. Numbers between 100\nand 5000 give the best results.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPerspective": {
      "location": {
        "start": {
          "line": 206,
          "column": 4
        },
        "end": {
          "line": 211,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the perspective property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#perspective-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The set property, e.g. <code>500</code>",
            "type": "String",
            "description": " The set property, e.g. <code>500</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setPerspectiveOrigin": {
      "location": {
        "start": {
          "line": 222,
          "column": 4
        },
        "end": {
          "line": 226,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the perspective-origin property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {String} CSS position values like <code>50% 50%</code> or\n<code>left top</code>.",
            "paramName": "value",
            "description": " CSS position values like <code>50% 50%</code> or\n<code>left top</code>.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPerspectiveOrigin": {
      "location": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 250,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the perspective-origin property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#perspective-origin-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The set property, e.g. <code>50% 50%</code>",
            "type": "String",
            "description": " The set property, e.g. <code>50% 50%</code>"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setBackfaceVisibility": {
      "location": {
        "start": {
          "line": 260,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the backface-visibility property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to set the property.",
            "paramName": "el",
            "description": " The dom element to set the property.",
            "type": "Element"
          },
          {
            "name": "@param",
            "body": "value {Boolean} <code>true</code> if the backface should be visible.",
            "paramName": "value",
            "description": " <code>true</code> if the backface should be visible.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBackfaceVisibility": {
      "location": {
        "start": {
          "line": 274,
          "column": 4
        },
        "end": {
          "line": 279,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the backface-visibility property of the given element.\n\nSpec: http://www.w3.org/TR/css3-3d-transforms/#backface-visibility-property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el {Element} The dom element to read the property.",
            "paramName": "el",
            "description": " The dom element to read the property.",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the backface is visible.",
            "type": "Boolean",
            "description": " <code>true</code>, if the backface is visible."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getTransformValue": {
      "location": {
        "start": {
          "line": 288,
          "column": 4
        },
        "end": {
          "line": 318,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Converts the given transforms map to a valid CSS string."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "transforms {Map} A map containing the transforms.",
            "paramName": "transforms",
            "description": " A map containing the transforms.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The CSS transforms.",
            "type": "String",
            "description": " The CSS transforms."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_compute3dProperty": {
      "location": {
        "start": {
          "line": 329,
          "column": 4
        },
        "end": {
          "line": 343,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper function to create 3d property."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "property {String} Property of transform, e.g. translate",
            "paramName": "property",
            "description": " Property of transform, e.g. translate",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "params {Array} Array with three values, each one stands for an axis.",
            "paramName": "params",
            "description": " Array with three values, each one stands for an axis.",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Computed property and its value",
            "type": "String",
            "description": " Computed property and its value"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_computeAxisProperties": {
      "location": {
        "start": {
          "line": 354,
          "column": 4
        },
        "end": {
          "line": 369,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper function to create axis related properties."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "property {String} Property of transform, e.g. rotate",
            "paramName": "property",
            "description": " Property of transform, e.g. rotate",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "params {Array} Array with values, each one stands for an axis.",
            "paramName": "params",
            "description": " Array with values, each one stands for an axis.",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Computed property and its value",
            "type": "String",
            "description": " Computed property and its value"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    }
  },
  "descendants": []
}