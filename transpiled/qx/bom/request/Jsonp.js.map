{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/bom/request/Jsonp.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "bom",
    "request",
    "Script",
    "construct",
    "apply",
    "__generateId",
    "members",
    "responseJson",
    "__id",
    "__callbackParam",
    "__callbackName",
    "__callbackCalled",
    "__customCallbackCreated",
    "__generatedUrl",
    "__disposed",
    "__prefix",
    "open",
    "method",
    "url",
    "query",
    "callbackParam",
    "callbackName",
    "that",
    "constructor",
    "window",
    "data",
    "callback",
    "core",
    "Environment",
    "get",
    "debug",
    "Jsonp",
    "util",
    "Uri",
    "appendParamsToUrl",
    "__callBase",
    "lang",
    "Json",
    "stringify",
    "parse",
    "undefined",
    "__deleteCustomCallback",
    "setCallbackParam",
    "param",
    "setCallbackName",
    "name",
    "setPrefix",
    "prefix",
    "getGeneratedUrl",
    "dispose",
    "_onNativeLoad",
    "status",
    "args",
    "prototype",
    "Date",
    "valueOf",
    "Math",
    "random",
    "substring"
  ],
  "mappings": "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",
  "file": "Jsonp.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * A special script loader handling JSONP responses. Automatically\n * provides callbacks and populates responseJson property.\n *\n * Example:\n *\n * <pre class=\"javascript\">\n *  var req = new qx.bom.request.Jsonp();\n *\n *  // Some services have a fixed callback name\n *  // req.setCallbackName(\"callback\");\n *\n *  req.onload = function() {\n *    // Handle data received\n *    req.responseJson;\n *  }\n *\n *  req.open(\"GET\", url);\n *  req.send();\n * </pre>\n *\n * @require(qx.bom.request.Script#open)\n * @require(qx.bom.request.Script#on)\n * @require(qx.bom.request.Script#onreadystatechange)\n * @require(qx.bom.request.Script#onload)\n * @require(qx.bom.request.Script#onloadend)\n * @require(qx.bom.request.Script#onerror)\n * @require(qx.bom.request.Script#onabort)\n * @require(qx.bom.request.Script#ontimeout)\n * @require(qx.bom.request.Script#send)\n *\n * @group (IO)\n */\nqx.Bootstrap.define(\"qx.bom.request.Jsonp\",\n{\n  extend : qx.bom.request.Script,\n\n  construct : function()\n  {\n    // Borrow super-class constructor\n    qx.bom.request.Script.apply(this);\n\n    this.__generateId();\n  },\n\n  members :\n  {\n    /**\n     * @type {Object} Parsed JSON response.\n     */\n    responseJson: null,\n\n    /**\n     * @type {Number} Identifier of this instance.\n     */\n    __id: null,\n\n    /**\n     * @type {String} Callback parameter.\n     */\n    __callbackParam: null,\n\n    /**\n     * @type {String} Callback name.\n     */\n    __callbackName: null,\n\n    /**\n     * @type {Boolean} Whether callback was called.\n     */\n    __callbackCalled: null,\n\n    /**\n     * @type {Boolean} Whether a custom callback was created automatically.\n     */\n    __customCallbackCreated: null,\n\n    /**\n     * @type {String} The generated URL for the current request\n     */\n    __generatedUrl: null,\n\n    /**\n     * @type {Boolean} Whether request was disposed.\n     */\n    __disposed: null,\n\n    /** Prefix used for the internal callback name. */\n    __prefix : \"\",\n\n    /**\n     * Initializes (prepares) request.\n     *\n     * @param method {String}\n     *   The HTTP method to use.\n     *   This parameter exists for compatibility reasons. The script transport\n     *   does not support methods other than GET.\n     * @param url {String}\n     *   The URL to which to send the request.\n     */\n    open: function(method, url) {\n      if (this.__disposed) {\n        return;\n      }\n\n      var query = {},\n          callbackParam,\n          callbackName,\n          that = this;\n\n      // Reset properties that may have been set by previous request\n      this.responseJson = null;\n      this.__callbackCalled = false;\n\n      callbackParam = this.__callbackParam || \"callback\";\n      callbackName = this.__callbackName || this.__prefix +\n        \"qx.bom.request.Jsonp.\" + this.__id + \".callback\";\n\n      // Default callback\n      if (!this.__callbackName) {\n\n        // Store globally available reference to this object\n        this.constructor[this.__id] = this;\n\n      // Custom callback\n      } else {\n\n        // Dynamically create globally available callback (if it does not\n        // exist yet) with user defined name. Delegate to this object’s\n        // callback method.\n        if (!window[this.__callbackName]) {\n          this.__customCallbackCreated = true;\n          window[this.__callbackName] = function(data) {\n            that.callback(data);\n          };\n        } else {\n          if (qx.core.Environment.get(\"qx.debug.io\")) {\n            qx.Bootstrap.debug(qx.bom.request.Jsonp, \"Callback \" +\n              this.__callbackName + \" already exists\");\n          }\n        }\n\n      }\n\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        qx.Bootstrap.debug(qx.bom.request.Jsonp,\n          \"Expecting JavaScript response to call: \" + callbackName);\n      }\n\n      query[callbackParam] = callbackName;\n      this.__generatedUrl = url = qx.util.Uri.appendParamsToUrl(url, query);\n\n      this.__callBase(\"open\", [method, url]);\n    },\n\n    /**\n     * Callback provided for JSONP response to pass data.\n     *\n     * Called internally to populate responseJson property\n     * and indicate successful status.\n     *\n     * Note: If you write a custom callback you’ll need to call\n     * this method in order to notify the request about the data\n     * loaded. Writing a custom callback should not be necessary\n     * in most cases.\n     *\n     * @param data {Object} JSON\n     */\n    callback: function(data) {\n      if (this.__disposed) {\n        return;\n      }\n\n      // Signal callback was called\n      this.__callbackCalled = true;\n\n      // Sanitize and parse\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        data = qx.lang.Json.stringify(data);\n        data = qx.lang.Json.parse(data);\n      }\n\n      // Set response\n      this.responseJson = data;\n\n      // Delete global reference to this\n      this.constructor[this.__id] = undefined;\n\n      this.__deleteCustomCallback();\n    },\n\n    /**\n     * Set callback parameter.\n     *\n     * Some JSONP services expect the callback name to be passed labeled with a\n     * special URL parameter key, e.g. \"jsonp\" in \"?jsonp=myCallback\". The\n     * default is \"callback\".\n     *\n     * @param param {String} Name of the callback parameter.\n     * @return {qx.bom.request.Jsonp} Self reference for chaining.\n     */\n    setCallbackParam: function(param) {\n      this.__callbackParam = param;\n      return this;\n    },\n\n\n    /**\n     * Set callback name.\n     *\n     * Must be set to the name of the callback function that is called by the\n     * script returned from the JSONP service. By default, the callback name\n     * references this instance’s {@link #callback} method, allowing to connect\n     * multiple JSONP responses to different requests.\n     *\n     * If the JSONP service allows to set custom callback names, it should not\n     * be necessary to change the default. However, some services use a fixed\n     * callback name. This is when setting the callbackName is useful. A\n     * function is created and made available globally under the given name.\n     * The function receives the JSON data and dispatches it to this instance’s\n     * {@link #callback} method. Please note that this function is only created\n     * if it does not exist before.\n     *\n     * @param name {String} Name of the callback function.\n     * @return {qx.bom.request.Jsonp} Self reference for chaining.\n     */\n    setCallbackName: function(name) {\n      this.__callbackName = name;\n      return this;\n    },\n\n\n    /**\n     * Set the prefix used in front of 'qx.' in case 'qx' is not available\n     * (for qx.Website e.g.)\n     * @internal\n     * @param prefix {String} The prefix to put in front of 'qx'\n     */\n    setPrefix : function(prefix) {\n      this.__prefix = prefix;\n    },\n\n\n    /**\n     * Returns the generated URL for the current / last request\n     *\n     * @internal\n     * @return {String} The current generated URL for the request\n     */\n    getGeneratedUrl : function() {\n      return this.__generatedUrl;\n    },\n\n\n    dispose: function() {\n      // In case callback was not called\n      this.__deleteCustomCallback();\n\n      this.__callBase(\"dispose\");\n    },\n\n    /**\n     * Handle native load.\n     */\n    _onNativeLoad: function() {\n\n      // Indicate erroneous status (500) if callback was not called.\n      //\n      // Why 500? 5xx belongs to the range of server errors. If the callback was\n      // not called, it is assumed the server failed to provide an appropriate\n      // response. Since the exact reason of the error is unknown, the most\n      // generic message (\"500 Internal Server Error\") is chosen.\n      this.status = this.__callbackCalled ? 200 : 500;\n\n      this.__callBase(\"_onNativeLoad\");\n    },\n\n    /**\n     *  Delete custom callback if dynamically created before.\n     */\n    __deleteCustomCallback: function() {\n      if (this.__customCallbackCreated && window[this.__callbackName]) {\n        window[this.__callbackName] = undefined;\n        this.__customCallbackCreated = false;\n      }\n    },\n\n    /**\n     * Call overridden method.\n     *\n     * @param method {String} Name of the overridden method.\n     * @param args {Array} Arguments.\n     */\n    __callBase: function(method, args) {\n      qx.bom.request.Script.prototype[method].apply(this, args || []);\n    },\n\n    /**\n     * Generate ID.\n     */\n    __generateId: function() {\n      // Add random digits to date to allow immediately following requests\n      // that may be send at the same time\n      this.__id = \"qx\" + (new Date().valueOf()) + (\"\" + Math.random()).substring(2,5);\n    }\n  }\n});\n"
  ]
}