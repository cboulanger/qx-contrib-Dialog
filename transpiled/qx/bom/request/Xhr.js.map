{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/bom/request/Xhr.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "Object",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "boundFunc",
    "bind",
    "__onNativeReadyStateChange",
    "event",
    "GlobalError",
    "observeMethod",
    "__onNativeReadyStateChangeBound",
    "__onNativeAbortBound",
    "__onNativeAbort",
    "__onNativeProgressBound",
    "__onNativeProgress",
    "__onTimeoutBound",
    "__onTimeout",
    "__initNativeXhr",
    "_emitter",
    "Emitter",
    "window",
    "attachEvent",
    "__onUnloadBound",
    "__onUnload",
    "statics",
    "UNSENT",
    "OPENED",
    "HEADERS_RECEIVED",
    "LOADING",
    "DONE",
    "events",
    "members",
    "readyState",
    "responseText",
    "response",
    "responseXML",
    "status",
    "statusText",
    "responseType",
    "timeout",
    "progress",
    "open",
    "method",
    "url",
    "async",
    "user",
    "password",
    "__checkDisposed",
    "Error",
    "__abort",
    "__send",
    "__conditional",
    "__url",
    "__async",
    "__supportsManyRequests",
    "bom",
    "request",
    "Xhr",
    "dispose",
    "__nativeXhr",
    "onreadystatechange",
    "Environment",
    "get",
    "debug",
    "OpenError",
    "util",
    "Request",
    "isCrossDomain",
    "__openError",
    "XDomainRequest",
    "onerror",
    "_emit",
    "setTimeout",
    "__disposed",
    "setRequestHeader",
    "parseInt",
    "key",
    "value",
    "send",
    "data",
    "__timerId",
    "dataType",
    "getClass",
    "__dataTypeWhiteList",
    "indexOf",
    "toString",
    "SendError",
    "_getProtocol",
    "__readyStateChange",
    "that",
    "abort",
    "emit",
    "onload",
    "onloadend",
    "onabort",
    "ontimeout",
    "onprogress",
    "on",
    "name",
    "listener",
    "ctx",
    "getResponseHeader",
    "header",
    "aborted",
    "getAllResponseHeaders",
    "overrideMimeType",
    "mimeType",
    "getRequest",
    "clearTimeout",
    "detachEvent",
    "PropertiesNotAccessable",
    "noop",
    "isDisposed",
    "_createNativeXhr",
    "xhr",
    "XMLHttpRequest",
    "ActiveXObject",
    "error",
    "protocolRe",
    "match",
    "location",
    "protocol",
    "__timeout",
    "lengthComputable",
    "loaded",
    "total",
    "e",
    "nxhr",
    "propertiesReadable",
    "XhrPropertiesNotReadable",
    "__normalizeStatus",
    "__normalizeResponseXML",
    "__readyStateChangeDone",
    "__isNetworkError",
    "isDone",
    "documentElement",
    "dom",
    "validateOnParse",
    "loadXML",
    "version",
    "defer",
    "add"
  ],
  "mappings": "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",
  "file": "Xhr.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * A wrapper of the XMLHttpRequest host object (or equivalent). The interface is\n * similar to <a href=\"http://www.w3.org/TR/XMLHttpRequest/\">XmlHttpRequest</a>.\n *\n * Hides browser inconsistencies and works around bugs found in popular\n * implementations.\n *\n * <div class=\"desktop\">\n * Example:\n *\n * <pre class=\"javascript\">\n *  var req = new qx.bom.request.Xhr();\n *  req.onload = function() {\n *    // Handle data received\n *    req.responseText;\n *  }\n *\n *  req.open(\"GET\", url);\n *  req.send();\n * </pre>\n *\n * Example for binary data:\n *\n * <pre class=\"javascript\">\n *  var req = new qx.bom.request.Xhr();\n *  req.onload = function() {\n *    // Handle data received\n *    var blob = req.response;\n *    img.src = URL.createObjectURL(blob);\n *  }\n *\n *  req.open(\"GET\", url);\n *  req.responseType = \"blob\";\n *  req.send();\n * </pre>\n \n * </div>\n *\n * @ignore(XDomainRequest)\n * @ignore(qx.event, qx.event.GlobalError.*)\n *\n * @require(qx.bom.request.Xhr#open)\n * @require(qx.bom.request.Xhr#send)\n * @require(qx.bom.request.Xhr#on)\n * @require(qx.bom.request.Xhr#onreadystatechange)\n * @require(qx.bom.request.Xhr#onload)\n * @require(qx.bom.request.Xhr#onloadend)\n * @require(qx.bom.request.Xhr#onerror)\n * @require(qx.bom.request.Xhr#onabort)\n * @require(qx.bom.request.Xhr#ontimeout)\n * @require(qx.bom.request.Xhr#setRequestHeader)\n * @require(qx.bom.request.Xhr#getAllResponseHeaders)\n * @require(qx.bom.request.Xhr#getRequest)\n * @require(qx.bom.request.Xhr#overrideMimeType)\n * @require(qx.bom.request.Xhr#dispose)\n * @require(qx.bom.request.Xhr#isDisposed)\n *\n * @group (IO)\n */\nqx.Bootstrap.define(\"qx.bom.request.Xhr\",\n{\n\n  extend: Object,\n  implement: [ qx.core.IDisposable ],\n\n  construct: function() {\n    var boundFunc = qx.Bootstrap.bind(this.__onNativeReadyStateChange, this);\n\n    // GlobalError shouldn't be included in qx.Website builds so use it\n    // if it's available but otherwise ignore it (see ignore stated above).\n    if (qx.event && qx.event.GlobalError && qx.event.GlobalError.observeMethod) {\n      this.__onNativeReadyStateChangeBound = qx.event.GlobalError.observeMethod(boundFunc);\n    } else {\n      this.__onNativeReadyStateChangeBound = boundFunc;\n    }\n\n    this.__onNativeAbortBound = qx.Bootstrap.bind(this.__onNativeAbort, this);\n    this.__onNativeProgressBound = qx.Bootstrap.bind(this.__onNativeProgress, this);\n    this.__onTimeoutBound = qx.Bootstrap.bind(this.__onTimeout, this);\n\n    this.__initNativeXhr();\n    this._emitter = new qx.event.Emitter();\n\n    // BUGFIX: IE\n    // IE keeps connections alive unless aborted on unload\n    if (window.attachEvent) {\n      this.__onUnloadBound = qx.Bootstrap.bind(this.__onUnload, this);\n      window.attachEvent(\"onunload\", this.__onUnloadBound);\n    }\n  },\n\n  statics :\n  {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  },\n\n\n  events : {\n    /** Fired at ready state changes. */\n    \"readystatechange\" : \"qx.bom.request.Xhr\",\n\n    /** Fired on error. */\n    \"error\" : \"qx.bom.request.Xhr\",\n\n    /** Fired at loadend. */\n    \"loadend\" : \"qx.bom.request.Xhr\",\n\n    /** Fired on timeouts. */\n    \"timeout\" : \"qx.bom.request.Xhr\",\n\n    /** Fired when the request is aborted. */\n    \"abort\" : \"qx.bom.request.Xhr\",\n\n    /** Fired on successful retrieval. */\n    \"load\" : \"qx.bom.request.Xhr\",\n\n    /** Fired on progress. */\n    \"progress\" : \"qx.bom.request.Xhr\"\n  },\n\n\n  members :\n  {\n    /*\n    ---------------------------------------------------------------------------\n      PUBLIC\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Number} Ready state.\n     *\n     * States can be:\n     * UNSENT:           0,\n     * OPENED:           1,\n     * HEADERS_RECEIVED: 2,\n     * LOADING:          3,\n     * DONE:             4\n     */\n    readyState: 0,\n\n    /**\n     * @type {String} The response of the request as text.\n     */\n    responseText: \"\",\n\n    /**\n     * @type {Object} The response of the request as a Document object.\n     */\n    response: null,\n    \n    /**\n     * @type {Object} The response of the request as object.\n     */\n    responseXML: null,\n\n    /**\n     * @type {Number} The HTTP status code.\n     */\n    status: 0,\n\n    /**\n     * @type {String} The HTTP status text.\n     */\n    statusText: \"\",\n\n    /**\n     * @type {String} The response Type to use in the request\n     */\n    responseType: \"\",\n    /**\n     * @type {Number} Timeout limit in milliseconds.\n     *\n     * 0 (default) means no timeout. Not supported for synchronous requests.\n     */\n    timeout: 0,\n\n    /**\n     * @type {Object} Wrapper to store data of the progress event which contains the keys\n       <code>lengthComputable</code>, <code>loaded</code> and <code>total</code>\n     */\n    progress: null,\n\n\n    /**\n     * Initializes (prepares) request.\n     *\n     * @ignore(XDomainRequest)\n     *\n     * @param method {String?\"GET\"}\n     *  The HTTP method to use.\n     * @param url {String}\n     *  The URL to which to send the request.\n     * @param async {Boolean?true}\n     *  Whether or not to perform the operation asynchronously.\n     * @param user {String?null}\n     *  Optional user name to use for authentication purposes.\n     * @param password {String?null}\n     *  Optional password to use for authentication purposes.\n     */\n    open: function(method, url, async, user, password) {\n      this.__checkDisposed();\n\n      // Mimick native behavior\n      if (typeof url === \"undefined\") {\n        throw new Error(\"Not enough arguments\");\n      } else if (typeof method === \"undefined\") {\n        method = \"GET\";\n      }\n\n      // Reset flags that may have been set on previous request\n      this.__abort = false;\n      this.__send = false;\n      this.__conditional = false;\n\n      // Store URL for later checks\n      this.__url = url;\n\n      if (typeof async == \"undefined\") {\n        async = true;\n      }\n      this.__async = async;\n      // Default values according to spec.\n      this.status = 0;\n      this.statusText = this.responseText = \"\";\n      this.responseXML = null;\n      this.response = null;\n\n      // BUGFIX\n      // IE < 9 and FF < 3.5 cannot reuse the native XHR to issue many requests\n      if (!this.__supportsManyRequests() && this.readyState > qx.bom.request.Xhr.UNSENT) {\n        // XmlHttpRequest Level 1 requires open() to abort any pending requests\n        // associated to the object. Since we're dealing with a new object here,\n        // we have to emulate this behavior. Moreover, allow old native XHR to be garbage collected\n        //\n        // Dispose and abort.\n        //\n        this.dispose();\n\n        // Replace the underlying native XHR with a new one that can\n        // be used to issue new requests.\n        this.__initNativeXhr();\n      }\n\n      // Restore handler in case it was removed before\n      this.__nativeXhr.onreadystatechange = this.__onNativeReadyStateChangeBound;\n\n      try {\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          qx.Bootstrap.debug(qx.bom.request.Xhr, \"Open native request with method: \" +\n            method + \", url: \" + url + \", async: \" + async);\n        }\n\n        this.__nativeXhr.open(method, url, async, user, password);\n\n      // BUGFIX: IE, Firefox < 3.5\n      // Some browsers do not support Cross-Origin Resource Sharing (CORS)\n      // for XMLHttpRequest. Instead, an exception is thrown even for async requests\n      // if URL is cross-origin (as per XHR level 1). Use the proprietary XDomainRequest\n      // if available (supports CORS) and handle error (if there is one) this\n      // way. Otherwise just assume network error.\n      //\n      // Basically, this allows to detect network errors.\n      } catch(OpenError) {\n\n        // Only work around exceptions caused by cross domain request attempts\n        if (!qx.util.Request.isCrossDomain(url)) {\n          // Is same origin\n          throw OpenError;\n        }\n\n        if (!this.__async) {\n          this.__openError = OpenError;\n        }\n\n        if (this.__async) {\n          // Try again with XDomainRequest\n          // (Success case not handled on purpose)\n          // - IE 9\n          if (window.XDomainRequest) {\n            this.readyState = 4;\n            this.__nativeXhr = new XDomainRequest();\n            this.__nativeXhr.onerror = qx.Bootstrap.bind(function() {\n              this._emit(\"readystatechange\");\n              this._emit(\"error\");\n              this._emit(\"loadend\");\n            }, this);\n\n            if (qx.core.Environment.get(\"qx.debug.io\")) {\n              qx.Bootstrap.debug(qx.bom.request.Xhr, \"Retry open native request with method: \" +\n                method + \", url: \" + url + \", async: \" + async);\n            }\n            this.__nativeXhr.open(method, url, async, user, password);\n            return;\n          }\n\n          // Access denied\n          // - IE 6: -2146828218\n          // - IE 7: -2147024891\n          // - Legacy Firefox\n          window.setTimeout(qx.Bootstrap.bind(function() {\n            if (this.__disposed) {\n              return;\n            }\n            this.readyState = 4;\n            this._emit(\"readystatechange\");\n            this._emit(\"error\");\n            this._emit(\"loadend\");\n          }, this));\n        }\n\n      }\n\n      // BUGFIX: IE < 9\n      // IE < 9 tends to cache overly aggressive. This may result in stale\n      // representations. Force validating freshness of cached representation.\n      if (qx.core.Environment.get(\"engine.name\") === \"mshtml\" &&\n        qx.core.Environment.get(\"browser.documentmode\") < 9 &&\n        this.__nativeXhr.readyState > 0) {\n          this.__nativeXhr.setRequestHeader(\"If-Modified-Since\", \"-1\");\n        }\n\n      // BUGFIX: Firefox\n      // Firefox < 4 fails to trigger onreadystatechange OPENED for sync requests\n      if (qx.core.Environment.get(\"engine.name\") === \"gecko\" &&\n          parseInt(qx.core.Environment.get(\"engine.version\"), 10) < 2 &&\n          !this.__async) {\n        // Native XHR is already set to readyState DONE. Fake readyState\n        // and call onreadystatechange manually.\n        this.readyState = qx.bom.request.Xhr.OPENED;\n        this._emit(\"readystatechange\");\n      }\n\n    },\n\n    /**\n     * Sets an HTTP request header to be used by the request.\n     *\n     * Note: The request must be initialized before using this method.\n     *\n     * @param key {String}\n     *  The name of the header whose value is to be set.\n     * @param value {String}\n     *  The value to set as the body of the header.\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    setRequestHeader: function(key, value) {\n      this.__checkDisposed();\n\n      // Detect conditional requests\n      if (key == \"If-Match\" || key == \"If-Modified-Since\" ||\n        key == \"If-None-Match\" || key == \"If-Range\") {\n        this.__conditional = true;\n      }\n\n      this.__nativeXhr.setRequestHeader(key, value);\n      return this;\n    },\n\n    /**\n     * Sends request.\n     *\n     * @param data {String|Document?null}\n     *  Optional data to send.\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    send: function(data) {\n      this.__checkDisposed();\n\n      // BUGFIX: IE & Firefox < 3.5\n      // For sync requests, some browsers throw error on open()\n      // while it should be on send()\n      //\n      if (!this.__async && this.__openError) {\n        throw this.__openError;\n      }\n\n      // BUGFIX: Opera\n      // On network error, Opera stalls at readyState HEADERS_RECEIVED\n      // This violates the spec. See here http://www.w3.org/TR/XMLHttpRequest2/#send\n      // (Section: If there is a network error)\n      //\n      // To fix, assume a default timeout of 10 seconds. Note: The \"error\"\n      // event will be fired correctly, because the error flag is inferred\n      // from the statusText property. Of course, compared to other\n      // browsers there is an additional call to ontimeout(), but this call\n      // should not harm.\n      //\n      if (qx.core.Environment.get(\"engine.name\") === \"opera\" &&\n          this.timeout === 0) {\n        this.timeout = 10000;\n      }\n\n      // Timeout\n      if (this.timeout > 0) {\n        this.__timerId = window.setTimeout(this.__onTimeoutBound, this.timeout);\n      }\n\n      // BUGFIX: Firefox 2\n      // \"NS_ERROR_XPC_NOT_ENOUGH_ARGS\" when calling send() without arguments\n      data = typeof data == \"undefined\" ? null : data;\n\n      // Whitelisting the allowed data types regarding the spec\n      // -> http://www.w3.org/TR/XMLHttpRequest2/#the-send-method\n      // All other data input will be transformed to a string to e.g. prevent\n      // an SendError in Firefox (at least <= 31) and to harmonize it with the\n      // behaviour of all other browsers (Chrome, IE and Safari)\n      var dataType = qx.Bootstrap.getClass(data);\n      data = (data !== null && this.__dataTypeWhiteList.indexOf(dataType) === -1) ? data.toString() : data;\n\n      // Some browsers may throw an error when sending of async request fails.\n      // This violates the spec which states only sync requests should.\n      try {\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          qx.Bootstrap.debug(qx.bom.request.Xhr, \"Send native request\");\n        }\n        if (this.__async) {\n          this.__nativeXhr.responseType = this.responseType;\n        }\n        this.__nativeXhr.send(data);\n      } catch(SendError) {\n        if (!this.__async) {\n          throw SendError;\n        }\n\n        // BUGFIX\n        // Some browsers throws error when file not found via file:// protocol.\n        // Synthesize readyState changes.\n        if (this._getProtocol() === \"file:\") {\n          this.readyState = 2;\n          this.__readyStateChange();\n\n          var that = this;\n          window.setTimeout(function() {\n            if (that.__disposed) {\n              return;\n            }\n            that.readyState = 3;\n            that.__readyStateChange();\n\n            that.readyState = 4;\n            that.__readyStateChange();\n          });\n\n        }\n\n      }\n\n      // BUGFIX: Firefox\n      // Firefox fails to trigger onreadystatechange DONE for sync requests\n      if (qx.core.Environment.get(\"engine.name\") === \"gecko\" && !this.__async) {\n        // Properties all set, only missing native readystatechange event\n        this.__onNativeReadyStateChange();\n      }\n\n      // Set send flag\n      this.__send = true;\n      return this;\n    },\n\n    /**\n     * Abort request - i.e. cancels any network activity.\n     *\n     * Note:\n     *  On Windows 7 every browser strangely skips the loading phase\n     *  when this method is called (because readyState never gets 3).\n     *\n     *  So keep this in mind if you rely on the phases which are\n     *  passed through. They will be \"opened\", \"sent\", \"abort\"\n     *  instead of normally \"opened\", \"sent\", \"loading\", \"abort\".\n     *\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    abort: function() {\n      this.__checkDisposed();\n\n      this.__abort = true;\n      this.__nativeXhr.abort();\n\n      if (this.__nativeXhr && this.readyState !== qx.bom.request.Xhr.DONE) {\n        this.readyState = this.__nativeXhr.readyState;\n      }\n      return this;\n    },\n\n\n    /**\n     * Helper to emit events and call the callback methods.\n     * @param event {String} The name of the event.\n     */\n    _emit: function(event) {\n      if (this[\"on\" + event]) {\n        this[\"on\" + event]();\n      }\n      this._emitter.emit(event, this);\n    },\n\n    /**\n     * Event handler for XHR event that fires at every state change.\n     *\n     * Replace with custom method to get informed about the communication progress.\n     */\n    onreadystatechange: function() {},\n\n    /**\n     * Event handler for XHR event \"load\" that is fired on successful retrieval.\n     *\n     * Note: This handler is called even when the HTTP status indicates an error.\n     *\n     * Replace with custom method to listen to the \"load\" event.\n     */\n    onload: function() {},\n\n    /**\n     * Event handler for XHR event \"loadend\" that is fired on retrieval.\n     *\n     * Note: This handler is called even when a network error (or similar)\n     * occurred.\n     *\n     * Replace with custom method to listen to the \"loadend\" event.\n     */\n    onloadend: function() {},\n\n    /**\n     * Event handler for XHR event \"error\" that is fired on a network error.\n     *\n     * Replace with custom method to listen to the \"error\" event.\n     */\n    onerror: function() {},\n\n    /**\n    * Event handler for XHR event \"abort\" that is fired when request\n    * is aborted.\n    *\n    * Replace with custom method to listen to the \"abort\" event.\n    */\n    onabort: function() {},\n\n    /**\n    * Event handler for XHR event \"timeout\" that is fired when timeout\n    * interval has passed.\n    *\n    * Replace with custom method to listen to the \"timeout\" event.\n    */\n    ontimeout: function() {},\n\n    /**\n    * Event handler for XHR event \"progress\".\n    *\n    * Replace with custom method to listen to the \"progress\" event.\n    */\n    onprogress: function() {},\n\n\n    /**\n     * Add an event listener for the given event name.\n     *\n     * @param name {String} The name of the event to listen to.\n     * @param listener {Function} The function to execute when the event is fired\n     * @param ctx {var?} The context of the listener.\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    on: function(name, listener, ctx) {\n      this._emitter.on(name, listener, ctx);\n      return this;\n    },\n\n\n    /**\n     * Get a single response header from response.\n     *\n     * @param header {String}\n     *  Key of the header to get the value from.\n     * @return {String}\n     *  Response header.\n     */\n    getResponseHeader: function(header) {\n      this.__checkDisposed();\n\n      if (qx.core.Environment.get(\"browser.documentmode\") === 9 &&\n        this.__nativeXhr.aborted)\n      {\n        return \"\";\n      }\n\n      return this.__nativeXhr.getResponseHeader(header);\n    },\n\n    /**\n     * Get all response headers from response.\n     *\n     * @return {String} All response headers.\n     */\n    getAllResponseHeaders: function() {\n      this.__checkDisposed();\n\n      if (qx.core.Environment.get(\"browser.documentmode\") === 9 &&\n        this.__nativeXhr.aborted)\n      {\n        return \"\";\n      }\n\n      return this.__nativeXhr.getAllResponseHeaders();\n    },\n\n    /**\n     * Overrides the MIME type returned by the server\n     * and must be called before @send()@.\n     *\n     * Note:\n     *\n     * * IE doesn't support this method so in this case an Error is thrown.\n     * * after calling this method @getResponseHeader(\"Content-Type\")@\n     *   may return the original (Firefox 23, IE 10, Safari 6) or\n     *   the overridden content type (Chrome 28+, Opera 15+).\n     *\n     *\n     * @param mimeType {String} The mimeType for overriding.\n     * @return {qx.bom.request.Xhr} Self for chaining.\n     */\n    overrideMimeType: function(mimeType) {\n      this.__checkDisposed();\n\n      if (this.__nativeXhr.overrideMimeType) {\n        this.__nativeXhr.overrideMimeType(mimeType);\n      } else {\n        throw new Error(\"Native XHR object doesn't support overrideMimeType.\");\n      }\n\n      return this;\n    },\n\n    /**\n     * Get wrapped native XMLHttpRequest (or equivalent).\n     *\n     * Can be XMLHttpRequest or ActiveX.\n     *\n     * @return {Object} XMLHttpRequest or equivalent.\n     */\n    getRequest: function() {\n      return this.__nativeXhr;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      HELPER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Dispose object and wrapped native XHR.\n     * @return {Boolean} <code>true</code> if the object was successfully disposed\n     */\n    dispose: function() {\n      if (this.__disposed) {\n        return false;\n      }\n\n      window.clearTimeout(this.__timerId);\n\n      // Remove unload listener in IE. Aborting on unload is no longer required\n      // for this instance.\n      if (window.detachEvent) {\n        window.detachEvent(\"onunload\", this.__onUnloadBound);\n      }\n\n      // May fail in IE\n      try {\n        this.__nativeXhr.onreadystatechange;\n      } catch(PropertiesNotAccessable) {\n        return false;\n      }\n\n      // Clear out listeners\n      var noop = function() {};\n      this.__nativeXhr.onreadystatechange = noop;\n      this.__nativeXhr.onload = noop;\n      this.__nativeXhr.onerror = noop;\n      this.__nativeXhr.onprogress = noop;\n\n      // Abort any network activity\n      this.abort();\n\n      // Remove reference to native XHR\n      this.__nativeXhr = null;\n\n      this.__disposed = true;\n      return true;\n    },\n\n\n    /**\n     * Check if the request has already beed disposed.\n     * @return {Boolean} <code>true</code>, if the request has been disposed.\n     */\n    isDisposed : function() {\n      return !!this.__disposed;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      PROTECTED\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create XMLHttpRequest (or equivalent).\n     *\n     * @return {Object} XMLHttpRequest or equivalent.\n     */\n    _createNativeXhr: function() {\n      var xhr = qx.core.Environment.get(\"io.xhr\");\n\n      if (xhr === \"xhr\") {\n        return new XMLHttpRequest();\n      }\n\n      if (xhr == \"activex\") {\n        return new window.ActiveXObject(\"Microsoft.XMLHTTP\");\n      }\n\n      qx.Bootstrap.error(this, \"No XHR support available.\");\n    },\n\n    /**\n     * Get protocol of requested URL.\n     *\n     * @return {String} The used protocol.\n     */\n    _getProtocol: function() {\n      var url = this.__url;\n      var protocolRe = /^(\\w+:)\\/\\//;\n\n      // Could be http:// from file://\n      if (url !== null && url.match) {\n        var match = url.match(protocolRe);\n        if (match && match[1]) {\n          return match[1];\n        }\n      }\n\n      return window.location.protocol;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      PRIVATE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * @type {Object} XMLHttpRequest or equivalent.\n     */\n    __nativeXhr: null,\n\n    /**\n     * @type {Boolean} Whether request is async.\n     */\n    __async: null,\n\n    /**\n     * @type {Function} Bound __onNativeReadyStateChange handler.\n     */\n    __onNativeReadyStateChangeBound: null,\n\n    /**\n     * @type {Function} Bound __onNativeAbort handler.\n     */\n    __onNativeAbortBound: null,\n\n    /**\n     * @type {Function} Bound __onNativeProgress handler.\n     */\n    __onNativeProgressBound: null,\n\n    /**\n     * @type {Function} Bound __onUnload handler.\n     */\n    __onUnloadBound: null,\n\n    /**\n     * @type {Function} Bound __onTimeout handler.\n     */\n    __onTimeoutBound: null,\n\n    /**\n     * @type {Boolean} Send flag\n     */\n    __send: null,\n\n    /**\n     * @type {String} Requested URL\n     */\n    __url: null,\n\n    /**\n     * @type {Boolean} Abort flag\n     */\n    __abort: null,\n\n    /**\n     * @type {Boolean} Timeout flag\n     */\n    __timeout: null,\n\n    /**\n     * @type {Boolean} Whether object has been disposed.\n     */\n    __disposed: null,\n\n    /**\n     * @type {Number} ID of timeout timer.\n     */\n    __timerId: null,\n\n    /**\n     * @type {Error} Error thrown on open, if any.\n     */\n    __openError: null,\n\n    /**\n     * @type {Boolean} Conditional get flag\n     */\n     __conditional: null,\n\n    /**\n     * @type {Array} Whitelist with all allowed data types for the request payload\n     */\n    __dataTypeWhiteList: null,\n\n    /**\n     * Init native XHR.\n     */\n    __initNativeXhr: function() {\n      // Create native XHR or equivalent and hold reference\n      this.__nativeXhr = this._createNativeXhr();\n\n      // Track native ready state changes\n      this.__nativeXhr.onreadystatechange = this.__onNativeReadyStateChangeBound;\n\n      // Track native abort, when supported\n      if (qx.Bootstrap.getClass(this.__nativeXhr.onabort) !== \"Undefined\") {\n        this.__nativeXhr.onabort = this.__onNativeAbortBound;\n      }\n\n      // Track native progress, when supported\n      if (qx.Bootstrap.getClass(this.__nativeXhr.onprogress) !== \"Undefined\") {\n        this.__nativeXhr.onprogress = this.__onNativeProgressBound;\n\n        this.progress = {\n          lengthComputable: false,\n          loaded: 0,\n          total: 0\n        };\n      }\n\n      // Reset flags\n      this.__disposed = this.__send = this.__abort = false;\n\n      // Initialize data white list\n      this.__dataTypeWhiteList = [ \"ArrayBuffer\", \"Blob\", \"File\", \"HTMLDocument\", \"String\", \"FormData\" ];\n    },\n\n    /**\n     * Track native abort.\n     *\n     * In case the end user cancels the request by other\n     * means than calling abort().\n     */\n    __onNativeAbort: function() {\n      // When the abort that triggered this method was not a result from\n      // calling abort()\n      if (!this.__abort) {\n        this.abort();\n      }\n    },\n\n    /**\n     * Track native progress event.\n     @param e {Event} The native progress event.\n     */\n    __onNativeProgress: function(e) {\n      this.progress.lengthComputable = e.lengthComputable;\n      this.progress.loaded = e.loaded;\n      this.progress.total = e.total;\n      this._emit(\"progress\");\n    },\n\n    /**\n     * Handle native onreadystatechange.\n     *\n     * Calls user-defined function onreadystatechange on each\n     * state change and syncs the XHR status properties.\n     */\n    __onNativeReadyStateChange: function() {\n      var nxhr = this.__nativeXhr,\n          propertiesReadable = true;\n\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        qx.Bootstrap.debug(qx.bom.request.Xhr, \"Received native readyState: \" + nxhr.readyState);\n      }\n\n      // BUGFIX: IE, Firefox\n      // onreadystatechange() is called twice for readyState OPENED.\n      //\n      // Call onreadystatechange only when readyState has changed.\n      if (this.readyState == nxhr.readyState) {\n        return;\n      }\n\n      // Sync current readyState\n      this.readyState = nxhr.readyState;\n\n      // BUGFIX: IE\n      // Superfluous onreadystatechange DONE when aborting OPENED\n      // without send flag\n      if (this.readyState === qx.bom.request.Xhr.DONE &&\n          this.__abort && !this.__send) {\n        return;\n      }\n\n      // BUGFIX: IE\n      // IE fires onreadystatechange HEADERS_RECEIVED and LOADING when sync\n      //\n      // According to spec, only onreadystatechange OPENED and DONE should\n      // be fired.\n      if (!this.__async && (nxhr.readyState == 2 || nxhr.readyState == 3)) {\n        return;\n      }\n\n      // Default values according to spec.\n      this.status = 0;\n      this.statusText = this.responseText = \"\";\n      this.responseXML = null;\n      this.response = null;\n\n      if (this.readyState >= qx.bom.request.Xhr.HEADERS_RECEIVED) {\n        // In some browsers, XHR properties are not readable\n        // while request is in progress.\n        try {\n          this.status = nxhr.status;\n          this.statusText = nxhr.statusText;\n          this.response = nxhr.response;\n          if ((this.responseType === \"\") || (this.responseType === \"text\")) {\n           this.responseText = nxhr.responseText;\n          }\n          if ((this.responseType === \"\") || (this.responseType === \"document\")) {\n           this.responseXML = nxhr.responseXML;\n          }\n        } catch(XhrPropertiesNotReadable) {\n          propertiesReadable = false;\n        }\n\n        if (propertiesReadable) {\n          this.__normalizeStatus();\n          this.__normalizeResponseXML();\n        }\n      }\n\n      this.__readyStateChange();\n\n      // BUGFIX: IE\n      // Memory leak in XMLHttpRequest (on-page)\n      if (this.readyState == qx.bom.request.Xhr.DONE) {\n        // Allow garbage collecting of native XHR\n        if (nxhr) {\n          nxhr.onreadystatechange = function() {};\n        }\n      }\n\n    },\n\n    /**\n     * Handle readystatechange. Called internally when readyState is changed.\n     */\n    __readyStateChange: function() {\n      // Cancel timeout before invoking handlers because they may throw\n      if (this.readyState === qx.bom.request.Xhr.DONE) {\n        // Request determined DONE. Cancel timeout.\n        window.clearTimeout(this.__timerId);\n      }\n\n      // Always fire \"readystatechange\"\n      this._emit(\"readystatechange\");\n      if (this.readyState === qx.bom.request.Xhr.DONE) {\n        this.__readyStateChangeDone();\n      }\n    },\n\n    /**\n     * Handle readystatechange. Called internally by\n     * {@link #__readyStateChange} when readyState is DONE.\n     */\n    __readyStateChangeDone: function() {\n      // Fire \"timeout\" if timeout flag is set\n      if (this.__timeout) {\n        this._emit(\"timeout\");\n\n        // BUGFIX: Opera\n        // Since Opera does not fire \"error\" on network error, fire additional\n        // \"error\" on timeout (may well be related to network error)\n        if (qx.core.Environment.get(\"engine.name\") === \"opera\") {\n          this._emit(\"error\");\n        }\n\n        this.__timeout = false;\n\n      // Fire either \"abort\", \"load\" or \"error\"\n      } else {\n        if (this.__abort) {\n          this._emit(\"abort\");\n        } else{\n          if (this.__isNetworkError()) {\n            this._emit(\"error\");\n          } else {\n            this._emit(\"load\");\n          }\n        }\n      }\n\n      // Always fire \"onloadend\" when DONE\n      this._emit(\"loadend\");\n    },\n\n    /**\n     * Check for network error.\n     *\n     * @return {Boolean} Whether a network error occurred.\n     */\n    __isNetworkError: function() {\n      var error;\n\n      // Infer the XHR internal error flag from statusText when not aborted.\n      // See http://www.w3.org/TR/XMLHttpRequest2/#error-flag and\n      // http://www.w3.org/TR/XMLHttpRequest2/#the-statustext-attribute\n      //\n      // With file://, statusText is always falsy. Assume network error when\n      // response is empty.\n      if (this._getProtocol() === \"file:\") {\n        error = !this.responseText;\n      } else {\n        error = this.status === 0;\n      }\n\n      return error;\n    },\n\n    /**\n     * Handle faked timeout.\n     */\n    __onTimeout: function() {\n      // Basically, mimick http://www.w3.org/TR/XMLHttpRequest2/#timeout-error\n      var nxhr = this.__nativeXhr;\n      this.readyState = qx.bom.request.Xhr.DONE;\n\n      // Set timeout flag\n      this.__timeout = true;\n\n      // No longer consider request. Abort.\n      nxhr.aborted = true;\n      nxhr.abort();\n      this.responseText = \"\";\n      this.responseXML = null;\n\n      // Signal readystatechange\n      this.__readyStateChange();\n    },\n\n    /**\n     * Normalize status property across browsers.\n     */\n    __normalizeStatus: function() {\n      var isDone = this.readyState === qx.bom.request.Xhr.DONE;\n\n      // BUGFIX: Most browsers\n      // Most browsers tell status 0 when it should be 200 for local files\n      if (this._getProtocol() === \"file:\" && this.status === 0 && isDone) {\n        if (!this.__isNetworkError()) {\n          this.status = 200;\n        }\n      }\n\n      // BUGFIX: IE\n      // IE sometimes tells 1223 when it should be 204\n      if (this.status === 1223) {\n        this.status = 204;\n      }\n\n      // BUGFIX: Opera\n      // Opera tells 0 for conditional requests when it should be 304\n      //\n      // Detect response to conditional request that signals fresh cache.\n      if (qx.core.Environment.get(\"engine.name\") === \"opera\") {\n        if (\n          isDone &&                 // Done\n          this.__conditional &&     // Conditional request\n          !this.__abort &&          // Not aborted\n          this.status === 0         // But status 0!\n        ) {\n          this.status = 304;\n        }\n      }\n    },\n\n    /**\n     * Normalize responseXML property across browsers.\n     */\n    __normalizeResponseXML: function() {\n      // BUGFIX: IE\n      // IE does not recognize +xml extension, resulting in empty responseXML.\n      //\n      // Check if Content-Type is +xml, verify missing responseXML then parse\n      // responseText as XML.\n      if (qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n          (this.getResponseHeader(\"Content-Type\") || \"\").match(/[^\\/]+\\/[^\\+]+\\+xml/) &&\n           this.responseXML && !this.responseXML.documentElement) {\n        var dom = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n        dom.async = false;\n        dom.validateOnParse = false;\n        dom.loadXML(this.responseText);\n        this.responseXML = dom;\n      }\n    },\n\n    /**\n     * Handler for native unload event.\n     */\n    __onUnload: function() {\n      try {\n        // Abort and dispose\n        if (this) {\n          this.dispose();\n        }\n      } catch(e) {}\n    },\n\n    /**\n     * Helper method to determine whether browser supports reusing the\n     * same native XHR to send more requests.\n     * @return {Boolean} <code>true</code> if request object reuse is supported\n     */\n    __supportsManyRequests: function() {\n      var name = qx.core.Environment.get(\"engine.name\");\n      var version = qx.core.Environment.get(\"browser.version\");\n\n      return !(name == \"mshtml\" && version < 9 ||\n               name == \"gecko\" && version < 3.5);\n    },\n\n    /**\n     * Throw when already disposed.\n     */\n    __checkDisposed: function() {\n      if (this.__disposed) {\n        throw new Error(\"Already disposed\");\n      }\n    }\n  },\n\n  defer: function() {\n    qx.core.Environment.add(\"qx.debug.io\", false);\n  }\n});\n"
  ]
}