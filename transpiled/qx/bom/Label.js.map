{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/bom/Label.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__styles",
    "fontFamily",
    "fontSize",
    "fontWeight",
    "fontStyle",
    "lineHeight",
    "__prepareText",
    "el",
    "__createMeasureElement",
    "document",
    "body",
    "insertBefore",
    "firstChild",
    "_textElement",
    "__prepareHtml",
    "_htmlElement",
    "html",
    "dom",
    "Element",
    "create",
    "style",
    "width",
    "height",
    "left",
    "top",
    "visibility",
    "position",
    "overflow",
    "display",
    "whiteSpace",
    "core",
    "Environment",
    "get",
    "inner",
    "createElementNS",
    "padding",
    "margin",
    "key",
    "appendChild",
    "__getStyles",
    "styles",
    "content",
    "win",
    "window",
    "createElement",
    "useHtml",
    "xulel",
    "cursor",
    "color",
    "maxWidth",
    "setAttribute",
    "bom",
    "element",
    "Style",
    "setStyles",
    "setValue",
    "__sanitizer",
    "setSanitizer",
    "func",
    "Assert",
    "assertFunction",
    "Label",
    "value",
    "innerHTML",
    "Attribute",
    "set",
    "getValue",
    "getAttribute",
    "getHtmlSize",
    "undefined",
    "__measureSize",
    "getTextSize",
    "text",
    "keys",
    "size",
    "Dimension",
    "getSize"
  ],
  "mappings": "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",
  "file": "Label.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Cross browser abstractions to work with labels.\n */\nqx.Bootstrap.define(\"qx.bom.Label\",\n{\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Map} Contains all supported styles */\n    __styles :\n    {\n      fontFamily : 1,\n      fontSize : 1,\n      fontWeight : 1,\n      fontStyle : 1,\n      lineHeight : 1\n    },\n\n\n    /**\n     * Generates the helper DOM element for text measuring\n     *\n     * @return {Element} Helper DOM element\n     */\n    __prepareText : function()\n    {\n      var el = this.__createMeasureElement(false);\n      document.body.insertBefore(el, document.body.firstChild);\n\n      return this._textElement = el;\n    },\n\n\n    /**\n     * Generates the helper DOM element for HTML measuring\n     *\n     * @return {Element} Helper DOM element\n     */\n    __prepareHtml : function()\n    {\n      var el = this.__createMeasureElement(true);\n      document.body.insertBefore(el, document.body.firstChild);\n\n      return this._htmlElement = el;\n    },\n\n\n    /**\n     * Creates the measure element\n     *\n     * @param html {Boolean?false} Whether HTML markup should be used.\n     * @return {Element} The measure element\n     */\n    __createMeasureElement : function(html)\n    {\n      var el = qx.dom.Element.create(\"div\");\n      var style = el.style;\n\n      style.width = style.height = \"auto\";\n      style.left = style.top = \"-1000px\";\n      style.visibility = \"hidden\";\n      style.position = \"absolute\";\n      style.overflow = \"visible\";\n      style.display = \"block\";\n\n      if (html)\n      {\n        style.whiteSpace = \"normal\";\n      }\n      else\n      {\n        style.whiteSpace = \"nowrap\";\n\n        if (!qx.core.Environment.get(\"css.textoverflow\") &&\n          qx.core.Environment.get(\"html.xul\"))\n        {\n          var inner = document.createElementNS(\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\", \"label\");\n\n          // Force style inheritance for font styles to omit usage of\n          // CSS \"label\" selector, See bug #1349 for details.\n          var style = inner.style;\n          style.padding = \"0\";\n          style.margin = \"0\";\n          style.width = \"auto\";\n\n          for (var key in this.__styles) {\n            style[key] = \"inherit\";\n          }\n\n          el.appendChild(inner);\n        }\n      }\n\n      return el;\n    },\n\n\n    /**\n     * Returns a map of all styles which should be applied as\n     * a basic set.\n     *\n     * @param html {Boolean?false} Whether HTML markup should be used.\n     * @return {Map} Initial styles which should be applied to a label element.\n     */\n    __getStyles : function(html)\n    {\n      var styles = {};\n\n      styles.overflow = \"hidden\";\n      if (html)\n      {\n        styles.whiteSpace = \"normal\";\n      }\n      else if (!qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\"))\n      {\n        styles.display = \"block\";\n      }\n      else\n      {\n        styles.whiteSpace = \"nowrap\";\n        styles[qx.core.Environment.get(\"css.textoverflow\")] = \"ellipsis\";\n      }\n\n      return styles;\n    },\n\n\n    /**\n     * Creates a label.\n     *\n     * The default mode is 'text' which means that the overlapping text is cut off\n     * using ellipsis automatically. Text wrapping is disabled in this mode\n     * as well. Spaces are normalized. Umlauts and other special symbols are only\n     * allowed in unicode mode as normal characters.\n     *\n     * In the HTML mode you can insert any HTML, but loose the capability to cut\n     * of overlapping text. Automatic text wrapping is enabled by default.\n     *\n     * It is not possible to modify the mode afterwards.\n     *\n     * @param content {String} Content of the label\n     * @param html {Boolean?false} Whether HTML markup should be used.\n     * @param win {Window?null} Window to create the element for\n     * @return {Element} The created iframe node\n     */\n    create : function(content, html, win)\n    {\n      if (!win) {\n        win = window;\n      }\n\n      var el = win.document.createElement(\"div\");\n\n      if (html)\n      {\n        el.useHtml = true;\n      }\n\n      if (!qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\"))\n      {\n        // Gecko as of Firefox 2.x and 3.0 does not support ellipsis\n        // for text overflow. We use this feature from XUL instead.\n        var xulel = win.document.createElementNS(\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\", \"label\");\n\n        var style = xulel.style;\n        style.cursor = \"inherit\";\n        style.color = \"inherit\";\n        style.overflow = \"hidden\";\n        style.maxWidth = \"100%\";\n        style.padding = \"0\";\n        style.margin = \"0\";\n        style.width = \"auto\";\n\n        // Force style inheritance for font styles to omit usage of\n        // CSS \"label\" selector, See bug #1349 for details.\n        for (var key in this.__styles) {\n          xulel.style[key] = \"inherit\";\n        }\n\n        xulel.setAttribute(\"crop\", \"end\");\n\n        el.appendChild(xulel);\n      }\n      else\n      {\n        qx.bom.element.Style.setStyles(el, this.__getStyles(html));\n      }\n\n      if (content) {\n        this.setValue(el, content);\n      }\n\n      return el;\n    },\n\n\n    /** Sanitizer function */\n    __sanitizer : null,\n\n\n    /**\n     * Sets a function to sanitize values. It will be used by {@link #setValue}.\n     * The function to sanitize will get the <code>string</code> value and\n     * should return a sanitized / cleared <code>string</code>.\n     *\n     * @param func {Function | null} Function to sanitize / clean HTML code\n     *  from given string parameter\n     */\n    setSanitizer : function(func)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (func) {\n          qx.core.Assert.assertFunction(func);\n        }\n      }\n\n      qx.bom.Label.__sanitizer = func;\n    },\n\n\n    /**\n     * Sets the content of the element.\n     *\n     * The possibilities of the value depends on the mode\n     * defined using {@link #create}.\n     *\n     * @param element {Element} DOM element to modify.\n     * @param value {String} Content to insert.\n     */\n    setValue : function(element, value)\n    {\n      value = value || \"\";\n\n      if (element.useHtml) {\n        if (qx.bom.Label.__sanitizer && typeof(qx.bom.Label.__sanitizer) === \"function\") {\n          value = qx.bom.Label.__sanitizer(value);\n        }\n        element.innerHTML = value;\n      } else if (!qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\"))\n      {\n        element.firstChild.setAttribute(\"value\", value);\n      } else {\n        qx.bom.element.Attribute.set(element, \"text\", value);\n      }\n    },\n\n\n    /**\n     * Returns the content of the element.\n     *\n     * @param element {Element} DOM element to query.\n     * @return {String} Content stored in the element.\n     */\n    getValue : function(element)\n    {\n      if (element.useHtml) {\n        return element.innerHTML;\n      } else if (!qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\"))\n      {\n        return element.firstChild.getAttribute(\"value\") || \"\";\n      } else {\n        return qx.bom.element.Attribute.get(element, \"text\");\n      }\n    },\n\n\n    /**\n     * Returns the preferred dimensions of the given HTML content.\n     *\n     * @param content {String} The HTML markup to measure\n     * @param styles {Map?null} Optional styles to apply\n     * @param width {Integer} To support width for height it is possible to limit the width\n     * @return {Map} A map with preferred <code>width</code> and <code>height</code>.\n     */\n    getHtmlSize : function(content, styles, width)\n    {\n      var element = this._htmlElement || this.__prepareHtml();\n\n      // apply width\n      element.style.width = width != undefined ? width + \"px\" : \"auto\";\n      // insert content\n      element.innerHTML = content;\n\n      return this.__measureSize(element, styles);\n    },\n\n\n    /**\n     * Returns the preferred dimensions of the given text.\n     *\n     * @param text {String} The text to measure\n     * @param styles {Map} Optional styles to apply\n     * @return {Map} A map with preferred <code>width</code> and <code>height</code>.\n     */\n    getTextSize : function(text, styles)\n    {\n      var element = this._textElement || this.__prepareText();\n\n      if (!qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\"))\n      {\n        element.firstChild.setAttribute(\"value\", text);\n      } else {\n        qx.bom.element.Attribute.set(element, \"text\", text);\n      }\n\n      return this.__measureSize(element, styles);\n    },\n\n\n    /**\n     * Measure the size of the given element\n     *\n     * @param element {Element} The element to measure\n     * @param styles {Map?null} Optional styles to apply\n     * @return {Map} A map with preferred <code>width</code> and <code>height</code>.\n     */\n    __measureSize : function(element, styles)\n    {\n      // sync styles\n      var keys = this.__styles;\n\n      if (!styles) {\n        styles = {};\n      }\n\n      for (var key in keys) {\n        element.style[key] = styles[key] || \"\";\n      }\n\n      // detect size\n      var size = qx.bom.element.Dimension.getSize(element);\n\n      // all modern browser are needing one more pixel for width\n      size.width++;\n\n      return size;\n    }\n  }\n});\n"
  ]
}