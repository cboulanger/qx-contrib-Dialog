{
  "className": "qx.bom.rest.Resource",
  "packageName": "qx.bom.rest",
  "name": "Resource",
  "superClass": "qx.event.Emitter",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 58,
        "column": 0
      },
      "end": {
        "line": 1032,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2013 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nRichard Sternagel (rsternagel)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Client-side wrapper of a REST resource.\n\nEach instance represents a resource in terms of REST. A number of actions\n(usually HTTP methods) unique to the resource can be defined and invoked.\nA resource with its actions is configured declaratively by passing a resource\ndescription to the constructor, or programmatically using {@link #map}.\n\nEach action is associated to a route. A route is a combination of method,\nURL pattern and optional parameter constraints.\n\nAn action is invoked by calling a method with the same name. When a URL\npattern of a route contains positional parameters, those parameters must be\npassed when invoking the associated action. Also, constraints defined in the\nroute must be satisfied.\n\nWhen an action is invoked, a request is configured according to the associated\nroute, is passed the URL parameters, request body data, and finally send.\nWhat kind of request is send can be configured by overwriting {@link #_getRequest}.\n\nNo constraints on the action's name or the scope of the URLs are imposed. However,\nif you want to follow RESTful design patterns it is recommended to name actions\nthe same as the HTTP action.\n\nStrictly speaking, the <code>photos</code> instance represents two distinct resources\nand could therefore just as well mapped to two distinct resources (for instance,\nnamed photos and photosTagged). What style to choose depends on the kind of data\nreturned. For instance, it seems sensible to stick with one resource if the filter\nonly limits the result set (i.e. the individual results have the same properties).\n\nIn order to respond to successful (or erroneous) invocations of actions,\neither listen to the generic \"success\" or \"error\" event and get the action\nfrom the event data, or listen to action specific events defined at runtime.\nAction specific events follow the pattern \"&lt;action&gt;Success\" and\n\"&lt;action&gt;Error\", e.g. \"indexSuccess\"."
        }
      ],
      "@group": [
        {
          "name": "@group",
          "body": "IO"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.core.Object.*"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 72,
        "column": 2
      },
      "end": {
        "line": 90,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "description {Map?} Each key of the map is interpreted as\n<code>action</code> name. The value associated to the key must be a map\nwith the properties <code>method</code> and <code>url</code>.\n<code>check</code> is optional. Also see {@link #map}.",
          "paramName": "description",
          "description": " Each key of the map is interpreted as\n<code>action</code> name. The value associated to the key must be a map\nwith the properties <code>method</code> and <code>url</code>.\n<code>check</code> is optional. Also see {@link #map}.",
          "optional": true,
          "type": "Map"
        }
      ],
      "@see": [
        {
          "name": "@see",
          "body": "qx.bom.rest"
        },
        {
          "name": "@see",
          "body": "qx.io.rest"
        }
      ]
    }
  },
  "events": {
    "success": {
      "location": {
        "start": {
          "line": 102,
          "column": 4
        },
        "end": {
          "line": 102,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when any request was successful.\n\nThe action the successful request is associated to, as well as the\nrequest itself, can be retrieved from the event’s properties.\nAdditionally, an action specific event is fired that follows the pattern\n\"<action>Success\", e.g. \"indexSuccess\"."
          }
        ]
      },
      "name": "success",
      "type": "qx.bom.rest.Resource"
    },
    "actionSuccess": {
      "location": {
        "start": {
          "line": 110,
          "column": 5
        },
        "end": {
          "line": 110,
          "column": 44
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when request associated to action given in prefix was successful.\n\nFor example, \"indexSuccess\" is fired when <code>index()</code> was\nsuccessful."
          }
        ]
      },
      "name": "actionSuccess",
      "type": "qx.bom.rest.Resource"
    },
    "error": {
      "location": {
        "start": {
          "line": 120,
          "column": 4
        },
        "end": {
          "line": 120,
          "column": 35
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when any request fails.\n\nThe action the failed request is associated to, as well as the\nrequest itself, can be retrieved from the event’s properties.\nAdditionally, an action specific event is fired that follows the pattern\n\"<action>Error\", e.g. \"indexError\"."
          }
        ]
      },
      "name": "error",
      "type": "qx.bom.rest.Resource"
    },
    "actionError": {
      "location": {
        "start": {
          "line": 127,
          "column": 5
        },
        "end": {
          "line": 127,
          "column": 42
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when any request associated to action given in prefix fails.\n\nFor example, \"indexError\" is fired when <code>index()</code> failed."
          }
        ]
      },
      "name": "actionError",
      "type": "qx.bom.rest.Resource"
    },
    "sent": {
      "location": {
        "start": {
          "line": 132,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 34
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when a request is sent to the given endpoint."
          }
        ]
      },
      "name": "sent",
      "type": "qx.bom.rest.Resource"
    },
    "actionSent": {
      "location": {
        "start": {
          "line": 140,
          "column": 5
        },
        "end": {
          "line": 140,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when any request associated to action is sent to the given endpoint.\n\nFor example, \"indexSent\" is fired when <code>index()</code> was\ncalled."
          }
        ]
      },
      "name": "actionSent",
      "type": "qx.bom.rest.Resource"
    },
    "started": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 146,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when a request is started to the given endpoint. This moment is right after the request\nwas opened and send."
          }
        ]
      },
      "name": "started",
      "type": "qx.bom.rest.Resource"
    },
    "actionStarted": {
      "location": {
        "start": {
          "line": 154,
          "column": 5
        },
        "end": {
          "line": 154,
          "column": 44
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when any request associated to action is started to the given endpoint. This moment is\nright after the request was opened and send.\n\nFor example, \"indexStarted\" is fired when <code>index()</code> was called."
          }
        ]
      },
      "name": "actionStarted",
      "type": "qx.bom.rest.Resource"
    }
  },
  "statics": {
    "POLL_THROTTLE_LIMIT": {
      "location": {
        "start": {
          "line": 163,
          "column": 4
        },
        "end": {
          "line": 163,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Number of milliseconds below a long-poll request is considered immediate and\nsubject to throttling checks."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "POLL_THROTTLE_COUNT": {
      "location": {
        "start": {
          "line": 168,
          "column": 4
        },
        "end": {
          "line": 168,
          "column": 27
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Number of immediate long-poll responses accepted before throttling takes place."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "REQUIRED": {
      "location": {
        "start": {
          "line": 173,
          "column": 4
        },
        "end": {
          "line": 173,
          "column": 18
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "A symbol used in checks to declare required parameter."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "placeholdersFromUrl": {
      "location": {
        "start": {
          "line": 181,
          "column": 4
        },
        "end": {
          "line": 193,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get placeholders from URL."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "url {String} The URL to parse for placeholders.",
            "paramName": "url",
            "description": " The URL to parse for placeholders.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} Array of placeholders without the placeholder prefix.",
            "type": "Array",
            "description": " Array of placeholders without the placeholder prefix."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "__requests": {
      "location": {
        "start": {
          "line": 198,
          "column": 4
        },
        "end": {
          "line": 198,
          "column": 20
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__routes": {
      "location": {
        "start": {
          "line": 199,
          "column": 4
        },
        "end": {
          "line": 199,
          "column": 18
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__baseUrl": {
      "location": {
        "start": {
          "line": 200,
          "column": 4
        },
        "end": {
          "line": 200,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__pollTimers": {
      "location": {
        "start": {
          "line": 201,
          "column": 4
        },
        "end": {
          "line": 201,
          "column": 22
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__longPollHandlers": {
      "location": {
        "start": {
          "line": 202,
          "column": 4
        },
        "end": {
          "line": 202,
          "column": 28
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__configureRequestCallback": {
      "location": {
        "start": {
          "line": 203,
          "column": 4
        },
        "end": {
          "line": 203,
          "column": 36
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__requestHandler": {
      "location": {
        "start": {
          "line": 208,
          "column": 4
        },
        "end": {
          "line": 208,
          "column": 26
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Request callbacks for 'onsuccess', 'onfail' and 'onloadend' - see {@link #setRequestHandler}."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__begetRequest": {
      "location": {
        "start": {
          "line": 213,
          "column": 4
        },
        "end": {
          "line": 213,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Function} Function which returns instances from {@link qx.io.request.AbstractRequest}."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "setRequestFactory": {
      "location": {
        "start": {
          "line": 227,
          "column": 4
        },
        "end": {
          "line": 229,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          },
          {
            "name": "@description",
            "body": "Request"
          },
          {
            "name": "@description",
            "body": ""
          },
          {
            "name": "@description",
            "body": "Set a request factory function to switch the request implementation.\nThe created requests have to implement {@link qx.io.request.AbstractRequest}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fn {Function} Function which returns request instances.",
            "paramName": "fn",
            "description": " Function which returns request instances.",
            "type": "Function"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setRequestHandler": {
      "location": {
        "start": {
          "line": 238,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets request callbacks for 'onsuccess', 'onfail' and 'onloadend'."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "handler {Map} Map defining callbacks and their context.",
            "paramName": "handler",
            "description": " Map defining callbacks and their context.",
            "type": "Map"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getRequestHandler": {
      "location": {
        "start": {
          "line": 247,
          "column": 4
        },
        "end": {
          "line": 336,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Provides the request callbacks for 'onsuccess', 'onfail' and 'onloadend'."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map defining callbacks and their context.",
            "type": "Map",
            "description": " Map defining callbacks and their context."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getRequestsByAction": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 349,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Retrieve the currently stored request objects for an action."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The action (e.g. \"get\", \"post\" ...).",
            "paramName": "action",
            "description": " The action (e.g. \"get\", \"post\" ...).",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array|null} Request objects.",
            "type": "Array|null",
            "description": " Request objects."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "configureRequest": {
      "location": {
        "start": {
          "line": 357,
          "column": 4
        },
        "end": {
          "line": 359,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Configure request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "callback {Function} Function called before request is send.\nReceives request, action, params and data.",
            "paramName": "callback",
            "description": " Function called before request is send.\nReceives request, action, params and data.",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getRequest": {
      "location": {
        "start": {
          "line": 367,
          "column": 4
        },
        "end": {
          "line": 370,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get request.\n\nMay be overridden to change type of request."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object",
            "type": "qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest",
            "description": " Request object"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__createRequest": {
      "location": {
        "start": {
          "line": 378,
          "column": 4
        },
        "end": {
          "line": 389,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Create request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} The action the created request is associated to.",
            "paramName": "action",
            "description": " The action the created request is associated to.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object",
            "type": "qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest",
            "description": " Request object"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "map": {
      "location": {
        "start": {
          "line": 408,
          "column": 4
        },
        "end": {
          "line": 438,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          },
          {
            "name": "@description",
            "body": "Routes and actions"
          },
          {
            "name": "@description",
            "body": ""
          },
          {
            "name": "@description",
            "body": "Map action to combination of method and URL pattern."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to associate to request.",
            "paramName": "action",
            "description": " Action to associate to request.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "method {String} Method to configure request with.",
            "paramName": "method",
            "description": " Method to configure request with.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "url {String} URL to configure request with. May contain positional\nparameters (<code>{param}</code>) that are replaced by values given when the action\nis invoked. Parameters are optional, unless a check is defined. A default\nvalue can be provided (<code>{param=default}</code>).",
            "paramName": "url",
            "description": " URL to configure request with. May contain positional\nparameters (<code>{param}</code>) that are replaced by values given when the action\nis invoked. Parameters are optional, unless a check is defined. A default\nvalue can be provided (<code>{param=default}</code>).",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "check {Map?} Map defining parameter constraints, where the key is\nthe URL parameter and the value a regular expression (to match string) or\n<code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).",
            "paramName": "check",
            "description": " Map defining parameter constraints, where the key is\nthe URL parameter and the value a regular expression (to match string) or\n<code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).",
            "optional": true,
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "invoke": {
      "location": {
        "start": {
          "line": 457,
          "column": 4
        },
        "end": {
          "line": 518,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Invoke action with parameters.\n\nInternally called by actions dynamically created.\n\nMay be overridden to customize action and parameter handling."
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreUnused(successHandler, failHandler, loadEndHandler)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to invoke.",
            "paramName": "action",
            "description": " Action to invoke.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "params {Map} Map of parameters inserted into URL when a matching\npositional parameter is found.",
            "paramName": "params",
            "description": " Map of parameters inserted into URL when a matching\npositional parameter is found.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "data {Map|String} Data to be send as part of the request.\nSee {@link qx.bom.request.SimpleXhr#getRequestData}.\nSee {@link qx.io.request.AbstractRequest#requestData}.",
            "paramName": "data",
            "description": " Data to be send as part of the request.\nSee {@link qx.bom.request.SimpleXhr#getRequestData}.\nSee {@link qx.io.request.AbstractRequest#requestData}.",
            "type": [
              "Map",
              "String"
            ]
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} Id of the action's invocation.",
            "type": "Number",
            "description": " Id of the action's invocation."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setBaseUrl": {
      "location": {
        "start": {
          "line": 528,
          "column": 4
        },
        "end": {
          "line": 530,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set base URL.\n\nThe base URL is prepended to the URLs given in the description.\nChanges affect all future invocations."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "baseUrl {String} Base URL.",
            "paramName": "baseUrl",
            "description": " Base URL.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__checkParameters": {
      "location": {
        "start": {
          "line": 538,
          "column": 4
        },
        "end": {
          "line": 572,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Check parameters."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "params {Map} Parameters.",
            "paramName": "params",
            "description": " Parameters.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "check {Map} Checks.",
            "paramName": "check",
            "description": " Checks.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__configureRequest": {
      "location": {
        "start": {
          "line": 581,
          "column": 4
        },
        "end": {
          "line": 595,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Configure request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.",
            "paramName": "req",
            "description": " Request.",
            "type": [
              "qx.bom.request.SimpleXhr",
              "qx.io.request.AbstractRequest"
            ]
          },
          {
            "name": "@param",
            "body": "config {Map} Configuration.",
            "paramName": "config",
            "description": " Configuration.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "data {Map} Data.",
            "paramName": "data",
            "description": " Data.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__configureJsonRequest": {
      "location": {
        "start": {
          "line": 604,
          "column": 4
        },
        "end": {
          "line": 615,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Serialize data to JSON when content type indicates."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.",
            "paramName": "req",
            "description": " Request.",
            "type": [
              "qx.bom.request.SimpleXhr",
              "qx.io.request.AbstractRequest"
            ]
          },
          {
            "name": "@param",
            "body": "config {Map} Configuration.",
            "paramName": "config",
            "description": " Configuration.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "data {Map} Data.",
            "paramName": "data",
            "description": " Data.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "abort": {
      "location": {
        "start": {
          "line": 623,
          "column": 4
        },
        "end": {
          "line": 640,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Abort action."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "varargs {String|Number} Action of which all invocations to abort\n(when string), or a single invocation of an action to abort (when number)",
            "paramName": "varargs",
            "description": " Action of which all invocations to abort\n(when string), or a single invocation of an action to abort (when number)",
            "type": [
              "String",
              "Number"
            ]
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "refresh": {
      "location": {
        "start": {
          "line": 649,
          "column": 4
        },
        "end": {
          "line": 651,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resend request associated to action.\n\nReplays parameters given when action was invoked originally."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to refresh.",
            "paramName": "action",
            "description": " Action to refresh.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "poll": {
      "location": {
        "start": {
          "line": 677,
          "column": 4
        },
        "end": {
          "line": 707,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Periodically invoke action.\n\nReplays parameters given when action was invoked originally. When the\naction was not yet invoked and requires parameters, parameters must be\ngiven.\n\nPlease note that IE tends to cache overly aggressive. One work-around is\nto disable caching on the client side by configuring the request with\n<code>setCache(false)</code>. If you control the server, a better\nwork-around is to include appropriate headers to explicitly control\ncaching. This way you still avoid requests that can be correctly answered\nfrom cache (e.g. when nothing has changed since the last poll). Please\nrefer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\nXMLHttpRequest Caching Test</a> for available options."
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreUnused(intervalListener)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "interval {Number} Interval in ms.",
            "paramName": "interval",
            "description": " Interval in ms.",
            "type": "Number"
          },
          {
            "name": "@param",
            "body": "params {Map?} Map of parameters. See {@link #invoke}.",
            "paramName": "params",
            "description": " Map of parameters. See {@link #invoke}.",
            "optional": true,
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "immediately {Boolean?false} <code>true</code>, if the poll should\ninvoke a call immediately.",
            "paramName": "immediately",
            "description": " <code>true</code>, if the poll should\ninvoke a call immediately.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_startPoll": {
      "location": {
        "start": {
          "line": 717,
          "column": 4
        },
        "end": {
          "line": 723,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Start a poll process."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "listener {Function} The function to repeatedly execute at the given interval.",
            "paramName": "listener",
            "description": " The function to repeatedly execute at the given interval.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "interval {Number} Interval in ms.",
            "paramName": "interval",
            "description": " Interval in ms.",
            "type": "Number"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "stopPollByAction": {
      "location": {
        "start": {
          "line": 730,
          "column": 4
        },
        "end": {
          "line": 735,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Stops a poll process by the associated action."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "restartPollByAction": {
      "location": {
        "start": {
          "line": 742,
          "column": 4
        },
        "end": {
          "line": 748,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Restarts a poll process by the associated action."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "longPoll": {
      "location": {
        "start": {
          "line": 772,
          "column": 4
        },
        "end": {
          "line": 817,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Long-poll action.\n\nUse Ajax long-polling to continuously fetch a resource as soon as the\nserver signals new data. The server determines when new data is available,\nwhile the client keeps open a request. Requires configuration on the\nserver side. Basically, the server must not close a connection until\nnew data is available. For a high level introduction to long-polling,\nrefer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\nAjax with long polling</a>.\n\nUses {@link #refresh} internally. Make sure you understand the\nimplications of IE's tendency to cache overly aggressive.\n\nNote no interval is given on the client side."
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreUnused(longPollHandler)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action to poll.",
            "paramName": "action",
            "description": " Action to poll.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} Id of handler responsible for long-polling. To stop\npolling, remove handler using {@link qx.core.Object#removeListenerById}.",
            "type": "String",
            "description": " Id of handler responsible for long-polling. To stop\npolling, remove handler using {@link qx.core.Object#removeListenerById}."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getRequestConfig": {
      "location": {
        "start": {
          "line": 829,
          "column": 4
        },
        "end": {
          "line": 864,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get request configuration for action and parameters.\n\nThis is were placeholders are replaced with parameters."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "action {String} Action associated to request.",
            "paramName": "action",
            "description": " Action associated to request.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "params {Map} Parameters to embed in request.",
            "paramName": "params",
            "description": " Parameters to embed in request.",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map of configuration settings. Has the properties\n<code>method</code>, <code>url</code> and <code>check</code>.",
            "type": "Map",
            "description": " Map of configuration settings. Has the properties\n<code>method</code>, <code>url</code> and <code>check</code>."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getThrottleLimit": {
      "location": {
        "start": {
          "line": 870,
          "column": 4
        },
        "end": {
          "line": 872,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Override to adjust the throttle limit."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Throttle limit in milliseconds",
            "type": "Integer",
            "description": " Throttle limit in milliseconds"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_getThrottleCount": {
      "location": {
        "start": {
          "line": 878,
          "column": 4
        },
        "end": {
          "line": 880,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Override to adjust the throttle count."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} Throttle count",
            "type": "Integer",
            "description": " Throttle count"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "__mapFromDescription": {
      "location": {
        "start": {
          "line": 889,
          "column": 4
        },
        "end": {
          "line": 903,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Map actions from description.\n\nAllows to decoratively define routes."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "description {Map} Map that defines the routes.",
            "paramName": "description",
            "description": " Map that defines the routes.",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__declareEvent": {
      "location": {
        "start": {
          "line": 910,
          "column": 4
        },
        "end": {
          "line": 918,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Declare event at runtime."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "type {String} Type of event.",
            "paramName": "type",
            "description": " Type of event.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "isDisposed": {
      "location": {
        "start": {
          "line": 931,
          "column": 4
        },
        "end": {
          "line": 933,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nDISPOSER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns true if the object is disposed."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object has been disposed",
            "type": "Boolean",
            "description": " Whether the object has been disposed"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "dispose": {
      "location": {
        "start": {
          "line": 940,
          "column": 4
        },
        "end": {
          "line": 998,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Dispose this object"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.IDisposable",
      "appearsIn": [
        "qx.core.IDisposable"
      ]
    },
    "destruct": {
      "location": {
        "start": {
          "line": 1005,
          "column": 4
        },
        "end": {
          "line": 1030,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Destructs the Resource.\n\nAll created requests, routes and pollTimers will be disposed."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}