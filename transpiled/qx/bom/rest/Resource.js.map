{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/bom/rest/Resource.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "event",
    "Emitter",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "description",
    "__requests",
    "__routes",
    "__pollTimers",
    "__longPollHandlers",
    "Assert",
    "assertMap",
    "__mapFromDescription",
    "e",
    "dispose",
    "events",
    "statics",
    "POLL_THROTTLE_LIMIT",
    "POLL_THROTTLE_COUNT",
    "REQUIRED",
    "placeholdersFromUrl",
    "url",
    "placeholderRe",
    "match",
    "placeholders",
    "exec",
    "push",
    "members",
    "__baseUrl",
    "__configureRequestCallback",
    "__requestHandler",
    "__begetRequest",
    "setRequestFactory",
    "fn",
    "setRequestHandler",
    "handler",
    "_getRequestHandler",
    "onsuccess",
    "callback",
    "req",
    "action",
    "response",
    "parseInt",
    "toHashCode",
    "getResponse",
    "emit",
    "context",
    "onfail",
    "onloadend",
    "window",
    "setTimeout",
    "onreadystatechange",
    "getTransport",
    "readyState",
    "bom",
    "request",
    "Xhr",
    "HEADERS_RECEIVED",
    "OPENED",
    "payload",
    "onprogress",
    "progress",
    "lengthComputable",
    "loaded",
    "total",
    "getRequestsByAction",
    "hasRequests",
    "configureRequest",
    "_getRequest",
    "SimpleXhr",
    "__createRequest",
    "lang",
    "Type",
    "isArray",
    "ObjectRegistry",
    "register",
    "map",
    "method",
    "check",
    "undefined",
    "Error",
    "__declareEvent",
    "Function",
    "bind",
    "Array",
    "prototype",
    "unshift",
    "call",
    "arguments",
    "invoke",
    "apply",
    "params",
    "data",
    "config",
    "_getRequestConfig",
    "__checkParameters",
    "__configureRequest",
    "__configureJsonRequest",
    "reqHandler",
    "addListenerOnce",
    "hasOwnProperty",
    "addListener",
    "send",
    "setBaseUrl",
    "baseUrl",
    "assertObject",
    "Object",
    "keys",
    "forEach",
    "param",
    "assertRegExp",
    "rest",
    "Resource",
    "test",
    "setUrl",
    "setMethod",
    "classname",
    "setRequestData",
    "contentType",
    "getRequestHeader",
    "getMethod",
    "util",
    "Request",
    "methodAllowsRequestBody",
    "Json",
    "stringify",
    "abort",
    "varargs",
    "isNumber",
    "id",
    "post",
    "getPostId",
    "fromHashCode",
    "reqs",
    "refresh",
    "poll",
    "interval",
    "immediately",
    "stopPollByAction",
    "intervalListener",
    "scope",
    "isDone",
    "isDisposed",
    "_startPoll",
    "listener",
    "setInterval",
    "intervalId",
    "clearInterval",
    "restartPollByAction",
    "timer",
    "longPoll",
    "res",
    "lastResponse",
    "immediateResponseCount",
    "throttle",
    "isImmediateResponse",
    "Date",
    "_getThrottleLimit",
    "_getThrottleCount",
    "debug",
    "handlerId",
    "longPollHandler",
    "route",
    "clone",
    "placeholder",
    "re",
    "RegExp",
    "defaultValue",
    "replace",
    "assertString",
    "type",
    "constructor",
    "$$events",
    "$$disposed",
    "Environment",
    "get",
    "destruct",
    "key",
    "value",
    "isString",
    "ff2",
    "navigator",
    "userAgent",
    "indexOf",
    "ie6",
    "warn",
    "removeListenerById"
  ],
  "mappings": "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",
  "file": "Resource.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2013 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Client-side wrapper of a REST resource.\n *\n * Each instance represents a resource in terms of REST. A number of actions\n * (usually HTTP methods) unique to the resource can be defined and invoked.\n * A resource with its actions is configured declaratively by passing a resource\n * description to the constructor, or programmatically using {@link #map}.\n *\n * Each action is associated to a route. A route is a combination of method,\n * URL pattern and optional parameter constraints.\n *\n * An action is invoked by calling a method with the same name. When a URL\n * pattern of a route contains positional parameters, those parameters must be\n * passed when invoking the associated action. Also, constraints defined in the\n * route must be satisfied.\n *\n * When an action is invoked, a request is configured according to the associated\n * route, is passed the URL parameters, request body data, and finally send.\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\n *\n * No constraints on the action's name or the scope of the URLs are imposed. However,\n * if you want to follow RESTful design patterns it is recommended to name actions\n * the same as the HTTP action.\n *\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\n * and could therefore just as well mapped to two distinct resources (for instance,\n * named photos and photosTagged). What style to choose depends on the kind of data\n * returned. For instance, it seems sensible to stick with one resource if the filter\n * only limits the result set (i.e. the individual results have the same properties).\n *\n * In order to respond to successful (or erroneous) invocations of actions,\n * either listen to the generic \"success\" or \"error\" event and get the action\n * from the event data, or listen to action specific events defined at runtime.\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\n *\n * @group (IO)\n * @ignore(qx.core.Object.*)\n */\nqx.Bootstrap.define(\"qx.bom.rest.Resource\",\n{\n  extend: qx.event.Emitter,\n  implement: [ qx.core.IDisposable ],\n\n  /**\n   * @param description {Map?} Each key of the map is interpreted as\n   *  <code>action</code> name. The value associated to the key must be a map\n   *  with the properties <code>method</code> and <code>url</code>.\n   *  <code>check</code> is optional. Also see {@link #map}.\n   *\n   * @see qx.bom.rest\n   * @see qx.io.rest\n   */\n  construct: function(description)\n  {\n    this.__requests = {};\n    this.__routes = {};\n    this.__pollTimers = {};\n    this.__longPollHandlers = {};\n\n    try {\n      if (typeof description !== \"undefined\") {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertMap(description);\n        }\n        this.__mapFromDescription(description);\n      }\n    } catch(e) {\n      this.dispose();\n      throw e;\n    }\n  },\n\n  events:\n  {\n    /**\n     * Fired when any request was successful.\n     *\n     * The action the successful request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Success\", e.g. \"indexSuccess\".\n     */\n    \"success\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when request associated to action given in prefix was successful.\n     *\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\n     * successful.\n     */\n     \"actionSuccess\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request fails.\n     *\n     * The action the failed request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Error\", e.g. \"indexError\".\n     */\n    \"error\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action given in prefix fails.\n     *\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\n     */\n     \"actionError\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when a request is sent to the given endpoint.\n     */\n    \"sent\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action is sent to the given endpoint.\n     *\n     * For example, \"indexSent\" is fired when <code>index()</code> was\n     * called.\n     */\n     \"actionSent\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when a request is started to the given endpoint. This moment is right after the request\n     * was opened and send.\n     */\n    \"started\": \"qx.bom.rest.Resource\",\n\n    /**\n     * Fired when any request associated to action is started to the given endpoint. This moment is\n     * right after the request was opened and send.\n     *\n     * For example, \"indexStarted\" is fired when <code>index()</code> was called.\n     */\n     \"actionStarted\": \"qx.bom.rest.Resource\"\n  },\n\n  statics:\n  {\n    /**\n     * Number of milliseconds below a long-poll request is considered immediate and\n     * subject to throttling checks.\n     */\n    POLL_THROTTLE_LIMIT: 100,\n\n    /**\n     * Number of immediate long-poll responses accepted before throttling takes place.\n     */\n    POLL_THROTTLE_COUNT: 30,\n\n    /**\n     * A symbol used in checks to declare required parameter.\n     */\n    REQUIRED: true,\n\n    /**\n     * Get placeholders from URL.\n     *\n     * @param url {String} The URL to parse for placeholders.\n     * @return {Array} Array of placeholders without the placeholder prefix.\n     */\n    placeholdersFromUrl: function(url) {\n      var placeholderRe = /\\{(\\w+)(=\\w+)?\\}/g,\n          match,\n          placeholders = [];\n\n      // With g flag set, searching begins at the regex object's\n      // lastIndex, which is zero initially and increments with each match.\n      while ((match = placeholderRe.exec(url))) {\n        placeholders.push(match[1]);\n      }\n\n      return placeholders;\n    }\n  },\n\n  members:\n  {\n    __requests: null,\n    __routes: null,\n    __baseUrl: null,\n    __pollTimers: null,\n    __longPollHandlers: null,\n    __configureRequestCallback: null,\n\n    /**\n     * @type {Map} Request callbacks for 'onsuccess', 'onfail' and 'onloadend' - see {@link #setRequestHandler}.\n     */\n    __requestHandler: null,\n\n    /**\n     * @type {Function} Function which returns instances from {@link qx.io.request.AbstractRequest}.\n     */\n    __begetRequest: null,\n\n    //\n    // Request\n    //\n\n    /**\n     * Set a request factory function to switch the request implementation.\n     * The created requests have to implement {@link qx.io.request.AbstractRequest}.\n     *\n     * @param fn {Function} Function which returns request instances.\n     *\n     * @internal\n     */\n    setRequestFactory: function(fn) {\n      this.__begetRequest = fn;\n    },\n\n    /**\n     * Sets request callbacks for 'onsuccess', 'onfail' and 'onloadend'.\n     *\n     * @param handler {Map} Map defining callbacks and their context.\n     *\n     * @internal\n     */\n    setRequestHandler: function(handler) {\n      this.__requestHandler = handler;\n    },\n\n    /**\n     * Provides the request callbacks for 'onsuccess', 'onfail' and 'onloadend'.\n     *\n     * @return {Map} Map defining callbacks and their context.\n     */\n    _getRequestHandler: function() {\n      return (this.__requestHandler === null) ? {\n        onsuccess: {\n          callback: function(req, action) {\n            return function() {\n              var response = {\n                  \"id\": parseInt(req.toHashCode(), 10),\n                  \"response\": req.getResponse(),\n                  \"request\": req,\n                  \"action\": action\n              };\n              this.emit(action + \"Success\", response);\n              this.emit(\"success\", response);\n            };\n          },\n          context: this\n        },\n        onfail: {\n          callback: function(req, action) {\n            return function() {\n              var response = {\n                  \"id\": parseInt(req.toHashCode(), 10),\n                  \"response\": req.getResponse(),\n                  \"request\": req,\n                  \"action\": action\n              };\n              this.emit(action + \"Error\", response);\n              this.emit(\"error\", response);\n            };\n          },\n          context: this\n        },\n        onloadend: {\n          callback: function(req, action) {\n            return function() {\n              // [#8315] // dispose asynchronous to work with Sinon.js\n              window.setTimeout(function() {\n                req.dispose();\n              }, 0);\n            };\n          },\n          context: this\n        },\n        onreadystatechange: {\n          callback: function(req, action) {\n            return function () {\n              if (req.getTransport().readyState === qx.bom.request.Xhr.HEADERS_RECEIVED) {\n                var response = {\n                    \"id\": parseInt(req.toHashCode(), 10),\n                    \"request\": req,\n                    \"action\": action\n                };\n                this.emit(action + \"Sent\", response);\n                this.emit(\"sent\", response);\n              }\n\n              if (req.getTransport().readyState === qx.bom.request.Xhr.OPENED) {\n                var payload = {\n                  \"id\": parseInt(req.toHashCode(), 10),\n                  \"request\": req,\n                  \"action\": action\n                };\n                this.emit(action + \"Started\", payload);\n                this.emit(\"started\", payload);\n              }\n            };\n          },\n          context: this\n        },\n        onprogress: {\n          callback: function(req, action) {\n            return function () {\n              var payload = {\n                \"id\": parseInt(req.toHashCode(), 10),\n                \"request\": req,\n                \"action\": action,\n                \"progress\": {\n                  \"lengthComputable\": req.getTransport().progress.lengthComputable,\n                  \"loaded\": req.getTransport().progress.loaded,\n                  \"total\": req.getTransport().progress.total\n                }\n              };\n              this.emit(action + \"Progress\", payload);\n              this.emit(\"progress\", payload);\n            };\n          },\n          context: this\n        }\n      } : this.__requestHandler;\n    },\n\n    /**\n     * Retrieve the currently stored request objects for an action.\n     *\n     * @param action {String} The action (e.g. \"get\", \"post\" ...).\n     * @return {Array|null} Request objects.\n     *\n     * @internal\n     */\n    getRequestsByAction: function (action) {\n      var hasRequests = (this.__requests !== null && action in this.__requests);\n      return hasRequests ? this.__requests[action] : null;\n    },\n\n    /**\n     * Configure request.\n     *\n     * @param callback {Function} Function called before request is send.\n     *   Receives request, action, params and data.\n     */\n    configureRequest: function(callback) {\n      this.__configureRequestCallback = callback;\n    },\n\n    /**\n     * Get request.\n     *\n     * May be overridden to change type of request.\n     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object\n     */\n    _getRequest: function() {\n      return (this.__begetRequest === null) ? new qx.bom.request.SimpleXhr()\n                                            : this.__begetRequest();\n    },\n\n    /**\n     * Create request.\n     *\n     * @param action {String} The action the created request is associated to.\n     * @return {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request object\n     */\n    __createRequest: function(action) {\n      var req = this._getRequest();\n\n      if (!qx.lang.Type.isArray(this.__requests[action])) {\n        this.__requests[action] = [];\n      }\n\n      qx.core.ObjectRegistry.register(req);\n      this.__requests[action].push(req);\n\n      return req;\n    },\n\n    //\n    // Routes and actions\n    //\n\n    /**\n     * Map action to combination of method and URL pattern.\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.bom.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    map: function(action, method, url, check) {\n      this.__routes[action] = [method, url, check];\n\n      // Track requests\n      this.__requests[action] = [];\n\n      // Undefine generic getter when action is named \"get\"\n      if (action == \"get\") {\n        this[action] = undefined;\n      }\n\n      // Do not overwrite existing \"non-action\" methods unless the method is\n      // null (i.e. because it exists as a stub for documentation)\n      if (typeof this[action] !== \"undefined\" && this[action] !== null &&\n          this[action].action !== true)\n      {\n        throw new Error(\"Method with name of action (\" +\n          action + \") already exists\");\n      }\n\n      this.__declareEvent(action + \"Success\");\n      this.__declareEvent(action + \"Error\");\n\n      this[action] = qx.lang.Function.bind(function() {\n        Array.prototype.unshift.call(arguments, action);\n        return this.invoke.apply(this, arguments);\n      }, this);\n\n      // Method is safe to overwrite\n      this[action].action = true;\n    },\n\n    /**\n     * Invoke action with parameters.\n     *\n     * Internally called by actions dynamically created.\n     *\n     * May be overridden to customize action and parameter handling.\n     *\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\n     *\n     * @param action {String} Action to invoke.\n     * @param params {Map} Map of parameters inserted into URL when a matching\n     *  positional parameter is found.\n     * @param data {Map|String} Data to be send as part of the request.\n     *  See {@link qx.bom.request.SimpleXhr#getRequestData}.\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\n     * @return {Number} Id of the action's invocation.\n     */\n    invoke: function(action, params, data) {\n      var req = this.__createRequest(action),\n          params = params == null ? {} : params,\n          config = this._getRequestConfig(action, params);\n\n      // Cache parameters\n      this.__routes[action].params = params;\n\n      // Check parameters\n      this.__checkParameters(params, config.check);\n\n      // Configure request\n      this.__configureRequest(req, config, data);\n\n      // Run configuration callback, passing in pre-configured request\n      if (this.__configureRequestCallback) {\n        this.__configureRequestCallback.call(this, req, action, params, data);\n      }\n\n      // Configure JSON request (content type may have been set in configuration callback)\n      this.__configureJsonRequest(req, config, data);\n\n      var reqHandler = this._getRequestHandler();\n\n      // Handle successful request\n      req.addListenerOnce(\n        \"success\",\n        reqHandler.onsuccess.callback(req, action),\n        reqHandler.onsuccess.context\n      );\n      // Handle erroneous request\n      req.addListenerOnce(\n        \"fail\",\n        reqHandler.onfail.callback(req, action),\n        reqHandler.onfail.context\n      );\n      // Handle loadend (Note that loadEnd is fired after \"success\")\n      req.addListenerOnce(\n        \"loadEnd\",\n        reqHandler.onloadend.callback(req, action),\n        reqHandler.onloadend.context\n      );\n      if (reqHandler.hasOwnProperty(\"onreadystatechange\")) {\n        req.addListener(\n          \"readystatechange\",\n          reqHandler.onreadystatechange.callback(req, action),\n          reqHandler.onreadystatechange.context\n        );\n      }\n      // Handle progress (which is fired multiple times)\n      if (reqHandler.hasOwnProperty(\"onprogress\")) {\n        req.addListener(\n          \"progress\",\n          reqHandler.onprogress.callback(req, action),\n          reqHandler.onprogress.context\n        );\n      }\n\n      req.send();\n\n      return parseInt(req.toHashCode(), 10);\n    },\n\n    /**\n     * Set base URL.\n     *\n     * The base URL is prepended to the URLs given in the description.\n     * Changes affect all future invocations.\n     *\n     * @param baseUrl {String} Base URL.\n     */\n    setBaseUrl: function(baseUrl) {\n      this.__baseUrl = baseUrl;\n    },\n\n    /**\n     * Check parameters.\n     *\n     * @param params {Map} Parameters.\n     * @param check {Map} Checks.\n     */\n    __checkParameters: function(params, check) {\n      if(typeof check !== \"undefined\") {\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertObject(check, \"Check must be object with params as keys\");\n        }\n\n        Object.keys(check).forEach(function(param) {\n\n          // Warn about invalid check\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            if (check[param] !== true) {\n              if (qx.core.Environment.get(\"qx.debug\")) {\n                qx.core.Assert.assertRegExp(check[param]);\n              }\n            }\n          }\n\n          // Missing parameter\n          if (check[param] === qx.bom.rest.Resource.REQUIRED && typeof params[param] === \"undefined\") {\n            throw new Error(\"Missing parameter '\" + param + \"'\");\n          }\n\n          // Ignore invalid checks\n          if (!(check[param] && typeof check[param].test == \"function\")) {\n            return;\n          }\n\n          // Invalid parameter\n          if (!check[param].test(params[param])) {\n            throw new Error(\"Parameter '\" + param + \"' is invalid\");\n          }\n        });\n      }\n    },\n\n    /**\n     * Configure request.\n     *\n     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.\n     * @param config {Map} Configuration.\n     * @param data {Map} Data.\n     */\n    __configureRequest: function(req, config, data) {\n      req.setUrl(config.url);\n\n      if (!req.setMethod && config.method !== \"GET\") {\n        throw new Error(\"Request (\" + req.classname + \") doesn't support other HTTP methods than 'GET'\");\n      }\n\n      if (req.setMethod) {\n        req.setMethod(config.method);\n      }\n\n      if (data) {\n        req.setRequestData(data);\n      }\n    },\n\n    /**\n     * Serialize data to JSON when content type indicates.\n     *\n     * @param req {qx.bom.request.SimpleXhr|qx.io.request.AbstractRequest} Request.\n     * @param config {Map} Configuration.\n     * @param data {Map} Data.\n     */\n    __configureJsonRequest: function(req, config, data) {\n      if (data) {\n        var contentType = req.getRequestHeader(\"Content-Type\");\n\n        if (req.getMethod && qx.util.Request.methodAllowsRequestBody(req.getMethod())) {\n          if ((/application\\/.*\\+?json/).test(contentType)) {\n            data = qx.lang.Json.stringify(data);\n            req.setRequestData(data);\n          }\n        }\n      }\n    },\n\n    /**\n     * Abort action.\n     *\n     * @param varargs {String|Number} Action of which all invocations to abort\n     *  (when string), or a single invocation of an action to abort (when number)\n     */\n    abort: function(varargs) {\n      if (qx.lang.Type.isNumber(varargs)) {\n        var id = varargs;\n        var post = qx.core.ObjectRegistry.getPostId();\n        var req = qx.core.ObjectRegistry.fromHashCode(id + post);\n        if (req) {\n          req.abort();\n        }\n      } else {\n        var action = varargs;\n        var reqs = this.__requests[action];\n        if (this.__requests[action]) {\n          reqs.forEach(function(req) {\n            req.abort();\n          });\n        }\n      }\n    },\n\n    /**\n     * Resend request associated to action.\n     *\n     * Replays parameters given when action was invoked originally.\n     *\n     * @param action {String} Action to refresh.\n     */\n    refresh: function(action) {\n      this.invoke(action, this.__routes[action].params);\n    },\n\n    /**\n     * Periodically invoke action.\n     *\n     * Replays parameters given when action was invoked originally. When the\n     * action was not yet invoked and requires parameters, parameters must be\n     * given.\n     *\n     * Please note that IE tends to cache overly aggressive. One work-around is\n     * to disable caching on the client side by configuring the request with\n     * <code>setCache(false)</code>. If you control the server, a better\n     * work-around is to include appropriate headers to explicitly control\n     * caching. This way you still avoid requests that can be correctly answered\n     * from cache (e.g. when nothing has changed since the last poll). Please\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\n     * XMLHttpRequest Caching Test</a> for available options.\n     *\n     * @lint ignoreUnused(intervalListener)\n     *\n     * @param action {String} Action to poll.\n     * @param interval {Number} Interval in ms.\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\n     *   invoke a call immediately.\n     */\n    poll: function(action, interval, params, immediately) {\n      // Dispose timer previously created for action\n      if (this.__pollTimers[action]) {\n        this.stopPollByAction(action);\n      }\n\n      // Fallback to previous params\n      if (typeof params == \"undefined\") {\n        params = this.__routes[action].params;\n      }\n\n      // Invoke immediately\n      if (immediately) {\n        this.invoke(action, params);\n      }\n\n      var intervalListener = (function(scope) {\n        return function() {\n          var req = scope.__requests[action][0];\n          if (!immediately && !req) {\n            scope.invoke(action, params);\n            return;\n          }\n          if (req.isDone() || req.isDisposed()) {\n            scope.refresh(action);\n          }\n        };\n      })(this);\n\n      this._startPoll(action, intervalListener, interval);\n    },\n\n\n    /**\n     * Start a poll process.\n     *\n     * @param action {String} Action to poll.\n     * @param listener {Function} The function to repeatedly execute at the given interval.\n     * @param interval {Number} Interval in ms.\n     */\n    _startPoll: function(action, listener, interval) {\n      this.__pollTimers[action] = {\n        \"id\": window.setInterval(listener, interval),\n        \"interval\": interval,\n        \"listener\": listener\n      };\n    },\n\n    /**\n     * Stops a poll process by the associated action.\n     *\n     * @param action {String} Action to poll.\n     */\n    stopPollByAction: function(action) {\n      if (action in this.__pollTimers) {\n        var intervalId = this.__pollTimers[action].id;\n        window.clearInterval(intervalId);\n      }\n    },\n\n    /**\n     * Restarts a poll process by the associated action.\n     *\n     * @param action {String} Action to poll.\n     */\n    restartPollByAction: function(action) {\n      if (action in this.__pollTimers) {\n        var timer = this.__pollTimers[action];\n        this.stopPollByAction(action);\n        this._startPoll(action, timer.listener, timer.interval);\n      }\n    },\n\n    /**\n     * Long-poll action.\n     *\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\n     * server signals new data. The server determines when new data is available,\n     * while the client keeps open a request. Requires configuration on the\n     * server side. Basically, the server must not close a connection until\n     * new data is available. For a high level introduction to long-polling,\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\n     * Ajax with long polling</a>.\n     *\n     * Uses {@link #refresh} internally. Make sure you understand the\n     * implications of IE's tendency to cache overly aggressive.\n     *\n     * Note no interval is given on the client side.\n     *\n     * @lint ignoreUnused(longPollHandler)\n     *\n     * @param action {String} Action to poll.\n     * @return {String} Id of handler responsible for long-polling. To stop\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\n     */\n    longPoll: function(action) {\n      var res = this,\n          lastResponse,               // Keep track of last response\n          immediateResponseCount = 0; // Count immediate responses\n\n      // Throttle to prevent high load on server and client\n      function throttle() {\n        var isImmediateResponse =\n          lastResponse &&\n          ((new Date()) - lastResponse) < res._getThrottleLimit();\n\n        if (isImmediateResponse) {\n          immediateResponseCount += 1;\n          if (immediateResponseCount > res._getThrottleCount()) {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              qx.Bootstrap.debug(\"Received successful response more than \" +\n                res._getThrottleCount() + \" times subsequently, each within \" +\n                res._getThrottleLimit() + \" ms. Throttling.\");\n            }\n            return true;\n          }\n        }\n\n        // Reset counter on delayed response\n        if (!isImmediateResponse) {\n          immediateResponseCount = 0;\n        }\n\n        return false;\n      }\n\n      var handlerId = this.__longPollHandlers[action] =\n        this.addListener(action + \"Success\", function longPollHandler() {\n          if (res.isDisposed()) {\n            return;\n          }\n\n          if (!throttle()) {\n            lastResponse = new Date();\n            res.refresh(action);\n          }\n        });\n\n      this.invoke(action);\n      return handlerId;\n    },\n\n    /**\n     * Get request configuration for action and parameters.\n     *\n     * This is were placeholders are replaced with parameters.\n     *\n     * @param action {String} Action associated to request.\n     * @param params {Map} Parameters to embed in request.\n     * @return {Map} Map of configuration settings. Has the properties\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\n     */\n    _getRequestConfig: function(action, params) {\n      var route = this.__routes[action];\n\n      // Not modify original params\n      var params = qx.lang.Object.clone(params);\n\n      if (!qx.lang.Type.isArray(route)) {\n        throw new Error(\"No route for action \" + action);\n      }\n\n      var method = route[0],\n          url = this.__baseUrl !== null ? this.__baseUrl + route[1] : route[1],\n          check = route[2],\n          placeholders = qx.bom.rest.Resource.placeholdersFromUrl(url);\n\n      params = params || {};\n\n      placeholders.forEach(function(placeholder) {\n        // Placeholder part of template and default value\n        var re = new RegExp(\"{\" + placeholder + \"=?(\\\\w+)?}\"),\n            defaultValue = url.match(re)[1];\n\n        // Fill in default or empty string when missing\n        if (typeof params[placeholder] === \"undefined\") {\n          if (defaultValue) {\n            params[placeholder] = defaultValue;\n          } else {\n            params[placeholder] = \"\";\n          }\n        }\n\n        url = url.replace(re, params[placeholder]);\n      });\n\n      return {method: method, url: url, check: check};\n    },\n\n    /**\n     * Override to adjust the throttle limit.\n     * @return {Integer} Throttle limit in milliseconds\n     */\n    _getThrottleLimit: function() {\n      return qx.bom.rest.Resource.POLL_THROTTLE_LIMIT;\n    },\n\n    /**\n     * Override to adjust the throttle count.\n     * @return {Integer} Throttle count\n     */\n    _getThrottleCount: function() {\n      return qx.bom.rest.Resource.POLL_THROTTLE_COUNT;\n    },\n\n    /**\n     * Map actions from description.\n     *\n     * Allows to decoratively define routes.\n     *\n     * @param description {Map} Map that defines the routes.\n     */\n    __mapFromDescription: function(description) {\n      Object.keys(description).forEach(function(action) {\n        var route = description[action],\n            method = route.method,\n            url = route.url,\n            check = route.check;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertString(method, \"Method must be string for route '\" + action + \"'\");\n          qx.core.Assert.assertString(url, \"URL must be string for route '\" + action + \"'\");\n        }\n\n        this.map(action, method, url, check);\n      }, this);\n    },\n\n    /**\n     * Declare event at runtime.\n     *\n     * @param type {String} Type of event.\n     */\n    __declareEvent: function(type) {\n      if (!this.constructor.$$events) {\n        this.constructor.$$events = {};\n      }\n\n      if (!this.constructor.$$events[type]) {\n        this.constructor.$$events[type] = \"qx.bom.rest.Resource\";\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      DISPOSER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns true if the object is disposed.\n     *\n     * @return {Boolean} Whether the object has been disposed\n     */\n    isDisposed : function() {\n      return this.$$disposed || false;\n    },\n\n\n    /**\n     * Dispose this object\n     *\n     */\n    dispose : function()\n    {\n      // Check first\n      if (this.$$disposed) {\n        return;\n      }\n\n      // Mark as disposed (directly, not at end, to omit recursions)\n      this.$$disposed = true;\n\n      // Debug output\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 2) {\n          qx.Bootstrap.debug(this, \"Disposing \" + this.classname + \"[\" + this.toHashCode() + \"]\");\n        }\n      }\n\n      this.destruct();\n\n      // Additional checks\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 0)\n        {\n          var key, value;\n          for (key in this)\n          {\n            value = this[key];\n\n            // Check for Objects but respect values attached to the prototype itself\n            if (value !== null && typeof value === \"object\" && !(qx.Bootstrap.isString(value)))\n            {\n              // Check prototype value\n              // undefined is the best, but null may be used as a placeholder for\n              // private variables (hint: checks in qx.Class.define). We accept both.\n              if (this.constructor.prototype[key] != null) {\n                continue;\n              }\n\n              var ff2 = navigator.userAgent.indexOf(\"rv:1.8.1\") != -1;\n              var ie6 = navigator.userAgent.indexOf(\"MSIE 6.0\") != -1;\n              // keep the old behavior for IE6 and FF2\n              if (ff2 || ie6) {\n                if (qx.core.Object && value instanceof qx.core.Object || qx.core.Environment.get(\"qx.debug.dispose.level\") > 1) {\n                  qx.Bootstrap.warn(this, \"Missing destruct definition for '\" + key + \"' in \" + this.classname + \"[\" + this.toHashCode() + \"]: \" + value);\n                  delete this[key];\n                }\n              } else {\n                if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 1) {\n                  qx.Bootstrap.warn(this, \"Missing destruct definition for '\" + key + \"' in \" + this.classname + \"[\" + this.toHashCode() + \"]: \" + value);\n                  delete this[key];\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * Destructs the Resource.\n     *\n     * All created requests, routes and pollTimers will be disposed.\n     */\n    destruct: function() {\n      var action;\n\n      for (action in this.__requests) {\n        if (this.__requests[action]) {\n          this.__requests[action].forEach(function(req) {\n            req.dispose();\n          });\n        }\n      }\n\n      if (this.__pollTimers) {\n        for (action in this.__pollTimers) {\n          this.stopPollByAction(action);\n        }\n      }\n\n      if (this.__longPollHandlers) {\n        for (action in this.__longPollHandlers) {\n          var id = this.__longPollHandlers[action];\n          this.removeListenerById(id);\n        }\n      }\n\n      this.__requests = this.__routes = this.__pollTimers = null;\n    }\n  }\n});\n"
  ]
}