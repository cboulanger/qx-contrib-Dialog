{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/bom/FileReader.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "_fileReader",
    "window",
    "FileReader",
    "_handleLoadStart",
    "lang",
    "Function",
    "bind",
    "_handleProgress",
    "_handleLoad",
    "_handleAbort",
    "_handleError",
    "_handleLoadEnd",
    "bom",
    "Event",
    "addNativeListener",
    "events",
    "statics",
    "getNumFiles",
    "inputElement",
    "files",
    "length",
    "getFile",
    "index",
    "members",
    "readAsArrayBuffer",
    "fileObj",
    "readAsBinaryString",
    "readAsText",
    "encoding",
    "readAsDataURL",
    "e",
    "fireDataEvent",
    "progress",
    "data",
    "content",
    "target",
    "result",
    "destruct",
    "removeNativeListener"
  ],
  "mappings": "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",
  "file": "FileReader.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2011 Derrell Lipman\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Derrell Lipman(derrell)\n\n************************************************************************ */\n\n\n/**\n * FileReaders allow retrieving the data from a local file, after the file\n * name was selected by an &lt;input type=\"file\"&gt; element.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n * For more information see:\n * http://www.w3.org/TR/FileAPI/\n */\nqx.Class.define(\"qx.bom.FileReader\",\n{\n  extend : qx.core.Object,\n  implement: [ qx.core.IDisposable ],\n\n\n  /**\n   * Create a new instance.\n   */\n  construct: function()\n  {\n    // Call the superclass constructor\n    this.base(arguments);\n\n    // Get a FileReader object\n    this._fileReader = new window.FileReader();\n\n    // Bind native handlers to this instance\n    this._handleLoadStart = qx.lang.Function.bind(this._handleLoadStart, this);\n    this._handleProgress  = qx.lang.Function.bind(this._handleProgress, this);\n    this._handleLoad      = qx.lang.Function.bind(this._handleLoad, this);\n    this._handleAbort     = qx.lang.Function.bind(this._handleAbort, this);\n    this._handleError     = qx.lang.Function.bind(this._handleError, this);\n    this._handleLoadEnd   = qx.lang.Function.bind(this._handleLoadEnd, this);\n\n    // Be notified of all events\n    qx.bom.Event.addNativeListener(this._fileReader,\n                                   \"loadstart\",\n                                   this._handleLoadStart);\n\n    qx.bom.Event.addNativeListener(this._fileReader,\n                                   \"progress\",\n                                   this._handleProgress);\n\n    qx.bom.Event.addNativeListener(this._fileReader,\n                                   \"load\",\n                                   this._handleLoad);\n\n    qx.bom.Event.addNativeListener(this._fileReader,\n                                   \"abort\",\n                                   this._handleAbort);\n\n    qx.bom.Event.addNativeListener(this._fileReader,\n                                   \"error\",\n                                   this._handleError);\n\n    qx.bom.Event.addNativeListener(this._fileReader,\n                                   \"loadend\",\n                                   this._handleLoadEnd);\n  },\n\n\n  events :\n  {\n    /** Fired when progress has begun. */\n    \"loadstart\" : \"qx.event.type.Data\",\n\n    /** Fired while making progress, presumably at a minimum of every 50ms */\n    \"progress\"  : \"qx.event.type.Data\",\n\n    /** Fired when an error occurs */\n    \"error\": \"qx.event.type.Data\",\n\n    /**\n     * Fired when progression has failed, after the last \"progress\" has been\n     * dispatched, or after \"loadstart\" has been dispatched, if \"progress\" has\n     * not been dispatched\"\n     */\n    \"abort\"  : \"qx.event.type.Data\",\n\n    /** Fired when progression is successful */\n    \"load\"  : \"qx.event.type.Data\",\n\n    /**\n     * Fired when progress has stopped, after any of \"error\", \"abort\", or\n     * \"load\" have been dispatched.\n     */\n    \"loadend\"  : \"qx.event.type.Data\"\n  },\n\n\n  statics :\n  {\n    /**\n     * Return the number of files selected by the user, from an &lt;input\n     * type=\"file\"&gt; element.\n     *\n     * @param inputElement {Element}\n     *   The Element created as a result of an &lt;input type=\"file\"&gt; tag.\n     *\n     * @return {Integer}\n     *   The number of selected files.\n     */\n    getNumFiles : function(inputElement)\n    {\n        return inputElement.files.length;\n    },\n\n    /**\n     * Return the native File object selected from an &lt;input type=\"file\"&gt;\n     * element.\n     *\n     * @param inputElement {Element}\n     *   The Element created as a result of an &lt;input type=\"file\"&gt; tag.\n     *\n     * @param index {Integer}\n     *   The index of the selected file to return.\n     *\n     * @return {File}\n     *   The File object associated with the selected file name.\n     */\n    getFile : function(inputElement, index)\n    {\n        return inputElement.files[index];\n    }\n  },\n\n\n  members :\n  {\n    /** The native FileReader object associated this instance */\n    _fileReader : null,\n\n    /**\n     * Begin reading from the file referenced by the specified file\n     * object. This is an asynchronous request. When the file is fully loaded,\n     * the \"load\" event will be fired.\n     *\n     * The data will be provided as an ArrayBuffer object.\n     *\n     * @param fileObj {File}\n     *   A File object, as obtained by calling {@link #getFile} with an\n     *   element of type &lt;input type=\"file\"&gt;.\n     */\n    readAsArrayBuffer : function(fileObj)\n    {\n      this._fileReader.readAsArrayBuffer(fileObj);\n    },\n\n    /**\n     * Begin reading from the file referenced by the specified file\n     * object. This is an asynchronous request. When the file is fully loaded,\n     * the \"load\" event will be fired.\n     *\n     * The data will be provided in a binary format where each byte is in the\n     * range [0,255].\n     *\n     * NOTE: On FireFox, this method works if the page was loaded via the\n     * file:// protocol. In Chrome, it does not.\n     *\n     * @param fileObj {File}\n     *   A File object, as obtained by calling {@link #getFile} with an\n     *   element of type &lt;input type=\"file\"&gt;.\n     */\n    readAsBinaryString : function(fileObj)\n    {\n      this._fileReader.readAsBinaryString(fileObj);\n    },\n\n    /**\n     * Begin reading from the file referenced by the specified file\n     * object. This is an asynchronous request. When the file is fully loaded,\n     * the \"load\" event will be fired.\n     *\n     * The data will be provided as text, in the specified encoding.\n     *\n     * NOTE: On FireFox, this method works if the page was loaded via the\n     * file:// protocol. In Chrome, it does not.\n     *\n     * @param fileObj {File}\n     *   A File object, as obtained by calling {@link #getFile} with an\n     *   element of type &lt;input type=\"file\"&gt;.\n     *\n     * @param encoding {String?\"UTF-8\"}\n     *   The encoding for the resulting string.\n     */\n    readAsText : function(fileObj, encoding)\n    {\n      this._fileReader.readAsText(fileObj, encoding);\n    },\n\n    /**\n     * Begin reading from the file referenced by the specified file\n     * object. This is an asynchronous request. When the file is fully loaded,\n     * the \"load\" event will be fired.\n     *\n     * The data is returned in DataURL format.\n     *\n     * NOTE: On FireFox, this method works if the page was loaded via the\n     * file:// protocol. In Chrome, it does not.\n     *\n     * @param fileObj {File}\n     *   A File object, as obtained by calling {@link #getFile} with an\n     *   element of type &lt;input type=\"file\"&gt;.\n     */\n    readAsDataURL : function(fileObj)\n    {\n      this._fileReader.readAsDataURL(fileObj);\n    },\n\n    /**\n     * \"loadstart\" handler\n     *\n     * @param e {Object}\n     *   Object which contains a 'progress' object which contains the members:\n     *   - lengthComputable {Boolean} True if length is known; false otherwise\n     *   - loaded {Number} The number of bytes transferred so far\n     *   - total {Number} The length of the entire body being transferred\n     */\n    _handleLoadStart: function(e)\n    {\n      this.fireDataEvent(\"loadstart\", { progress : e.data });\n    },\n\n    /**\n     * \"progress\" handler\n     *\n     * @param e {Object}\n     *   Object which contains a 'progress' object which contains the members:\n     *   - lengthComputable {Boolean} True if length is known; false otherwise\n     *   - loaded {Number} The number of bytes transferred so far\n     *   - total {Number} The length of the entire body being transferred\n     */\n    _handleProgress: function(e)\n    {\n      this.fireDataEvent(\"progress\", { progress : e.data });\n    },\n\n    /**\n     * \"error\" handler\n     *\n     * @param e {Object}\n     *   Object which contains a 'progress' object which contains the members:\n     *   - lengthComputable {Boolean} True if length is known; false otherwise\n     *   - loaded {Number} The number of bytes transferred so far\n     *   - total {Number} The length of the entire body being transferred\n     */\n    _handleError: function(e)\n    {\n      this.fireDataEvent(\"error\", { progress : e.data });\n    },\n\n    /**\n     * \"abort\" handler\n     *\n     * @param e {Object}\n     *   Object which contains a 'progress' object which contains the members:\n     *   - lengthComputable {Boolean} True if length is known; false otherwise\n     *   - loaded {Number} The number of bytes transferred so far\n     *   - total {Number} The length of the entire body being transferred\n     */\n    _handleAbort: function(e)\n    {\n      this.fireDataEvent(\"abort\", { progress : e.data });\n    },\n\n    /**\n     * \"load\" handler\n     *\n     * @param e {Object}\n     *   Object which contains:\n     *   - A 'progress' object which contains the members:\n     *     - lengthComputable {Boolean} True if length is known; false otherwise\n     *     - loaded {Number} The number of bytes transferred so far\n     *     - total {Number} The length of the entire body being transferred\n     *   - A 'content' member which contains the loaded file content\n     */\n    _handleLoad: function(e)\n    {\n      // Add the result to the event data\n      this.fireDataEvent(\"load\",\n                         {\n                           progress : e.data,\n                           content : e.target.result\n                         });\n    },\n\n    /**\n     * \"loadend\" handler\n     *\n     * @param e {Object}\n     *   Object which contains a 'progress' object which contains  the members:\n     *   - lengthComputable {Boolean} True if length is known; false otherwise\n     *   - loaded {Number} The number of bytes transferred so far\n     *   - total {Number} The length of the entire body being transferred\n     */\n    _handleLoadEnd: function(e)\n    {\n      this.fireDataEvent(\"loadend\", { progress : e.data });\n    }\n  },\n\n\n  destruct : function()\n  {\n    // Remove all listeners\n    qx.bom.Event.removeNativeListener(this._fileReader,\n                                      \"loadstart\",\n                                      this._handleLoadStart);\n\n    qx.bom.Event.removeNativeListener(this._fileReader,\n                                      \"progress\",\n                                      this._handleProgress);\n\n    qx.bom.Event.removeNativeListener(this._fileReader,\n                                      \"load\",\n                                      this._handleLoad);\n\n    qx.bom.Event.removeNativeListener(this._fileReader,\n                                      \"abort\",\n                                      this._handleAbort);\n\n    qx.bom.Event.removeNativeListener(this._fileReader,\n                                      \"error\",\n                                      this._handleError);\n\n    qx.bom.Event.removeNativeListener(this._fileReader,\n                                      \"loadend\",\n                                      this._handleLoadEnd);\n\n    this._fileReader = null;\n  }\n});\n"
  ]
}