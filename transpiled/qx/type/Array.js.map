{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/type/Array.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "type",
    "BaseArray",
    "construct",
    "length_or_items",
    "apply",
    "arguments",
    "members",
    "clone",
    "prototype",
    "concat",
    "insertAt",
    "obj",
    "i",
    "splice",
    "insertBefore",
    "obj2",
    "indexOf",
    "push",
    "insertAfter",
    "length",
    "removeAt",
    "removeAll",
    "append",
    "arr",
    "arg",
    "__toPlainArray",
    "Array",
    "prepend",
    "core",
    "Assert",
    "assertArray",
    "remove",
    "contains"
  ],
  "mappings": "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",
  "file": "Array.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * An extended array class which adds a lot of often used\n * convenience methods to the regular array like <code>remove</code> or\n * <code>contains</code>.\n */\nqx.Class.define(\"qx.type.Array\",\n{\n  extend : qx.type.BaseArray,\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Creates a new Array with the given length or the listed items.\n   *\n   * <pre class=\"javascript\">\n   * var arr1 = new qx.type.Array(length);\n   * var arr2 = new qx.type.Array(elem0, elem1, ..., elemN);\n   * </pre>\n   *\n   * * <code>length</code>: The initial length of the array.\n   * * <code>item1, item2. .. itemN</code>:  the items that will make up the newly created array\n   *\n   * @param length_or_items {Integer|var?null} The initial size of the collection\n   *        OR an argument list of elements.\n   */\n  construct : function(length_or_items) {\n    qx.type.BaseArray.apply(this,arguments);\n  },\n\n\n  members :\n  {\n    /**\n     * Returns a clone of the array. Primitive values are copied.\n     * Others are referenced.\n     *\n     * @return {Array} Cloned array instance\n     * @signature function()\n     */\n    clone : qx.type.BaseArray.prototype.concat,\n\n\n    /**\n     * Insert an element at a given position\n     *\n     * @param obj {var} the element to insert\n     * @param i {Integer} position where to insert the element into the arr\n     * @return {Array} the array\n     */\n    insertAt : function(obj, i)\n    {\n      this.splice(i, 0, obj);\n      return this;\n    },\n\n\n    /**\n     * Insert an element before a given second element\n     *\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 before this object\n     * @return {Array} the array\n     */\n    insertBefore : function(obj, obj2)\n    {\n      var i = this.indexOf(obj2);\n\n      if (i == -1) {\n        this.push(obj);\n      } else {\n        this.splice(i, 0, obj);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Insert an element after a given second element\n     *\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 after this object\n     * @return {Array} the array\n     */\n    insertAfter : function(obj, obj2)\n    {\n      var i = this.indexOf(obj2);\n\n      if (i == -1 || i == (this.length - 1)) {\n        this.push(obj);\n      } else {\n        this.splice(i + 1, 0, obj);\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Remove an element at the given index\n     *\n     * @param i {Integer} index of the element to be removed\n     * @return {var} The removed element.\n     */\n    removeAt : function(i) {\n      return this.splice(i, 1)[0];\n    },\n\n\n    /**\n     * Remove all elements\n     *\n     * @return {Array} empty array\n     */\n    removeAll : function()\n    {\n      this.length = 0;\n      return this;\n    },\n\n\n    /**\n     * Append the elements of the given array\n     *\n     * @param arr {Array} the elements of this array will be appended to other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    append : function(arr)\n    {\n      var arg = this.__toPlainArray(arr);\n      Array.prototype.push.apply(this, arg);\n      return this;\n    },\n\n\n    /**\n     * Prepend the elements of the given array.\n     *\n     * @param arr {Array} The elements of this array will be prepended to other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    prepend : function(arr)\n    {\n      var arg = this.__toPlainArray(arr);\n      Array.prototype.splice.apply(this, [0, 0].concat(arg));\n      return this;\n    },\n\n\n    /**\n     * Helper which checks for the given element and converts that to a\n     * native array if necessary.\n     *\n     * @param arr {Array} Native or qx.type.BaseArray to convert.\n     * @return {Array} A native array.\n     */\n    __toPlainArray : function(arr) {\n      // this check is important because Opera throws an uncatchable error if\n      // apply is called without an arr as second argument.\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertArray(arr, \"The parameter must be an array.\");\n      }\n\n      var arg = arr;\n      // concat needs a plain array as argument [BUG #4488]\n      if (arr instanceof qx.type.BaseArray) {\n        arg = [];\n        for (var i=0; i < arr.length; i++) {\n          arg[i] = arr[i];\n        };\n      }\n      return arg;\n    },\n\n\n    /**\n     * Remove an element\n     *\n     * @param obj {var} element to be removed from the array\n     * @return {var} the removed element\n     */\n    remove : function(obj)\n    {\n      var i = this.indexOf(obj);\n      if (i != -1)\n      {\n        this.splice(i, 1);\n        return obj;\n      }\n    },\n\n\n    /**\n     * Whether the array contains the given element\n     *\n     * @param obj {var} object to look for\n     * @return {Boolean} whether the array contains the element\n     */\n    contains : function(obj) {\n      return this.indexOf(obj) !== -1;\n    }\n  }\n});\n"
  ]
}