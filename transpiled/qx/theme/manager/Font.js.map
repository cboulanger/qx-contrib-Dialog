{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/theme/manager/Font.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "util",
    "ValueManager",
    "implement",
    "core",
    "IDisposable",
    "construct",
    "$$fontBootstrap",
    "_manifestFonts",
    "properties",
    "theme",
    "check",
    "nullable",
    "apply",
    "event",
    "members",
    "resolveDynamic",
    "value",
    "dynamic",
    "_dynamic",
    "bom",
    "Font",
    "resolve",
    "cache",
    "resolved",
    "getTheme",
    "fonts",
    "font",
    "__getFontClass",
    "fo",
    "comparisonString",
    "setComparisonString",
    "set",
    "isDynamic",
    "undefined",
    "__resolveInclude",
    "fontName",
    "include",
    "fontToInclude",
    "lang",
    "Object",
    "mergeWith",
    "_applyTheme",
    "dest",
    "key",
    "themed",
    "dispose",
    "source",
    "assign",
    "_setDynamic",
    "config",
    "sources",
    "webfonts",
    "WebFont",
    "destruct",
    "_disposeMap",
    "manager"
  ],
  "mappings": "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",
  "file": "Font.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n************************************************************************ */\n\n/**\n * Manager for font themes\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n * @ignore(qx.$$fontBootstrap)\n */\nqx.Class.define(\"qx.theme.manager.Font\",\n{\n  type : \"singleton\",\n  extend : qx.util.ValueManager,\n  implement : [ qx.core.IDisposable ],\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n\n    // Grab bootstrap info\n    if (qx.$$fontBootstrap) {\n      this._manifestFonts = qx.$$fontBootstrap;\n      delete qx.$$fontBootstrap;\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** the currently selected font theme */\n    theme :\n    {\n      check : \"Theme\",\n      nullable : true,\n      apply : \"_applyTheme\",\n      event : \"changeTheme\"\n    }\n  },\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    _manifestFonts : null,\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {var} return the (translated) result of the incoming value\n     */\n    resolveDynamic : function(value)\n    {\n      var dynamic = this._dynamic;\n      return value instanceof qx.bom.Font ? value : dynamic[value];\n    },\n\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value,\n     * (if available), otherwise returns the original value\n     * @param value {String} Value to resolve\n     * @return {var} either returns the (translated) result of the incoming\n     * value or the value itself\n     */\n    resolve : function(value)\n    {\n      var cache = this._dynamic;\n      var resolved = cache[value];\n\n      if (resolved) {\n        return resolved;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && theme.fonts[value])\n      {\n        var font = this.__getFontClass(theme.fonts[value]);\n        var fo = (new font);\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (theme.fonts[value].comparisonString) {\n          fo.setComparisonString(theme.fonts[value].comparisonString);\n        }\n\n        return cache[value] = fo.set(theme.fonts[value]);\n      }\n\n      return value;\n    },\n\n\n    /**\n     * Whether a value is interpreted dynamically\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {Boolean} returns true if the value is interpreted dynamically\n     */\n    isDynamic : function(value)\n    {\n      var cache = this._dynamic;\n\n      if (value && (value instanceof qx.bom.Font || cache[value] !== undefined))\n      {\n        return true;\n      }\n\n      // If the font instance is not yet cached create a new one to return\n      // This is true whenever a runtime include occurred (using \"qx.Theme.include\"\n      // or \"qx.Theme.patch\"), since these methods only merging the keys of\n      // the theme and are not updating the cache\n      var theme = this.getTheme();\n      if (theme !== null && value && theme.fonts[value])\n      {\n        var font = this.__getFontClass(theme.fonts[value]);\n        var fo = (new font);\n\n        // Inject information about custom charcter set tests before we apply the\n        // complete blob in one.\n        if (theme.fonts[value].comparisonString) {\n          fo.setComparisonString(theme.fonts[value].comparisonString);\n        }\n\n        cache[value] = fo.set(theme.fonts[value]);\n        return true;\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Checks for includes and resolves them recursively\n     *\n     * @param fonts {Map} all fonts of the theme\n     * @param fontName {String} font name to include\n     */\n    __resolveInclude : function(fonts, fontName)\n    {\n      if (fonts[fontName].include)\n      {\n        // get font infos out of the font theme\n        var fontToInclude = fonts[fonts[fontName].include];\n\n        // delete 'include' key - not part of the merge\n        fonts[fontName].include = null;\n        delete fonts[fontName].include;\n\n        fonts[fontName] = qx.lang.Object.mergeWith(fonts[fontName], fontToInclude, false);\n\n        this.__resolveInclude(fonts, fontName);\n      }\n    },\n\n\n    // apply method\n    _applyTheme : function(value)\n    {\n      var dest = this._dynamic;\n\n      for (var key in dest)\n      {\n        if (dest[key].themed)\n        {\n          dest[key].dispose();\n          delete dest[key];\n        }\n      }\n\n      if (value)\n      {\n        var source = this._manifestFonts ? Object.assign(value.fonts, this._manifestFonts) : value.fonts;\n\n        for (var key in source)\n        {\n          if (source[key].include && source[source[key].include]) {\n            this.__resolveInclude(source, key);\n          }\n\n          var font = this.__getFontClass(source[key]);\n          var fo = (new font);\n\n          // Inject information about custom charcter set tests before we apply the\n          // complete blob in one.\n          if (source[key].comparisonString) {\n            fo.setComparisonString(source[key].comparisonString);\n          }\n\n          dest[key] = fo.set(source[key]);\n          dest[key].themed = true;\n        }\n      }\n      this._setDynamic(dest);\n    },\n\n    /**\n     * Decides which Font class should be used based on the theme configuration\n     *\n     * @param config {Map} The font's configuration map\n     * @return {Class}\n     */\n    __getFontClass : function(config)\n    {\n      if (config.sources) {\n        return qx.bom.webfonts.WebFont;\n      }\n      return qx.bom.Font;\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this._disposeMap(\"_dynamic\");\n  }\n});\n"
  ]
}