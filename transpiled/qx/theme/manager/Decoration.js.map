{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/theme/manager/Decoration.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "statics",
    "CSS_CLASSNAME_PREFIX",
    "construct",
    "__rules",
    "__legacyIe",
    "Environment",
    "get",
    "properties",
    "theme",
    "check",
    "nullable",
    "apply",
    "event",
    "members",
    "__dynamic",
    "getCssClassName",
    "value",
    "prefix",
    "manager",
    "Decoration",
    "lang",
    "Type",
    "isString",
    "toHashCode",
    "addCssClass",
    "sheet",
    "ui",
    "style",
    "Stylesheet",
    "getInstance",
    "instance",
    "selector",
    "hasRule",
    "resolve",
    "Error",
    "css",
    "styles",
    "getStyles",
    "keys",
    "sort",
    "forEach",
    "key",
    "isObject",
    "innerCss",
    "innerStyles",
    "inner",
    "innerKey",
    "innerSelector",
    "push",
    "addRule",
    "removeAllCssClasses",
    "i",
    "length",
    "removeRule",
    "cache",
    "resolved",
    "getTheme",
    "decorations",
    "decorator",
    "decoration",
    "Decorator",
    "recurseDecoratorInclude",
    "currentEntry",
    "name",
    "include",
    "set",
    "isValidPropertyValue",
    "isDynamic",
    "clazz",
    "constructor",
    "hasInterface",
    "IDecorator",
    "isCached",
    "contains",
    "_applyTheme",
    "old",
    "aliasManager",
    "util",
    "AliasManager",
    "alias",
    "aliases",
    "remove",
    "add",
    "_disposeMap",
    "clear",
    "isDisposed",
    "refresh",
    "destruct"
  ],
  "mappings": "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",
  "file": "Decoration.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Manager for decoration themes\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.theme.manager.Decoration\",\n{\n  type : \"singleton\",\n  extend : qx.core.Object,\n  implement : [ qx.core.IDisposable ],\n\n\n  statics :\n  {\n    /** The prefix for all created CSS classes*/\n    CSS_CLASSNAME_PREFIX : \"qx-\"\n  },\n\n\n\n  construct : function() {\n    this.base(arguments);\n    this.__rules = [];\n    this.__legacyIe = (qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n      qx.core.Environment.get(\"browser.documentmode\") < 9);\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** Selected decoration theme */\n    theme :\n    {\n      check : \"Theme\",\n      nullable : true,\n      apply : \"_applyTheme\",\n      event : \"changeTheme\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __dynamic : null,\n    __rules : null,\n    __legacyIe : false,\n\n\n    /**\n     * Returns the name which will be / is used as css class name.\n     * @param value {String|qx.ui.decoration.IDecorator} The decorator string or instance.\n     * @return {String} The css class name.\n     */\n    getCssClassName : function(value) {\n      var prefix = qx.theme.manager.Decoration.CSS_CLASSNAME_PREFIX;\n      if (qx.lang.Type.isString(value)) {\n        return prefix + value;\n      } else {\n        return prefix + value.toHashCode();\n      }\n    },\n\n\n    /**\n     * Adds a css class to the global stylesheet for the given decorator.\n     * This includes resolving the decorator if it's a string.\n     * @param value {String|qx.ui.decoration.IDecorator} The decorator string or instance.\n     * @return {String} the css class name.\n     */\n    addCssClass : function(value) {\n      var sheet = qx.ui.style.Stylesheet.getInstance();\n\n      var instance = value;\n\n      value = this.getCssClassName(value);\n      var selector = \".\" + value;\n\n      if (sheet.hasRule(selector)) {\n        return value;\n      }\n\n      if (qx.lang.Type.isString(instance)) {\n        instance = this.resolve(instance);\n      }\n\n      if (!instance) {\n        throw new Error(\"Unable to resolve decorator '\" + value + \"'.\");\n      }\n\n      // create and add a CSS rule\n      var css = \"\";\n      var styles = instance.getStyles(true);\n      \n      // Sort the styles so that more specific styles come after the group styles, \n      // eg background-color comes after background. The sort order is alphabetical\n      // so that short cut rules come before actual\n      Object.keys(styles).sort().forEach(function(key) {\n        // if we find a map value, use it as pseudo class\n        if (qx.Bootstrap.isObject(styles[key])) {\n          var innerCss = \"\";\n          var innerStyles = styles[key];\n          var inner = false;\n          for (var innerKey in innerStyles) {\n            inner = true;\n            innerCss += innerKey + \":\" + innerStyles[innerKey] + \";\";\n          }\n          var innerSelector = this.__legacyIe ? selector :\n            selector + (inner ? \":\" : \"\");\n          this.__rules.push(innerSelector + key);\n          sheet.addRule(innerSelector + key, innerCss);\n          return;\n        }\n        css += key + \":\" + styles[key] + \";\";\n      }, this);\n\n      if (css) {\n        sheet.addRule(selector, css);\n        this.__rules.push(selector);\n      }\n\n      return value;\n    },\n\n\n    /**\n     * Removes all previously by {@link #addCssClass} created CSS rule from\n     * the global stylesheet.\n     */\n    removeAllCssClasses : function()\n    {\n      // remove old rules\n      for (var i=0; i < this.__rules.length; i++) {\n        var selector = this.__rules[i];\n        qx.ui.style.Stylesheet.getInstance().removeRule(selector);\n      };\n      this.__rules = [];\n    },\n\n\n    /**\n     * Returns the dynamically interpreted result for the incoming value\n     *\n     * @param value {String} dynamically interpreted idenfier\n     * @return {var} return the (translated) result of the incoming value\n     */\n    resolve : function(value)\n    {\n      if (!value) {\n        return null;\n      }\n\n      if (typeof value === \"object\") {\n        return value;\n      }\n\n      var cache = this.__dynamic;\n      if (!cache) {\n        cache = this.__dynamic = {};\n      }\n\n      var resolved = cache[value];\n      if (resolved) {\n        return resolved;\n      }\n\n      var theme = this.getTheme();\n      if (!theme) {\n        return null;\n      }\n\n      if(!theme.decorations[value]) {\n        return null;\n      }\n      \n      // create an empty decorator\n      var decorator = new qx.ui.decoration.Decorator();\n\n      // handle recursive decorator includes\n      var recurseDecoratorInclude = function(currentEntry, name) {\n        // follow the include chain to the topmost decorator entry\n        if(currentEntry.include && theme.decorations[currentEntry.include]) {\n          recurseDecoratorInclude(theme.decorations[currentEntry.include], currentEntry.include);\n        }\n\n        // apply styles from the included decorator, \n        // overwriting existing values.\n        if (currentEntry.style) {\n          decorator.set(currentEntry.style);\n        }\n      };\n\n      // start with the current decorator entry\n      recurseDecoratorInclude(theme.decorations[value], value);\n\n      cache[value] = decorator;\n      \n      return cache[value];\n    },\n\n\n    /**\n     * Whether the given value is valid for being used in a property\n     * with the 'check' configured to 'Decorator'.\n     *\n     * @param value {var} Incoming value\n     * @return {Boolean} Whether the value is valid for being used in a Decorator property\n     */\n    isValidPropertyValue : function(value)\n    {\n      if (typeof value === \"string\") {\n        return this.isDynamic(value);\n      }\n      else if (typeof value === \"object\")\n      {\n        var clazz = value.constructor;\n        return qx.Class.hasInterface(clazz, qx.ui.decoration.IDecorator);\n      }\n\n      return false;\n    },\n\n\n    /**\n     * Whether a value is interpreted dynamically\n     *\n     * @param value {String} dynamically interpreted identifier\n     * @return {Boolean} returns <code>true</code> if the value is interpreted dynamically\n     */\n    isDynamic : function(value)\n    {\n      if (!value) {\n        return false;\n      }\n\n      var theme = this.getTheme();\n      if (!theme) {\n        return false;\n      }\n\n      return !!theme.decorations[value];\n    },\n\n\n    /**\n     * Whether the given decorator is cached\n     *\n     * @param decorator {String|qx.ui.decoration.IDecorator} The decorator to check\n     * @return {Boolean} <code>true</code> if the decorator is cached\n     * @internal\n     */\n    isCached : function(decorator)\n    {\n      return !this.__dynamic ? false :\n        qx.lang.Object.contains(this.__dynamic, decorator);\n    },\n\n\n    // property apply\n    _applyTheme : function(value, old)\n    {\n      var aliasManager = qx.util.AliasManager.getInstance();\n\n      // remove old rules\n      this.removeAllCssClasses();\n\n      if (old)\n      {\n        for (var alias in old.aliases) {\n          aliasManager.remove(alias);\n        }\n      }\n\n      if (value)\n      {\n        for (var alias in value.aliases) {\n          aliasManager.add(alias, value.aliases[alias]);\n        }\n      }\n\n      this._disposeMap(\"__dynamic\");\n      this.__dynamic = {};\n    },\n\n\n    /**\n     * Clears internal caches and removes all previously created CSS classes.\n     */\n    clear : function()\n    {\n      // remove aliases\n      var aliasManager = qx.util.AliasManager.getInstance();\n\n      var theme = this.getTheme();\n      if (!aliasManager.isDisposed() && theme && theme.alias) {\n        for (var alias in theme.aliases) {\n          aliasManager.remove(alias, theme.aliases[alias]);\n        }\n      }\n\n      // remove old rules\n      this.removeAllCssClasses();\n\n      this._disposeMap(\"__dynamic\");\n      this.__dynamic = {};\n    },\n\n\n    /**\n     * Refreshes all decorator by clearing internal caches and re applying\n     * aliases.\n     */\n    refresh : function()\n    {\n      this.clear();\n\n      var aliasManager = qx.util.AliasManager.getInstance();\n      var theme = this.getTheme();\n      if (theme && theme.alias) {\n        for (var alias in theme.aliases) {\n          aliasManager.add(alias, theme.aliases[alias]);\n        }\n      }\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function() {\n    this.clear();\n  }\n});\n"
  ]
}