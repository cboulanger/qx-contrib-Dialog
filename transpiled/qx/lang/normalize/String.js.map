{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/lang/normalize/String.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "trim",
    "replace",
    "startsWith",
    "searchString",
    "position",
    "substr",
    "length",
    "endsWith",
    "subjectString",
    "toString",
    "isFinite",
    "Math",
    "floor",
    "lastIndex",
    "indexOf",
    "defer",
    "core",
    "Environment",
    "get",
    "String",
    "prototype",
    "lang",
    "normalize"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAyBAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,0BAApB,EAAgD;;AAE9CC,aAAU;;AAER;;;;;;;;AAQAC,YAAO,gBAAW;AAChB,eAAO,KAAKC,OAAL,CAAa,YAAb,EAA0B,EAA1B,CAAP;AACD,OAZO;;AAeR;;;;;;;;;;AAUAC,kBAAa,oBAAUC,YAAV,EAAwBC,QAAxB,EACb;AACEA,mBAAWA,YAAY,CAAvB;AACA,eAAO,KAAKC,MAAL,CAAYD,QAAZ,EAAsBD,aAAaG,MAAnC,MAA+CH,YAAtD;AACD,OA7BO;;AAgCR;;;;;;;;;;;AAWAI,gBAAW,kBAAUJ,YAAV,EAAwBC,QAAxB,EACX;AACE,YAAII,gBAAgB,KAAKC,QAAL,EAApB;AACA,YAAM,OAAOL,QAAP,KAAoB,QAApB,IACA,CAACM,SAASN,QAAT,CADD,IAEAO,KAAKC,KAAL,CAAWR,QAAX,MAAyBA,QAFzB,IAGAA,WAAWI,cAAcF,MAH/B,EAGwC;AACtCF,qBAAWI,cAAcF,MAAzB;AACD;AACDF,oBAAYD,aAAaG,MAAzB;AACA,YAAIO,YAAYL,cAAcM,OAAd,CAAsBX,YAAtB,EAAoCC,QAApC,CAAhB;AACA,eAAOS,cAAc,CAAC,CAAf,IAAoBA,cAAcT,QAAzC;AACD;;AAvDO,KAFoC;;AA6D9CW,WAAQ,eAAShB,OAAT,EACR;AACE;AACA,UAAI,CAACL,GAAGsB,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,wBAAxB,CAAL,EAAwD;AACtDC,eAAOC,SAAP,CAAiBpB,IAAjB,GAAwBD,QAAQC,IAAhC;AACD;AACD;AACA,UAAI,CAACN,GAAGsB,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,8BAAxB,CAAL,EAA8D;AAC5DC,eAAOC,SAAP,CAAiBlB,UAAjB,GAA8BH,QAAQG,UAAtC;AACD;AACD;AACA,UAAI,CAACR,GAAGsB,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,4BAAxB,CAAL,EAA4D;AAC1DC,eAAOC,SAAP,CAAiBb,QAAjB,GAA4BR,QAAQQ,QAApC;AACD;AACF;AA3E6C,GAAhD,C;AAzBAb,KAAG2B,IAAH,CAAQC,SAAR,CAAkBH,MAAlB,CAAyBtB,aAAzB,GAAyCA,aAAzC",
  "file": "String.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n/**\n * This class is responsible for the normalization of the native 'String' object.\n * It checks if these methods are available and, if not, appends them to\n * ensure compatibility in all browsers.\n * For usage samples, check out the attached links.\n *\n * @group (Polyfill)\n */\nqx.Bootstrap.define(\"qx.lang.normalize.String\", {\n\n  statics : {\n\n    /**\n     * Removes whitespace from both ends of the string.\n     *\n     * <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/Trim\">MDN documentation</a> |\n     * <a href=\"http://es5.github.com/#x15.5.4.20\">Annotated ES5 Spec</a>\n     *\n     * @return {String} The trimmed string\n     */\n    trim : function() {\n      return this.replace(/^\\s+|\\s+$/g,'');\n    },\n\n\n    /**\n     * Determines whether a string begins with the characters of another\n     * string, returning true or false as appropriate.\n     *\n     * @param searchString {String} The characters to be searched for at the\n     *   start of this string.\n     * @param position {Integer?0} The position in this string at which to\n     *   begin searching for <code>searchString</code>.\n     * @return {Boolean} Whether the string begins with the other string.\n     */\n    startsWith : function (searchString, position)\n    {\n      position = position || 0;\n      return this.substr(position, searchString.length) === searchString;\n    },\n\n\n    /**\n     * Determines whether a ends with the characters of another string,\n     * returning true or false as appropriate.\n     *\n     * @param searchString {String} The characters to be searched for at the\n     *   end of this string.\n     * @param position {Integer?length} Search within this string as if this\n     *   string were only this long; defaults to this string's actual length,\n     *   clamped within the range established by this string's length.\n     * @return {Boolean} Whether the string ends with the other string.\n     */\n    endsWith : function (searchString, position)\n    {\n      var subjectString = this.toString();\n      if (  typeof position !== 'number'\n         || !isFinite(position)\n         || Math.floor(position) !== position\n         || position > subjectString.length ) {\n        position = subjectString.length;\n      }\n      position -= searchString.length;\n      var lastIndex = subjectString.indexOf(searchString, position);\n      return lastIndex !== -1 && lastIndex === position;\n    }\n\n  },\n\n  defer : function(statics)\n  {\n    // trim\n    if (!qx.core.Environment.get(\"ecmascript.string.trim\")) {\n      String.prototype.trim = statics.trim;\n    }\n    // startsWith\n    if (!qx.core.Environment.get(\"ecmascript.string.startsWith\")) {\n      String.prototype.startsWith = statics.startsWith;\n    }\n    // endsWith\n    if (!qx.core.Environment.get(\"ecmascript.string.endsWith\")) {\n      String.prototype.endsWith = statics.endsWith;\n    }\n  }\n});\n"
  ]
}