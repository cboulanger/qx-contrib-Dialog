{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/lang/Array.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "cast",
    "object",
    "constructor",
    "offset",
    "data",
    "IListData",
    "Class",
    "hasInterface",
    "toArray",
    "ret",
    "core",
    "Environment",
    "get",
    "item",
    "i",
    "l",
    "length",
    "push",
    "Object",
    "prototype",
    "toString",
    "call",
    "apply",
    "Array",
    "slice",
    "fromArguments",
    "args",
    "fromCollection",
    "coll",
    "arr",
    "fromShortHand",
    "input",
    "len",
    "result",
    "lang",
    "clone",
    "concat",
    "insertAt",
    "obj",
    "splice",
    "insertBefore",
    "obj2",
    "indexOf",
    "insertAfter",
    "removeAt",
    "removeAll",
    "append",
    "arr1",
    "arr2",
    "Assert",
    "assertArray",
    "exclude",
    "forEach",
    "index",
    "remove",
    "contains",
    "includes",
    "equals",
    "toNativeArray",
    "sum",
    "undefined",
    "max",
    "min",
    "unique",
    "doneStrings",
    "doneNumbers",
    "doneObjects",
    "value",
    "count",
    "key",
    "Date",
    "now",
    "hasNull",
    "hasFalse",
    "hasTrue",
    "hash",
    "ex",
    "ex1",
    "Error",
    "range",
    "start",
    "stop",
    "step",
    "arguments",
    "Math",
    "ceil",
    "idx",
    "replace",
    "dest",
    "src",
    "Type",
    "isArray"
  ],
  "mappings": "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",
  "file": "Array.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * jQuery\n     http://jquery.com\n     Version 1.3.1\n\n     Copyright:\n       2009 John Resig\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n   * Underscore.js\n     http://underscorejs.org\n\n     Copyright:\n       2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n************************************************************************ */\n\n/**\n * Static helper functions for arrays with a lot of often used convenience\n * methods like <code>remove</code> or <code>contains</code>.\n *\n * The native JavaScript Array is not modified by this class. However,\n * there are modifications to the native Array in {@link qx.lang.normalize.Array} for\n * browsers that do not support certain JavaScript features natively .\n *\n * @ignore(qx.data)\n * @ignore(qx.data.IListData)\n * @ignore(qx.Class.*)\n * @require(qx.lang.normalize.Date)\n */\nqx.Bootstrap.define(\"qx.lang.Array\",\n{\n  statics :\n  {\n    /**\n     * Converts an array like object to any other array like\n     * object.\n     *\n     * Attention: The returned array may be same\n     * instance as the incoming one if the constructor is identical!\n     *\n     * @param object {var} any array-like object\n     * @param constructor {Function} constructor of the new instance\n     * @param offset {Integer?0} position to start from\n     * @return {Array} the converted array\n     */\n    cast : function(object, constructor, offset)\n    {\n      if (object.constructor === constructor) {\n        return object;\n      }\n\n      if (qx.data && qx.data.IListData) {\n        if (qx.Class && qx.Class.hasInterface(object, qx.data.IListData)) {\n          var object = object.toArray();\n        }\n      }\n\n\n      // Create from given constructor\n      var ret = new constructor;\n\n      // Some collections in mshtml are not able to be sliced.\n      // These lines are a special workaround for this client.\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        if (object.item)\n        {\n          for (var i=offset||0, l=object.length; i<l; i++) {\n            ret.push(object[i]);\n          }\n\n          return ret;\n        }\n      }\n\n      // Copy over items\n      if (Object.prototype.toString.call(object) === \"[object Array]\" && offset == null) {\n        ret.push.apply(ret, object);\n      } else {\n        ret.push.apply(ret, Array.prototype.slice.call(object, offset||0));\n      }\n\n      return ret;\n    },\n\n\n    /**\n     * Convert an arguments object into an array.\n     *\n     * @param args {arguments} arguments object\n     * @param offset {Integer?0} position to start from\n     * @return {Array} a newly created array (copy) with the content of the arguments object.\n     */\n    fromArguments : function(args, offset) {\n      return Array.prototype.slice.call(args, offset||0);\n    },\n\n\n    /**\n     * Convert a (node) collection into an array\n     *\n     * @param coll {var} node collection\n     * @return {Array} a newly created array (copy) with the content of the node collection.\n     */\n    fromCollection : function(coll)\n    {\n      // The native Array.slice cannot be used with some Array-like objects\n      // including NodeLists in older IEs\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n      {\n        if (coll.item)\n        {\n          var arr = [];\n          for (var i=0, l=coll.length; i<l; i++) {\n            arr[i] = coll[i];\n          }\n\n          return arr;\n        }\n      }\n\n      return Array.prototype.slice.call(coll, 0);\n    },\n\n\n    /**\n     * Expand shorthand definition to a four element list.\n     * This is an utility function for padding/margin and all other shorthand handling.\n     *\n     * @param input {Array} arr with one to four elements\n     * @return {Array} an arr with four elements\n     */\n    fromShortHand : function(input)\n    {\n      var len = input.length;\n      var result = qx.lang.Array.clone(input);\n\n      // Copy Values (according to the length)\n      switch(len)\n      {\n        case 1:\n          result[1] = result[2] = result[3] = result[0];\n          break;\n\n        case 2:\n          result[2] = result[0];\n          // no break here\n\n        case 3:\n          result[3] = result[1];\n      }\n\n      // Return list with 4 items\n      return result;\n    },\n\n\n    /**\n     * Return a copy of the given array\n     *\n     * @param arr {Array} the array to copy\n     * @return {Array} copy of the array\n     */\n    clone : function(arr) {\n      return arr.concat();\n    },\n\n\n    /**\n     * Insert an element at a given position into the array\n     *\n     * @param arr {Array} the array\n     * @param obj {var} the element to insert\n     * @param i {Integer} position where to insert the element into the array\n     * @return {Array} the array\n     */\n    insertAt : function(arr, obj, i)\n    {\n      arr.splice(i, 0, obj);\n\n      return arr;\n    },\n\n\n    /**\n     * Insert an element into the array before a given second element.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 before this object\n     * @return {Array} the array\n     */\n    insertBefore : function(arr, obj, obj2)\n    {\n      var i = arr.indexOf(obj2);\n\n      if (i == -1) {\n        arr.push(obj);\n      } else {\n        arr.splice(i, 0, obj);\n      }\n\n      return arr;\n    },\n\n\n    /**\n     * Insert an element into the array after a given second element.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to be inserted\n     * @param obj2 {var} insert obj1 after this object\n     * @return {Array} the array\n     */\n    insertAfter : function(arr, obj, obj2)\n    {\n      var i = arr.indexOf(obj2);\n\n      if (i == -1 || i == (arr.length - 1)) {\n        arr.push(obj);\n      } else {\n        arr.splice(i + 1, 0, obj);\n      }\n\n      return arr;\n    },\n\n\n    /**\n     * Remove an element from the array at the given index\n     *\n     * @param arr {Array} the array\n     * @param i {Integer} index of the element to be removed\n     * @return {var} The removed element.\n     */\n    removeAt : function(arr, i) {\n      return arr.splice(i, 1)[0];\n    },\n\n\n    /**\n     * Remove all elements from the array\n     *\n     * @param arr {Array} the array\n     * @return {Array} empty array\n     */\n    removeAll : function(arr)\n    {\n      arr.length = 0;\n      return this;\n    },\n\n\n    /**\n     * Append the elements of an array to the array\n     *\n     * @param arr1 {Array} the array\n     * @param arr2 {Array} the elements of this array will be appended to other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    append : function(arr1, arr2)\n    {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.append(arr2);\n      }\n      if (arr2 instanceof qx.data.Array) {\n        arr2 = arr2.toArray();\n      }\n      \n      // this check is important because opera throws an uncatchable error if apply is called without\n      // an arr as second argument.\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        qx.core.Assert && qx.core.Assert.assertArray(arr1, \"The first parameter must be an array.\");\n        qx.core.Assert && qx.core.Assert.assertArray(arr2, \"The second parameter must be an array.\");\n      }\n\n      Array.prototype.push.apply(arr1, arr2);\n      return arr1;\n    },\n\n\n    /**\n     * Modifies the first array as it removes all elements\n     * which are listed in the second array as well.\n     *\n     * @param arr1 {Array} the array\n     * @param arr2 {Array} the elements of this array will be excluded from the other one\n     * @return {Array} The modified array.\n     * @throws {Error} if one of the arguments is not an array\n     */\n    exclude : function(arr1, arr2)\n    {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.exclude(arr2);\n      }\n      \n      // this check is important because opera throws an uncatchable error if apply is called without\n      // an arr as second argument.\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        qx.core.Assert && qx.core.Assert.assertArray(arr1, \"The first parameter must be an array.\");\n        qx.core.Assert && qx.core.Assert.assertArray(arr2, \"The second parameter must be an array.\");\n      }\n\n      arr2.forEach(function(item) {\n        var index = arr1.indexOf(item);\n        if (index != -1) {\n          arr1.splice(index, 1);\n        }\n      });\n\n      return arr1;\n    },\n\n\n    /**\n     * Remove an element from the array.\n     *\n     * @param arr {Array} the array\n     * @param obj {var} element to be removed from the array\n     * @return {var} the removed element\n     */\n    remove : function(arr, obj)\n    {\n      if (arr instanceof qx.data.Array) {\n        return arr.remove(obj);\n      }\n      \n      var i = arr.indexOf(obj);\n\n      if (i != -1)\n      {\n        arr.splice(i, 1);\n        return obj;\n      }\n    },\n\n    /**\n     * Whether the array contains the given element\n     *\n     * @deprecated {6.0} Please use Array instance include method instead\n     *\n     * @param arr {Array} the array\n     * @param obj {var} object to look for\n     * @return {Boolean} whether the arr contains the element\n     */\n    contains : function(arr, obj) {\n      return arr.includes(obj);\n    },\n\n    /**\n     * Check whether the two arrays have the same content. Checks only the\n     * equality of the arrays' content.\n     *\n     * @param arr1 {Array} first array\n     * @param arr2 {Array} second array\n     * @return {Boolean} Whether the two arrays are equal\n     */\n    equals : function(arr1, arr2)\n    {\n      if (arr1 instanceof qx.data.Array) {\n        return arr1.equals(arr2);\n      }\n      arr2 = qx.lang.Array.toNativeArray(arr2);\n      \n      var length = arr1.length;\n\n      if (length !== arr2.length) {\n        return false;\n      }\n\n      for (var i=0; i<length; i++)\n      {\n        if (arr1[i] !== arr2[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n\n    /**\n     * Returns the sum of all values in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number} The sum of all values.\n     */\n    sum : function(arr)\n    {\n      var result = 0;\n      for (var i=0, l=arr.length; i<l; i++) {\n        if (arr[i] != undefined) {\n          result += arr[i];\n        }\n      }\n\n      return result;\n    },\n\n\n    /**\n     * Returns the highest value in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number | null} The highest of all values or undefined if array is empty.\n     */\n    max : function(arr)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert && qx.core.Assert.assertArray(arr, \"Parameter must be an array.\");\n      }\n\n      var i, len=arr.length, result = arr[0];\n\n      for (i = 1; i < len; i++)\n      {\n        if (arr[i] > result) {\n          result = arr[i];\n        }\n      }\n\n      return result === undefined ? null : result;\n    },\n\n\n    /**\n     * Returns the lowest value in the given array. Supports\n     * numeric values only.\n     *\n     * @param arr {Number[]} Array to process\n     * @return {Number | null} The lowest of all values or undefined if array is empty.\n     */\n    min : function(arr)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert && qx.core.Assert.assertArray(arr, \"Parameter must be an array.\");\n      }\n\n      var i, len=arr.length, result = arr[0];\n\n      for (i = 1; i < len; i++)\n      {\n        if (arr[i] < result) {\n          result = arr[i];\n        }\n      }\n\n      return result === undefined ? null : result;\n    },\n\n\n    /**\n     * Recreates an array which is free of all duplicate elements from the original.\n     *\n     * This method does not modify the original array!\n     *\n     * Keep in mind that this methods deletes undefined indexes.\n     *\n     * @param arr {Array} Incoming array\n     * @return {Array} Returns a copy with no duplicates\n     */\n    unique: function(arr)\n    {\n      var ret=[], doneStrings={}, doneNumbers={}, doneObjects={};\n      var value, count=0;\n      var key = \"qx\" + Date.now();\n      var hasNull=false, hasFalse=false, hasTrue=false;\n\n      // Rebuild array and omit duplicates\n      for (var i=0, len=arr.length; i<len; i++)\n      {\n        value = arr[i];\n\n        // Differ between null, primitives and reference types\n        if (value === null)\n        {\n          if (!hasNull)\n          {\n            hasNull = true;\n            ret.push(value);\n          }\n        }\n        else if (value === undefined)\n        {\n          // pass\n        }\n        else if (value === false)\n        {\n          if (!hasFalse)\n          {\n            hasFalse = true;\n            ret.push(value);\n          }\n        }\n        else if (value === true)\n        {\n          if (!hasTrue)\n          {\n            hasTrue = true;\n            ret.push(value);\n          }\n        }\n        else if (typeof value === \"string\")\n        {\n          if (!doneStrings[value])\n          {\n            doneStrings[value] = 1;\n            ret.push(value);\n          }\n        }\n        else if (typeof value === \"number\")\n        {\n          if (!doneNumbers[value])\n          {\n            doneNumbers[value] = 1;\n            ret.push(value);\n          }\n        }\n        else\n        {\n          var hash = value[key];\n\n          if (hash == null) {\n            hash = value[key] = count++;\n          }\n\n          if (!doneObjects[hash])\n          {\n            doneObjects[hash] = value;\n            ret.push(value);\n          }\n        }\n      }\n\n      // Clear object hashs\n      for (var hash in doneObjects)\n      {\n        try\n        {\n          delete doneObjects[hash][key];\n        }\n        catch(ex)\n        {\n          try\n          {\n            doneObjects[hash][key] = null;\n          }\n          catch(ex1)\n          {\n            throw new Error(\"Cannot clean-up map entry doneObjects[\" + hash + \"][\" + key + \"]\");\n          }\n        }\n      }\n\n      return ret;\n    },\n\n    /**\n     * Returns a new array with integers from start to stop incremented or decremented by step.\n     *\n     * @param start {Integer} start of the new array, defaults to 0\n     * @param stop {Integer} stop of the new array\n     * @param step {Integer} increment / decrement - depends whether you use positive or negative values\n     * @return {Array} Returns a new array with integers\n     */\n    range : function(start, stop, step)\n    {\n      if (arguments.length <= 1) {\n        stop = start || 0;\n        start = 0;\n      }\n      step = arguments[2] || 1;\n\n      var length = Math.max(Math.ceil((stop - start) / step), 0);\n      var idx = 0;\n      var range = Array(length);\n\n      while (idx < length) {\n        range[idx++] = start;\n        start += step;\n      }\n\n      return range;\n    },\n    \n    \n    /**\n     * Replaces the contents of the array `dest`\n     * \n     * @param dest {Array|qx.data.Array} the array to edit (if null then a new array is created)\n     * @param src {Array|qx.data.Array} the array to copy from, or null\n     * @return {Array} the edited array (or the new array, if dest is null)\n     */\n    replace: function(dest, src) {\n      if (dest instanceof qx.data.Array) {\n        return dest.replace(src);\n      }\n      \n      if (src === null) {\n        if (dest === null) {\n          return null;\n        } else {\n          return [];\n        }\n      }\n      \n      src = qx.lang.Array.toNativeArray(src);\n      if (dest === null) {\n        dest = src.slice(0);\n      } else {\n        var args = [ 0, dest.length ];\n        src.forEach(function(item) {\n          args.push(item);\n        });\n        dest.splice.apply(dest, args);\n      }\n      return dest;\n    },\n    \n    \n    /**\n     * Returns a native array from src where possible; qx.data.Array is converted to its native array,\n     * in which case unless `clone` parameter is set to true the rules of qx.data.Array.toArray should \n     * be followed, ie that the array should not be manipulated directly.\n     * \n     * @param src {qx.data.Array|Array} the object to return as an array\n     * @param clone{Boolean?} whether to make the returned array a clone, ie editable by the calling code\n     * @return {Array}\n     */\n    toNativeArray: function(src, clone) {\n      if (src === undefined || src === null) {\n        return src;\n      }\n      if (src instanceof qx.data.Array) {\n        if (clone) {\n          return src.toArray().slice(0);\n        }\n        return src.toArray();\n      }\n      if (qx.lang.Type.isArray(src)) {\n        if (clone) {\n          return src.slice(0);\n        }\n        return src;\n      }\n      return [ src ];\n    }\n  }\n});\n"
  ]
}