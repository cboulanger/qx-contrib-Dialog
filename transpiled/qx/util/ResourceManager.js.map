{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/ResourceManager.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "type",
    "construct",
    "statics",
    "__registry",
    "$$resources",
    "__urlPrefix",
    "members",
    "findHighResolutionSource",
    "lowResImgSrc",
    "factor",
    "pixelRatioCandidates",
    "parseFloat",
    "bom",
    "client",
    "Device",
    "getDevicePixelRatio",
    "toFixed",
    "i",
    "length",
    "hiResImgSrc",
    "k",
    "getHighResolutionSource",
    "source",
    "pixelRatio",
    "fileExtIndex",
    "lastIndexOf",
    "pixelRatioIdentifier",
    "candidate",
    "slice",
    "has",
    "getIds",
    "pathfragment",
    "registry",
    "ids",
    "id",
    "hasOwnProperty",
    "indexOf",
    "push",
    "getData",
    "getImageWidth",
    "size",
    "startsWith",
    "part",
    "split",
    "parseInt",
    "entry",
    "width",
    "Math",
    "ceil",
    "getImageHeight",
    "getImageFormat",
    "getCombinedFormat",
    "clippedtype",
    "isclipped",
    "constructor",
    "combId",
    "combImg",
    "toUri",
    "lib",
    "urlPrefix",
    "Environment",
    "get",
    "util",
    "LibraryManager",
    "getInstance",
    "toDataUri",
    "resid",
    "resentry",
    "combined",
    "uri",
    "resstruct",
    "isFontUri",
    "defer",
    "$$libraries",
    "resourceUri",
    "href",
    "baseElements",
    "document",
    "getElementsByTagName",
    "match",
    "window",
    "location",
    "protocol",
    "host",
    "url",
    "URL",
    "substring",
    "index",
    "ResourceManager"
  ],
  "mappings": "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",
  "file": "ResourceManager.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Contains information about images (size, format, clipping, ...) and\n * other resources like CSS files, local data, ...\n */\nqx.Class.define(\"qx.util.ResourceManager\",\n{\n  extend  : qx.core.Object,\n  type    : \"singleton\",\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  construct : function()\n  {\n    this.base(arguments);\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** @type {Map} the shared image registry */\n    __registry : qx.$$resources || {},\n\n    /** @type {Map} prefix per library used in HTTPS mode for IE */\n    __urlPrefix : {}\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Detects whether there is a high-resolution image available.\n     * A high-resolution image is assumed to have the same file name as\n     * the parameter source, but with a pixelRatio identifier before the file\n     * extension, like \"@2x\".\n     * Medium Resolution: \"example.png\", high-resolution: \"example@2x.png\"\n     *\n     * @param lowResImgSrc {String} source of the low resolution image.\n     * @param factor {Number} Factor to find the right image. If not set calculated by getDevicePixelRatio()\n     * @return {String|Boolean} If a high-resolution image source.\n     */\n     findHighResolutionSource: function(lowResImgSrc, factor) {\n      var pixelRatioCandidates = [\"3\", \"2\", \"1.5\"];\n\n      // Calculate the optimal ratio, based on the rem scale factor of the application and the device pixel ratio.\n      if (!factor) {\n        factor = parseFloat(qx.bom.client.Device.getDevicePixelRatio().toFixed(2));\n      }  \n      if (factor <= 1) {\n        return false;\n      }\n\n      var i = pixelRatioCandidates.length;\n      while (i > 0 && factor > pixelRatioCandidates[--i]) {}\n\n      var hiResImgSrc;\n      var k;\n\n      // Search for best img with a higher resolution.\n      for (k = i; k >= 0; k--) {\n        hiResImgSrc = this.getHighResolutionSource(lowResImgSrc, pixelRatioCandidates[k]);\n        if (hiResImgSrc) {\n          return hiResImgSrc;\n        }\n      }\n\n      // Search for best img with a lower resolution.\n      for (k = i + 1; k < pixelRatioCandidates.length; k++) {\n        hiResImgSrc = this.getHighResolutionSource(lowResImgSrc, pixelRatioCandidates[k]);\n        if (hiResImgSrc) {\n          return hiResImgSrc;\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Returns the source name for the high-resolution image based on the passed\n     * parameters.\n     * @param source {String} the source of the medium resolution image.\n     * @param pixelRatio {Number} the pixel ratio of the high-resolution image.\n     * @return {String} the high-resolution source name or null if no source could be found.\n     */\n    getHighResolutionSource : function(source, pixelRatio) {\n      var fileExtIndex = source.lastIndexOf('.');\n      if (fileExtIndex > -1) {\n        var pixelRatioIdentifier = \"@\" + pixelRatio + \"x\";\n        var candidate = source.slice(0, fileExtIndex) + pixelRatioIdentifier + source.slice(fileExtIndex);\n\n        if(this.has(candidate)) {\n          return candidate;\n        }\n      }\n      return null;\n    },\n\n    /**\n     * Get all known resource IDs.\n     *\n     * @param pathfragment{String|null|undefined} an optional path fragment to check against with id.indexOf(pathfragment)\n     * @return {Array|null} an array containing the IDs or null if the registry is not initialized\n     */\n    getIds : function(pathfragment) {\n      var registry = this.self(arguments).__registry;\n      if(!registry) {\n        return null;\n      }\n\n      var ids = [];\n      for (var id in registry) {\n        if (registry.hasOwnProperty(id)) {\n          if(pathfragment && id.indexOf(pathfragment) == -1) {\n            continue;\n          }\n          ids.push(id);\n        }\n      }\n\n      return ids;\n    },\n\n    /**\n     * Whether the registry has information about the given resource.\n     *\n     * @param id {String} The resource to get the information for\n     * @return {Boolean} <code>true</code> when the resource is known.\n     */\n    has : function(id) {\n      return !!this.self(arguments).__registry[id];\n    },\n\n\n    /**\n     * Get information about an resource.\n     *\n     * @param id {String} The resource to get the information for\n     * @return {Array} Registered data or <code>null</code>\n     */\n    getData : function(id) {\n      return this.self(arguments).__registry[id] || null;\n    },\n\n\n    /**\n     * Returns the width of the given resource ID,\n     * when it is not a known image <code>0</code> is\n     * returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {Integer} The image width, maybe <code>null</code> when the width is unknown\n     */\n    getImageWidth : function(id)\n    {\n      var size;\n      if (id && id.startsWith(\"@\")) {\n        var part = id.split(\"/\");\n        size = parseInt(part[2],10);\n        if (size) {\n          id = part[0]+\"/\"+part[1];\n        }\n      }\n      var entry = this.self(arguments).__registry[id]; // [ width, height, codepoint ]\n      if (size && entry) {\n        var width = Math.ceil(size / entry[1] * entry[0]);\n        return width;\n      }\n      return entry ? entry[0] : null;\n    },\n\n\n    /**\n     * Returns the height of the given resource ID,\n     * when it is not a known image <code>0</code> is\n     * returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {Integer} The image height, maybe <code>null</code> when the height is unknown\n     */\n    getImageHeight : function(id)\n    {\n      if (id && id.startsWith(\"@\")) {\n        var part = id.split(\"/\");\n        var size = parseInt(part[2],10);\n        if (size) {\n          return size;\n        }\n      }\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[1] : null;\n    },\n\n\n    /**\n     * Returns the format of the given resource ID,\n     * when it is not a known image <code>null</code>\n     * is returned.\n     *\n     * @param id {String} Resource identifier\n     * @return {String} File format of the image\n     */\n    getImageFormat : function(id)\n    {\n      if (id && id.startsWith(\"@\")) {\n        return \"font\";\n      }\n\n      var entry = this.self(arguments).__registry[id];\n      return entry ? entry[2] : null;\n    },\n\n    /**\n     * Returns the format of the combined image (png, gif, ...), if the given\n     * resource identifier is an image contained in one, or the empty string\n     * otherwise.\n     *\n     * @param id {String} Resource identifier\n     * @return {String} The type of the combined image containing id\n     */\n    getCombinedFormat : function(id)\n    {\n      var clippedtype = \"\";\n      var entry = this.self(arguments).__registry[id];\n      var isclipped = entry && entry.length > 4 && typeof(entry[4]) == \"string\"\n        && this.constructor.__registry[entry[4]];\n      if (isclipped){\n        var combId  = entry[4];\n        var combImg = this.constructor.__registry[combId];\n        clippedtype = combImg[2];\n      }\n      return clippedtype;\n    },\n\n\n    /**\n     * Converts the given resource ID to a full qualified URI\n     *\n     * @param id {String} Resource ID\n     * @return {String} Resulting URI\n     */\n    toUri : function(id)\n    {\n      if (id == null) {\n        return id;\n      }\n\n      var entry = this.self(arguments).__registry[id];\n      if (!entry) {\n        return id;\n      }\n\n      if (typeof entry === \"string\") {\n        var lib = entry;\n      }\n      else\n      {\n        var lib = entry[3];\n\n        // no lib reference\n        // may mean that the image has been registered dynamically\n        if (!lib) {\n          return id;\n        }\n      }\n\n      var urlPrefix = \"\";\n      if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\") &&\n          qx.core.Environment.get(\"io.ssl\")) {\n        urlPrefix = this.self(arguments).__urlPrefix[lib];\n      }\n\n      return urlPrefix + qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\") + \"/\" + id;\n    },\n\n    /**\n     * Construct a data: URI for an image resource.\n     *\n     * Constructs a data: URI for a given resource id, if this resource is\n     * contained in a base64 combined image. If this is not the case (e.g.\n     * because the combined image has not been loaded yet), returns the direct\n     * URI to the image file itself.\n     *\n     * @param resid {String} resource id of the image\n     * @return {String} \"data:\" or \"http:\" URI\n     */\n    toDataUri : function (resid)\n    {\n      var resentry = this.constructor.__registry[resid];\n      var combined = resentry ? this.constructor.__registry[resentry[4]] : null;\n      var uri;\n      if (combined) {\n        var resstruct = combined[4][resid];\n        uri = \"data:image/\" + resstruct[\"type\"] + \";\" + resstruct[\"encoding\"] +\n              \",\" + resstruct[\"data\"];\n      }\n      else {\n        uri = this.toUri(resid);\n      }\n      return uri;\n    },\n\n    /**\n     * Checks whether a given resource id for an image is a font handle.\n     *\n     * @param resid {String} resource id of the image\n     * @return {Boolean} True if it's a font URI\n     */\n    isFontUri : function (resid)\n    {\n      return resid ? resid.startsWith(\"@\") : false;\n    }\n  },\n\n\n  defer : function(statics)\n  {\n    if ((qx.core.Environment.get(\"engine.name\") == \"mshtml\"))\n    {\n      // To avoid a \"mixed content\" warning in IE when the application is\n      // delivered via HTTPS a prefix has to be added. This will transform the\n      // relative URL to an absolute one in IE.\n      // Though this warning is only displayed in conjunction with images which\n      // are referenced as a CSS \"background-image\", every resource path is\n      // changed when the application is served with HTTPS.\n      if (qx.core.Environment.get(\"io.ssl\"))\n      {\n        for (var lib in qx.$$libraries)\n        {\n          var resourceUri;\n          if (qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\")) {\n            resourceUri = qx.util.LibraryManager.getInstance().get(lib, \"resourceUri\");\n          }\n          else\n          {\n            // default for libraries without a resourceUri set\n            statics.__urlPrefix[lib] = \"\";\n            continue;\n          }\n\n          var href;\n          //first check if there is base url set\n          var baseElements = document.getElementsByTagName(\"base\");\n          if (baseElements.length > 0) {\n            href = baseElements[0].href;\n          }\n\n          // It is valid to to begin a URL with \"//\" so this case has to\n          // be considered. If the to resolved URL begins with \"//\" the\n          // manager prefixes it with \"https:\" to avoid any problems for IE\n          if (resourceUri.match(/^\\/\\//) != null) {\n            statics.__urlPrefix[lib] = window.location.protocol;\n          }\n          // If the resourceUri begins with a single slash, include the current\n          // hostname\n          else if (resourceUri.match(/^\\//) != null)\n          {\n            if (href)\n            {\n              statics.__urlPrefix[lib] = href;\n            }\n            else\n            {\n              statics.__urlPrefix[lib] = window.location.protocol + \"//\" + window.location.host;\n            }\n          }\n          // If the resolved URL begins with \"./\" the final URL has to be\n          // put together using the document.URL property.\n          // IMPORTANT: this is only applicable for the source version\n          else if (resourceUri.match(/^\\.\\//) != null)\n          {\n            var url = document.URL;\n            statics.__urlPrefix[lib] = url.substring(0, url.lastIndexOf(\"/\") + 1);\n          } else if (resourceUri.match(/^http/) != null) {\n            // Let absolute URLs pass through\n            statics.__urlPrefix[lib] = \"\";\n          }\n          else\n          {\n            if (!href)\n            {\n              // check for parameters with URLs as value\n              var index = window.location.href.indexOf(\"?\");\n\n              if (index == -1)\n              {\n                href = window.location.href;\n              }\n              else\n              {\n                href = window.location.href.substring(0, index);\n              }\n            }\n\n            statics.__urlPrefix[lib] = href.substring(0, href.lastIndexOf(\"/\") + 1);\n          }\n        }\n      }\n    }\n  }\n});\n"
  ]
}