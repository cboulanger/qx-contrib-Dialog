{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/StringSplit.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "split",
    "str",
    "separator",
    "limit",
    "Object",
    "prototype",
    "toString",
    "call",
    "String",
    "output",
    "lastLastIndex",
    "flags",
    "ignoreCase",
    "multiline",
    "sticky",
    "RegExp",
    "source",
    "separator2",
    "match",
    "lastIndex",
    "lastLength",
    "compliantExecNpcg",
    "exec",
    "undefined",
    "Infinity",
    "Math",
    "floor",
    "index",
    "length",
    "push",
    "slice",
    "replace",
    "i",
    "arguments",
    "Array",
    "apply",
    "test",
    "util",
    "StringSplit"
  ],
  "mappings": "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",
  "file": "StringSplit.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Adrian Olaru (adrianolaru)\n\n   ======================================================================\n\n   This class contains code based on the following work:\n\n   * Cross-Browser Split\n     http://blog.stevenlevithan.com/archives/cross-browser-split\n     Version 1.0.1\n\n     Copyright:\n       (c) 2006-2007, Steven Levithan <http://stevenlevithan.com>\n\n     License:\n       MIT: http://www.opensource.org/licenses/mit-license.php\n\n     Authors:\n       * Steven Levithan\n\n************************************************************************ */\n\n/**\n * Implements an ECMA-compliant, uniform cross-browser split method\n */\nqx.Bootstrap.define(\"qx.util.StringSplit\",\n{\n  statics :\n  {\n    /**\n     * ECMA-compliant, uniform cross-browser split method\n     *\n     * @param str {String} Incoming string to split\n     * @param separator {RegExp} Specifies the character to use for separating the string.\n     *   The separator is treated as a string or a  regular expression. If separator is\n     *   omitted, the array returned contains one element consisting of the entire string.\n     * @param limit {Integer?} Integer specifying a limit on the number of splits to be found.\n     * @return {String[]} split string\n     */\n    split : function (str, separator, limit)\n    {\n      // if `separator` is not a regex, use the native `split`\n      if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {\n        return String.prototype.split.call(str, separator, limit);\n      }\n\n      var output = [],\n          lastLastIndex = 0,\n          flags = (separator.ignoreCase ? \"i\" : \"\") +\n                  (separator.multiline  ? \"m\" : \"\") +\n                  (separator.sticky     ? \"y\" : \"\"),\n          separator = RegExp(separator.source, flags + \"g\"), // make `global` and avoid `lastIndex` issues by working with a copy\n          separator2, match, lastIndex, lastLength,\n          compliantExecNpcg = /()??/.exec(\"\")[1] === undefined; // NPCG: nonparticipating capturing group\n\n      str = str + \"\"; // type conversion\n\n      if (!compliantExecNpcg) {\n        separator2 = RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags); // doesn't need /g or /y, but they don't hurt\n      }\n\n      /* behavior for `limit`: if it's...\n      - `undefined`: no limit.\n      - `NaN` or zero: return an empty array.\n      - a positive number: use `Math.floor(limit)`.\n      - a negative number: no limit.\n      - other: type-convert, then use the above rules. */\n      if (limit === undefined || +limit < 0) {\n        limit = Infinity;\n      } else {\n        limit = Math.floor(+limit);\n        if (!limit) {\n          return [];\n        }\n      }\n\n      while (match = separator.exec(str))\n      {\n        lastIndex = match.index + match[0].length; // `separator.lastIndex` is not reliable cross-browser\n\n        if (lastIndex > lastLastIndex) {\n          output.push(str.slice(lastLastIndex, match.index));\n\n          // fix browsers whose `exec` methods don't consistently return `undefined` for nonparticipating capturing groups\n          if (!compliantExecNpcg && match.length > 1)\n          {\n            match[0].replace(separator2, function () {\n              for (var i = 1; i < arguments.length - 2; i++)\n              {\n                if (arguments[i] === undefined) {\n                  match[i] = undefined;\n                }\n              }\n            });\n          }\n\n          if (match.length > 1 && match.index < str.length) {\n            Array.prototype.push.apply(output, match.slice(1));\n          }\n\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n\n          if (output.length >= limit) {\n            break;\n          }\n        }\n\n        if (separator.lastIndex === match.index) {\n          separator.lastIndex++; // avoid an infinite loop\n        }\n      }\n\n      if (lastLastIndex === str.length)\n      {\n        if (lastLength || !separator.test(\"\")) {\n          output.push(\"\");\n        }\n      } else {\n        output.push(str.slice(lastLastIndex));\n      }\n\n      return output.length > limit ? output.slice(0, limit) : output;\n    }\n  }\n});\n"
  ]
}