{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/Serializer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "toUriParameter",
    "object",
    "qxSerializer",
    "dateFormat",
    "result",
    "properties",
    "util",
    "PropertyUtil",
    "getAllProperties",
    "constructor",
    "name",
    "group",
    "undefined",
    "value",
    "lang",
    "String",
    "firstUp",
    "Type",
    "isArray",
    "isdataArray",
    "data",
    "IListData",
    "hasInterface",
    "i",
    "length",
    "valueAtI",
    "getItem",
    "__toUriParameter",
    "isDate",
    "format",
    "substring",
    "$$type",
    "classname",
    "core",
    "Object",
    "encValue",
    "encodeURIComponent",
    "toNativeObject",
    "getLength",
    "push",
    "Serializer",
    "returnValue",
    "locale",
    "LocalizedString",
    "toString",
    "isObject",
    "key",
    "toJson",
    "isString",
    "replace",
    "isRegExp"
  ],
  "mappings": "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",
  "file": "Serializer.js",
  "sourcesContent": [
    "/* ***********************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This is an util class responsible for serializing qooxdoo objects.\n *\n * @ignore(qx.data, qx.data.IListData)\n * @ignore(qx.locale, qx.locale.LocalizedString)\n */\nqx.Class.define(\"qx.util.Serializer\",\n{\n  statics :\n  {\n\n    /**\n     * Serializes the properties of the given qooxdoo object. To get the\n     * serialization working, every property needs to have a string\n     * representation because the value of the property will be concatenated to the\n     * serialized string.\n     *\n     * @param object {qx.core.Object} Any qooxdoo object\n     * @param qxSerializer {Function?} Function used for serializing qooxdoo\n     *   objects stored in the properties of the object. Check for the type of\n     *   classes <ou want to serialize and return the serialized value. In all\n     *   other cases, just return nothing.\n     * @param dateFormat {qx.util.format.DateFormat?} If a date formater is given,\n     *   the format method of this given formater is used to convert date\n     *   objects into strings.\n     * @return {String} The serialized object.\n     */\n    toUriParameter : function(object, qxSerializer, dateFormat)\n    {\n      var result = \"\";\n      var properties = qx.util.PropertyUtil.getAllProperties(object.constructor);\n\n      for (var name in properties) {\n        // ignore property groups\n        if (properties[name].group != undefined) {\n          continue;\n        }\n        var value = object[\"get\" + qx.lang.String.firstUp(name)]();\n\n        // handle arrays\n        if (qx.lang.Type.isArray(value)) {\n          var isdataArray = qx.data && qx.data.IListData &&\n            qx.Class.hasInterface(value && value.constructor, qx.data.IListData);\n          for (var i = 0; i < value.length; i++) {\n            var valueAtI = isdataArray ? value.getItem(i) : value[i];\n            result += this.__toUriParameter(name, valueAtI, qxSerializer);\n          }\n        } else if (qx.lang.Type.isDate(value) && dateFormat != null) {\n          result += this.__toUriParameter(\n            name, dateFormat.format(value), qxSerializer\n          );\n        } else {\n          result += this.__toUriParameter(name, value, qxSerializer);\n        }\n      }\n      return result.substring(0, result.length - 1);\n    },\n\n\n    /**\n     * Helper method for {@link #toUriParameter}. Check for qooxdoo objects\n     * and returns the serialized name value pair for the given parameter.\n     *\n     * @param name {String} The name of the value\n     * @param value {var} The value itself\n     * @param qxSerializer {Function?} The serializer for qooxdoo objects.\n     * @return {String} The serialized name value pair.\n     */\n    __toUriParameter : function(name, value, qxSerializer)\n    {\n\n      if (value && value.$$type == \"Class\") {\n        value = value.classname;\n      }\n\n      if (value && (value.$$type == \"Interface\" || value.$$type == \"Mixin\")) {\n        value = value.name;\n      }\n\n      if (value instanceof qx.core.Object && qxSerializer != null) {\n        var encValue = encodeURIComponent(qxSerializer(value));\n        if (encValue === undefined) {\n          var encValue = encodeURIComponent(value);\n        }\n      } else {\n        var encValue = encodeURIComponent(value);\n      }\n      return encodeURIComponent(name) + \"=\" + encValue + \"&\";\n    },\n\n\n    /**\n     * Serializes the properties of the given qooxdoo object into a native\n     * object.\n     *\n     * @param object {qx.core.Object}\n     *   Any qooxdoo object\n     *\n     * @param qxSerializer {Function?}\n     *   Function used for serializing qooxdoo objects stored in the properties\n     *   of the object. Check for the type of classes you want to serialize\n     *   and return the serialized value. In all other cases, just return\n     *   nothing.\n     * @param dateFormat {qx.util.format.DateFormat?} If a date formater is given,\n     *   the format method of this given formater is used to convert date\n     *   objects into strings.\n     * @return {null|Array|String|Object}\n     *   The serialized object. Depending on the input qooxdoo object, the returning\n     *   type will vary.\n     */\n    toNativeObject : function(object, qxSerializer, dateFormat)\n    {\n      var result;\n\n      // null or undefined\n      if (object == null)\n      {\n        return null;\n      }\n\n      // data array\n      if (qx.data && qx.data.IListData && qx.Class.hasInterface(object.constructor, qx.data.IListData))\n      {\n        result = [];\n        for (var i = 0; i < object.getLength(); i++)\n        {\n          result.push(qx.util.Serializer.toNativeObject(\n            object.getItem(i), qxSerializer, dateFormat)\n          );\n        }\n\n        return result;\n      }\n\n      // other arrays\n      if (qx.lang.Type.isArray(object))\n      {\n        result = [];\n        for (var i = 0; i < object.length; i++)\n        {\n          result.push(qx.util.Serializer.toNativeObject(\n            object[i], qxSerializer, dateFormat)\n          );\n        }\n\n        return result;\n      }\n\n      // return names for qooxdoo classes\n      if (object.$$type == \"Class\") {\n        return object.classname;\n      }\n\n      // return names for qooxdoo interfaces and mixins\n      if (object.$$type == \"Interface\" || object.$$type == \"Mixin\") {\n        return object.name;\n      }\n\n      // qooxdoo object\n      if (object instanceof qx.core.Object)\n      {\n        if (qxSerializer != null)\n        {\n          var returnValue = qxSerializer(object);\n\n          // if we have something returned, return that\n          if (returnValue != undefined)\n          {\n            return returnValue;\n          }\n\n          // continue otherwise\n        }\n\n        result = {};\n\n        var properties =\n          qx.util.PropertyUtil.getAllProperties(object.constructor);\n\n        for (var name in properties)\n        {\n          // ignore property groups\n          if (properties[name].group != undefined)\n          {\n            continue;\n          }\n\n          var value = object[\"get\" + qx.lang.String.firstUp(name)]();\n          result[name] = qx.util.Serializer.toNativeObject(\n            value, qxSerializer, dateFormat\n          );\n        }\n\n        return result;\n      }\n\n      // date objects with date format\n      if (qx.lang.Type.isDate(object) && dateFormat != null) {\n        return dateFormat.format(object);\n      }\n\n      // localized strings\n      if (qx.locale && qx.locale.LocalizedString && object instanceof qx.locale.LocalizedString) {\n        return object.toString();\n      }\n\n      // JavaScript objects\n      if (qx.lang.Type.isObject(object))\n      {\n        result = {};\n\n        for (var key in object)\n        {\n          result[key] = qx.util.Serializer.toNativeObject(\n            object[key], qxSerializer, dateFormat\n          );\n        }\n\n        return result;\n      }\n\n      // all other stuff, including String, Date, RegExp\n      return object;\n    },\n\n\n    /**\n     * Serializes the properties of the given qooxdoo object into a json object.\n     *\n     * @param object {qx.core.Object} Any qooxdoo object\n     * @param qxSerializer {Function?} Function used for serializing qooxdoo\n     *   objects stored in the properties of the object. Check for the type of\n     *   classes <ou want to serialize and return the serialized value. In all\n     *   other cases, just return nothing.\n     * @param dateFormat {qx.util.format.DateFormat?} If a date formater is given,\n     *   the format method of this given formater is used to convert date\n     *   objects into strings.\n     * @return {String} The serialized object.\n     */\n    toJson : function(object, qxSerializer, dateFormat) {\n      var result = \"\";\n\n      // null or undefined\n      if (object == null) {\n        return \"null\";\n      }\n\n      // data array\n      if (qx.data && qx.data.IListData && qx.Class.hasInterface(object.constructor, qx.data.IListData)) {\n        result += \"[\";\n        for (var i = 0; i < object.getLength(); i++) {\n          result += qx.util.Serializer.toJson(object.getItem(i), qxSerializer, dateFormat) + \",\";\n        }\n        if (result != \"[\") {\n          result = result.substring(0, result.length - 1);\n        }\n        return result + \"]\";\n      }\n\n      // other arrays\n      if (qx.lang.Type.isArray(object)) {\n        result += \"[\";\n        for (var i = 0; i < object.length; i++) {\n          result += qx.util.Serializer.toJson(object[i], qxSerializer, dateFormat) + \",\";\n        }\n        if (result != \"[\") {\n          result = result.substring(0, result.length - 1);\n        }\n        return result + \"]\";\n      }\n\n      // return names for qooxdoo classes\n      if (object.$$type == \"Class\") {\n        return '\"' + object.classname + '\"';\n      }\n\n      // return names for qooxdoo interfaces and mixins\n      if (object.$$type == \"Interface\" || object.$$type == \"Mixin\") {\n        return '\"' + object.name + '\"';\n      }\n\n\n      // qooxdoo object\n      if (object instanceof qx.core.Object) {\n        if (qxSerializer != null) {\n          var returnValue = qxSerializer(object);\n          // if we have something returned, return that\n          if (returnValue != undefined) {\n            return '\"' + returnValue + '\"';\n          }\n          // continue otherwise\n        }\n        result += \"{\";\n        var properties = qx.util.PropertyUtil.getAllProperties(object.constructor);\n        for (var name in properties) {\n          // ignore property groups\n          if (properties[name].group != undefined) {\n            continue;\n          }\n          var value = object[\"get\" + qx.lang.String.firstUp(name)]();\n          result += '\"' + name + '\":' + qx.util.Serializer.toJson(value, qxSerializer, dateFormat) + \",\";\n        }\n        if (result != \"{\") {\n          result = result.substring(0, result.length - 1);\n        }\n        return result + \"}\";\n      }\n\n      // localized strings\n      if (qx.locale && qx.locale.LocalizedString && object instanceof qx.locale.LocalizedString) {\n        object = object.toString();\n        // no return here because we want to have the string checks as well!\n      }\n\n      // date objects with formater\n      if (qx.lang.Type.isDate(object) && dateFormat != null) {\n        return '\"' + dateFormat.format(object) + '\"';\n      }\n\n      // javascript objects\n      if (qx.lang.Type.isObject(object)) {\n        result += \"{\";\n        for (var key in object) {\n          result += '\"' + key + '\":' +\n                    qx.util.Serializer.toJson(object[key], qxSerializer, dateFormat) + \",\";\n        }\n        if (result != \"{\") {\n          result = result.substring(0, result.length - 1);\n        }\n        return result + \"}\";\n      }\n\n      // strings\n      if (qx.lang.Type.isString(object)) {\n        // escape\n        object = object.replace(/([\\\\])/g, '\\\\\\\\');\n        object = object.replace(/([\"])/g, '\\\\\"');\n        object = object.replace(/([\\r])/g, '\\\\r');\n        object = object.replace(/([\\f])/g, '\\\\f');\n        object = object.replace(/([\\n])/g, '\\\\n');\n        object = object.replace(/([\\t])/g, '\\\\t');\n        object = object.replace(/([\\b])/g, '\\\\b');\n\n        return '\"' + object + '\"';\n      }\n\n      // Date and RegExp\n      if (qx.lang.Type.isDate(object) || qx.lang.Type.isRegExp(object)) {\n        return '\"' + object + '\"';\n      }\n\n      // all other stuff\n      return object + \"\";\n    }\n  }\n});\n"
  ]
}