{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/DynamicScriptLoader.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "scriptArr",
    "__started",
    "__QUEUE",
    "lang",
    "Type",
    "isString",
    "Array",
    "clone",
    "events",
    "loaded",
    "failed",
    "ready",
    "statics",
    "__IN_PROGRESS",
    "__LOADED",
    "members",
    "start",
    "Promise",
    "resolve",
    "reject",
    "addListenerOnce",
    "e",
    "Error",
    "getData",
    "isDisposed",
    "__loadScripts",
    "DynamicScriptLoader",
    "util",
    "script",
    "dynLoader",
    "id1",
    "id2",
    "uri",
    "loader",
    "shift",
    "fireEvent",
    "fireDataEvent",
    "status",
    "addListener",
    "data",
    "removeListenerById",
    "ResourceManager",
    "getInstance",
    "toUri",
    "bom",
    "request",
    "Script",
    "on",
    "onError",
    "open",
    "send",
    "destruct",
    "key",
    "undefined"
  ],
  "mappings": "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",
  "file": "DynamicScriptLoader.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2016 Visionet GmbH, http://www.visionet.de\n     2016 OETIKER+PARTNER AG, https://www.oetiker.ch\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Dietrich Streifert (level420)\n     * Tobias Oetiker (oetiker)\n\n************************************************************************ */\n\n\n/**\n * Dynamically load non qx scripts. This class is aware of all scripts that have\n * been loaded using its instances, so if two instances load jquery, it will only\n * be loaded once, and the second instance will wait for the jquery to be loaded\n * before continuing to load additional scripts.\n *\n * Usage example:\n *\n * <pre>\n *  ... assets ...\n * /**\n *  * @asset(myapp/jquery/*)\n *  * @asset(myapp/highcharts/*)\n *  *\n *  * @ignore(jQuery.*)\n *  * @ignore(Highcharts.*)\n *  ...\n *\n *\n *    // in debug mode load the uncompressed unobfuscated scripts\n *    var src = '';\n *    var min = '.min';\n *    if (qx.core.Environment.get(\"qx.debug\")) {\n *      src = '.src';\n *      min = '';\n *    }\n *\n *    // initialize the script loading\n *    var dynLoader = new qx.util.DynamicScriptLoader([\n *        \"myapp/jquery/jquery\"+min+\".js\",\n *        \"myapp/highcharts/highcharts\"+src+\".js\",\n *        \"myapp/highcharts/highcharts-more\"+src+\".js\",\n *        \"myapp/highcharts/highcharts-modifications.js\"\n *    ]);\n *\n *\n *    dynLoader.addListenerOnce('ready',function(e){\n *      console.log(\"all scripts have been loaded!\");\n *    });\n *\n *    dynLoader.addListener('failed',function(e){\n *      var data = e.getData();\n *      console.log(\"failed to load \"+data.script);\n *    });\n *\n *    dynLoader.start();\n *    \n * </pre>\n */\nqx.Class.define(\"qx.util.DynamicScriptLoader\", {\n  extend: qx.core.Object,\n\n  /**\n   * Create a loader for the given scripts.\n   *\n   * @param scriptArr {Array|String} the uri name(s) of the script(s) to load \n   */\n\n  construct: function (scriptArr) {\n    this.base(arguments);\n    this.__started = false;\n    this.__QUEUE = (qx.lang.Type.isString(scriptArr)\n                ? [ scriptArr ]\n                : qx.lang.Array.clone(scriptArr));\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * fired when a script is loaded successfully. The data contains 'script' and 'status' keys.\n     */\n    loaded: 'qx.event.type.Data',\n\n    /**\n     * fired when a specific script fails loading.  The data contains 'script' and 'status' keys.\n     */\n    failed: 'qx.event.type.Data',\n\n    /**\n     * fired when all given scripts are loaded, each time loadScriptsDynamic is called.\n     */\n    ready: 'qx.event.type.Event'\n  },\n\n  statics: {\n    /**\n     * Map of scripts being added at the present time. Key is script name; value is instance of this class which\n     * is loading it.\n     */\n    __IN_PROGRESS: {},\n     /**\n      * Map of scripts that have fully loaded. Key is script name; value is true\n      */\n    __LOADED: {}\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n\n  members: {\n\n    /**\n     * Array of the scripts to be loaded\n     */\n    __QUEUE: null,\n\n    /**\n     * True if start has been called.\n     */\n    __started: null,\n\n\n\n    /**\n     * Start loading scripts. This may only be called once!\n     * @return {Promise?} a promise which will be resolved after load of all scripts if promise support is enabled; nothing (undefined) if promises are not enabled.\n     */\n    start: qx.core.Environment.select('qx.promise', {\n      \"true\": function() {\n        return new qx.Promise(function (resolve, reject) {\n          this.addListenerOnce(\"ready\", resolve, this);\n          this.addListenerOnce(\"failed\", function (e) {\n            reject(new Error(e.getData()));\n          }, this);\n          if (this.isDisposed()) {\n            reject(new Error('disposed'));\n          }\n          if (this.__started) {\n            reject(new Error('you can only call start once per instance'));\n          }\n          this.__started = true;\n          this.__loadScripts();\n        }, this);\n      },\n      \"false\": function () {\n        if (this.isDisposed()) {\n          return;\n        }\n        if (this.__started) {\n          throw new Error('you can only call start once per instance');\n        }\n        this.__started = true;\n        this.__loadScripts();\n      }\n    }),\n\n\n    /**\n     * Chain loading scripts.\n     *\n     * Recursively called until the array of scripts is consumed\n     *\n     */\n    __loadScripts: function () {\n      var DynamicScriptLoader = qx.util.DynamicScriptLoader;\n      var script;\n      var dynLoader;\n      var id1, id2;\n      var uri;\n      var loader;\n\n      script = this.__QUEUE.shift();\n      if (!script){\n        this.fireEvent(\"ready\")\n        return;\n      }\n\n      if (DynamicScriptLoader.__LOADED[script]){\n        this.fireDataEvent('loaded',{\n          script: script,\n          status: 'preloaded'\n        });\n        this.__loadScripts();\n        return;\n      }           \n\n      dynLoader = DynamicScriptLoader.__IN_PROGRESS[script];\n      if (dynLoader){\n\n          id1 = dynLoader.addListener('loaded',function (e) {\n            if (this.isDisposed()) {\n              return;\n            }\n            var data = e.getData();\n            if (data.script === script){\n              dynLoader.removeListenerById(id2);\n              dynLoader.removeListenerById(id1);\n              this.fireDataEvent('loaded',data);\n              this.__loadScripts();\n            }\n          },this);\n\n          id2 = dynLoader.addListener('failed',function (e) {\n            if (this.isDisposed()) {\n              return;\n            }\n            var data = e.getData();\n            dynLoader.removeListenerById(id1);\n            dynLoader.removeListenerById(id2);              \n            this.fireDataEvent('failed',{\n              script: script,\n              status: 'loading of ' + data.script + ' failed while waiting for ' + script\n            });\n          },this);\n\n          return;\n      }\n\n      uri = qx.util.ResourceManager.getInstance().toUri(script);\n\n      loader = new qx.bom.request.Script();\n\n      loader.on(\"load\", function(request) {\n        if (this.isDisposed()) {\n           return;\n        }\n        DynamicScriptLoader.__LOADED[script] = true;\n        delete DynamicScriptLoader.__IN_PROGRESS[script];\n        this.fireDataEvent('loaded', {\n          script: script,\n          status: request.status\n        });\n        this.__loadScripts();\n      },this);\n\n      var onError = function(request) {\n        if (this.isDisposed()) {\n           return;\n        }\n        delete DynamicScriptLoader.__IN_PROGRESS[script];\n        this.fireDataEvent('failed', {\n          script: script,\n          status: request.status\n        });\n      };\n\n      loader.on(\"error\", onError,this);\n      loader.on(\"timeout\", onError,this);\n\n      // this.debug(\"Loading \" + script + \" started\");\n      loader.open(\"GET\", uri);\n      DynamicScriptLoader.__IN_PROGRESS[script] = this;\n      loader.send();\n    }\n  },\n  destruct : function() {\n    var DynamicScriptLoader = qx.util.DynamicScriptLoader;\n    for (var key in DynamicScriptLoader.__IN_PROGRESS){\n      if (DynamicScriptLoader.__IN_PROGRESS[key] === this) {\n        delete DynamicScriptLoader.__IN_PROGRESS[key];\n      }\n    }\n    this.__QUEUE = undefined;\n  }\n});\n"
  ]
}