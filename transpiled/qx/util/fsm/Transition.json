{
  "className": "qx.util.fsm.Transition",
  "packageName": "qx.util.fsm",
  "name": "Transition",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 22,
        "column": 0
      },
      "end": {
        "line": 437,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2006, 2007, 2011 Derrell Lipman\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nDerrell Lipman (derrell)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Create a new possible transition from one state to another."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 130,
        "column": 2
      },
      "end": {
        "line": 191,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "transitionName {String}\nThe name of this transition, used in debug messages.",
          "paramName": "transitionName",
          "description": "\nThe name of this transition, used in debug messages.",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "transitionInfo {Object}\n<pre>\nAn object optionally containing any of the following properties:\n\ncontext -\nA context in which all of the following functions should be run.\n\npredicate -\nA function which is called to determine whether this transition is\nacceptable.  An acceptable transition will cause the transition's\n\"ontransition\" function to be run, the current state's \"onexit\"\nfunction to be run, and the new state's \"onentry\" function to be\nrun.\n\nThe predicate function's signature is function(fsm, event) and it\nis saved in the predicate property of the transition object.  In\nthe predicate function:\n\nfsm -\nThe finite state machine object to which this state is\nattached.\n\nevent -\nThe event that caused a run of the finite state machine\n\nThe predicate function should return one of the following three\nvalues:\n\n- true means the transition is acceptable\n\n- false means the transition is not acceptable, and the next\ntransition (if one exists) should be tried to determine if it\nis acceptable\n\n- null means that the transition determined that no further\ntransitions should be tried.  This might be used when the\ntransition ascertained that the event is for a target that is\nnot available in the current state, and the event has called\nfsm.queueEvent() to have the event delivered upon state\ntransition.\n\nIt is possible to create a default predicate -- one that will cause\na transition to be acceptable always -- by either not providing a\npredicate property, or by explicitly either setting the predicate\nproperty to 'true' or setting it to a function that unconditionally\nreturns 'true'.  This default transition should, of course, always\nbe the last transition added to a state, since no transition added\nafter it will ever be tried.\n\nnextState -\nThe state to which we transition, if the predicate returns true\n(meaning the transition is acceptable).  The value of nextState may\nbe:\n\n- a string, the state name of the state to transition to\n\n- One of the constants:\n- qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE:\nRemain in whatever is the current state\n- qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK:\nTransition to the state at the top of the saved-state\nstack, and remove the top element from the saved-state\nstack.  Elements are added to the saved-state stack using\nfsm.pushState().  It is an error if no state exists on the\nsaved-state stack.\n- qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE:\nTBD\n\nautoActionsBeforeOntransition -\nautoActionsAfterOntransition -\nAutomatic actions which take place at the time specified by the\nproperty name.  In all cases, the action takes place immediately\nbefore or after the specified function.\n\nThe property value for each of these properties is an object which\ndescribes some number of functions to invoke on a set of specified\nobjects (typically widgets).\n\nSee {@link qx.util.fsm.State} for an example of autoActions.\n\nontransition -\nA function which is called if the predicate function for this\ntransition returns true.  Its signature is function(fsm, event) and\nit is saved in the ontransition property of the transition object.\nIn the ontransition function:\n\nfsm -\nThe finite state machine object to which this state is\nattached.\n\nevent -\nThe event that caused a run of the finite state machine\n\nAdditional properties may be provided in transInfo.  They will not be\nused by the finite state machine, but will be available via\nthis.getUserData(\"<propertyName>\") during the transition's predicate\nand ontransition functions.\n</pre>",
          "paramName": "transitionInfo",
          "description": "\n<pre>\nAn object optionally containing any of the following properties:\n\ncontext -\nA context in which all of the following functions should be run.\n\npredicate -\nA function which is called to determine whether this transition is\nacceptable.  An acceptable transition will cause the transition's\n\"ontransition\" function to be run, the current state's \"onexit\"\nfunction to be run, and the new state's \"onentry\" function to be\nrun.\n\nThe predicate function's signature is function(fsm, event) and it\nis saved in the predicate property of the transition object.  In\nthe predicate function:\n\nfsm -\nThe finite state machine object to which this state is\nattached.\n\nevent -\nThe event that caused a run of the finite state machine\n\nThe predicate function should return one of the following three\nvalues:\n\n- true means the transition is acceptable\n\n- false means the transition is not acceptable, and the next\ntransition (if one exists) should be tried to determine if it\nis acceptable\n\n- null means that the transition determined that no further\ntransitions should be tried.  This might be used when the\ntransition ascertained that the event is for a target that is\nnot available in the current state, and the event has called\nfsm.queueEvent() to have the event delivered upon state\ntransition.\n\nIt is possible to create a default predicate -- one that will cause\na transition to be acceptable always -- by either not providing a\npredicate property, or by explicitly either setting the predicate\nproperty to 'true' or setting it to a function that unconditionally\nreturns 'true'.  This default transition should, of course, always\nbe the last transition added to a state, since no transition added\nafter it will ever be tried.\n\nnextState -\nThe state to which we transition, if the predicate returns true\n(meaning the transition is acceptable).  The value of nextState may\nbe:\n\n- a string, the state name of the state to transition to\n\n- One of the constants:\n- qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE:\nRemain in whatever is the current state\n- qx.util.fsm.FiniteStateMachine.StateChange.POP_STATE_STACK:\nTransition to the state at the top of the saved-state\nstack, and remove the top element from the saved-state\nstack.  Elements are added to the saved-state stack using\nfsm.pushState().  It is an error if no state exists on the\nsaved-state stack.\n- qx.util.fsm.FiniteStateMachine.StateChange.TERMINATE:\nTBD\n\nautoActionsBeforeOntransition -\nautoActionsAfterOntransition -\nAutomatic actions which take place at the time specified by the\nproperty name.  In all cases, the action takes place immediately\nbefore or after the specified function.\n\nThe property value for each of these properties is an object which\ndescribes some number of functions to invoke on a set of specified\nobjects (typically widgets).\n\nSee {@link qx.util.fsm.State} for an example of autoActions.\n\nontransition -\nA function which is called if the predicate function for this\ntransition returns true.  Its signature is function(fsm, event) and\nit is saved in the ontransition property of the transition object.\nIn the ontransition function:\n\nfsm -\nThe finite state machine object to which this state is\nattached.\n\nevent -\nThe event that caused a run of the finite state machine\n\nAdditional properties may be provided in transInfo.  They will not be\nused by the finite state machine, but will be available via\nthis.getUserData(\"<propertyName>\") during the transition's predicate\nand ontransition functions.\n</pre>",
          "type": "Object"
        }
      ]
    }
  },
  "properties": {
    "name": {
      "location": {
        "start": {
          "line": 199,
          "column": 4
        },
        "end": {
          "line": 203,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The name of this transition"
          }
        ]
      },
      "name": "name",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "predicate": {
      "location": {
        "start": {
          "line": 212,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The predicate function for this transition.  This is documented in the\nconstructor, and is typically provided through the constructor's\ntransitionInfo object, but it is also possible (but highly NOT\nrecommended) to change this dynamically."
          }
        ]
      },
      "name": "predicate",
      "propertyType": "new"
    },
    "nextState": {
      "location": {
        "start": {
          "line": 230,
          "column": 4
        },
        "end": {
          "line": 234,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The state to transition to, if the predicate determines that this\ntransition is acceptable.  This is documented in the constructor, and\nis typically provided through the constructor's transitionInfo object,\nbut it is also possible (but highly NOT recommended) to change this\ndynamically."
          }
        ]
      },
      "name": "nextState",
      "propertyType": "new",
      "init": "qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE",
      "defaultValue": "qx.util.fsm.FiniteStateMachine.StateChange.CURRENT_STATE"
    },
    "autoActionsBeforeOntransition": {
      "location": {
        "start": {
          "line": 244,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Automatic actions to take prior to calling the transition's\nontransition function.  This is documented in the constructor, and is\ntypically provided through the constructor's transitionInfo object, but\nit is also possible (but highly NOT recommended) to change this\ndynamically."
          }
        ]
      },
      "name": "autoActionsBeforeOntransition",
      "propertyType": "new"
    },
    "autoActionsAfterOntransition": {
      "location": {
        "start": {
          "line": 258,
          "column": 4
        },
        "end": {
          "line": 262,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Automatic actions to take immediately after calling the transition's\nontransition function.  This is documented in the constructor, and is\ntypically provided through the constructor's transitionInfo object, but\nit is also possible (but highly NOT recommended) to change this\ndynamically."
          }
        ]
      },
      "name": "autoActionsAfterOntransition",
      "propertyType": "new"
    },
    "ontransition": {
      "location": {
        "start": {
          "line": 271,
          "column": 4
        },
        "end": {
          "line": 275,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The function run when the transition is accepted.  This is documented\nin the constructor, and is typically provided through the constructor's\ntransitionInfo object, but it is also possible (but highly NOT\nrecommended) to change this dynamically."
          }
        ]
      },
      "name": "ontransition",
      "propertyType": "new"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__transformPredicate": {
      "location": {
        "start": {
          "line": 287,
          "column": 4
        },
        "end": {
          "line": 314,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Validate the predicate. Converts all incoming values to functions."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} incoming value",
            "paramName": "value",
            "description": " incoming value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} predicate function",
            "type": "Function",
            "description": " predicate function"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__transformNextState": {
      "location": {
        "start": {
          "line": 323,
          "column": 4
        },
        "end": {
          "line": 353,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal transform method"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the final value",
            "type": "Function",
            "description": " the final value"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__transformAutoActionsBeforeOntransition": {
      "location": {
        "start": {
          "line": 362,
          "column": 4
        },
        "end": {
          "line": 369,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal transform method"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the final value",
            "type": "Function",
            "description": " the final value"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__transformAutoActionsAfterOntransition": {
      "location": {
        "start": {
          "line": 377,
          "column": 4
        },
        "end": {
          "line": 384,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal transform method"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the final value",
            "type": "Function",
            "description": " the final value"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__transformOntransition": {
      "location": {
        "start": {
          "line": 392,
          "column": 4
        },
        "end": {
          "line": 409,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal transform method"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Current value",
            "paramName": "value",
            "description": " Current value",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} the final value",
            "type": "Function",
            "description": " the final value"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__bindIfFunction": {
      "location": {
        "start": {
          "line": 425,
          "column": 4
        },
        "end": {
          "line": 435,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "If given a function, bind it to a specified context."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "f {Function|var}\nThe (possibly) function to be bound to the specified context.",
            "paramName": "f",
            "description": "\nThe (possibly) function to be bound to the specified context.",
            "type": [
              "Function",
              "var"
            ]
          },
          {
            "name": "@param",
            "body": "context {Object}\nThe context to bind the function to.",
            "paramName": "context",
            "description": "\nThe context to bind the function to.",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function}\nIf f was a function, the return value is f wrapped such that it will\nbe called in the specified context. Otherwise, f is returned\nunaltered.",
            "type": "Function",
            "description": "\nIf f was a function, the return value is f wrapped such that it will\nbe called in the specified context. Otherwise, f is returned\nunaltered."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getName": {
      "type": "function",
      "name": "getName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for name"
          }
        ]
      }
    },
    "setName": {
      "type": "function",
      "name": "setName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>name</code>.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for name"
          }
        ]
      }
    },
    "resetName": {
      "type": "function",
      "name": "resetName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>name</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #name}."
          }
        ]
      }
    },
    "getPredicate": {
      "type": "function",
      "name": "getPredicate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>predicate</code>.\n\nFor further details take a look at the property definition: {@link #predicate}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for predicate"
          }
        ]
      }
    },
    "setPredicate": {
      "type": "function",
      "name": "setPredicate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>predicate</code>.\n\nFor further details take a look at the property definition: {@link #predicate}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for predicate"
          }
        ]
      }
    },
    "resetPredicate": {
      "type": "function",
      "name": "resetPredicate",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>predicate</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #predicate}."
          }
        ]
      }
    },
    "getNextState": {
      "type": "function",
      "name": "getNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>nextState</code>.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for nextState"
          }
        ]
      }
    },
    "setNextState": {
      "type": "function",
      "name": "setNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>nextState</code>.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for nextState"
          }
        ]
      }
    },
    "resetNextState": {
      "type": "function",
      "name": "resetNextState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>nextState</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #nextState}."
          }
        ]
      }
    },
    "getAutoActionsBeforeOntransition": {
      "type": "function",
      "name": "getAutoActionsBeforeOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoActionsBeforeOntransition</code>.\n\nFor further details take a look at the property definition: {@link #autoActionsBeforeOntransition}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for autoActionsBeforeOntransition"
          }
        ]
      }
    },
    "setAutoActionsBeforeOntransition": {
      "type": "function",
      "name": "setAutoActionsBeforeOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoActionsBeforeOntransition</code>.\n\nFor further details take a look at the property definition: {@link #autoActionsBeforeOntransition}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for autoActionsBeforeOntransition"
          }
        ]
      }
    },
    "resetAutoActionsBeforeOntransition": {
      "type": "function",
      "name": "resetAutoActionsBeforeOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoActionsBeforeOntransition</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoActionsBeforeOntransition}."
          }
        ]
      }
    },
    "getAutoActionsAfterOntransition": {
      "type": "function",
      "name": "getAutoActionsAfterOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>autoActionsAfterOntransition</code>.\n\nFor further details take a look at the property definition: {@link #autoActionsAfterOntransition}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for autoActionsAfterOntransition"
          }
        ]
      }
    },
    "setAutoActionsAfterOntransition": {
      "type": "function",
      "name": "setAutoActionsAfterOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>autoActionsAfterOntransition</code>.\n\nFor further details take a look at the property definition: {@link #autoActionsAfterOntransition}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for autoActionsAfterOntransition"
          }
        ]
      }
    },
    "resetAutoActionsAfterOntransition": {
      "type": "function",
      "name": "resetAutoActionsAfterOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>autoActionsAfterOntransition</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #autoActionsAfterOntransition}."
          }
        ]
      }
    },
    "getOntransition": {
      "type": "function",
      "name": "getOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>ontransition</code>.\n\nFor further details take a look at the property definition: {@link #ontransition}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for ontransition"
          }
        ]
      }
    },
    "setOntransition": {
      "type": "function",
      "name": "setOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>ontransition</code>.\n\nFor further details take a look at the property definition: {@link #ontransition}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for ontransition"
          }
        ]
      }
    },
    "resetOntransition": {
      "type": "function",
      "name": "resetOntransition",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>ontransition</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #ontransition}."
          }
        ]
      }
    }
  },
  "descendants": []
}