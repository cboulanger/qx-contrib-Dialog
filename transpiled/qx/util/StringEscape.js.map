{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/StringEscape.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "escape",
    "str",
    "charCodeToEntities",
    "entity",
    "result",
    "i",
    "l",
    "length",
    "chr",
    "charAt",
    "code",
    "charCodeAt",
    "unescape",
    "entitiesToCharCode",
    "replace",
    "substring",
    "String",
    "fromCharCode",
    "toUpperCase",
    "match",
    "parseInt",
    "util",
    "StringEscape"
  ],
  "mappings": ";;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAwBAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,sBAApB,EACA;AACEC,aACA;AACE;;;;;;;AAOAC,cAAS,gBAASC,GAAT,EAAcC,kBAAd,EACT;AACE,YAAIC,MAAJ;AAAA,YAAYC,SAAS,EAArB;;AAEA,aAAK,IAAIC,IAAE,CAAN,EAASC,IAAEL,IAAIM,MAApB,EAA4BF,IAAEC,CAA9B,EAAiCD,GAAjC,EACA;AACE,cAAIG,MAAMP,IAAIQ,MAAJ,CAAWJ,CAAX,CAAV;AACA,cAAIK,OAAOF,IAAIG,UAAJ,CAAe,CAAf,CAAX;;AAEA,cAAIT,mBAAmBQ,IAAnB,CAAJ,EAA8B;AAC5BP,qBAAS,MAAMD,mBAAmBQ,IAAnB,CAAN,GAAiC,GAA1C;AACD,WAFD,MAIA;AACE,gBAAIA,OAAO,IAAX,EAAiB;AACfP,uBAAS,OAAOO,IAAP,GAAc,GAAvB;AACD,aAFD,MAEO;AACLP,uBAASK,GAAT;AACD;AACF;;AAEDJ,oBAAUD,MAAV;AACD;;AAED,eAAOC,MAAP;AACD,OAjCH;;AAoCE;;;;;;;AAOAQ,gBAAW,kBAASX,GAAT,EAAcY,kBAAd,EACX;AACE,eAAOZ,IAAIa,OAAJ,CAAY,YAAZ,EAA0B,UAASX,MAAT,EACjC;AACE,cAAIK,MAAML,MAAV;AACA,cAAIA,SAASA,OAAOY,SAAP,CAAiB,CAAjB,EAAoBZ,OAAOI,MAAP,GAAgB,CAApC,CAAb;AACA,cAAIG,OAAOG,mBAAmBV,MAAnB,CAAX;;AAEA,cAAIO,IAAJ,EAAU;AACRF,kBAAMQ,OAAOC,YAAP,CAAoBP,IAApB,CAAN;AACD,WAFD,MAIA;AACE,gBAAIP,OAAOM,MAAP,CAAc,CAAd,KAAoB,GAAxB,EACA;AACE,kBAAIN,OAAOM,MAAP,CAAc,CAAd,EAAiBS,WAAjB,MAAkC,GAAtC,EACA;AACER,uBAAOP,OAAOY,SAAP,CAAiB,CAAjB,CAAP;;AAEA;AACA,oBAAIL,KAAKS,KAAL,CAAW,kBAAX,CAAJ,EAAoC;AAClCX,wBAAMQ,OAAOC,YAAP,CAAoBG,SAASV,IAAT,EAAe,EAAf,CAApB,CAAN;AACD;AACF,eARD,MAUA;AACEA,uBAAOP,OAAOY,SAAP,CAAiB,CAAjB,CAAP;;AAEA;AACA,oBAAIL,KAAKS,KAAL,CAAW,SAAX,CAAJ,EAA2B;AACzBX,wBAAMQ,OAAOC,YAAP,CAAoBG,SAASV,IAAT,EAAe,EAAf,CAApB,CAAN;AACD;AACF;AACF;AACF;;AAED,iBAAOF,GAAP;AACD,SAnCM,CAAP;AAoCD;AAjFH;AAFF,GADA,C;AAxBAd,KAAG2B,IAAH,CAAQC,YAAR,CAAqBzB,aAArB,GAAqCA,aAArC",
  "file": "StringEscape.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Generic escaping and unescaping of DOM strings.\n *\n * {@link qx.bom.String} for (un)escaping of HTML strings.\n * {@link qx.xml.String} for (un)escaping of XML strings.\n */\nqx.Bootstrap.define(\"qx.util.StringEscape\",\n{\n  statics :\n  {\n    /**\n     * generic escaping method\n     *\n     * @param str {String} string to escape\n     * @param charCodeToEntities {Map} entity to charcode map\n     * @return {String} escaped string\n     */\n    escape : function(str, charCodeToEntities)\n    {\n      var entity, result = \"\";\n\n      for (var i=0, l=str.length; i<l; i++)\n      {\n        var chr = str.charAt(i);\n        var code = chr.charCodeAt(0);\n\n        if (charCodeToEntities[code]) {\n          entity = \"&\" + charCodeToEntities[code] + \";\";\n        }\n        else\n        {\n          if (code > 0x7F) {\n            entity = \"&#\" + code + \";\";\n          } else {\n            entity = chr;\n          }\n        }\n\n        result += entity;\n      }\n\n      return result;\n    },\n\n\n    /**\n     * generic unescaping method\n     *\n     * @param str {String} string to unescape\n     * @param entitiesToCharCode {Map} charcode to entity map\n     * @return {String} unescaped string\n     */\n    unescape : function(str, entitiesToCharCode)\n    {\n      return str.replace(/&[#\\w]+;/gi, function(entity)\n      {\n        var chr = entity;\n        var entity = entity.substring(1, entity.length - 1);\n        var code = entitiesToCharCode[entity];\n\n        if (code) {\n          chr = String.fromCharCode(code);\n        }\n        else\n        {\n          if (entity.charAt(0) == '#')\n          {\n            if (entity.charAt(1).toUpperCase() == 'X')\n            {\n              code = entity.substring(2);\n\n              // match hex number\n              if (code.match(/^[0-9A-Fa-f]+$/gi)) {\n                chr = String.fromCharCode(parseInt(code, 16));\n              }\n            }\n            else\n            {\n              code = entity.substring(1);\n\n              // match integer\n              if (code.match(/^\\d+$/gi)) {\n                chr = String.fromCharCode(parseInt(code, 10));\n              }\n            }\n          }\n        }\n\n        return chr;\n      });\n    }\n  }\n});\n"
  ]
}