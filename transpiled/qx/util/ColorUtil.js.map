{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/ColorUtil.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "REGEXP",
    "hex3",
    "hex6",
    "rgb",
    "rgba",
    "SYSTEM",
    "activeborder",
    "activecaption",
    "appworkspace",
    "background",
    "buttonface",
    "buttonhighlight",
    "buttonshadow",
    "buttontext",
    "captiontext",
    "graytext",
    "highlight",
    "highlighttext",
    "inactiveborder",
    "inactivecaption",
    "inactivecaptiontext",
    "infobackground",
    "infotext",
    "menu",
    "menutext",
    "scrollbar",
    "threeddarkshadow",
    "threedface",
    "threedhighlight",
    "threedlightshadow",
    "threedshadow",
    "window",
    "windowframe",
    "windowtext",
    "NAMED",
    "black",
    "silver",
    "gray",
    "white",
    "maroon",
    "red",
    "purple",
    "fuchsia",
    "green",
    "lime",
    "olive",
    "yellow",
    "navy",
    "blue",
    "teal",
    "aqua",
    "transparent",
    "magenta",
    "orange",
    "brown",
    "isNamedColor",
    "value",
    "undefined",
    "isSystemColor",
    "supportsThemes",
    "Class",
    "isDefined",
    "isThemedColor",
    "theme",
    "manager",
    "Color",
    "getInstance",
    "isDynamic",
    "stringToRgb",
    "str",
    "resolveDynamic",
    "concat",
    "Error",
    "isRgbaString",
    "__rgbaStringToRgb",
    "isRgbString",
    "__rgbStringToRgb",
    "isHex3String",
    "__hex3StringToRgb",
    "isHex6String",
    "__hex6StringToRgb",
    "cssStringToRgb",
    "stringToRgbString",
    "rgbToRgbString",
    "join",
    "rgbToHexString",
    "lang",
    "String",
    "pad",
    "toString",
    "toUpperCase",
    "isValidPropertyValue",
    "isCssString",
    "test",
    "parseInt",
    "RegExp",
    "$1",
    "$2",
    "$3",
    "alpha",
    "parseFloat",
    "$4",
    "$5",
    "$6",
    "hex3StringToRgb",
    "hex3StringToHex6String",
    "hex6StringToRgb",
    "hexStringToRgb",
    "rgbToHsb",
    "hue",
    "saturation",
    "brightness",
    "cmax",
    "cmin",
    "redc",
    "greenc",
    "bluec",
    "Math",
    "round",
    "hsbToRgb",
    "hsb",
    "i",
    "f",
    "p",
    "r",
    "t",
    "tov",
    "floor",
    "randomColor",
    "random",
    "g",
    "b",
    "util",
    "ColorUtil"
  ],
  "mappings": "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",
  "file": "ColorUtil.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Christian Hagendorn (cs)\n\n************************************************************************ */\n\n/**\n * Methods to convert colors between different color spaces.\n *\n * @ignore(qx.theme.*)\n * @ignore(qx.Class)\n * @ignore(qx.Class.*)\n */\nqx.Bootstrap.define(\"qx.util.ColorUtil\",\n{\n  statics :\n  {\n    /**\n     * Regular expressions for color strings\n     */\n    REGEXP :\n    {\n      hex3 : /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      hex6 : /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n      rgb : /^rgb\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*\\)$/,\n      rgba : /^rgba\\(\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*,\\s*([0-9]{1,3}\\.{0,1}[0-9]*)\\s*\\)$/\n    },\n\n\n    /**\n     * CSS3 system color names.\n     */\n    SYSTEM :\n    {\n      activeborder        : true,\n      activecaption       : true,\n      appworkspace        : true,\n      background          : true,\n      buttonface          : true,\n      buttonhighlight     : true,\n      buttonshadow        : true,\n      buttontext          : true,\n      captiontext         : true,\n      graytext            : true,\n      highlight           : true,\n      highlighttext       : true,\n      inactiveborder      : true,\n      inactivecaption     : true,\n      inactivecaptiontext : true,\n      infobackground      : true,\n      infotext            : true,\n      menu                : true,\n      menutext            : true,\n      scrollbar           : true,\n      threeddarkshadow    : true,\n      threedface          : true,\n      threedhighlight     : true,\n      threedlightshadow   : true,\n      threedshadow        : true,\n      window              : true,\n      windowframe         : true,\n      windowtext          : true\n    },\n\n\n    /**\n     * Named colors, only the 16 basic colors plus the following ones:\n     * transparent, grey, magenta, orange and brown\n     */\n    NAMED :\n    {\n      black       : [ 0, 0, 0 ],\n      silver      : [ 192, 192, 192 ],\n      gray        : [ 128, 128, 128 ],\n      white       : [ 255, 255, 255 ],\n      maroon      : [ 128, 0, 0 ],\n      red         : [ 255, 0, 0 ],\n      purple      : [ 128, 0, 128 ],\n      fuchsia     : [ 255, 0, 255 ],\n      green       : [ 0, 128, 0 ],\n      lime        : [ 0, 255, 0 ],\n      olive       : [ 128, 128, 0 ],\n      yellow      : [ 255, 255, 0 ],\n      navy        : [ 0, 0, 128 ],\n      blue        : [ 0, 0, 255 ],\n      teal        : [ 0, 128, 128 ],\n      aqua        : [ 0, 255, 255 ],\n\n      // Additional values\n      transparent : [ -1, -1, -1 ],\n      magenta     : [ 255, 0, 255 ],   // alias for fuchsia\n      orange      : [ 255, 165, 0 ],\n      brown       : [ 165, 42, 42 ]\n    },\n\n\n    /**\n     * Whether the incoming value is a named color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a named color\n     */\n    isNamedColor : function(value) {\n      return this.NAMED[value] !== undefined;\n    },\n\n\n    /**\n     * Whether the incoming value is a system color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a system color\n     */\n    isSystemColor : function(value) {\n      return this.SYSTEM[value] !== undefined;\n    },\n\n\n    /**\n     * Whether the color theme manager is loaded. Generally\n     * part of the GUI of qooxdoo.\n     *\n     * @return {Boolean} <code>true</code> when color theme support is ready.\n     **/\n    supportsThemes : function() {\n      if (qx.Class) {\n        return qx.Class.isDefined(\"qx.theme.manager.Color\");\n      }\n      return false;\n    },\n\n\n    /**\n     * Whether the incoming value is a themed color.\n     *\n     * @param value {String} the color value to test\n     * @return {Boolean} true if the color is a themed color\n     */\n    isThemedColor : function(value)\n    {\n      if (!this.supportsThemes()) {\n        return false;\n      }\n\n      if (qx.theme && qx.theme.manager && qx.theme.manager.Color) {\n        return qx.theme.manager.Color.getInstance().isDynamic(value);\n      }\n      return false;\n    },\n\n\n    /**\n     * Try to convert an incoming string to an RGB array.\n     * Supports themed, named and system colors, but also RGB strings,\n     * hex3 and hex6 values.\n     *\n     * @param str {String} any string\n     * @return {Array} returns an array of red, green, blue on a successful transformation\n     * @throws {Error} if the string could not be parsed\n     */\n    stringToRgb : function(str)\n    {\n      if (this.supportsThemes() && this.isThemedColor(str)) {\n        str = qx.theme.manager.Color.getInstance().resolveDynamic(str);\n      }\n\n      if (this.isNamedColor(str))\n      {\n        return this.NAMED[str].concat();\n      }\n      else if (this.isSystemColor(str))\n      {\n        throw new Error(\"Could not convert system colors to RGB: \" + str);\n      }\n      else if (this.isRgbaString(str)) {\n        return this.__rgbaStringToRgb(str);\n      }\n      else if (this.isRgbString(str))\n      {\n        return this.__rgbStringToRgb();\n      }\n      else if (this.isHex3String(str))\n      {\n        return this.__hex3StringToRgb();\n      }\n      else if (this.isHex6String(str))\n      {\n        return this.__hex6StringToRgb();\n      }\n\n      throw new Error(\"Could not parse color: \" + str);\n    },\n\n\n    /**\n     * Try to convert an incoming string to an RGB array.\n     * Support named colors, RGB strings, hex3 and hex6 values.\n     *\n     * @param str {String} any string\n     * @return {Array} returns an array of red, green, blue on a successful transformation\n     * @throws {Error} if the string could not be parsed\n     */\n    cssStringToRgb : function(str)\n    {\n      if (this.isNamedColor(str))\n      {\n        return this.NAMED[str];\n      }\n      else if (this.isSystemColor(str))\n      {\n        throw new Error(\"Could not convert system colors to RGB: \" + str);\n      }\n      else if (this.isRgbString(str))\n      {\n        return this.__rgbStringToRgb();\n      }\n      else if (this.isRgbaString(str))\n      {\n        return this.__rgbaStringToRgb();\n      }\n      else if (this.isHex3String(str))\n      {\n        return this.__hex3StringToRgb();\n      }\n      else if (this.isHex6String(str))\n      {\n        return this.__hex6StringToRgb();\n      }\n\n      throw new Error(\"Could not parse color: \" + str);\n    },\n\n\n    /**\n     * Try to convert an incoming string to an RGB string, which can be used\n     * for all color properties.\n     * Supports themed, named and system colors, but also RGB strings,\n     * hex3 and hex6 values.\n     *\n     * @param str {String} any string\n     * @return {String} a RGB string\n     * @throws {Error} if the string could not be parsed\n     */\n    stringToRgbString : function(str) {\n      return this.rgbToRgbString(this.stringToRgb(str));\n    },\n\n\n    /**\n     * Converts a RGB array to an RGB string\n     *\n     * @param rgb {Array} an array with red, green and blue values and optionally\n     * an alpha value\n     * @return {String} an RGB string\n     */\n    rgbToRgbString : function(rgb) {\n      return \"rgb\" + (rgb[3] !== undefined ? \"a\" : \"\") +  \"(\" + rgb.join(\",\") + \")\";\n    },\n\n\n    /**\n     * Converts a RGB array to an hex6 string\n     *\n     * @param rgb {Array} an array with red, green and blue\n     * @return {String} a hex6 string (#xxxxxx)\n     */\n    rgbToHexString : function(rgb)\n    {\n      return (\n        \"#\" +\n        qx.lang.String.pad(rgb[0].toString(16).toUpperCase(), 2) +\n        qx.lang.String.pad(rgb[1].toString(16).toUpperCase(), 2) +\n        qx.lang.String.pad(rgb[2].toString(16).toUpperCase(), 2)\n      );\n    },\n\n\n    /**\n     * Detects if a string is a valid qooxdoo color\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid qooxdoo color\n     */\n    isValidPropertyValue : function(str) {\n      return (\n        this.isThemedColor(str) ||\n        this.isNamedColor(str) ||\n        this.isHex3String(str) ||\n        this.isHex6String(str) ||\n        this.isRgbString(str) ||\n        this.isRgbaString(str));\n    },\n\n\n    /**\n     * Detects if a string is a valid CSS color string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid CSS color string\n     */\n    isCssString : function(str) {\n      return (\n        this.isSystemColor(str) ||\n        this.isNamedColor(str) ||\n        this.isHex3String(str) ||\n        this.isHex6String(str) ||\n        this.isRgbString(str) ||\n        this.isRgbaString(str));\n    },\n\n\n    /**\n     * Detects if a string is a valid hex3 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex3 string\n     */\n    isHex3String : function(str) {\n      return this.REGEXP.hex3.test(str);\n    },\n\n\n    /**\n     * Detects if a string is a valid hex6 string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid hex6 string\n     */\n    isHex6String : function(str) {\n      return this.REGEXP.hex6.test(str);\n    },\n\n\n    /**\n     * Detects if a string is a valid RGB string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid RGB string\n     */\n    isRgbString : function(str) {\n      return this.REGEXP.rgb.test(str);\n    },\n\n\n    /**\n     * Detects if a string is a valid RGBA string\n     *\n     * @param str {String} any string\n     * @return {Boolean} true when the incoming value is a valid RGBA string\n     */\n    isRgbaString : function(str) {\n      return this.REGEXP.rgba.test(str);\n    },\n\n\n    /**\n     * Converts a regexp object match of a rgb string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __rgbStringToRgb : function()\n    {\n      var red = parseInt(RegExp.$1, 10);\n      var green = parseInt(RegExp.$2, 10);\n      var blue = parseInt(RegExp.$3, 10);\n\n      return [red, green, blue];\n    },\n\n   /**\n    * Converts a regexp object match of a rgba string to an RGB array.\n    *\n    * @return {Array} an array with red, green, blue\n    */\n    __rgbaStringToRgb : function()\n    {\n      var red = parseInt(RegExp.$1, 10);\n      var green = parseInt(RegExp.$2, 10);\n      var blue = parseInt(RegExp.$3, 10);\n      var alpha = parseFloat(RegExp.$4, 10);\n\n      if (red === 0 && green === 0 & blue === 0 && alpha === 0) {\n        return [-1, -1, -1];\n      }\n\n      return [red, green, blue];\n    },\n\n\n    /**\n     * Converts a regexp object match of a hex3 string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hex3StringToRgb : function()\n    {\n      var red = parseInt(RegExp.$1, 16) * 17;\n      var green = parseInt(RegExp.$2, 16) * 17;\n      var blue = parseInt(RegExp.$3, 16) * 17;\n\n      return [red, green, blue];\n    },\n\n\n    /**\n     * Converts a regexp object match of a hex6 string to an RGB array.\n     *\n     * @return {Array} an array with red, green, blue\n     */\n    __hex6StringToRgb : function()\n    {\n      var red = (parseInt(RegExp.$1, 16) * 16) + parseInt(RegExp.$2, 16);\n      var green = (parseInt(RegExp.$3, 16) * 16) + parseInt(RegExp.$4, 16);\n      var blue = (parseInt(RegExp.$5, 16) * 16) + parseInt(RegExp.$6, 16);\n\n      return [red, green, blue];\n    },\n\n\n    /**\n     * Converts a hex3 string to an RGB array\n     *\n     * @param value {String} a hex3 (#xxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hex3StringToRgb : function(value)\n    {\n      if (this.isHex3String(value)) {\n        return this.__hex3StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex3 value: \" + value);\n    },\n\n\n    /**\n     * Converts a hex3 (#xxx) string to a hex6 (#xxxxxx) string.\n     *\n     * @param value {String} a hex3 (#xxx) string\n     * @return {String} The hex6 (#xxxxxx) string or the passed value when the\n     *   passed value is not an hex3 (#xxx) value.\n     */\n    hex3StringToHex6String : function(value)\n    {\n      if (this.isHex3String(value)) {\n        return this.rgbToHexString(this.hex3StringToRgb(value));\n      }\n      return value;\n    },\n\n\n    /**\n     * Converts a hex6 string to an RGB array\n     *\n     * @param value {String} a hex6 (#xxxxxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hex6StringToRgb : function(value)\n    {\n      if (this.isHex6String(value)) {\n        return this.__hex6StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex6 value: \" + value);\n    },\n\n\n    /**\n     * Converts a hex string to an RGB array\n     *\n     * @param value {String} a hex3 (#xxx) or hex6 (#xxxxxx) string\n     * @return {Array} an array with red, green, blue\n     */\n    hexStringToRgb : function(value)\n    {\n      if (this.isHex3String(value)) {\n        return this.__hex3StringToRgb(value);\n      }\n\n      if (this.isHex6String(value)) {\n        return this.__hex6StringToRgb(value);\n      }\n\n      throw new Error(\"Invalid hex value: \" + value);\n    },\n\n\n    /**\n     * Convert RGB colors to HSB\n     *\n     * @param rgb {Number[]} red, blue and green as array\n     * @return {Array} an array with hue, saturation and brightness\n     */\n    rgbToHsb : function(rgb)\n    {\n      var hue, saturation, brightness;\n\n      var red = rgb[0];\n      var green = rgb[1];\n      var blue = rgb[2];\n\n      var cmax = (red > green) ? red : green;\n\n      if (blue > cmax) {\n        cmax = blue;\n      }\n\n      var cmin = (red < green) ? red : green;\n\n      if (blue < cmin) {\n        cmin = blue;\n      }\n\n      brightness = cmax / 255.0;\n\n      if (cmax != 0) {\n        saturation = (cmax - cmin) / cmax;\n      } else {\n        saturation = 0;\n      }\n\n      if (saturation == 0)\n      {\n        hue = 0;\n      }\n      else\n      {\n        var redc = (cmax - red) / (cmax - cmin);\n        var greenc = (cmax - green) / (cmax - cmin);\n        var bluec = (cmax - blue) / (cmax - cmin);\n\n        if (red == cmax) {\n          hue = bluec - greenc;\n        } else if (green == cmax) {\n          hue = 2.0 + redc - bluec;\n        } else {\n          hue = 4.0 + greenc - redc;\n        }\n\n        hue = hue / 6.0;\n\n        if (hue < 0) {\n          hue = hue + 1.0;\n        }\n      }\n\n      return [ Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100) ];\n    },\n\n\n    /**\n     * Convert HSB colors to RGB\n     *\n     * @param hsb {Number[]} an array with hue, saturation and brightness\n     * @return {Integer[]} an array with red, green, blue\n     */\n    hsbToRgb : function(hsb)\n    {\n      var i, f, p, r, t;\n\n      var hue = hsb[0] / 360;\n      var saturation = hsb[1] / 100;\n      var brightness = hsb[2] / 100;\n\n      if (hue >= 1.0) {\n        hue %= 1.0;\n      }\n\n      if (saturation > 1.0) {\n        saturation = 1.0;\n      }\n\n      if (brightness > 1.0) {\n        brightness = 1.0;\n      }\n\n      var tov = Math.floor(255 * brightness);\n      var rgb = {};\n\n      if (saturation == 0.0)\n      {\n        rgb.red = rgb.green = rgb.blue = tov;\n      }\n      else\n      {\n        hue *= 6.0;\n\n        i = Math.floor(hue);\n\n        f = hue - i;\n\n        p = Math.floor(tov * (1.0 - saturation));\n        r = Math.floor(tov * (1.0 - (saturation * f)));\n        t = Math.floor(tov * (1.0 - (saturation * (1.0 - f))));\n\n        switch(i)\n        {\n          case 0:\n            rgb.red = tov;\n            rgb.green = t;\n            rgb.blue = p;\n            break;\n\n          case 1:\n            rgb.red = r;\n            rgb.green = tov;\n            rgb.blue = p;\n            break;\n\n          case 2:\n            rgb.red = p;\n            rgb.green = tov;\n            rgb.blue = t;\n            break;\n\n          case 3:\n            rgb.red = p;\n            rgb.green = r;\n            rgb.blue = tov;\n            break;\n\n          case 4:\n            rgb.red = t;\n            rgb.green = p;\n            rgb.blue = tov;\n            break;\n\n          case 5:\n            rgb.red = tov;\n            rgb.green = p;\n            rgb.blue = r;\n            break;\n        }\n      }\n\n      return [rgb.red, rgb.green, rgb.blue];\n    },\n\n\n    /**\n     * Creates a random color.\n     *\n     * @return {String} a valid qooxdoo/CSS rgb color string.\n     */\n    randomColor : function()\n    {\n      var r = Math.round(Math.random() * 255);\n      var g = Math.round(Math.random() * 255);\n      var b = Math.round(Math.random() * 255);\n\n      return this.rgbToRgbString([r, g, b]);\n    }\n  }\n});\n"
  ]
}