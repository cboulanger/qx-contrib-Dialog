{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/DeferredCall.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "callback",
    "context",
    "__callback",
    "__context",
    "__manager",
    "util",
    "DeferredCallManager",
    "getInstance",
    "members",
    "cancel",
    "schedule",
    "call",
    "isDisposed",
    "warn",
    "apply",
    "destruct",
    "DeferredCall"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA8BAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,sBAAhB,EACA;AACEC,YAASN,GAAGO,IAAH,CAAQC,MADnB;;AAKE;;;;;;AAMA;;;;AAIAC,eAAY,mBAASC,QAAT,EAAmBC,OAAnB,EACZ;AACE;;AAEA,WAAKC,UAAL,GAAkBF,QAAlB;AACA,WAAKG,SAAL,GAAiBF,WAAW,IAA5B;AACA,WAAKG,SAAL,GAAiBd,GAAGe,IAAH,CAAQC,mBAAR,CAA4BC,WAA5B,EAAjB;AACD,KAtBH;;AA0BE;;;;;;AAMAC,aACA;;AAEEN,kBAAa,IAFf;AAGEC,iBAAY,IAHd;AAIEC,iBAAY,IAJd;;AAME;;;AAGAK,cAAS,kBAAW;AAClB,aAAKL,SAAL,CAAeK,MAAf,CAAsB,IAAtB;AACD,OAXH;;AAcE;;;AAGAC,gBAAW,oBAAW;AACpB,aAAKN,SAAL,CAAeM,QAAf,CAAwB,IAAxB;AACD,OAnBH;;AAsBE;;;AAGAC,YAAO,gBAAW;AAEyB;AACvC;AACA,cAAIV,UAAU,KAAKE,SAAnB;AACA,cAAIF,WAAWA,QAAQW,UAAnB,IAAiCX,QAAQW,UAAR,EAArC,EAA2D;AACzD,iBAAKC,IAAL,CACE,yBAAyBZ,OAAzB,GAAmC,yBAAnC,GACA,IADA,GACO,uBAFT;AAID;AACF;;AAED,aAAKE,SAAL,GAAiB,KAAKD,UAAL,CAAgBY,KAAhB,CAAsB,KAAKX,SAA3B,CAAjB,GAAyD,KAAKD,UAAL,EAAzD;AACD;AAvCH,KAjCF;;AA6EE;;;;;;AAMAa,cAAW,oBACX;AACE,WAAKN,MAAL;AACA,WAAKN,SAAL,GAAiB,KAAKD,UAAL,GAAkB,KAAKE,SAAL,GAAiB,IAApD;AACD;AAvFH,GADA,C;AA9BAd,KAAGe,IAAH,CAAQW,YAAR,CAAqBvB,aAArB,GAAqCA,aAArC",
  "file": "DeferredCall.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This class represents a wrapper for functions, which should be called after\n * the current thread of JavaScript has finished and the control is returned to\n * the browser. The wrapped function will at most be called once after the control\n * has been given back to the browser, independent of the number of {@link #call}\n * calls.\n * \n * This class does not need to be disposed, although doing so will cancel any\n * pending call\n *\n * @require(qx.util.DeferredCallManager)\n */\nqx.Class.define(\"qx.util.DeferredCall\",\n{\n  extend : qx.core.Object,\n\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param callback {Function} The callback\n   * @param context {Object?window} the context in which the function will be called.\n   */\n  construct : function(callback, context)\n  {\n    this.base(arguments);\n\n    this.__callback = callback;\n    this.__context = context || null;\n    this.__manager = qx.util.DeferredCallManager.getInstance();\n  },\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    __callback : null,\n    __context : null,\n    __manager : null,\n\n    /**\n     * Prevent the callback from being called.\n     */\n    cancel : function() {\n      this.__manager.cancel(this);\n    },\n\n\n    /**\n     * Issue a deferred call of the callback.\n     */\n    schedule : function() {\n      this.__manager.schedule(this);\n    },\n\n\n    /**\n     * Calls the callback directly.\n     */\n    call : function() {\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        // warn if the context is disposed\n        var context = this.__context;\n        if (context && context.isDisposed && context.isDisposed()) {\n          this.warn(\n            \"The context object '\" + context + \"' of the defered call '\" +\n            this + \"'is already disposed.\"\n          );\n        }\n      }\n\n      this.__context ? this.__callback.apply(this.__context) : this.__callback();\n    }\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    this.cancel();\n    this.__context = this.__callback = this.__manager = null;\n  }\n});\n"
  ]
}