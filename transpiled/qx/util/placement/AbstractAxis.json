{
  "className": "qx.util.placement.AbstractAxis",
  "packageName": "qx.util.placement",
  "name": "AbstractAxis",
  "superClass": "Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 102,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2009 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\nChristian Hagendorn (chris_schmidt)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Abstract class to compute the position of an object on one axis."
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "computeStart": {
      "location": {
        "start": {
          "line": 49,
          "column": 4
        },
        "end": {
          "line": 51,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the start of the object on the axis"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "size {Integer} Size of the object to align",
            "paramName": "size",
            "description": " Size of the object to align",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "target {Map} Location of the object to align the object to. This map\nshould have the keys <code>start</code> and <code>end</code>.",
            "paramName": "target",
            "description": " Location of the object to align the object to. This map\nshould have the keys <code>start</code> and <code>end</code>.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "offsets {Map} Map with all offsets on each side.\nComes with the keys <code>start</code> and <code>end</code>.",
            "paramName": "offsets",
            "description": " Map with all offsets on each side.\nComes with the keys <code>start</code> and <code>end</code>.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "areaSize {Integer} Size of the axis.",
            "paramName": "areaSize",
            "description": " Size of the axis.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "position {String} Alignment of the object on the target. Valid values are\n<ul>\n<li><code>edge-start</code> The object is placed before the target</li>\n<li><code>edge-end</code> The object is placed after the target</li>\n<li><code>align-start</code>The start of the object is aligned with the start of the target</li>\n<li><code>align-center</code>The center of the object is aligned with the center of the target</li>\n<li><code>align-end</code>The end of the object is aligned with the end of the object</li>\n</ul>",
            "paramName": "position",
            "description": " Alignment of the object on the target. Valid values are\n<ul>\n<li><code>edge-start</code> The object is placed before the target</li>\n<li><code>edge-end</code> The object is placed after the target</li>\n<li><code>align-start</code>The start of the object is aligned with the start of the target</li>\n<li><code>align-center</code>The center of the object is aligned with the center of the target</li>\n<li><code>align-end</code>The end of the object is aligned with the end of the object</li>\n</ul>",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The computed start position of the object.",
            "type": "Integer",
            "description": " The computed start position of the object."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_moveToEdgeAndAlign": {
      "location": {
        "start": {
          "line": 67,
          "column": 4
        },
        "end": {
          "line": 86,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Computes the start of the object by taking only the attachment and\nalignment into account. The object by be not fully visible."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "size {Integer} Size of the object to align",
            "paramName": "size",
            "description": " Size of the object to align",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "target {Map} Location of the object to align the object to. This map\nshould have the keys <code>start</code> and <code>end</code>.",
            "paramName": "target",
            "description": " Location of the object to align the object to. This map\nshould have the keys <code>start</code> and <code>end</code>.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "offsets {Map} Map with all offsets on each side.\nComes with the keys <code>start</code> and <code>end</code>.",
            "paramName": "offsets",
            "description": " Map with all offsets on each side.\nComes with the keys <code>start</code> and <code>end</code>.",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "position {String} Accepts the same values as the <code> position</code>\nargument of {@link #computeStart}.",
            "paramName": "position",
            "description": " Accepts the same values as the <code> position</code>\nargument of {@link #computeStart}.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The computed start position of the object.",
            "type": "Integer",
            "description": " The computed start position of the object."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isInRange": {
      "location": {
        "start": {
          "line": 98,
          "column": 4
        },
        "end": {
          "line": 100,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the object specified by <code>start</code> and <code>size</code>\nis completely inside of the axis' range.."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "start {Integer} Computed start position of the object",
            "paramName": "start",
            "description": " Computed start position of the object",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "size {Integer} Size of the object",
            "paramName": "size",
            "description": " Size of the object",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "areaSize {Integer} The size of the axis",
            "paramName": "areaSize",
            "description": " The size of the axis",
            "type": "Integer"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the object is inside of the axis' range",
            "type": "Boolean",
            "description": " Whether the object is inside of the axis' range"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    }
  },
  "descendants": []
}