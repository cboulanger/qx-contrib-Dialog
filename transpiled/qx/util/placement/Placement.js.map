{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/placement/Placement.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__defaultAxis",
    "util",
    "placement",
    "DirectAxis",
    "properties",
    "axisX",
    "check",
    "axisY",
    "edge",
    "init",
    "align",
    "statics",
    "__instance",
    "compute",
    "size",
    "area",
    "target",
    "offsets",
    "position",
    "modeX",
    "modeY",
    "Placement",
    "splitted",
    "split",
    "expected",
    "Assert",
    "assertEquals",
    "set",
    "__getAxis",
    "__direct",
    "__keepAlign",
    "__bestFit",
    "mode",
    "KeepAlignAxis",
    "BestFitAxis",
    "Error",
    "members",
    "assertObject",
    "assertNumber",
    "width",
    "height",
    "top",
    "right",
    "bottom",
    "left",
    "getAxisX",
    "computeStart",
    "start",
    "end",
    "__getPositionX",
    "getAxisY",
    "__getPositionY",
    "getEdge",
    "getAlign",
    "destruct",
    "_disposeObjects"
  ],
  "mappings": "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",
  "file": "Placement.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n     * Christian Hagendorn (chris_schmidt)\n\n************************************************************************ */\n\n/**\n * Contains methods to compute a position for any object which should\n * be positioned relative to another object.\n */\nqx.Class.define(\"qx.util.placement.Placement\",\n{\n  extend : qx.core.Object,\n\n  construct : function()\n  {\n    this.base(arguments);\n    this.__defaultAxis = qx.util.placement.DirectAxis;\n  },\n\n\n  properties :\n  {\n    /**\n     * The axis object to use for the horizontal placement\n     */\n    axisX : {\n      check: \"Class\"\n    },\n\n    /**\n     * The axis object to use for the vertical placement\n     */\n    axisY : {\n      check: \"Class\"\n    },\n\n    /**\n     * Specify to which edge of the target object, the object should be attached\n     */\n    edge : {\n      check: [\"top\", \"right\", \"bottom\", \"left\"],\n      init: \"top\"\n    },\n\n    /**\n     * Specify with which edge of the target object, the object should be aligned\n     */\n    align : {\n      check: [\"top\", \"right\", \"bottom\", \"left\", \"center\", \"middle\"],\n      init: \"right\"\n    }\n  },\n\n\n  statics :\n  {\n    __instance : null,\n\n    /**\n     * DOM and widget independent method to compute the location\n     * of an object to make it relative to any other object.\n     *\n     * @param size {Map} With the keys <code>width</code> and <code>height</code>\n     *   of the object to align\n     * @param area {Map} Available area to position the object. Has the keys\n     *   <code>width</code> and <code>height</code>. Normally this is the parent\n     *   object of the one to align.\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     * @param offsets {Map} Map with all offsets for each direction.\n     *   Comes with the keys <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code>.\n     * @param position {String} Alignment of the object on the target, any of\n     *   \"top-left\", \"top-center\", \"top-right\", \"bottom-left\", \"bottom-center\", \"bottom-right\",\n     *   \"left-top\", \"left-middle\", \"left-bottom\", \"right-top\", \"right-middle\", \"right-bottom\".\n     * @param modeX {String} Horizontal placement mode. Valid values are:\n     *   <ul>\n     *   <li><code>direct</code>: place the object directly at the given\n     *   location.</li>\n     *   <li><code>keep-align</code>: if parts of the object is outside of the visible\n     *   area it is moved to the best fitting 'edge' and 'alignment' of the target.\n     *   It is guaranteed the the new position attaches the object to one of the\n     *   target edges and that that is aligned with a target edge.</li>\n     *   <li>best-fit</li>: If parts of the object are outside of the visible\n     *   area it is moved into the view port ignoring any offset, and position\n     *   values.\n     *   </ul>\n     * @param modeY {String} Vertical placement mode. Accepts the same values as\n     *   the 'modeX' argument.\n     * @return {Map} A map with the final location stored in the keys\n     *   <code>left</code> and <code>top</code>.\n     */\n    compute: function(size, area, target, offsets, position, modeX, modeY)\n    {\n      this.__instance = this.__instance || new qx.util.placement.Placement();\n\n      var splitted = position.split(\"-\");\n      var edge = splitted[0];\n      var align = splitted[1];\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (align === \"center\" || align === \"middle\")\n        {\n          var expected = \"middle\";\n          if (edge === \"top\" || edge === \"bottom\") {\n            expected = \"center\";\n          }\n          qx.core.Assert.assertEquals(expected, align, \"Please use '\" + edge + \"-\" + expected + \"' instead!\");\n        }\n      }\n\n      this.__instance.set({\n        axisX: this.__getAxis(modeX),\n        axisY: this.__getAxis(modeY),\n        edge: edge,\n        align: align\n      });\n\n      return this.__instance.compute(size, area, target, offsets);\n    },\n\n\n    __direct : null,\n    __keepAlign : null,\n    __bestFit : null,\n\n    /**\n     * Get the axis implementation for the given mode\n     *\n     * @param mode {String} One of <code>direct</code>, <code>keep-align</code> or\n     *   <code>best-fit</code>\n     * @return {qx.util.placement.AbstractAxis}\n     */\n    __getAxis : function(mode)\n    {\n      switch(mode)\n      {\n        case \"direct\":\n          this.__direct = this.__direct || qx.util.placement.DirectAxis;\n          return this.__direct;\n\n        case \"keep-align\":\n          this.__keepAlign = this.__keepAlign || qx.util.placement.KeepAlignAxis;\n          return this.__keepAlign;\n\n        case \"best-fit\":\n          this.__bestFit = this.__bestFit || qx.util.placement.BestFitAxis;\n          return this.__bestFit;\n\n        default:\n          throw new Error(\"Invalid 'mode' argument!'\");\n      }\n    }\n  },\n\n\n  members :\n  {\n    __defaultAxis : null,\n\n    /**\n     * DOM and widget independent method to compute the location\n     * of an object to make it relative to any other object.\n     *\n     * @param size {Map} With the keys <code>width</code> and <code>height</code>\n     *   of the object to align\n     * @param area {Map} Available area to position the object. Has the keys\n     *   <code>width</code> and <code>height</code>. Normally this is the parent\n     *   object of the one to align.\n     * @param target {Map} Location of the object to align the object to. This map\n     *   should have the keys <code>left</code>, <code>top</code>, <code>right</code>\n     *   and <code>bottom</code>.\n     * @param offsets {Map} Map with all offsets for each direction.\n     *   Comes with the keys <code>left</code>, <code>top</code>,\n     *   <code>right</code> and <code>bottom</code>.\n     * @return {Map} A map with the final location stored in the keys\n     *   <code>left</code> and <code>top</code>.\n     */\n    compute : function(size, area, target, offsets)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        this.assertObject(size, \"size\");\n        this.assertNumber(size.width, \"size.width\");\n        this.assertNumber(size.height, \"size.height\");\n\n        this.assertObject(area, \"area\");\n        this.assertNumber(area.width, \"area.width\");\n        this.assertNumber(area.height, \"area.height\");\n\n        this.assertObject(target, \"target\");\n        this.assertNumber(target.top, \"target.top\");\n        this.assertNumber(target.right, \"target.right\");\n        this.assertNumber(target.bottom, \"target.bottom\");\n        this.assertNumber(target.left, \"target.left\");\n\n        this.assertObject(offsets, \"offsets\");\n        this.assertNumber(offsets.top, \"offsets.top\");\n        this.assertNumber(offsets.right, \"offsets.right\");\n        this.assertNumber(offsets.bottom, \"offsets.bottom\");\n        this.assertNumber(offsets.left, \"offsets.left\");\n      }\n\n      var axisX = this.getAxisX() || this.__defaultAxis;\n      var left = axisX.computeStart(\n        size.width,\n        {start: target.left, end: target.right},\n        {start: offsets.left, end: offsets.right},\n        area.width,\n        this.__getPositionX()\n      );\n\n      var axisY = this.getAxisY() || this.__defaultAxis;\n      var top = axisY.computeStart(\n        size.height,\n        {start: target.top, end: target.bottom},\n        {start: offsets.top, end: offsets.bottom},\n        area.height,\n        this.__getPositionY()\n      );\n\n      return {\n        left: left,\n        top: top\n      };\n    },\n\n\n    /**\n     * Get the position value for the horizontal axis\n     *\n     * @return {String} the position\n     */\n    __getPositionX : function()\n    {\n      var edge = this.getEdge();\n      var align = this.getAlign();\n\n      if (edge == \"left\") {\n        return \"edge-start\";\n      } else if (edge == \"right\") {\n        return \"edge-end\";\n      } else if (align == \"left\") {\n        return \"align-start\";\n      } else if (align == \"center\") {\n        return \"align-center\";\n      } else if (align == \"right\") {\n        return \"align-end\";\n      }\n    },\n\n\n    /**\n     * Get the position value for the vertical axis\n     *\n     * @return {String} the position\n     */\n    __getPositionY : function()\n    {\n      var edge = this.getEdge();\n      var align = this.getAlign();\n\n      if (edge == \"top\") {\n        return \"edge-start\";\n      } else if (edge == \"bottom\") {\n        return \"edge-end\";\n      } else if (align == \"top\") {\n        return \"align-start\";\n      } else if (align == \"middle\") {\n        return \"align-center\";\n      } else if (align == \"bottom\") {\n        return \"align-end\";\n      }\n    }\n  },\n\n\n  destruct : function()\n  {\n    this._disposeObjects('__defaultAxis');\n  }\n});"
  ]
}