{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/format/NumberFormat.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "util",
    "format",
    "IFormat",
    "IDisposable",
    "construct",
    "locale",
    "arguments",
    "length",
    "lang",
    "Type",
    "isString",
    "setLocale",
    "Error",
    "Manager",
    "getInstance",
    "getLocale",
    "bind",
    "properties",
    "minimumIntegerDigits",
    "check",
    "init",
    "maximumIntegerDigits",
    "nullable",
    "minimumFractionDigits",
    "maximumFractionDigits",
    "groupingUsed",
    "prefix",
    "event",
    "postfix",
    "members",
    "num",
    "isNaN",
    "Infinity",
    "negative",
    "getMaximumFractionDigits",
    "mover",
    "Math",
    "pow",
    "round",
    "integerDigits",
    "String",
    "floor",
    "numStr",
    "integerStr",
    "substring",
    "getMinimumIntegerDigits",
    "getMaximumIntegerDigits",
    "fractionStr",
    "getMinimumFractionDigits",
    "getGroupingUsed",
    "origIntegerStr",
    "groupPos",
    "Number",
    "getGroupSeparator",
    "getPrefix",
    "getPostfix",
    "str",
    "getDecimalSeparator",
    "parse",
    "groupSepEsc",
    "escapeRegexpChars",
    "decimalSepEsc",
    "regex",
    "RegExp",
    "hit",
    "exec",
    "replace",
    "asStr",
    "parseFloat",
    "destruct",
    "removeRelatedBindings",
    "NumberFormat"
  ],
  "mappings": "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",
  "file": "NumberFormat.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A formatter and parser for numbers.\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.util.format.NumberFormat\",\n{\n  extend : qx.core.Object,\n  implement : [ qx.util.format.IFormat, qx.core.IDisposable ],\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * @param locale {String} optional locale to be used\n   * @throws {Error} If the argument is not a string.\n   */\n  construct : function(locale)\n  {\n    this.base(arguments);\n\n    if (arguments.length > 0) {\n      if (arguments.length === 1) {\n        if (qx.lang.Type.isString(locale)) {\n          this.setLocale(locale);\n        } else {\n          throw new Error(\"Wrong argument type. String is expected.\");\n        }\n      } else {\n        throw new Error(\"Wrong number of arguments.\");\n      }\n    }\n\n    if (!locale) {\n      this.setLocale(qx.locale.Manager.getInstance().getLocale());\n      if (qx.core.Environment.get(\"qx.dynlocale\")) {\n        qx.locale.Manager.getInstance().bind(\"locale\", this, \"locale\");\n      }\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /**\n     * The minimum number of integer digits (digits before the decimal separator).\n     * Missing digits will be filled up with 0 (\"19\" -> \"0019\").\n     */\n    minimumIntegerDigits :\n    {\n      check : \"Number\",\n      init : 0\n    },\n\n\n    /**\n     * The maximum number of integer digits (superfluous digits will be cut off\n     * (\"1923\" -> \"23\").\n     */\n    maximumIntegerDigits :\n    {\n      check : \"Number\",\n      nullable : true\n    },\n\n\n    /**\n     * The minimum number of fraction digits (digits after the decimal separator).\n     * Missing digits will be filled up with 0 (\"1.5\" -> \"1.500\")\n     */\n    minimumFractionDigits :\n    {\n      check : \"Number\",\n      init : 0\n    },\n\n\n    /**\n     * The maximum number of fraction digits (digits after the decimal separator).\n     * Superfluous digits will cause rounding (\"1.8277\" -> \"1.83\")\n     */\n    maximumFractionDigits :\n    {\n      check : \"Number\",\n      nullable : true\n    },\n\n\n    /** Whether thousand groupings should be used {e.g. \"1,432,234.65\"}. */\n    groupingUsed :\n    {\n      check : \"Boolean\",\n      init : true\n    },\n\n\n    /** The prefix to put before the number {\"EUR \" -> \"EUR 12.31\"}. */\n    prefix :\n    {\n      check : \"String\",\n      init : \"\",\n      event : \"changeNumberFormat\"\n    },\n\n\n    /** Sets the postfix to put after the number {\" %\" -> \"56.13 %\"}. */\n    postfix :\n    {\n      check : \"String\",\n      init : \"\",\n      event : \"changeNumberFormat\"\n    },\n\n    /** Locale used */\n    locale :\n    {\n      check : \"String\",\n      init : null,\n      event : \"changeLocale\"\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n\n    /**\n     * Formats a number.\n     *\n     * @param num {Number} the number to format.\n     * @return {String} the formatted number as a string.\n     */\n    format : function(num)\n    {\n      // handle special cases\n      if (isNaN(num)) {\n        return \"NaN\";\n      }\n\n      switch (num) {\n        case Infinity:\n          return \"Infinity\";\n\n        case -Infinity:\n          return \"-Infinity\";\n      }\n\n      var negative = (num < 0);\n\n      if (negative) {\n        num = -num;\n      }\n\n      if (this.getMaximumFractionDigits() != null)\n      {\n        // Do the rounding\n        var mover = Math.pow(10, this.getMaximumFractionDigits());\n        num = Math.round(num * mover) / mover;\n      }\n\n      var integerDigits = String(Math.floor(num)).length;\n\n      var numStr = \"\" + num;\n\n      // Prepare the integer part\n      var integerStr = numStr.substring(0, integerDigits);\n\n      while (integerStr.length < this.getMinimumIntegerDigits()) {\n        integerStr = \"0\" + integerStr;\n      }\n\n      if (this.getMaximumIntegerDigits() != null && integerStr.length > this.getMaximumIntegerDigits())\n      {\n        // NOTE: We cut off even though we did rounding before, because there\n        //     may be rounding errors (\"12.24000000000001\" -> \"12.24\")\n        integerStr = integerStr.substring(integerStr.length - this.getMaximumIntegerDigits());\n      }\n\n      // Prepare the fraction part\n      var fractionStr = numStr.substring(integerDigits + 1);\n\n      while (fractionStr.length < this.getMinimumFractionDigits()) {\n        fractionStr += \"0\";\n      }\n\n      if (this.getMaximumFractionDigits() != null && fractionStr.length > this.getMaximumFractionDigits())\n      {\n        // We have already rounded -> Just cut off the rest\n        fractionStr = fractionStr.substring(0, this.getMaximumFractionDigits());\n      }\n\n      // Add the thousand groupings\n      if (this.getGroupingUsed())\n      {\n        var origIntegerStr = integerStr;\n        integerStr = \"\";\n        var groupPos;\n\n        for (groupPos=origIntegerStr.length; groupPos>3; groupPos-=3) {\n          integerStr = \"\" + qx.locale.Number.getGroupSeparator(this.getLocale()) + origIntegerStr.substring(groupPos - 3, groupPos) + integerStr;\n        }\n\n        integerStr = origIntegerStr.substring(0, groupPos) + integerStr;\n      }\n\n      // Workaround: prefix and postfix are null even their defaultValue is \"\" and\n      //             allowNull is set to false?!?\n      var prefix = this.getPrefix() ? this.getPrefix() : \"\";\n      var postfix = this.getPostfix() ? this.getPostfix() : \"\";\n\n      // Assemble the number\n      var str = prefix + (negative ? \"-\" : \"\") + integerStr;\n\n      if (fractionStr.length > 0) {\n        str += \"\" + qx.locale.Number.getDecimalSeparator(this.getLocale()) + fractionStr;\n      }\n\n      str += postfix;\n\n      return str;\n    },\n\n\n    /**\n     * Parses a number.\n     *\n     * @param str {String} the string to parse.\n     * @return {Double} the number.\n     * @throws {Error} If the number string does not match the number format.\n     */\n    parse : function(str)\n    {\n      // use the escaped separators for regexp\n      var groupSepEsc = qx.lang.String.escapeRegexpChars(qx.locale.Number.getGroupSeparator(this.getLocale()) + \"\");\n      var decimalSepEsc = qx.lang.String.escapeRegexpChars(qx.locale.Number.getDecimalSeparator(this.getLocale()) + \"\");\n\n      var regex = new RegExp(\n        \"^(\" +\n        qx.lang.String.escapeRegexpChars(this.getPrefix()) +\n        ')?([-+]){0,1}'+\n        '([0-9]{1,3}(?:'+ groupSepEsc + '{0,1}[0-9]{3}){0,}){0,1}' +\n        '(' + decimalSepEsc + '\\\\d+){0,1}(' +\n        qx.lang.String.escapeRegexpChars(this.getPostfix()) +\n        \")?$\"\n      );\n\n      var hit = regex.exec(str);\n\n      if (hit == null) {\n        throw new Error(\"Number string '\" + str + \"' does not match the number format\");\n      }\n\n      // hit[1] = potential prefix\n      var negative = (hit[2] == \"-\");\n      var integerStr = hit[3] || \"0\";\n      var fractionStr = hit[4];\n      // hit[5] = potential postfix\n\n      // Remove the thousand groupings\n      integerStr = integerStr.replace(new RegExp(groupSepEsc, \"g\"), \"\");\n\n      var asStr = (negative ? \"-\" : \"\") + integerStr;\n\n      if (fractionStr != null && fractionStr.length != 0)\n      {\n        // Remove the leading decimal separator from the fractions string\n        fractionStr = fractionStr.replace(new RegExp(decimalSepEsc), \"\");\n        asStr += \".\" + fractionStr;\n      }\n\n      return parseFloat(asStr);\n    }\n  },\n\n\n  destruct: function() {\n    if (qx.core.Environment.get(\"qx.dynlocale\")) {\n      qx.locale.Manager.getInstance().removeRelatedBindings(this);\n    }\n  }\n});\n"
  ]
}