{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/util/EditDistance.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "OPERATION_DELETE",
    "OPERATION_INSERT",
    "OPERATION_REPLACE",
    "__computeLevenshteinDistance",
    "dataA",
    "dataB",
    "distance",
    "posA",
    "posB",
    "cost",
    "length",
    "undefined",
    "Math",
    "min",
    "__computeEditOperations",
    "operations",
    "i",
    "push",
    "operation",
    "pos",
    "old",
    "value",
    "getEditOperations",
    "util",
    "EditDistance"
  ],
  "mappings": "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",
  "file": "EditDistance.js",
  "sourcesContent": [
    "\n\n/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Class to implement different edit distance ideas.\n *\n * <a href=\"http://en.wikipedia.org/wiki/Edit_distance\">Edit distance on Wikipedia</a>\n * <a href=\"http://en.wikipedia.org/wiki/Levenshtein_distance\">Levenshtein distance on Wikipedia</a>\n */\nqx.Class.define(\"qx.util.EditDistance\",\n{\n  statics :\n  {\n    OPERATION_DELETE : 1,\n    OPERATION_INSERT : 2,\n    OPERATION_REPLACE : 3,\n\n\n    /**\n     * Returns a distant matrix following a concept\n     * named Levenshtein distance for two data structures\n     *\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Integer[][]} outgoing matrix\n     */\n    __computeLevenshteinDistance : function(dataA, dataB)\n    {\n      // distance is dataA table with dataA.length+1 rows and dataB.length+1 columns\n      var distance = [];\n\n      // posA and posB are used to iterate over str1 and str2\n      var posA, posB, cost;\n\n      for (posA=0; posA<=dataA.length; posA++)\n      {\n        distance[posA] = [];\n        distance[posA][0] = posA;\n      }\n\n      for (posB=1; posB<=dataB.length; posB++) {\n        distance[0][posB] = posB;\n      }\n\n      for (posA=1; posA<=dataA.length; posA++)\n      {\n        for (posB=1; posB<=dataB.length; posB++)\n        {\n          cost = dataA[posA-1] === dataB[posB-1] ? 0 : 1;\n\n          if (distance[posA] === undefined) {\n            distance[posA] = [];\n          }\n\n          distance[posA][posB] = Math.min(\n            distance[posA-1][posB  ] + 1,     // deletion\n            distance[posA  ][posB-1] + 1,     // insertion\n            distance[posA-1][posB-1] + cost   // substitution\n          );\n        }\n      }\n\n      return distance;\n    },\n\n\n    /**\n     * Computes the operations needed to transform dataA to dataB.\n     *\n     * @param distance {Integer[][]} Precomputed matrix for the data fields\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Map[]} Array of maps describing the operations needed\n     */\n    __computeEditOperations : function(distance, dataA, dataB)\n    {\n      var operations = [];\n      var posA = dataA.length;\n      var posB = dataB.length;\n\n      if (posA===0)\n      {\n        // insert from begin to end\n        // reverted order than in all other cases for optimal performance\n        for (var i=0; i<posB; i++) {\n          operations.push({ operation : this.OPERATION_INSERT, pos : i, old : null, value : dataB[i] });\n        }\n\n        return operations;\n      }\n\n      if (posB===0)\n      {\n        // remove from end to begin\n        for (var i=posA-1; i>=0; i--) {\n          operations.push({ operation : this.OPERATION_DELETE, pos : i, old : dataA[i], value : null });\n        }\n\n        return operations;\n      }\n\n      while(posA !== 0 || posB !== 0)\n      {\n        if (posA != 0 && distance[posA][posB] == distance[posA-1][posB] + 1)\n        {\n          operations.push({ operation : this.OPERATION_DELETE, pos : posA-1, old : dataA[posA-1], value : null });\n\n          posA-=1;\n        }\n        else if (posB != 0 && distance[posA][posB] == distance[posA][posB-1] + 1)\n        {\n          operations.push({ operation : this.OPERATION_INSERT, pos : posA, old : null, value : dataB[posB-1] });\n\n          posB-=1;\n        }\n        else\n        {\n          if (dataA[posA-1]!==dataB[posB-1])\n          {\n            operations.push({ operation : this.OPERATION_REPLACE, pos : posA-1, old : dataA[posA-1], value : dataB[posB-1] });\n          }\n\n          posA-=1;\n          posB-=1;\n        }\n      }\n\n      return operations;\n    },\n\n\n    /**\n     * Returns the operations needed to transform dataA to dataB.\n     *\n     * @param dataA {Array} incoming source data\n     * @param dataB {Array} incoming target data\n     * @return {Map[]} Array of maps describing the operations needed\n     */\n    getEditOperations : function(dataA, dataB)\n    {\n      var distance = this.__computeLevenshteinDistance(dataA, dataB);\n      var operations = this.__computeEditOperations(distance, dataA, dataB);\n\n      return operations;\n    }\n  }\n});\n"
  ]
}