{
  "className": "qx.util.OOUtil",
  "packageName": "qx.util",
  "name": "OOUtil",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 183,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nMartin Wittemann (wittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "This class is a base class for the OO system defined by Class, Mixin\nand Interface. It contains helper which are basically needed to create the\nClasses which define the OO system."
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "classIsDefined": {
      "location": {
        "start": {
          "line": 33,
          "column": 4
        },
        "end": {
          "line": 35,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the given class exists"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} class name to check",
            "paramName": "name",
            "description": " class name to check",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} true if class exists",
            "type": "Boolean",
            "description": " true if class exists"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPropertyDefinition": {
      "location": {
        "start": {
          "line": 46,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the definition of the given property, if not redefined.\nReturns null if the property does not exist."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the class to check for",
            "paramName": "name",
            "description": " name of the class to check for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map|null} whether the object support the given event.",
            "type": "Map|null",
            "description": " whether the object support the given event."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasProperty": {
      "location": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether a class has the given property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property to check for",
            "paramName": "name",
            "description": " name of the property to check for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class includes the given property.",
            "type": "Boolean",
            "description": " whether the class includes the given property."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getEventType": {
      "location": {
        "start": {
          "line": 81,
          "column": 4
        },
        "end": {
          "line": 95,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the event type of the given event. Returns null if\nthe event does not exist."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the event",
            "paramName": "name",
            "description": " name of the event",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} Event type of the given event.",
            "type": "String|null",
            "description": " Event type of the given event."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "supportsEvent": {
      "location": {
        "start": {
          "line": 105,
          "column": 4
        },
        "end": {
          "line": 107,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether a class supports the given event type"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the event to check for",
            "paramName": "name",
            "description": " name of the event to check for",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class supports the given event.",
            "type": "Boolean",
            "description": " whether the class supports the given event."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getByInterface": {
      "location": {
        "start": {
          "line": 119,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the class or one of its super classes which contains the\ndeclaration of the given interface. Returns null if the interface is not\nspecified anywhere."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to look for the interface",
            "paramName": "clazz",
            "description": " class to look for the interface",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "iface {Interface} interface to look for",
            "paramName": "iface",
            "description": " interface to look for",
            "type": "Interface"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class | null} the class which directly implements the given interface",
            "type": "Class | null",
            "description": " the class which directly implements the given interface"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasInterface": {
      "location": {
        "start": {
          "line": 156,
          "column": 4
        },
        "end": {
          "line": 158,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether a given class or any of its super classes includes a given interface.\n\nThis function will return \"true\" if the interface was defined\nin the class declaration ({@link qx.Class#define}) of the class\nor any of its super classes using the \"implement\"\nkey."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to check",
            "paramName": "clazz",
            "description": " class to check",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "iface {Interface} the interface to check for",
            "paramName": "iface",
            "description": " the interface to check for",
            "type": "Interface"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class includes the interface.",
            "type": "Boolean",
            "description": " whether the class includes the interface."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getMixins": {
      "location": {
        "start": {
          "line": 167,
          "column": 4
        },
        "end": {
          "line": 181,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a list of all mixins available in a given class."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class which should be inspected",
            "paramName": "clazz",
            "description": " class which should be inspected",
            "type": "Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Mixin[]} array of mixins this class uses",
            "type": "Mixin[]",
            "description": " array of mixins this class uses"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}