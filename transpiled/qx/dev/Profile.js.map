{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/dev/Profile.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__profileData",
    "__callStack",
    "__doProfile",
    "__callOverhead",
    "undefined",
    "__calibrateCount",
    "start",
    "splice",
    "length",
    "stop",
    "getProfileData",
    "showResults",
    "maxLength",
    "normalizeProfileData",
    "data",
    "Object",
    "values",
    "sort",
    "a",
    "b",
    "calibratedOwnTime",
    "slice",
    "str",
    "i",
    "profData",
    "name",
    "push",
    "type",
    "toPrecision",
    "callCount",
    "win",
    "window",
    "open",
    "doc",
    "document",
    "write",
    "join",
    "close",
    "__calibrate",
    "count",
    "fcn",
    "code",
    "eval",
    "Date",
    "end",
    "profTime",
    "plainTime",
    "__calibrateHelper",
    "key",
    "profileData",
    "Math",
    "max",
    "ownTime",
    "subRoutineCalls",
    "calibratedAvgTime",
    "profileBefore",
    "fullName",
    "args",
    "me",
    "dev",
    "Profile",
    "callData",
    "subRoutineTime",
    "startTime",
    "profileAfter",
    "returnValue",
    "endTime",
    "pop",
    "totalTime",
    "lastCall",
    "fcnKey",
    "functionData",
    "defer"
  ],
  "mappings": "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",
  "file": "Profile.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * qooxdoo profiler.\n *\n * All functions of qooxdoo classes (constructors, members, statics) can be profiled\n * using this class.\n *\n * To enable profiling this class must be loaded <b>before</b> <code>qx.Class</code> is\n * loaded. This can be achieved by making <code>qx.core.Aspect</code> and\n * <code>qx.dev.Profile</code> a load time dependency of <code>qx.Class</code>.\n * Further more the variant <code>qx.aspects</code> must be set to <code>on</code>.\n */\nqx.Bootstrap.define(\"qx.dev.Profile\",\n{\n  statics :\n  {\n    /**\n     * Storage for profiling data\n     *\n     * @internal\n     */\n    __profileData : {},\n\n    /**\n     * Array for call stack-like data types.\n     *\n     * @internal\n     */\n    __callStack : [],\n\n    /**\n     * Flag marking profiler run.\n     *\n     * @internal\n     */\n    __doProfile : true,\n\n    /**\n     * Profiler execution time. Subtracted for more accurate calculations.\n     *\n     * @internal\n     */\n    __callOverhead : undefined,\n\n    /**\n     * Amount of times to run calculation of profiler overhead.\n     *\n     * @internal\n     */\n    __calibrateCount : 4000,\n\n\n    /**\n     * Clear profiling data and start profiling.\n     */\n    start : function()\n    {\n      this.__doProfile = true;\n      this.__profileData = {};\n      this.__callStack.splice(0, this.__callStack.length-2);\n    },\n\n\n    /**\n     * Stop profiling.\n     */\n    stop : function() {\n      this.__doProfile = false;\n    },\n\n\n    /**\n     * Return the profiling data as JSON data structure.\n     *\n     * Example:\n     * <pre class=\"javascript\">\n     * {\n     *   \"qx.core.ObjectRegistry.toHashCode (static)\":{\n     *     *     \"totalTime\":3,\n     *     \"ownTime\":3,\n     *     \"callCount\":218,\n     *     \"subRoutineCalls\":0,\n     *     \"name\":\"qx.core.ObjectRegistry.toHashCode\",\n     *     \"type\":\"static\"\n     *   },\n     *   \"qx.core.Object.addListener (member)\":{\n     *     \"totalTime\":19,\n     *     \"ownTime\":12,\n     *     \"callCount\":59,\n     *     \"subRoutineCalls\":251,\n     *     \"name\":\"qx.core.Object.addListener\",\n     *     \"type\":\"member\"\n     *   },\n     *   \"qx.ui.table.cellrenderer.Default (constructor)\":{\n     *     \"totalTime\":2,\n     *     \"ownTime\":1,\n     *     \"callCount\":1,\n     *     \"subRoutineCalls\":4,\n     *     \"name\":\"qx.ui.table.cellrenderer.Default\",\n     *     \"type\":\"constructor\"\n     *   }\n     * }\n     * </pre>\n     *\n     * @return {Map} The current profiling data.\n     */\n    getProfileData : function() {\n      return this.__profileData;\n    },\n\n\n    /**\n     * Show profiling results in a popup window. The results are sorted by the\n     * function's own time.\n     *\n     * @param maxLength {Integer?100} maximum number of entries to display.\n     */\n    showResults : function(maxLength)\n    {\n      this.stop();\n      this.normalizeProfileData();\n\n      var data = Object.values(this.__profileData);\n      data = data.sort(function(a,b) {\n        return a.calibratedOwnTime<b.calibratedOwnTime ? 1: -1;\n      });\n\n      data = data.slice(0, maxLength || 100);\n\n      var str = [\"<table><tr><th>Name</th><th>Type</th><th>Own time</th><th>Avg time</th><th>calls</th></tr>\"];\n      for (var i=0; i<data.length; i++)\n      {\n        var profData = data[i];\n        if (profData.name == \"qx.core.Aspect.__calibrateHelper\") {\n          continue;\n        }\n        str.push(\"<tr><td>\");\n        str.push(profData.name, \"()\");\n        str.push(\"</td><td>\");\n        str.push(profData.type);\n        str.push(\"</td><td>\");\n        str.push(profData.calibratedOwnTime.toPrecision(3));\n        str.push(\"ms</td><td>\");\n        str.push((profData.calibratedOwnTime/profData.callCount).toPrecision(3));\n        str.push(\"ms</td><td>\");\n        str.push(profData.callCount);\n        str.push(\"</td></tr>\");\n      }\n\n      str.push(\"</table>\");\n\n      var win = window.open(\"about:blank\", \"profileLog\");\n      var doc = win.document;\n\n      doc.open();\n      doc.write(\"<html><head><style type='text/css'>body{font-family:monospace;font-size:11px;background:white;color:black;}</style></head><body>\");\n      doc.write(str.join(\"\"));\n      doc.write(\"</body></html>\");\n      doc.close();\n    },\n\n\n    /**\n     * Measure the overhead of calling a wrapped function vs. calling an\n     * unwrapped function.\n     *\n     * @lint ignoreDeprecated(eval)\n     *\n     * @param count {Integer} Number of iterations to measure.\n     * @return {Number} Overhead of a wrapped function call in milliseconds.\n     */\n    __calibrate : function(count)\n    {\n      // we use eval to unroll the loop because we don't want to measure the loop overhead.\n\n      // Measure wrapped function\n      var fcn;\n      var code = [\"var fcn = function(){ var fcn=qx.dev.Profile.__calibrateHelper;\"];\n      for (var i=0; i<count; i++) {\n        code.push(\"fcn();\");\n      }\n      code.push(\"};\");\n      eval(code.join(\"\"));\n      var start = new Date();\n      fcn();\n      var end = new Date();\n      var profTime = end - start;\n\n      // Measure unwrapped function\n      var code = [\n        \"var plainFunc = function() {};\",\n        \"var fcn = function(){ var fcn=plainFunc;\"\n      ];\n      for (var i=0; i<count; i++) {\n        code.push(\"fcn();\");\n      }\n      code.push(\"};\");\n      eval(code.join(\"\"));\n\n      var start = new Date();\n      fcn();\n      var end = new Date();\n      var plainTime = end - start;\n\n      // Compute per call overhead\n      return ((profTime - plainTime) / count);\n    },\n\n\n    /**\n     * Helper to measure overhead.\n     */\n    __calibrateHelper : function() {},\n\n\n    /**\n     * Normalize profiling data by subtracting the overhead of wrapping from the\n     * function's own time.\n     */\n    normalizeProfileData : function()\n    {\n      if (this.__callOverhead == undefined) {\n        this.__callOverhead = this.__calibrate(this.__calibrateCount);\n      }\n\n      for (var key in this.__profileData)\n      {\n        var profileData = this.__profileData[key];\n\n        profileData.calibratedOwnTime = Math.max(profileData.ownTime - (profileData.subRoutineCalls * this.__callOverhead), 0);\n        profileData.calibratedAvgTime = profileData.calibratedOwnTime / profileData.callCount;\n      }\n    },\n\n\n    /**\n     * This function will be called before each function call. (Start timing)\n     *\n     * @param fullName {String} Full name of the function including the class name.\n     * @param fcn {Function} Function to time.\n     * @param type {String} Function type as in parameter with same name to\n     *                      {@link qx.core.Aspect#addAdvice}\n     * @param args {arguments} The arguments passed to the wrapped function\n     */\n    profileBefore : function(fullName, fcn, type, args)\n    {\n      var me = qx.dev.Profile;\n\n      if (!me.__doProfile) {\n        return;\n      }\n\n      var callData = {\n        subRoutineTime : 0,\n        subRoutineCalls : 0\n      };\n\n      me.__callStack.push(callData);\n      callData.startTime = new Date();\n    },\n\n\n    /**\n     * This function will be called after each function call. (Stop timing)\n     *\n     * @param fullName {String} Full name of the function including the class name.\n     * @param fcn {Function} Function to time.\n     * @param type {String} Function type as in parameter with same name to\n     *                      {@link qx.core.Aspect#addAdvice}\n     * @param args {arguments} The arguments passed to the wrapped function\n     * @param returnValue {var} return value of the wrapped function.\n     */\n    profileAfter : function(fullName, fcn, type, args, returnValue)\n    {\n      var me = qx.dev.Profile;\n      if (!me.__doProfile) {\n        return;\n      }\n\n      var endTime = new Date();\n      var callData = me.__callStack.pop();\n      var totalTime = endTime - callData.startTime;\n      var ownTime = totalTime - callData.subRoutineTime;\n\n      if (me.__callStack.length > 0)\n      {\n        var lastCall = me.__callStack[me.__callStack.length-1];\n        lastCall.subRoutineTime += totalTime;\n        lastCall.subRoutineCalls += 1;\n      }\n\n      var fcnKey = fullName + \" (\" + type + \")\";\n\n      if (me.__profileData[fcnKey] === undefined)\n      {\n        me.__profileData[fcnKey] = {\n          totalTime: 0,\n          ownTime: 0,\n          callCount: 0,\n          subRoutineCalls: 0,\n          name: fullName,\n          type : type\n        };\n      }\n\n      var functionData = me.__profileData[fcnKey];\n      functionData.totalTime += totalTime;\n      functionData.ownTime += ownTime;\n      functionData.callCount += 1;\n      functionData.subRoutineCalls += callData.subRoutineCalls;\n    }\n  },\n\n\n  defer : function(statics)\n  {\n    if (qx.core.Environment.get(\"qx.aspects\"))\n    {\n      // Inform user\n      qx.Bootstrap.debug(\"Enable global profiling...\");\n\n      // Add advices for profiling\n      qx.core.Aspect.addAdvice(statics.profileBefore, \"before\");\n      qx.core.Aspect.addAdvice(statics.profileAfter, \"after\");\n\n      statics.__calibrateHelper = qx.core.Aspect.wrap(\"qx.dev.Profile.__calibrateHelper\", statics.__calibrateHelper, \"static\");\n    }\n  }\n});\n"
  ]
}