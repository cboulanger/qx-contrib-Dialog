{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/dev/unit/MTestLoader.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "suite",
    "check",
    "nullable",
    "init",
    "members",
    "_getClassNameFromUrl",
    "params",
    "window",
    "location",
    "search",
    "className",
    "match",
    "setTestNamespace",
    "namespace",
    "dev",
    "unit",
    "TestSuite",
    "add",
    "setSuite",
    "runJsUnit",
    "testResult",
    "JsUnitTestResult",
    "getSuite",
    "run",
    "exportToJsUnit",
    "runStandAlone",
    "TestResult",
    "addListener",
    "e",
    "ex",
    "getData",
    "exception",
    "test",
    "error",
    "getFullName",
    "message",
    "getComment",
    "getStackTrace",
    "join",
    "getTestDescriptions",
    "desc",
    "classes",
    "getTestClasses",
    "i",
    "length",
    "cls",
    "clsDesc",
    "classname",
    "getName",
    "tests",
    "methods",
    "getTestMethods",
    "j",
    "push",
    "lang",
    "Json",
    "stringify",
    "runTests",
    "methodName",
    "runTestsFromNamespace",
    "namespaceName",
    "indexOf",
    "MTestLoader"
  ],
  "mappings": "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",
  "file": "MTestLoader.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Daniel Wagner (d_wagner)\n\n************************************************************************ */\n\n/**\n * This mixin contains the methods needed to implement a loader that will\n * create a suite of unit tests from a given namespace and run it directly or\n * provide the necessary information to a more advanced runner application\n */\nqx.Mixin.define(\"qx.dev.unit.MTestLoader\", {\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  properties :\n  {\n    /** The test suite */\n    suite : {\n      check    : \"qx.dev.unit.TestSuite\",\n      nullable : true,\n      init : null\n    }\n  },\n\n\n  /*\n  *****************************************************************************\n     PROPERTIES\n  *****************************************************************************\n  */\n\n  members :\n  {\n    /**\n     * Parses the url parameters and tries to find the classes to test.\n     * The pattern is like <code>index.html?testclass=qx.test</code>\n     *\n     * @return {String} the class/namespace to test\n     */\n    _getClassNameFromUrl : function()\n    {\n      var params = window.location.search;\n      var className = params.match(/[\\?&]testclass=([A-Za-z0-9_\\.]+)/);\n\n      if (className) {\n        className = className[1];\n      } else {\n        className = \"__unknown_class__\";\n      }\n\n      return className;\n    },\n\n\n    /**\n     * Sets the top level namespace of the test cases to test. All classes\n     * below this namespace extending {@link TestCase} will be tested.\n     *\n     * @param namespace {Object} Namespace to add\n     */\n    setTestNamespace : function(namespace)\n    {\n      var suite = new qx.dev.unit.TestSuite();\n      suite.add(namespace);\n      this.setSuite(suite);\n    },\n\n\n    /**\n     * Run all tests and export the results to JSUnit\n     */\n    runJsUnit : function()\n    {\n      var testResult = new qx.dev.unit.JsUnitTestResult();\n      this.getSuite().run(testResult);\n      testResult.exportToJsUnit();\n    },\n\n\n    /**\n     * Run tests as standalone application\n     */\n    runStandAlone : function()\n    {\n      var testResult = new qx.dev.unit.TestResult();\n\n      testResult.addListener(\"failure\", function(e)\n      {\n        var ex = e.getData()[0].exception;\n        var test = e.getData()[0].test;\n        this.error(\"Test '\" + test.getFullName() + \"' failed: \" + ex.message + \" - \" + ex.getComment());\n        if (ex.getStackTrace) {\n          this.error(\"Stack trace: \" + ex.getStackTrace().join(\"\\n\"));\n        }\n      }, this);\n\n      testResult.addListener(\"error\", function(e)\n      {\n        var ex = e.getData()[0].exception;\n        var test = e.getData()[0].test;\n        this.error(\"The test '\" + test.getFullName() + \"' had an error: \" + ex, ex);\n      }, this);\n\n      this.getSuite().run(testResult);\n    },\n\n\n    /**\n     * Get a list of test descriptions\n     *\n     * @return {String} A description of all tests.\n     */\n    getTestDescriptions : function()\n    {\n      var desc = [];\n      var classes = this.getSuite().getTestClasses();\n\n      for (var i=0; i<classes.length; i++)\n      {\n        var cls = classes[i];\n        var clsDesc = {};\n        clsDesc.classname = cls.getName();\n        clsDesc.tests = [];\n        var methods = cls.getTestMethods();\n\n        for (var j=0; j<methods.length; j++) {\n          clsDesc.tests.push(methods[j].getName());\n        }\n\n        desc.push(clsDesc);\n      }\n\n      return qx.lang.Json.stringify(desc);\n    },\n\n\n    /**\n     * Runs exactly one test from the test suite\n     *\n     * @param testResult {qx.dev.unit.TestResult} the result logger\n     * @param className {String} Name of the test class\n     * @param methodName {String} Name of the test method\n     */\n    runTests : function(testResult, className, methodName)\n    {\n      var classes = this.getSuite().getTestClasses();\n\n      for (var i=0; i<classes.length; i++)\n      {\n        if (className == classes[i].getName())\n        {\n          var methods = classes[i].getTestMethods();\n\n          for (var j=0; j<methods.length; j++)\n          {\n            if (methodName && methods[j].getName() != methodName) {\n              continue;\n            }\n\n            methods[j].run(testResult);\n          }\n\n          return;\n        }\n      }\n    },\n\n\n    /**\n     * Runs all tests inside of the given namespace\n     *\n     * @param testResult {qx.dev.unit.TestResult} the result logger\n     * @param namespaceName {String} Namespace of the tests to run\n     */\n    runTestsFromNamespace : function(testResult, namespaceName)\n    {\n      var classes = this.getSuite().getTestClasses();\n\n      for (var i=0; i<classes.length; i++)\n      {\n        if (classes[i].getName().indexOf(namespaceName) == 0) {\n          classes[i].run(testResult);\n        }\n      }\n    }\n  }\n});\n"
  ]
}