{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/dev/unit/MMeasure.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "measureRepeated",
    "msg",
    "callback",
    "finalize",
    "iterations",
    "displayIterations",
    "measure",
    "i",
    "measureIterations",
    "prepare",
    "time",
    "testTime",
    "startIter",
    "Date",
    "now",
    "maxTime",
    "profilingEnabled",
    "window",
    "top",
    "core",
    "Init",
    "getApplication",
    "runner",
    "view",
    "getNativeProfiling",
    "ex",
    "profilingActive",
    "console",
    "profile",
    "profileEnd",
    "start",
    "end",
    "renderStart",
    "self",
    "setTimeout",
    "resume",
    "renderTime",
    "log",
    "call",
    "wait",
    "ownTime",
    "debug",
    "join",
    "dev",
    "unit",
    "MeasurementResult",
    "MMeasure"
  ],
  "mappings": "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",
  "file": "MMeasure.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Measures JavaScript execution and rendering time for singular or repeated\n * operations.\n */\nqx.Mixin.define(\"qx.dev.unit.MMeasure\",\n{\n  members :\n  {\n    /**\n     * Repeatedly runs code and measures execution and rendering times\n     *\n     * @param msg {String} Description of the measured operation\n     * @param callback {Function} Callback containing the code to be measured\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param iterations {Number} Number of times to execute the callback\n     * @param displayIterations {Number?} Iterations to be displayed instead of\n     * <code>iterations</code>\n     */\n    measureRepeated : function(msg, callback, finalize, iterations, displayIterations)\n    {\n      this.measure(\n        msg,\n        function() {\n          var i = iterations;\n          while (i--) {\n            callback(i);\n          }\n        },\n        finalize,\n        displayIterations || iterations\n      );\n    },\n\n    /**\n     * Repeatedly runs code for a given amount of time and measures completed\n     * iterations\n     *\n     * @param msg {String} Description of the measured operation\n     * @param prepare {Function} A function that will be called before every\n     * iteration. Its execution time is not included in the measurement\n     * @param callback {Function} Callback containing the code to be measured.\n     * Must return the number of completed iterations.\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param time {Number} Amount of time in milliseconds\n     */\n    measureIterations : function(msg, prepare, callback, finalize, time)\n    {\n      this.measure(\n        msg,\n        function() {\n          var i = 0;\n          var testTime = 0;\n          while (testTime < time) {\n            if (prepare) {\n              prepare();\n            }\n            var startIter = Date.now();\n            callback(i);\n            testTime += Date.now() - startIter;\n            i++;\n          }\n          return i;\n        },\n        finalize,\n        null,\n        time\n      );\n    },\n\n\n    /**\n     * Executes a given callback function once and measures JavaScript execution\n     * and rendering time\n     *\n     * @param msg {String} Description of the measured operation\n     * @param callback {Function} Callback containing the code to be measured\n     * @param finalize {Function} Finalize function called once after measuring,\n     * e.g. for cleanup. Will not be measured.\n     * @param displayIterations {Number?} Iterations to be displayed instead of\n     * <code>iterations</code>\n     * @param maxTime {Number?} Maximum amount of time the test will run. Only used\n     * for {@link #measureIterations}. If undefined, the test will be aborted after\n     * ten seconds.\n     */\n    measure : function(msg, callback, finalize, displayIterations, maxTime)\n    {\n      // profiling\n      var profilingEnabled;\n      try {\n        profilingEnabled = window.top.qx.core.Init.getApplication().runner.view.getNativeProfiling();\n      } catch(ex) {\n        profilingEnabled = false;\n      }\n\n      var profilingActive = (profilingEnabled && console &&\n        console.profile && typeof console.profile == \"function\" &&\n        console.profileEnd && typeof console.profileEnd == \"function\"\n      );\n\n      if (profilingActive) {\n        console.profile(msg);\n      }\n\n      var start = Date.now();\n      var iterations = callback();\n      var end = Date.now();\n\n      // profiling\n      if (profilingActive) {\n        console.profileEnd(msg);\n      }\n\n      var time = end-start;\n\n      var renderStart = Date.now();\n\n      var self = this;\n      setTimeout(function() { self.resume(function()\n      {\n        var renderTime = Date.now() - renderStart;\n        self.log(\n          msg,\n          iterations || displayIterations,\n          maxTime || time,\n          renderTime\n        );\n        finalize.call(self);\n      }); }, 0);\n\n      this.wait(maxTime ? maxTime + 5000 : 10000);\n    },\n\n\n    /**\n     * Logs a single measurement result\n     *\n     * @param msg {String} Description of the measured operation\n     * @param iterations {Number} Number of iterations\n     * @param ownTime {Number} JavaScript execution time in ms\n     * @param renderTime {Number} Dom rendering time in ms\n     */\n    log : function(msg, iterations, ownTime, renderTime)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.debug([msg, \"Iterations: \" + iterations, \"Time: \" + ownTime + \"ms\",\n          \"Render time: \" + renderTime + \"ms\"].join(\"; \"));\n      }\n\n      throw new qx.dev.unit.MeasurementResult(msg, iterations, ownTime, renderTime);\n    }\n  }\n});\n"
  ]
}