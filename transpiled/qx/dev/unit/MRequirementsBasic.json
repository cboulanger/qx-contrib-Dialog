{
  "className": "qx.dev.unit.MRequirementsBasic",
  "packageName": "qx.dev.unit",
  "name": "MRequirementsBasic",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 23,
        "column": 0
      },
      "end": {
        "line": 94,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2012 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nDaniel Wagner (danielwagner)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Adds support for verification of infrastructure requirements to unit test\nclasses."
        }
      ]
    }
  },
  "type": "mixin",
  "members": {
    "require": {
      "location": {
        "start": {
          "line": 50,
          "column": 4
        },
        "end": {
          "line": 91,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Verifies a list of infrastructure requirements by checking for\ncorresponding \"has\" methods. If no such method was found,\n{@link qx.core.Environment} will be checked for a key matching the given\nfeature name. Note that asynchronous environment checks are not supported!\n\nSee the manual for further details:\n<a href=\"http://manual.qooxdoo.org/current/pages/development/frame_apps_testrunner.html#defining-test-requirements\">Defining Test Requirements</a>"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{qx.dev.unit.RequirementError} if any requirement check returned\n<code>false</code>",
            "type": "qx.dev.unit.RequirementError",
            "description": " if any requirement check returned\n<code>false</code>"
          },
          {
            "name": "@throws",
            "body": "{Error} if no valid check was found for a feature.",
            "type": "Error",
            "description": " if no valid check was found for a feature."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "featureList {String[]} List of infrastructure requirements",
            "paramName": "featureList",
            "description": " List of infrastructure requirements",
            "type": "String[]"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "environmentNonLiteralKey(feature)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}