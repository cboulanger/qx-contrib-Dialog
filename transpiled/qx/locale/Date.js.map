{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/locale/Date.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__mgr",
    "locale",
    "Manager",
    "getInstance",
    "getAmMarker",
    "localize",
    "getPmMarker",
    "getDayNames",
    "length",
    "context",
    "withFallback",
    "core",
    "Assert",
    "assertInArray",
    "days",
    "names",
    "i",
    "key",
    "push",
    "__localizeWithFallback",
    "getDayName",
    "day",
    "assertInteger",
    "assertInRange",
    "getMonthNames",
    "getMonthName",
    "month",
    "getDateFormat",
    "size",
    "getDateTimeFormat",
    "canonical",
    "fallback",
    "localizedFormat",
    "getTimeFormat",
    "Date",
    "Error",
    "getWeekStart",
    "weekStart",
    "territory",
    "_getTerritory",
    "getWeekendStart",
    "weekendStart",
    "getWeekendEnd",
    "weekendEnd",
    "isWeekend",
    "split",
    "getTerritory",
    "getLanguage",
    "toUpperCase",
    "fallbackContext",
    "localizedString",
    "newKey",
    "replace"
  ],
  "mappings": "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",
  "file": "Date.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Static class that provides localized date information (like names of week\n * days, AM/PM markers, start of week, etc.).\n *\n * @cldr()\n */\nqx.Class.define(\"qx.locale.Date\",\n{\n  statics :\n  {\n    /**\n     * Reference to the locale manager.\n     *\n     * @internal\n     */\n    __mgr : qx.locale.Manager.getInstance(),\n\n\n    /**\n     * Get AM marker for time definitions\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} translated AM marker.\n     */\n    getAmMarker : function(locale) {\n      return this.__mgr.localize(\"cldr_am\", [], locale);\n    },\n\n\n    /**\n     * Get PM marker for time definitions\n     *\n     * @param locale {String} optional locale to be used\n     * @return {String} translated PM marker.\n     */\n    getPmMarker : function(locale) {\n      return this.__mgr.localize(\"cldr_pm\", [], locale);\n    },\n\n\n    /**\n     * Return localized names of day names\n     *\n     * @param length {String} format of the day names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the day\n     * @return {String[]} array of localized day names starting with sunday.\n     */\n    getDayNames : function(length, locale, context, withFallback)\n    {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var days = [ \"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\" ];\n\n      var names = [];\n\n      for (var i=0; i<days.length; i++)\n      {\n        var key = \"cldr_day_\" + context + \"_\" + length + \"_\" + days[i];\n        names.push(withFallback ? this.__localizeWithFallback(context, context === 'format' ? 'stand-alone' : 'format', key, locale) : this.__mgr.localize(key, [], locale));\n      }\n\n      return names;\n    },\n\n\n    /**\n     * Return localized name of a week day name\n     *\n     * @param length {String} format of the day name.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param day {Integer} day number. 0=sunday, 1=monday, ...\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the day\n     * @return {String} localized day name\n     */\n    getDayName : function(length, day, locale, context, withFallback)\n    {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInteger(day);\n        qx.core.Assert.assertInRange(day, 0, 6);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var days = [ \"sun\", \"mon\", \"tue\", \"wed\", \"thu\", \"fri\", \"sat\" ];\n\n      var key = \"cldr_day_\" + context + \"_\" + length + \"_\" + days[day];\n      return withFallback ? this.__localizeWithFallback(context, context === 'format' ? 'stand-alone' : 'format', key, locale) : this.__mgr.localize(key, [], locale);\n    },\n\n\n    /**\n     * Return localized names of month names\n     *\n     * @param length {String} format of the month names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the month\n     * @return {String[]} array of localized month names starting with january.\n     */\n    getMonthNames : function(length, locale, context, withFallback)\n    {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var names = [];\n\n      for (var i=0; i<12; i++)\n      {\n        var key = \"cldr_month_\" + context + \"_\" + length + \"_\" + (i + 1);\n        names.push(withFallback ? this.__localizeWithFallback(context, context === 'format' ? 'stand-alone' : 'format', key, locale) : this.__mgr.localize(key, [], locale));\n      }\n\n      return names;\n    },\n\n\n    /**\n     * Return localized name of a month\n     *\n     * @param length {String} format of the month names.\n     *       Possible values: \"abbreviated\", \"narrow\", \"wide\"\n     * @param month {Integer} index of the month. 0=january, 1=february, ...\n     * @param locale {String} optional locale to be used\n     * @param context {String} (default: \"format\") intended context.\n     *       Possible values: \"format\", \"stand-alone\"\n     * @param withFallback {Boolean?} if true, the previous parameter's other value is tried\n     * in order to find a localized name for the month\n     * @return {String} localized month name\n     */\n    getMonthName : function(length, month, locale, context, withFallback)\n    {\n      var context = context ? context : \"format\";\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(length, [\"abbreviated\", \"narrow\", \"wide\"]);\n        qx.core.Assert.assertInArray(context, [\"format\", \"stand-alone\"]);\n      }\n\n      var key = \"cldr_month_\" + context + \"_\" + length + \"_\" + (month + 1);\n      return withFallback ? this.__localizeWithFallback(context, context === 'format' ? 'stand-alone' : 'format', key, locale) : this.__mgr.localize(key, [], locale);\n    },\n\n\n    /**\n     * Return localized date format string to be used with {@link qx.util.format.DateFormat}.\n     *\n     * @param size {String} format of the date format.\n     *      Possible values: \"short\", \"medium\", \"long\", \"full\"\n     * @param locale {String?} optional locale to be used\n     * @return {String} localized date format string\n     */\n    getDateFormat : function(size, locale)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(size, [\"short\", \"medium\", \"long\", \"full\"]);\n      }\n\n      var key = \"cldr_date_format_\" + size;\n      return this.__mgr.localize(key, [], locale);\n    },\n\n\n    /**\n     * Try to localize a date/time format string. For format string possibilities see\n     * <a href=\"http://cldr.unicode.org/translation/date-time\">Date/Time Symbol reference</a>\n     * at CLDR - Unicode Common Locale Data Repository.\n     *\n     * If no localization is available take the fallback format string.\n     *\n     * @param canonical {String} format string containing only field information, and in a canonical order.\n     *       Examples are \"yyyyMMMM\" for year + full month, or \"MMMd\" for abbreviated month + day.\n     * @param fallback {String} fallback format string if no localized version is found\n     * @param locale {String} optional locale to be used\n     * @return {String} best matching format string\n     */\n    getDateTimeFormat : function(canonical, fallback, locale)\n    {\n      var key = \"cldr_date_time_format_\" + canonical;\n      var localizedFormat = this.__mgr.localize(key, [], locale);\n\n      if (localizedFormat == key) {\n        localizedFormat = fallback;\n      }\n\n      return localizedFormat;\n    },\n\n\n    /**\n     * Return localized time format string to be used with {@link qx.util.format.DateFormat}.\n     *\n     * @param size {String} format of the time pattern.\n     *      Possible values: \"short\", \"medium\", \"long\", \"full\"\n     * @param locale {String} optional locale to be used\n     * @return {String} localized time format string\n     */\n    getTimeFormat : function(size, locale)\n    {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertInArray(size, [\"short\", \"medium\", \"long\", \"full\"]);\n      }\n\n      var key = \"cldr_time_format_\" + size;\n      var localizedFormat = this.__mgr.localize(key, [], locale);\n\n      if (localizedFormat != key) {\n        return localizedFormat;\n      }\n\n      switch(size)\n      {\n        case \"short\":\n        case \"medium\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmm\", \"HH:mm\");\n\n        case \"long\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmmss\", \"HH:mm:ss\");\n\n        case \"full\":\n          return qx.locale.Date.getDateTimeFormat(\"HHmmsszz\", \"HH:mm:ss zz\");\n\n        default:\n          throw new Error(\"This case should never happen.\");\n      }\n    },\n\n\n    /**\n     * Return the day the week starts with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the first day of the week. 0=sunday, 1=monday, ...\n     */\n    getWeekStart : function(locale)\n    {\n      var weekStart =\n      {\n        // default is monday\n        \"MV\" : 5, // friday\n        \"AE\" : 6, // saturday\n        \"AF\" : 6,\n        \"BH\" : 6,\n        \"DJ\" : 6,\n        \"DZ\" : 6,\n        \"EG\" : 6,\n        \"ER\" : 6,\n        \"ET\" : 6,\n        \"IQ\" : 6,\n        \"IR\" : 6,\n        \"JO\" : 6,\n        \"KE\" : 6,\n        \"KW\" : 6,\n        \"LB\" : 6,\n        \"LY\" : 6,\n        \"MA\" : 6,\n        \"OM\" : 6,\n        \"QA\" : 6,\n        \"SA\" : 6,\n        \"SD\" : 6,\n        \"SO\" : 6,\n        \"TN\" : 6,\n        \"YE\" : 6,\n        \"AS\" : 0, // sunday\n        \"AU\" : 0,\n        \"AZ\" : 0,\n        \"BW\" : 0,\n        \"CA\" : 0,\n        \"CN\" : 0,\n        \"FO\" : 0,\n        \"GE\" : 0,\n        \"GL\" : 0,\n        \"GU\" : 0,\n        \"HK\" : 0,\n        \"IE\" : 0,\n        \"IL\" : 0,\n        \"IS\" : 0,\n        \"JM\" : 0,\n        \"JP\" : 0,\n        \"KG\" : 0,\n        \"KR\" : 0,\n        \"LA\" : 0,\n        \"MH\" : 0,\n        \"MN\" : 0,\n        \"MO\" : 0,\n        \"MP\" : 0,\n        \"MT\" : 0,\n        \"NZ\" : 0,\n        \"PH\" : 0,\n        \"PK\" : 0,\n        \"SG\" : 0,\n        \"TH\" : 0,\n        \"TT\" : 0,\n        \"TW\" : 0,\n        \"UM\" : 0,\n        \"US\" : 0,\n        \"UZ\" : 0,\n        \"VI\" : 0,\n        \"ZA\" : 0,\n        \"ZW\" : 0,\n        \"MW\" : 0,\n        \"NG\" : 0,\n        \"TJ\" : 0\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is monday\n      return weekStart[territory] != null ? weekStart[territory] : 1;\n    },\n\n\n    /**\n     * Return the day the weekend starts with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the first day of the weekend. 0=sunday, 1=monday, ...\n     */\n    getWeekendStart : function(locale)\n    {\n      var weekendStart =\n      {\n        // default is saturday\n        \"EG\" : 5, // friday\n        \"IL\" : 5,\n        \"SY\" : 5,\n        \"IN\" : 0, // sunday\n        \"AE\" : 4, // thursday\n        \"BH\" : 4,\n        \"DZ\" : 4,\n        \"IQ\" : 4,\n        \"JO\" : 4,\n        \"KW\" : 4,\n        \"LB\" : 4,\n        \"LY\" : 4,\n        \"MA\" : 4,\n        \"OM\" : 4,\n        \"QA\" : 4,\n        \"SA\" : 4,\n        \"SD\" : 4,\n        \"TN\" : 4,\n        \"YE\" : 4\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is saturday\n      return weekendStart[territory] != null ? weekendStart[territory] : 6;\n    },\n\n\n    /**\n     * Return the day the weekend ends with\n     *\n     * Reference: Common Locale Data Repository (cldr) supplementalData.xml\n     *\n     * @param locale {String} optional locale to be used\n     * @return {Integer} index of the last day of the weekend. 0=sunday, 1=monday, ...\n     */\n    getWeekendEnd : function(locale)\n    {\n      var weekendEnd =\n      {\n        // default is sunday\n        \"AE\" : 5, // friday\n        \"BH\" : 5,\n        \"DZ\" : 5,\n        \"IQ\" : 5,\n        \"JO\" : 5,\n        \"KW\" : 5,\n        \"LB\" : 5,\n        \"LY\" : 5,\n        \"MA\" : 5,\n        \"OM\" : 5,\n        \"QA\" : 5,\n        \"SA\" : 5,\n        \"SD\" : 5,\n        \"TN\" : 5,\n        \"YE\" : 5,\n        \"AF\" : 5,\n        \"IR\" : 5,\n        \"EG\" : 6, // saturday\n        \"IL\" : 6,\n        \"SY\" : 6\n      };\n\n      var territory = qx.locale.Date._getTerritory(locale);\n\n      // default is sunday\n      return weekendEnd[territory] != null ? weekendEnd[territory] : 0;\n    },\n\n\n    /**\n     * Returns whether a certain day of week belongs to the week end.\n     *\n     * @param day {Integer} index of the day. 0=sunday, 1=monday, ...\n     * @param locale {String} optional locale to be used\n     * @return {Boolean} whether the given day is a weekend day\n     */\n    isWeekend : function(day, locale)\n    {\n      var weekendStart = qx.locale.Date.getWeekendStart(locale);\n      var weekendEnd = qx.locale.Date.getWeekendEnd(locale);\n\n      if (weekendEnd > weekendStart) {\n        return ((day >= weekendStart) && (day <= weekendEnd));\n      } else {\n        return ((day >= weekendStart) || (day <= weekendEnd));\n      }\n    },\n\n\n    /**\n     * Extract the territory part from a locale\n     *\n     * @param locale {String} the locale\n     * @return {String} territory\n     */\n    _getTerritory : function(locale)\n    {\n      if (locale) {\n        var territory = locale.split(\"_\")[1] || locale;\n      } else {\n        territory = this.__mgr.getTerritory() || this.__mgr.getLanguage();\n      }\n\n      return territory.toUpperCase();\n    },\n\n    /**\n     * Provide localization (CLDR) data with fallback between \"format\" and \"stand-alone\" contexts.\n     * It is used in {@link #getDayName} and {@link #getMonthName} methods.\n     *\n     * @param context {String} intended context.\n     *       Possible values: \"format\", \"stand-alone\".\n     * @param fallbackContext {String} the context used in case no localization is found for the key.\n     * @param key {String} message id (may contain format strings)\n     * @param locale {String} the locale\n     * @return {String} localized name for the key\n     *\n     */\n    __localizeWithFallback : function(context, fallbackContext, key, locale)\n    {\n      var localizedString = this.__mgr.localize(key, [], locale);\n      if(localizedString == key)\n      {\n        var newKey = key.replace('_' + context + '_', '_' + fallbackContext + '_');\n        return this.__mgr.localize(newKey, [], locale);\n      }\n      else\n      {\n        return localizedString;\n      }\n    }\n  }\n});\n"
  ]
}