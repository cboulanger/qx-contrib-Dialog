{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/module/Io.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "xhr",
    "url",
    "settings",
    "bom",
    "request",
    "Xhr",
    "open",
    "method",
    "async",
    "header",
    "key",
    "setRequestHeader",
    "script",
    "Script",
    "jsonp",
    "Jsonp",
    "callbackName",
    "setCallbackName",
    "callbackParam",
    "setCallbackParam",
    "setPrefix",
    "defer",
    "qxWeb",
    "$attachAll",
    "module",
    "Io"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA8BAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,cAApB,EAAoC;AAClCC,aACA;AACE;;;;;;;;;;;;;;;;AAgBAC,WAAM,aAASC,GAAT,EAAcC,QAAd,EAAwB;AAC5B,YAAI,CAACA,QAAL,EAAe;AACbA,qBAAW,EAAX;AACD;AACD,YAAIF,MAAM,IAAIN,GAAGS,GAAH,CAAOC,OAAP,CAAeC,GAAnB,EAAV;AACAL,YAAIM,IAAJ,CAASJ,SAASK,MAAlB,EAA0BN,GAA1B,EAA+BC,SAASM,KAAxC;AACA,YAAIN,SAASO,MAAb,EAAqB;AACnB,cAAIA,SAASP,SAASO,MAAtB;AACA,eAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AACtBT,gBAAIW,gBAAJ,CAAqBD,GAArB,EAA0BD,OAAOC,GAAP,CAA1B;AACD;AACF;AACD,eAAOV,GAAP;AACD,OA9BH;;AAiCE;;;;;;;;AAQAY,cAAS,gBAASX,GAAT,EAAc;AACrB,YAAIW,SAAS,IAAIlB,GAAGS,GAAH,CAAOC,OAAP,CAAeS,MAAnB,EAAb;AACAD,eAAON,IAAP,CAAY,KAAZ,EAAmBL,GAAnB;AACA,eAAOW,MAAP;AACD,OA7CH;;AAgDE;;;;;;;;;;;;;;AAcAE,aAAQ,eAASb,GAAT,EAAcC,QAAd,EAAwB;AAC9B,YAAIU,SAAS,IAAIlB,GAAGS,GAAH,CAAOC,OAAP,CAAeW,KAAnB,EAAb;AACA,YAAIb,YAAYA,SAASc,YAAzB,EAAuC;AACrCJ,iBAAOK,eAAP,CAAuBf,SAASc,YAAhC;AACD;AACD,YAAId,YAAYA,SAASgB,aAAzB,EAAwC;AACtCN,iBAAOO,gBAAP,CAAwBjB,SAASgB,aAAjC;AACD;AACDN,eAAOQ,SAAP,CAAiB,UAAjB,EAR8B,CAQA;AAC9BR,eAAON,IAAP,CAAY,KAAZ,EAAmBL,GAAnB;AACA,eAAOW,MAAP;AACD;AAzEH,KAFkC;;AA+ElCS,WAAQ,eAAStB,OAAT,EAAkB;AACxBuB,YAAMC,UAAN,CAAiB,IAAjB,EAAuB,IAAvB;AACD;AAjFiC,GAApC,C;AA9BA7B,KAAG8B,MAAH,CAAUC,EAAV,CAAa5B,aAAb,GAA6BA,aAA7B",
  "file": "Io.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * This module provides basic IO functionality. It contains three ways to load\n * data:\n *\n * * XMLHttpRequest\n * * Script tag\n * * Script tag using JSONP\n *\n * @require(qx.bom.request.Xhr#open)\n *\n * @group (IO)\n */\nqx.Bootstrap.define(\"qx.module.Io\", {\n  statics :\n  {\n    /**\n     * Returns a configured XMLHttpRequest object. Using the send method will\n     * finally send the request.\n     *\n     * @param url {String} Mandatory URL to load the data from.\n     * @param settings {Map?} Optional settings map which may contain one of\n     *   the following settings:\n     * <ul>\n     * <li><code>method</code> The method of the request. Default: <code>GET</code></li>\n     * <li><code>async</code> flag to mark the request as asynchronous. Default: <code>true</code></li>\n     * <li><code>header</code> A map of request headers.</li>\n     * </ul>\n     *\n     * @attachStatic {qxWeb, io.xhr}\n     * @return {qx.bom.request.Xhr} The request object.\n     */\n    xhr : function(url, settings) {\n      if (!settings) {\n        settings = {};\n      }\n      var xhr = new qx.bom.request.Xhr();\n      xhr.open(settings.method, url, settings.async);\n      if (settings.header) {\n        var header = settings.header;\n        for (var key in header) {\n          xhr.setRequestHeader(key, header[key]);\n        }\n      }\n      return xhr;\n    },\n\n\n    /**\n     * Returns a predefined script tag wrapper which can be used to load data\n     * from cross-domain origins.\n     *\n     * @param url {String} Mandatory URL to load the data from.\n     * @attachStatic {qxWeb, io.script}\n     * @return {qx.bom.request.Script} The request object.\n     */\n    script : function(url) {\n      var script = new qx.bom.request.Script();\n      script.open(\"get\", url);\n      return script;\n    },\n\n\n    /**\n     * Returns a predefined script tag wrapper which can be used to load data\n     * from cross-domain origins via JSONP.\n     *\n     * @param url {String} Mandatory URL to load the data from.\n     * @param settings {Map?} Optional settings map which may contain one of\n     *   the following settings:\n     *\n     * * <code>callbackName</code>: The name of the callback which will\n     *      be called by the loaded script.\n     * * <code>callbackParam</code>: The name of the callback expected by the server\n     * @attachStatic {qxWeb, io.jsonp}\n     * @return {qx.bom.request.Jsonp} The request object.\n     */\n    jsonp : function(url, settings) {\n      var script = new qx.bom.request.Jsonp();\n      if (settings && settings.callbackName) {\n        script.setCallbackName(settings.callbackName);\n      }\n      if (settings && settings.callbackParam) {\n        script.setCallbackParam(settings.callbackParam);\n      }\n      script.setPrefix(\"qxWeb.$$\"); // needed in case no callback name is given\n      script.open(\"get\", url);\n      return script;\n    }\n  },\n\n\n  defer : function(statics) {\n    qxWeb.$attachAll(this, \"io\");\n  }\n});\n"
  ]
}