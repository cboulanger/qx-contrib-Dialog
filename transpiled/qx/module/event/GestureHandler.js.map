{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/module/event/GestureHandler.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "register",
    "element",
    "type",
    "$$gestureHandler",
    "core",
    "Environment",
    "get",
    "$$emitter",
    "event",
    "Emitter",
    "handler",
    "GestureCore",
    "unregister",
    "listeners",
    "getListeners",
    "module",
    "GestureHandler",
    "indexOf",
    "length",
    "dispose",
    "undefined",
    "defer",
    "qxWeb",
    "$registerEventHook"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA2BAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,gCAApB,EAAsD;;AAEpDC,aAAU;;AAERC,aAAQ,CAAC,KAAD,EAAQ,SAAR,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC,OAAtC,EAA+C,YAA/C,EAA6D,UAA7D,EAAyE,MAAzE,EAAiF,QAAjF,EAA2F,OAA3F,CAFA;;AAKR;;;;;;;AAOAC,gBAAW,kBAASC,OAAT,EAAkBC,IAAlB,EAAwB;AACjC,YAAI,CAACD,QAAQE,gBAAb,EAA+B;;AAE7B,cAAI,CAACV,GAAGW,IAAH,CAAQC,WAAR,CAAoBC,GAApB,CAAwB,qBAAxB,CAAL,EAAqD;AACnD,gBAAI,CAACL,QAAQM,SAAb,EAAwB;AACtBN,sBAAQM,SAAR,GAAoB,IAAId,GAAGe,KAAH,CAASC,OAAb,EAApB;AACD;AACF;;AAEDR,kBAAQE,gBAAR,GAA2B,IAAIV,GAAGe,KAAH,CAASE,OAAT,CAAiBC,WAArB,CAAiCV,OAAjC,EAA0CA,QAAQM,SAAlD,CAA3B;AACD;AACF,OAvBO;;AA0BR;;;;;AAKAK,kBAAa,oBAASX,OAAT,EAAkB;AAC7B;AACA,YAAIA,QAAQE,gBAAZ,EAA8B;AAC5B,cAAIU,YAAYZ,QAAQM,SAAR,CAAkBO,YAAlB,EAAhB;AACA,eAAK,IAAIZ,IAAT,IAAiBW,SAAjB,EAA4B;AAC1B,gBAAIpB,GAAGsB,MAAH,CAAUP,KAAV,CAAgBQ,cAAhB,CAA+BjB,KAA/B,CAAqCkB,OAArC,CAA6Cf,IAA7C,MAAuD,CAAC,CAA5D,EAA+D;AAC7D,kBAAIW,UAAUX,IAAV,EAAgBgB,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B;AACD;AACF;AACF;;AAED;AACAjB,kBAAQE,gBAAR,CAAyBgB,OAAzB;AACAlB,kBAAQE,gBAAR,GAA2BiB,SAA3B;AACD;AACF;AA/CO,KAF0C;;AAoDpDC,WAAQ,eAASvB,OAAT,EACR;AACEwB,YAAMC,kBAAN,CAAyBzB,QAAQC,KAAjC,EAAwCD,QAAQE,QAAhD,EAA0DF,QAAQc,UAAlE;AACD;AAvDmD,GAAtD,C;AA3BAnB,KAAGsB,MAAH,CAAUP,KAAV,CAAgBQ,cAAhB,CAA+BpB,aAA/B,GAA+CA,aAA/C",
  "file": "GestureHandler.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Creates a gesture handler that fires high-level events such as \"swipe\"\n * based on low-level event sequences on the given element\n *\n * @require(qx.module.Event)\n * @use(qx.module.event.PointerHandler)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.GestureHandler\", {\n\n  statics : {\n\n    TYPES : [\"tap\", \"longtap\", \"swipe\", \"dbltap\", \"track\", \"trackstart\", \"trackend\", \"roll\", \"rotate\", \"pinch\"],\n\n\n    /**\n     * Creates a gesture handler for the given element when a gesture event listener\n     * is attached to it\n     *\n     * @param element {Element} DOM element\n     * @param type {String} event type\n     */\n    register : function(element, type) {\n      if (!element.$$gestureHandler) {\n\n        if (!qx.core.Environment.get(\"event.dispatchevent\")) {\n          if (!element.$$emitter) {\n            element.$$emitter = new qx.event.Emitter();\n          }\n        }\n\n        element.$$gestureHandler = new qx.event.handler.GestureCore(element, element.$$emitter);\n      }\n    },\n\n\n    /**\n     * Removes the gesture event handler from the element if there are no more\n     * gesture event listeners attached to it\n     * @param element {Element} DOM element\n     */\n    unregister : function(element) {\n      // check if there are any registered listeners left\n      if (element.$$gestureHandler) {\n        var listeners = element.$$emitter.getListeners();\n        for (var type in listeners) {\n          if (qx.module.event.GestureHandler.TYPES.indexOf(type) !== -1) {\n            if (listeners[type].length > 0) {\n              return;\n            }\n          }\n        }\n\n        // no more listeners, get rid of the handler\n        element.$$gestureHandler.dispose();\n        element.$$gestureHandler = undefined;\n      }\n    }\n  },\n\n  defer : function(statics)\n  {\n    qxWeb.$registerEventHook(statics.TYPES, statics.register, statics.unregister);\n  }\n});\n"
  ]
}