{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/module/event/Pinch.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "BIND_METHODS",
    "getScale",
    "_original",
    "scale",
    "normalize",
    "event",
    "element",
    "bindMethods",
    "module",
    "Pinch",
    "i",
    "l",
    "length",
    "bind",
    "defer",
    "qxWeb",
    "$registerEventNormalization"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAyBAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,uBAApB,EAA6C;AAC3CC,aACA;AACE;;;AAGAC,aAAQ,CAAC,OAAD,CAJV;;AAOEC,oBAAe,CAAE,UAAF,CAPjB;;AAUE;;;;;AAKAC,gBAAW,oBAAW;AACpB,eAAO,KAAKC,SAAL,CAAeC,KAAtB;AACD,OAjBH;;AAoBE;;;;;;;;;AASAC,iBAAY,mBAASC,KAAT,EAAgBC,OAAhB,EACZ;AACE,YAAI,CAACD,KAAL,EAAY;AACV,iBAAOA,KAAP;AACD;AACD;AACA,YAAIE,cAAcd,GAAGe,MAAH,CAAUH,KAAV,CAAgBI,KAAhB,CAAsBT,YAAxC;AACA,aAAK,IAAIU,IAAE,CAAN,EAASC,IAAEJ,YAAYK,MAA5B,EAAoCF,IAAEC,CAAtC,EAAyCD,GAAzC,EAA8C;AAC5C,cAAI,OAAOL,MAAME,YAAYG,CAAZ,CAAN,CAAP,IAAgC,UAApC,EAAgD;AAC9CL,kBAAME,YAAYG,CAAZ,CAAN,IAAwBjB,GAAGe,MAAH,CAAUH,KAAV,CAAgBI,KAAhB,CAAsBF,YAAYG,CAAZ,CAAtB,EAAsCG,IAAtC,CAA2CR,KAA3C,CAAxB;AACD;AACF;;AAED,eAAOA,KAAP;AACD;AA3CH,KAF2C;;AAgD3CS,WAAQ,eAAShB,OAAT,EAAkB;AACxBiB,YAAMC,2BAAN,CAAkCvB,GAAGe,MAAH,CAAUH,KAAV,CAAgBI,KAAhB,CAAsBV,KAAxD,EAA+DD,QAAQM,SAAvE;AACD;AAlD0C,GAA7C,C;AAzBAX,KAAGe,MAAH,CAAUH,KAAV,CAAgBI,KAAhB,CAAsBb,aAAtB,GAAsCA,aAAtC",
  "file": "Pinch.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2014 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Normalization for the pinch gesture.\n *\n * @require(qx.module.Event)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.Pinch\", {\n  statics :\n  {\n    /**\n     * List of event types to be normalized\n     */\n    TYPES : [\"pinch\"],\n\n\n    BIND_METHODS : [ \"getScale\" ],\n\n\n    /**\n     * Returns the calculated scale of this event.\n     *\n     * @return {Float} the scale value of this event.\n     */\n    getScale : function() {\n      return this._original.scale;\n    },\n\n\n    /**\n     * Manipulates the native event object, adding methods if they're not\n     * already present\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element the listener was attached to\n     * @return {Event} Normalized event object\n     * @internal\n     */\n    normalize : function(event, element)\n    {\n      if (!event) {\n        return event;\n      }\n      // apply mouse event normalizations\n      var bindMethods = qx.module.event.Pinch.BIND_METHODS;\n      for (var i=0, l=bindMethods.length; i<l; i++) {\n        if (typeof event[bindMethods[i]] != \"function\") {\n          event[bindMethods[i]] = qx.module.event.Pinch[bindMethods[i]].bind(event);\n        }\n      }\n\n      return event;\n    }\n  },\n\n  defer : function(statics) {\n    qxWeb.$registerEventNormalization(qx.module.event.Pinch.TYPES, statics.normalize);\n  }\n});\n"
  ]
}