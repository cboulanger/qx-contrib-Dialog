{
  "className": "qx.module.event.Tap",
  "packageName": "qx.module.event",
  "name": "Tap",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 34,
        "column": 0
      },
      "end": {
        "line": 156,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2014 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nDaniel Wagner (danielwagner)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Normalization for tap gesture events. These gestures are based on <a href=\"#Pointer\">Pointer events</a>,\nmeaning that they are available on all devices, no matter which input device type is used (e.g. mouse or\ntouchscreen)."
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.Event"
        },
        {
          "name": "@require",
          "body": "(qx.module.event.Tap#getViewportLeft) // static code analysis - this method has to referenced"
        },
        {
          "name": "@require",
          "body": "(qx.module.event.Tap#getViewportTop) // static code analysis - this method has to referenced"
        },
        {
          "name": "@require",
          "body": "(qx.module.event.Tap#getDocumentLeft) // static code analysis - this method has to referenced"
        },
        {
          "name": "@require",
          "body": "(qx.module.event.Tap#getDocumentTop) // static code analysis - this method has to referenced"
        },
        {
          "name": "@require",
          "body": "(qx.module.event.Tap#getScreenLeft) // static code analysis - this method has to referenced"
        },
        {
          "name": "@require",
          "body": "(qx.module.event.Tap#getScreenTop) // static code analysis - this method has to referenced"
        }
      ],
      "@group": [
        {
          "name": "@group",
          "body": "Event_Normalization"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "TYPES": {
      "location": {
        "start": {
          "line": 40,
          "column": 4
        },
        "end": {
          "line": 40,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "List of event types to be normalized"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "BIND_METHODS": {
      "location": {
        "start": {
          "line": 47,
          "column": 4
        },
        "end": {
          "line": 48,
          "column": 75
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "List methods to be attached to gesture event\nobjects"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getViewportLeft": {
      "location": {
        "start": {
          "line": 56,
          "column": 4
        },
        "end": {
          "line": 58,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the horizontal coordinate at which the event occurred relative\nto the viewport."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal contact position",
            "type": "Number",
            "description": " The horizontal contact position"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getViewportTop": {
      "location": {
        "start": {
          "line": 68,
          "column": 4
        },
        "end": {
          "line": 70,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the vertical coordinate at which the event occurred relative\nto the viewport."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical contact position",
            "type": "Number",
            "description": " The vertical contact position"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentLeft": {
      "location": {
        "start": {
          "line": 80,
          "column": 4
        },
        "end": {
          "line": 83,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the horizontal position at which the event occurred relative to the\nleft of the document. This property takes into account any scrolling of\nthe page."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal contact position in the document.",
            "type": "Number",
            "description": " The horizontal contact position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getDocumentTop": {
      "location": {
        "start": {
          "line": 93,
          "column": 4
        },
        "end": {
          "line": 96,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the vertical position at which the event occurred relative to the\ntop of the document. This property takes into account any scrolling of\nthe page."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical contact position in the document.",
            "type": "Number",
            "description": " The vertical contact position in the document."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenLeft": {
      "location": {
        "start": {
          "line": 108,
          "column": 4
        },
        "end": {
          "line": 110,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the horizontal coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.\n\nNote: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The horizontal contact position on the screen.",
            "type": "Number",
            "description": " The horizontal contact position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getScreenTop": {
      "location": {
        "start": {
          "line": 122,
          "column": 4
        },
        "end": {
          "line": 124,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the vertical coordinate at which the event occurred relative to\nthe origin of the screen coordinate system.\n\nNote: This value is usually not very useful unless you want to\nposition a native popup window at this coordinate."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Number} The vertical contact position on the screen.",
            "type": "Number",
            "description": " The vertical contact position on the screen."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "normalize": {
      "location": {
        "start": {
          "line": 136,
          "column": 4
        },
        "end": {
          "line": 150,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Manipulates the native event object, adding methods if they're not\nalready present"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "event {Event} Native event object",
            "paramName": "event",
            "description": " Native event object",
            "type": "Event"
          },
          {
            "name": "@param",
            "body": "element {Element} DOM element the listener was attached to",
            "paramName": "element",
            "description": " DOM element the listener was attached to",
            "type": "Element"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Event} Normalized event object",
            "type": "Event",
            "description": " Normalized event object"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "defer": {
    "location": {
      "start": {
        "line": 153,
        "column": 2
      },
      "end": {
        "line": 155,
        "column": 3
      }
    }
  },
  "descendants": []
}