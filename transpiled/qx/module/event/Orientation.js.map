{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/module/event/Orientation.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "BIND_METHODS",
    "getOrientation",
    "_orientation",
    "isLandscape",
    "_mode",
    "isPortrait",
    "normalize",
    "event",
    "element",
    "type",
    "_type",
    "bindMethods",
    "module",
    "Orientation",
    "i",
    "l",
    "length",
    "bind",
    "defer",
    "qxWeb",
    "$registerEventNormalization"
  ],
  "mappings": ";;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAyBAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,6BAApB,EAAmD;AACjDC,aACA;AACE;;;AAGAC,aAAQ,CAAC,mBAAD,CAJV;;AAOE;;;;;AAKAC,oBAAe,CAAC,gBAAD,EAAmB,aAAnB,EAAkC,YAAlC,CAZjB;;AAeE;;;;;;;;;;;;AAYAC,sBAAgB,0BAAW;AACzB,eAAO,KAAKC,YAAZ;AACD,OA7BH;;AAgCE;;;;;;AAMAC,mBAAc,uBAAW;AACvB,eAAO,KAAKC,KAAL,IAAc,WAArB;AACD,OAxCH;;AA2CE;;;;;;AAMAC,kBAAa,sBACb;AACE,eAAO,KAAKD,KAAL,IAAc,UAArB;AACD,OApDH;;AAuDE;;;;;;;;;;AAUAE,iBAAY,mBAASC,KAAT,EAAgBC,OAAhB,EAAyBC,IAAzB,EACZ;AACE,YAAI,CAACF,KAAL,EAAY;AACV,iBAAOA,KAAP;AACD;AACDA,cAAMG,KAAN,GAAcD,IAAd;;AAEA,YAAIE,cAAclB,GAAGmB,MAAH,CAAUL,KAAV,CAAgBM,WAAhB,CAA4Bb,YAA9C;AACA,aAAK,IAAIc,IAAE,CAAN,EAASC,IAAEJ,YAAYK,MAA5B,EAAoCF,IAAEC,CAAtC,EAAyCD,GAAzC,EAA8C;AAC5C,cAAI,OAAOP,MAAMI,YAAYG,CAAZ,CAAN,CAAP,IAAgC,UAApC,EAAgD;AAC9CP,kBAAMI,YAAYG,CAAZ,CAAN,IAAwBrB,GAAGmB,MAAH,CAAUL,KAAV,CAAgBM,WAAhB,CAA4BF,YAAYG,CAAZ,CAA5B,EAA4CG,IAA5C,CAAiDV,KAAjD,CAAxB;AACD;AACF;;AAED,eAAOA,KAAP;AACD;AAhFH,KAFiD;;AAqFjDW,WAAQ,eAASpB,OAAT,EAAkB;AACxBqB,YAAMC,2BAAN,CAAkCtB,QAAQC,KAA1C,EAAiDD,QAAQQ,SAAzD;AACD;AAvFgD,GAAnD,C;AAzBAb,KAAGmB,MAAH,CAAUL,KAAV,CAAgBM,WAAhB,CAA4BjB,aAA5B,GAA4CA,aAA5C",
  "file": "Orientation.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Normalization for orientationchange events\n *\n * @require(qx.module.Event)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.Orientation\", {\n  statics :\n  {\n    /**\n     * List of event types to be normalized\n     */\n    TYPES : [\"orientationchange\"],\n\n\n    /**\n     * List of qx.module.event.Orientation methods to be attached to native\n     * event objects\n     * @internal\n     */\n    BIND_METHODS : [\"getOrientation\", \"isLandscape\", \"isPortrait\"],\n\n\n    /**\n     * Returns the current orientation of the viewport in degrees.\n     *\n     * All possible values and their meaning:\n     *\n     * * <code>0</code>: \"Portrait\"\n     * * <code>-90</code>: \"Landscape (right, screen turned clockwise)\"\n     * * <code>90</code>: \"Landscape (left, screen turned counterclockwise)\"\n     * * <code>180</code>: \"Portrait (upside-down portrait)\"\n     *\n     * @return {Number} The current orientation in degrees\n     */\n    getOrientation: function() {\n      return this._orientation;\n    },\n\n\n    /**\n     * Whether the viewport orientation is currently in landscape mode.\n     *\n     * @return {Boolean} <code>true</code> when the viewport orientation\n     *     is currently in landscape mode.\n     */\n    isLandscape : function() {\n      return this._mode == \"landscape\";\n    },\n\n\n    /**\n     * Whether the viewport orientation is currently in portrait mode.\n     *\n     * @return {Boolean} <code>true</code> when the viewport orientation\n     *     is currently in portrait mode.\n     */\n    isPortrait : function()\n    {\n      return this._mode == \"portrait\";\n    },\n\n\n    /**\n     * Manipulates the native event object, adding methods if they're not\n     * already present\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element the listener was attached to\n     * @param type {String} Event type\n     * @return {Event} Normalized event object\n     * @internal\n     */\n    normalize : function(event, element, type)\n    {\n      if (!event) {\n        return event;\n      }\n      event._type = type;\n\n      var bindMethods = qx.module.event.Orientation.BIND_METHODS;\n      for (var i=0, l=bindMethods.length; i<l; i++) {\n        if (typeof event[bindMethods[i]] != \"function\") {\n          event[bindMethods[i]] = qx.module.event.Orientation[bindMethods[i]].bind(event);\n        }\n      }\n\n      return event;\n    }\n  },\n\n  defer : function(statics) {\n    qxWeb.$registerEventNormalization(statics.TYPES, statics.normalize);\n  }\n});\n"
  ]
}