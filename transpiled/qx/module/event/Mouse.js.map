{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/module/event/Mouse.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "TYPES",
    "BIND_METHODS",
    "BUTTONS_DOM2",
    "BUTTONS_MSHTML",
    "getButton",
    "type",
    "qxWeb",
    "env",
    "get",
    "target",
    "undefined",
    "module",
    "event",
    "Mouse",
    "button",
    "getViewportLeft",
    "clientX",
    "getViewportTop",
    "clientY",
    "getDocumentLeft",
    "pageX",
    "win",
    "dom",
    "Node",
    "getWindow",
    "srcElement",
    "bom",
    "Viewport",
    "getScrollLeft",
    "getDocumentTop",
    "pageY",
    "getScrollTop",
    "getScreenLeft",
    "screenX",
    "getScreenTop",
    "screenY",
    "normalize",
    "element",
    "bindMethods",
    "i",
    "l",
    "length",
    "bind",
    "defer",
    "$registerEventNormalization"
  ],
  "mappings": "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",
  "file": "Mouse.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Daniel Wagner (danielwagner)\n\n************************************************************************ */\n\n/**\n * Normalization for native mouse events. For cross-device applications that\n * support both mouse and touchscreen interaction, consider using\n * <a href=\"#Pointer\">Pointer</a> and/or Gesture events (e.g. <a href=\"Tap\"></a>).\n *\n * @require(qx.module.Environment)\n * @require(qx.module.Event)\n *\n * @group (Event_Normalization)\n */\nqx.Bootstrap.define(\"qx.module.event.Mouse\", {\n  statics :\n  {\n    /**\n     * List of event types to be normalized\n     */\n    TYPES : [\"click\", \"dblclick\", \"mousedown\", \"mouseup\", \"mouseover\", \"mousemove\",\n      \"mouseout\"],\n\n\n    /**\n     * List qx.module.event.Mouse methods to be attached to native mouse event\n     * objects\n     * @internal\n     */\n    BIND_METHODS : [\"getButton\", \"getViewportLeft\", \"getViewportTop\",\n      \"getDocumentLeft\", \"getDocumentTop\", \"getScreenLeft\", \"getScreenTop\"],\n\n\n    /**\n     * Standard mouse button mapping\n     */\n    BUTTONS_DOM2 : {\n      0 : \"left\",\n      2 : \"right\",\n      1 : \"middle\"\n    },\n\n\n    /**\n     * Legacy Internet Explorer mouse button mapping\n     */\n    BUTTONS_MSHTML : {\n      1 : \"left\",\n      2 : \"right\",\n      4 : \"middle\"\n    },\n\n\n    /**\n     * Returns the identifier of the mouse button that change state when the\n     * event was triggered\n     *\n     * @return {String} One of <code>left</code>, <code>right</code> or\n     * <code>middle</code>\n     */\n    getButton : function()\n    {\n      switch(this.type)\n      {\n        case \"contextmenu\":\n          return \"right\";\n\n        case \"click\":\n          // IE does not support buttons on click --> assume left button\n          if (qxWeb.env.get(\"browser.name\") === \"ie\" &&\n            qxWeb.env.get(\"browser.documentmode\") < 9)\n          {\n            return \"left\";\n          }\n\n        default:\n          if (this.target !== undefined) {\n            return qx.module.event.Mouse.BUTTONS_DOM2[this.button] || \"none\";\n          } else {\n            return qx.module.event.Mouse.BUTTONS_MSHTML[this.button] || \"none\";\n          }\n      }\n    },\n\n\n    /**\n     * Get the horizontal coordinate at which the event occurred relative\n     * to the viewport.\n     *\n     * @return {Number} The horizontal mouse position\n     */\n    getViewportLeft : function() {\n      return this.clientX;\n    },\n\n\n    /**\n     * Get the vertical coordinate at which the event occurred relative\n     * to the viewport.\n     *\n     * @return {Number} The vertical mouse position\n     * @signature function()\n     */\n    getViewportTop : function() {\n      return this.clientY;\n    },\n\n\n    /**\n     * Get the horizontal position at which the event occurred relative to the\n     * left of the document. This property takes into account any scrolling of\n     * the page.\n     *\n     * @return {Number} The horizontal mouse position in the document.\n     */\n    getDocumentLeft : function()\n    {\n      if (this.pageX !== undefined) {\n        return this.pageX;\n      } else {\n        var win = qx.dom.Node.getWindow(this.srcElement);\n        return this.clientX + qx.bom.Viewport.getScrollLeft(win);\n      }\n    },\n\n\n    /**\n     * Get the vertical position at which the event occurred relative to the\n     * top of the document. This property takes into account any scrolling of\n     * the page.\n     *\n     * @return {Number} The vertical mouse position in the document.\n     */\n    getDocumentTop : function()\n    {\n      if (this.pageY !== undefined) {\n        return this.pageY;\n      } else {\n        var win = qx.dom.Node.getWindow(this.srcElement);\n        return this.clientY + qx.bom.Viewport.getScrollTop(win);\n      }\n    },\n\n\n    /**\n     * Get the horizontal coordinate at which the event occurred relative to\n     * the origin of the screen coordinate system.\n     *\n     * Note: This value is usually not very useful unless you want to\n     * position a native popup window at this coordinate.\n     *\n     * @return {Number} The horizontal mouse position on the screen.\n     */\n    getScreenLeft : function() {\n      return this.screenX;\n    },\n\n\n    /**\n     * Get the vertical coordinate at which the event occurred relative to\n     * the origin of the screen coordinate system.\n     *\n     * Note: This value is usually not very useful unless you want to\n     * position a native popup window at this coordinate.\n     *\n     * @return {Number} The vertical mouse position on the screen.\n     */\n    getScreenTop : function() {\n      return this.screenY;\n    },\n\n\n    /**\n     * Manipulates the native event object, adding methods if they're not\n     * already present\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element the listener was attached to\n     * @return {Event} Normalized event object\n     * @internal\n     */\n    normalize : function(event, element)\n    {\n      if (!event) {\n        return event;\n      }\n      var bindMethods = qx.module.event.Mouse.BIND_METHODS;\n      for (var i=0, l=bindMethods.length; i<l; i++) {\n        if (typeof event[bindMethods[i]] != \"function\") {\n          event[bindMethods[i]] = qx.module.event.Mouse[bindMethods[i]].bind(event);\n        }\n      }\n\n      return event;\n    }\n  },\n\n  defer : function(statics) {\n    qxWeb.$registerEventNormalization(qx.module.event.Mouse.TYPES, statics.normalize);\n  }\n});\n"
  ]
}