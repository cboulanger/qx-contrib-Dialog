{
  "className": "qx.Bootstrap",
  "packageName": "qx",
  "name": "Bootstrap",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 223,
        "column": 0
      },
      "end": {
        "line": 933,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "Internal class that is responsible for bootstrapping the qooxdoo\nframework at load time."
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "LOADSTART": {
      "location": {
        "start": {
          "line": 228,
          "column": 4
        },
        "end": {
          "line": 228,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Timestamp of qooxdoo based application startup"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "DEBUG": {
      "location": {
        "start": {
          "line": 233,
          "column": 5
        },
        "end": {
          "line": 240,
          "column": 9
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mapping for early use of the qx.debug environment setting."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "getEnvironmentSetting": {
      "location": {
        "start": {
          "line": 253,
          "column": 5
        },
        "end": {
          "line": 257,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Minimal accessor API for the environment settings given from the\ngenerator.\n\nWARNING: This method only should be used if the\n{@link qx.core.Environment} class is not loaded!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} The key to get the value from.",
            "paramName": "key",
            "description": " The key to get the value from.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} The value of the setting or <code>undefined</code>.",
            "type": "var",
            "description": " The value of the setting or <code>undefined</code>."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setEnvironmentSetting": {
      "location": {
        "start": {
          "line": 272,
          "column": 5
        },
        "end": {
          "line": 279,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Minimal mutator for the environment settings given from the generator.\nIt checks for the existence of the environment settings and sets the\nkey if its not given from the generator. If a setting is available from\nthe generator, the setting will be ignored.\n\nWARNING: This method only should be used if the\n{@link qx.core.Environment} class is not loaded!"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "key {String} The key of the setting.",
            "paramName": "key",
            "description": " The key of the setting.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} The value for the setting.",
            "paramName": "value",
            "description": " The value for the setting.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createNamespace": {
      "location": {
        "start": {
          "line": 292,
          "column": 4
        },
        "end": {
          "line": 292,
          "column": 50
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates a namespace and assigns the given object to it."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(name, object)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} The complete namespace to create. Typically, the last part is the class name itself",
            "paramName": "name",
            "description": " The complete namespace to create. Typically, the last part is the class name itself",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "object {Object} The object to attach to the namespace",
            "paramName": "object",
            "description": " The object to attach to the namespace",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} last part of the namespace (which object is assigned to)",
            "type": "String",
            "description": " last part of the namespace (which object is assigned to)"
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} when the given object already exists.",
            "type": "Error",
            "description": " when the given object already exists."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "setRoot": {
      "location": {
        "start": {
          "line": 302,
          "column": 4
        },
        "end": {
          "line": 304,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Offers the ability to change the root for creating namespaces from window to\nwhatever object is given."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "root {Object} The root to use.",
            "paramName": "root",
            "description": " The root to use.",
            "type": "Object"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "base": {
      "location": {
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 314,
          "column": 28
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Call the same method of the super class."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(args, varargs)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {arguments} the arguments variable of the calling method",
            "paramName": "args",
            "description": " the arguments variable of the calling method",
            "type": "arguments"
          },
          {
            "name": "@param",
            "body": "varargs {var} variable number of arguments passed to the overwritten function",
            "paramName": "varargs",
            "description": " variable number of arguments passed to the overwritten function",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the return value of the method of the base class.",
            "type": "var",
            "description": " the return value of the method of the base class."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "define": {
      "location": {
        "start": {
          "line": 335,
          "column": 4
        },
        "end": {
          "line": 335,
          "column": 32
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Define a new class using the qooxdoo class system.\nLightweight version of {@link qx.Class#define} with less features."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(name, config)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String?} Name of the class. If null, the class will not be\nattached to a namespace.",
            "paramName": "name",
            "description": " Name of the class. If null, the class will not be\nattached to a namespace.",
            "optional": true,
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {Map ? null} Class definition structure. The configuration map has the following keys:\n<table>\n<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n<tr><th>extend</th><td>Class</td><td>The super class the current class inherits from.</td></tr>\n<tr><th>construct</th><td>Function</td><td>The constructor of the class.</td></tr>\n<tr><th>statics</th><td>Map</td><td>Map of static values / functions of the class.</td></tr>\n<tr><th>members</th><td>Map</td><td>Map of instance members of the class.</td></tr>\n<tr><th>defer</th><td>Function</td><td>Function that is called at the end of\nprocessing the class declaration.</td></tr>\n</table>",
            "paramName": "config",
            "description": " Class definition structure. The configuration map has the following keys:\n<table>\n<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n<tr><th>extend</th><td>Class</td><td>The super class the current class inherits from.</td></tr>\n<tr><th>construct</th><td>Function</td><td>The constructor of the class.</td></tr>\n<tr><th>statics</th><td>Map</td><td>Map of static values / functions of the class.</td></tr>\n<tr><th>members</th><td>Map</td><td>Map of instance members of the class.</td></tr>\n<tr><th>defer</th><td>Function</td><td>Function that is called at the end of\nprocessing the class declaration.</td></tr>\n</table>",
            "optional": true,
            "defaultValue": "null",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class} The defined class.",
            "type": "qx.Class",
            "description": " The defined class."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "setDisplayName": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 346,
          "column": 48
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the display name of the given function"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(fcn, classname, name)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "fcn {Function} the function to set the display name for",
            "paramName": "fcn",
            "description": " the function to set the display name for",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "classname {String} the name of the class the function is defined in",
            "paramName": "classname",
            "description": " the name of the class the function is defined in",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "name {String} the function name",
            "paramName": "name",
            "description": " the function name",
            "type": "String"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "setDisplayNames": {
      "location": {
        "start": {
          "line": 357,
          "column": 4
        },
        "end": {
          "line": 357,
          "column": 50
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the names of all functions defined in the given map"
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(functionMap, classname)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "functionMap {Object} a map with functions as values",
            "paramName": "functionMap",
            "description": " a map with functions as values",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "classname {String} the name of the class, the functions are\ndefined in",
            "paramName": "classname",
            "description": " the name of the class, the functions are\ndefined in",
            "type": "String"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "genericToString": {
      "location": {
        "start": {
          "line": 367,
          "column": 4
        },
        "end": {
          "line": 367,
          "column": 50
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This method will be attached to all classes to return\na nice identifier for them."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function()"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The class identifier",
            "type": "String",
            "description": " The class identifier"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "extendClass": {
      "location": {
        "start": {
          "line": 384,
          "column": 4
        },
        "end": {
          "line": 414,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Inherit a clazz from a super class.\n\nThis function differentiates between class and constructor because the\nconstructor written by the user might be wrapped and the <code>base</code>\nproperty has to be attached to the constructor, while the <code>superclass</code>\nproperty has to be attached to the wrapped constructor."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Function} The class's wrapped constructor",
            "paramName": "clazz",
            "description": " The class's wrapped constructor",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "construct {Function} The unwrapped constructor",
            "paramName": "construct",
            "description": " The unwrapped constructor",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "superClass {Function} The super class",
            "paramName": "superClass",
            "description": " The super class",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "name {Function} fully qualified class name",
            "paramName": "name",
            "description": " fully qualified class name",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "basename {Function} the base name",
            "paramName": "basename",
            "description": " the base name",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__pendingDefers": {
      "location": {
        "start": {
          "line": 417,
          "column": 4
        },
        "end": {
          "line": 417,
          "column": 23
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Private list of classes which have a defer method that needs to be executed"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "addPendingDefer": {
      "location": {
        "start": {
          "line": 426,
          "column": 4
        },
        "end": {
          "line": 433,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Adds a callback for a class so that it's defer method can be called, either after all classes\nare loaded or when absolutely necessary because of load-time requirements of other classes."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Class to add a callback to",
            "paramName": "clazz",
            "description": " Class to add a callback to",
            "type": "qx.Class"
          },
          {
            "name": "@param",
            "body": "cb {Function} Callback function",
            "paramName": "cb",
            "description": " Callback function",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "executePendingDefers": {
      "location": {
        "start": {
          "line": 443,
          "column": 4
        },
        "end": {
          "line": 511,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Executes the defer methods for classes which are required by the dependency information in\ndbClassInfo (which is a map in the format generated by qxcompiler).  Defer methods are of course\nonly executed once but they are always put off until absolutely necessary to avoid potential\nside effects and recursive and/or difficult to resolve dependencies."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "dbClassInfo {Object} qxcompiler map",
            "paramName": "dbClassInfo",
            "description": " qxcompiler map",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getByName": {
      "location": {
        "start": {
          "line": 520,
          "column": 4
        },
        "end": {
          "line": 522,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Find a class by its name"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} class name to resolve",
            "paramName": "name",
            "description": " class name to resolve",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Class} the class",
            "type": "qx.Class",
            "description": " the class"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$$registry": {
      "location": {
        "start": {
          "line": 526,
          "column": 4
        },
        "end": {
          "line": 526,
          "column": 19
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Stores all defined classes"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "objectGetLength": {
      "location": {
        "start": {
          "line": 542,
          "column": 4
        },
        "end": {
          "line": 544,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nOBJECT UTILITY FUNCTIONS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Get the number of own properties in the object."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Object} the map",
            "paramName": "map",
            "description": " the map",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} number of objects in the map",
            "type": "Integer",
            "description": " number of objects in the map"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreUnused(key)"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "objectMergeWith": {
      "location": {
        "start": {
          "line": 556,
          "column": 4
        },
        "end": {
          "line": 570,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Inserts all keys of the source object into the\ntarget objects. Attention: The target map gets modified."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "target {Object} target object",
            "paramName": "target",
            "description": " target object",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "source {Object} object to be merged",
            "paramName": "source",
            "description": " object to be merged",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "overwrite {Boolean ? true} If enabled existing keys will be overwritten",
            "paramName": "overwrite",
            "description": " If enabled existing keys will be overwritten",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} Target with merged values from the source object",
            "type": "Object",
            "description": " Target with merged values from the source object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__shadowedKeys": {
      "location": {
        "start": {
          "line": 580,
          "column": 4
        },
        "end": {
          "line": 589,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "IE does not return \"shadowed\" keys even if they are defined directly\nin the object."
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{String[]}"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "keys": {
      "location": {
        "start": {
          "line": 600,
          "column": 4
        },
        "end": {
          "line": 652,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the keys of a map as array as returned by a \"for ... in\" statement."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(map)"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "map {Object} the map",
            "paramName": "map",
            "description": " the map",
            "type": "Object"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Array} array of the keys of the map",
            "type": "Array",
            "description": " array of the keys of the map"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__classToTypeMap": {
      "location": {
        "start": {
          "line": 660,
          "column": 4
        },
        "end": {
          "line": 674,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Mapping from JavaScript string representation of objects to names"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map}"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "bind": {
      "location": {
        "start": {
          "line": 710,
          "column": 4
        },
        "end": {
          "line": 717,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFUNCTION UTILITY FUNCTIONS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Returns a function whose \"this\" is altered.\n\n*Syntax*\n\n<pre class='javascript'>qx.Bootstrap.bind(myFunction, [self, [varargs...]]);</pre>\n\n*Example*\n\n<pre class='javascript'>\nfunction myFunction()\n{\nthis.setStyle('color', 'red');\n// note that 'this' here refers to myFunction, not an element\n// we'll need to bind this function to the element we want to alter\n};\n\nvar myBoundFunction = qx.Bootstrap.bind(myFunction, myElement);\nmyBoundFunction(); // this will make the element myElement red.\n</pre>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "func {Function} Original function to wrap",
            "paramName": "func",
            "description": " Original function to wrap",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object ? null} The object that the \"this\" of the function will refer to.",
            "paramName": "self",
            "description": " The object that the \"this\" of the function will refer to.",
            "optional": true,
            "defaultValue": "null",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "varargs {arguments ? null} The arguments to pass to the function.",
            "paramName": "varargs",
            "description": " The arguments to pass to the function.",
            "optional": true,
            "defaultValue": "null",
            "type": "arguments"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} The bound function.",
            "type": "Function",
            "description": " The bound function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "firstUp": {
      "location": {
        "start": {
          "line": 733,
          "column": 4
        },
        "end": {
          "line": 735,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSTRING UTILITY FUNCTIONS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Convert the first character of the string to upper case."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string",
            "paramName": "str",
            "description": " the string",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with an upper case first character",
            "type": "String",
            "description": " the string with an upper case first character"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "firstLow": {
      "location": {
        "start": {
          "line": 744,
          "column": 4
        },
        "end": {
          "line": 746,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Convert the first character of the string to lower case."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "str {String} the string",
            "paramName": "str",
            "description": " the string",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the string with a lower case first character",
            "type": "String",
            "description": " the string with a lower case first character"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getClass": {
      "location": {
        "start": {
          "line": 763,
          "column": 4
        },
        "end": {
          "line": 776,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nTYPE UTILITY FUNCTIONS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Get the internal class of the value. See\nhttp://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\nfor details."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} value to get the class for",
            "paramName": "value",
            "description": " value to get the class for",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the internal class of the value",
            "type": "String",
            "description": " the internal class of the value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isString": {
      "location": {
        "start": {
          "line": 785,
          "column": 4
        },
        "end": {
          "line": 799,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the value is a string."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check.",
            "paramName": "value",
            "description": " Value to check.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the value is a string.",
            "type": "Boolean",
            "description": " Whether the value is a string."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isArray": {
      "location": {
        "start": {
          "line": 808,
          "column": 4
        },
        "end": {
          "line": 822,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the value is an array."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check.",
            "paramName": "value",
            "description": " Value to check.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the value is an array.",
            "type": "Boolean",
            "description": " Whether the value is an array."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isObject": {
      "location": {
        "start": {
          "line": 832,
          "column": 4
        },
        "end": {
          "line": 838,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the value is an object. Note that built-in types like Window are\nnot reported to be objects."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check.",
            "paramName": "value",
            "description": " Value to check.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the value is an object.",
            "type": "Boolean",
            "description": " Whether the value is an object."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isFunction": {
      "location": {
        "start": {
          "line": 847,
          "column": 4
        },
        "end": {
          "line": 849,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the value is a function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check.",
            "paramName": "value",
            "description": " Value to check.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the value is a function.",
            "type": "Boolean",
            "description": " Whether the value is a function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isFunctionOrAsyncFunction": {
      "location": {
        "start": {
          "line": 858,
          "column": 4
        },
        "end": {
          "line": 861,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the value is a function or an async function."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "value {var} Value to check.",
            "paramName": "value",
            "description": " Value to check.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the value is a function.",
            "type": "Boolean",
            "description": " Whether the value is a function."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "$$logs": {
      "location": {
        "start": {
          "line": 871,
          "column": 4
        },
        "end": {
          "line": 871,
          "column": 15
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nLOGGING UTILITY FUNCTIONS\n---------------------------------------------------------------------------"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "debug": {
      "location": {
        "start": {
          "line": 882,
          "column": 4
        },
        "end": {
          "line": 884,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sending a message at level \"debug\" to the logger."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "info": {
      "location": {
        "start": {
          "line": 895,
          "column": 4
        },
        "end": {
          "line": 897,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sending a message at level \"info\" to the logger."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "warn": {
      "location": {
        "start": {
          "line": 908,
          "column": 4
        },
        "end": {
          "line": 910,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sending a message at level \"warn\" to the logger."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "error": {
      "location": {
        "start": {
          "line": 921,
          "column": 4
        },
        "end": {
          "line": 923,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sending a message at level \"error\" to the logger."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          },
          {
            "name": "@param",
            "body": "message {var} Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "paramName": "message",
            "description": " Any number of arguments supported. An argument may\nhave any JavaScript data type. All data is serialized immediately and\ndoes not keep references to other objects.",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "trace": {
      "location": {
        "start": {
          "line": 931,
          "column": 4
        },
        "end": {
          "line": 931,
          "column": 31
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prints the current stack trace at level \"info\""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "object {Object} Contextual object (either instance or static class)",
            "paramName": "object",
            "description": " Contextual object (either instance or static class)",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": []
}