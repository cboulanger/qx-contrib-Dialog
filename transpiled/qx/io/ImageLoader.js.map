{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/io/ImageLoader.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__data",
    "__defaultSize",
    "width",
    "height",
    "__knownImageTypesRegExp",
    "__dataUrlRegExp",
    "isLoaded",
    "source",
    "entry",
    "loaded",
    "isFailed",
    "failed",
    "isLoading",
    "loading",
    "getFormat",
    "format",
    "result",
    "exec",
    "lang",
    "Type",
    "isNumber",
    "getSize",
    "getWidth",
    "getHeight",
    "load",
    "callback",
    "context",
    "window",
    "callbacks",
    "push",
    "call",
    "el",
    "document",
    "createElement",
    "boundCallback",
    "Function",
    "listener",
    "__onload",
    "onload",
    "onerror",
    "src",
    "element",
    "abort",
    "aborted",
    "i",
    "l",
    "length",
    "core",
    "Environment",
    "select",
    "event",
    "GlobalError",
    "observeMethod",
    "__onLoadHandler",
    "apply",
    "arguments",
    "bom",
    "client",
    "Engine",
    "getName",
    "parseFloat",
    "getVersion",
    "body",
    "appendChild",
    "isImageAvailable",
    "imgElem",
    "type",
    "removeChild",
    "dispose",
    "io",
    "ImageLoader"
  ],
  "mappings": "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",
  "file": "ImageLoader.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n\n************************************************************************ */\n\n/**\n * The ImageLoader can preload and manage loaded image resources. It easily\n * handles multiple requests and supports callbacks for successful and failed\n * requests.\n *\n * After loading of an image the dimension of the image is stored as long\n * as the application is running. This is quite useful for in-memory layouting.\n *\n * Use {@link #load} to preload your own images.\n */\nqx.Bootstrap.define(\"qx.io.ImageLoader\",\n{\n  statics :\n  {\n    /** @type {Map} Internal data structure to cache image sizes */\n    __data : {},\n\n\n    /** @type {Map} Default image size */\n    __defaultSize :\n    {\n      width : null,\n      height : null\n    },\n\n    /** @type {RegExp} Known image types */\n    __knownImageTypesRegExp : /\\.(png|gif|jpg|jpeg|bmp)\\b/i,\n\n    /** @type {RegExp} Image types of a data URL */\n    __dataUrlRegExp : /^data:image\\/(png|gif|jpg|jpeg|bmp)\\b/i,\n\n    /**\n     * Whether the given image has previously been loaded using the\n     * {@link #load} method.\n     *\n     * @param source {String} Image source to query\n     * @return {Boolean} <code>true</code> when the image is loaded\n     */\n    isLoaded : function(source)\n    {\n      var entry = this.__data[source];\n      return !!(entry && entry.loaded);\n    },\n\n\n    /**\n     * Whether the given image has previously been requested using the\n     * {@link #load} method but failed.\n     *\n     * @param source {String} Image source to query\n     * @return {Boolean} <code>true</code> when the image loading failed\n     */\n    isFailed : function(source)\n    {\n      var entry = this.__data[source];\n      return !!(entry && entry.failed);\n    },\n\n\n    /**\n     * Whether the given image is currently loading.\n     *\n     * @param source {String} Image source to query\n     * @return {Boolean} <code>true</code> when the image is loading in the moment.\n     */\n    isLoading : function(source)\n    {\n      var entry = this.__data[source];\n      return !!(entry && entry.loading);\n    },\n\n\n    /**\n     * Returns the format of a previously loaded image\n     *\n     * @param source {String} Image source to query\n     * @return {String ? null} The format of the image or <code>null</code>\n     */\n    getFormat : function(source)\n    {\n      var entry = this.__data[source];\n\n      if (! entry || ! entry.format)\n      {\n        var result = this.__dataUrlRegExp.exec(source);\n        if (result != null)\n        {\n          // If width and height aren't defined, provide some defaults\n          var width =\n            (entry && qx.lang.Type.isNumber(entry.width)\n             ? entry.width\n             : this.__defaultSize.width);\n\n          var height =\n            (entry && qx.lang.Type.isNumber(entry.height)\n             ? entry.height\n             : this.__defaultSize.height);\n\n          entry =\n            {\n              loaded : true,\n              format : result[1],\n              width  : width,\n              height : height\n            };\n        }\n      }\n      return entry ? entry.format : null;\n    },\n\n\n    /**\n     * Returns the size of a previously loaded image\n     *\n     * @param source {String} Image source to query\n     * @return {Map} The dimension of the image (<code>width</code> and\n     *    <code>height</code> as key). If the image is not yet loaded, the\n     *    dimensions are given as <code>null</code> for width and height.\n     */\n    getSize : function(source) {\n      var entry = this.__data[source];\n      return entry ? { width: entry.width, height: entry.height } : this.__defaultSize;\n    },\n\n\n    /**\n     * Returns the image width\n     *\n     * @param source {String} Image source to query\n     * @return {Integer} The width or <code>null</code> when the image is not loaded\n     */\n    getWidth : function(source)\n    {\n      var entry = this.__data[source];\n      return entry ? entry.width : null;\n    },\n\n\n    /**\n     * Returns the image height\n     *\n     * @param source {String} Image source to query\n     * @return {Integer} The height or <code>null</code> when the image is not loaded\n     */\n    getHeight : function(source)\n    {\n      var entry = this.__data[source];\n      return entry ? entry.height : null;\n    },\n\n\n    /**\n     * Loads the given image. Supports a callback which is\n     * executed when the image is loaded.\n     *\n     * This method works asynchronous.\n     *\n     * @param source {String} Image source to load\n     * @param callback {Function?} Callback function to execute\n     *   The first parameter of the callback is the given source url, the\n     *   second parameter is the data entry which contains additional\n     *   information about the image.\n     * @param context {Object?} Context in which the given callback should be executed\n     */\n    load : function(source, callback, context)\n    {\n      // Shorthand\n      var entry = this.__data[source];\n\n      if (!entry) {\n        entry = this.__data[source] = {};\n      }\n\n      // Normalize context\n      if (callback && !context) {\n        context = window;\n      }\n\n      // Already known image source\n      if (entry.loaded || entry.loading || entry.failed)\n      {\n        if (callback)\n        {\n          if (entry.loading) {\n            entry.callbacks.push(callback, context);\n          } else {\n            callback.call(context, source, entry);\n          }\n        }\n      }\n      else\n      {\n        // Updating entry\n        entry.loading = true;\n        entry.callbacks = [];\n\n        if (callback) {\n          entry.callbacks.push(callback, context);\n        }\n\n        // Create image element\n        var el = document.createElement('img');\n\n        // Create common callback routine\n        var boundCallback = qx.lang.Function.listener(this.__onload, this, el, source);\n\n        // Assign callback to element\n        el.onload = boundCallback;\n        el.onerror = boundCallback;\n\n        // Start loading of image\n        el.src = source;\n\n        // save the element for aborting\n        entry.element = el;\n      }\n    },\n\n\n    /**\n     * Abort the loading for the given url.\n     *\n     * @param source {String} URL of the image to abort its loading.\n     */\n    abort : function (source)\n    {\n      var entry = this.__data[source];\n\n      if (entry && !entry.loaded)\n      {\n        entry.aborted = true;\n\n        var callbacks = entry.callbacks;\n        var element = entry.element;\n\n        // Cleanup listeners\n        element.onload = element.onerror = null;\n\n        // prevent further loading\n        element.src = \"\";\n\n        // Cleanup entry\n        delete entry.callbacks;\n        delete entry.element;\n        delete entry.loading;\n\n        for (var i=0, l=callbacks.length; i<l; i+=2) {\n          callbacks[i].call(callbacks[i+1], source, entry);\n        }\n      }\n\n      this.__data[source] = null;\n    },\n\n\n    /**\n     * Calls a method based on qx.globalErrorHandling\n     */\n    __onload: function () {\n      var callback = qx.core.Environment.select(\"qx.globalErrorHandling\", {\n        \"true\": qx.event.GlobalError.observeMethod(this.__onLoadHandler),\n        \"false\": this.__onLoadHandler\n      });\n      callback.apply(this, arguments);\n    },\n\n\n    /**\n     * Internal event listener for all load/error events.\n     *\n     * @signature function(event, element, source)\n     *\n     * @param event {Event} Native event object\n     * @param element {Element} DOM element which represents the image\n     * @param source {String} The image source loaded\n     */\n    __onLoadHandler: function (event, element, source) {\n      // Shorthand\n      var entry = this.__data[source];\n\n      // [BUG #9149]: When loading a SVG IE11 won't have\n      // the width/height of the element set, unless\n      // it is inserted into the DOM.\n      if(qx.bom.client.Engine.getName() == \"mshtml\" &&\n          parseFloat(qx.bom.client.Engine.getVersion()) === 11)\n      {\n        document.body.appendChild(element);\n      }\n\n      var isImageAvailable = function (imgElem) {\n        return (imgElem && imgElem.height !== 0);\n      };\n\n      // [BUG #7497]: IE11 doesn't properly emit an error event\n      // when loading fails so augment success check\n      if (event.type === \"load\" && isImageAvailable(element)) {\n        // Store dimensions\n        entry.loaded = true;\n        entry.width = element.width;\n        entry.height = element.height;\n\n        // try to determine the image format\n        var result = this.__knownImageTypesRegExp.exec(source);\n        if (result != null) {\n          entry.format = result[1];\n        }\n      }\n      else {\n        entry.failed = true;\n      }\n\n      if(qx.bom.client.Engine.getName() == \"mshtml\" &&\n          parseFloat(qx.bom.client.Engine.getVersion()) === 11)\n      {\n        document.body.removeChild(element);\n      }\n\n      // Cleanup listeners\n      element.onload = element.onerror = null;\n\n      // Cache callbacks\n      var callbacks = entry.callbacks;\n\n      // Cleanup entry\n      delete entry.loading;\n      delete entry.callbacks;\n      delete entry.element;\n\n      // Execute callbacks\n      for (var i = 0, l = callbacks.length; i < l; i += 2) {\n        callbacks[i].call(callbacks[i + 1], source, entry);\n      }\n    },\n\n\n    /**\n     * Dispose stored images.\n     */\n    dispose : function()\n    {\n      this.__data = {};\n    }\n  }\n});\n"
  ]
}