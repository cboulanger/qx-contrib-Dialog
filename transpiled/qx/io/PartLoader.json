{
  "className": "qx.io.PartLoader",
  "packageName": "qx.io",
  "name": "PartLoader",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 24,
        "column": 0
      },
      "end": {
        "line": 134,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nFabian Jakobs (fjakobs)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "The part loader knows about all generated packages and parts.\n\nIt contains functionality to load parts and to retrieve part instances."
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": false,
  "construct": {
    "location": {
      "start": {
        "line": 30,
        "column": 2
      },
      "end": {
        "line": 45,
        "column": 3
      }
    }
  },
  "events": {
    "partLoaded": {
      "location": {
        "start": {
          "line": 54,
          "column": 4
        },
        "end": {
          "line": 54,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired if a parts was loaded. The data of the event instance point to the\nloaded part instance."
          }
        ]
      },
      "name": "partLoaded",
      "type": "qx.event.type.Data"
    },
    "partLoadingError": {
      "location": {
        "start": {
          "line": 61,
          "column": 4
        },
        "end": {
          "line": 61,
          "column": 45
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired if a part could not be loaded. The event's\n{@link qx.event.type.Data#getData} method returns the name of the failed\npart."
          }
        ]
      },
      "name": "partLoadingError",
      "type": "qx.event.type.Data"
    }
  },
  "statics": {
    "require": {
      "location": {
        "start": {
          "line": 79,
          "column": 4
        },
        "end": {
          "line": 81,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Loads one or more parts asynchronously. The callback is called after all\nparts and their dependencies are fully loaded. If the parts are already\nloaded the callback is called immediately."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "partNames {String[]} List of parts names to load as defined in the\nconfig file at compile time.",
            "paramName": "partNames",
            "description": " List of parts names to load as defined in the\nconfig file at compile time.",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "callback {Function} Function to execute on completion.\nThe function has one parameter which is an array of ready states of\nthe parts specified in the partNames argument.",
            "paramName": "callback",
            "description": " Function to execute on completion.\nThe function has one parameter which is an array of ready states of\nthe parts specified in the partNames argument.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object?window} Context to execute the given function in",
            "paramName": "self",
            "description": " Context to execute the given function in",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "members": {
    "require": {
      "location": {
        "start": {
          "line": 98,
          "column": 4
        },
        "end": {
          "line": 100,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Loads one or more parts asynchronously. The callback is called after all\nparts and their dependencies are fully loaded. If the parts are already\nloaded the callback is called immediately."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "partNames {String|String[]} List of parts names to load as defined\nin the config file at compile time. The method also accepts a single\nstring as parameter to only load one part.",
            "paramName": "partNames",
            "description": " List of parts names to load as defined\nin the config file at compile time. The method also accepts a single\nstring as parameter to only load one part.",
            "type": [
              "String",
              {
                "type": "String",
                "dimensions": 2
              }
            ]
          },
          {
            "name": "@param",
            "body": "callback {Function} Function to execute on completion",
            "paramName": "callback",
            "description": " Function to execute on completion",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "self {Object?window} Context to execute the given function in",
            "paramName": "self",
            "description": " Context to execute the given function in",
            "optional": true,
            "defaultValue": "window",
            "type": "Object"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPart": {
      "location": {
        "start": {
          "line": 110,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the part instance of the part with the given name."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the part as defined in the config file at\ncompile time.",
            "paramName": "name",
            "description": " Name of the part as defined in the config file at\ncompile time.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.io.part.Part} The corresponding part instance",
            "type": "qx.io.part.Part",
            "description": " The corresponding part instance"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "hasPart": {
      "location": {
        "start": {
          "line": 121,
          "column": 4
        },
        "end": {
          "line": 123,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks if a part with the given name is available."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "name {String} Name of the part as defined in the config file at\ncompile time.",
            "paramName": "name",
            "description": " Name of the part as defined in the config file at\ncompile time.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <code>true</code>, if the part is available",
            "type": "Boolean",
            "description": " <code>true</code>, if the part is available"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getParts": {
      "location": {
        "start": {
          "line": 130,
          "column": 4
        },
        "end": {
          "line": 132,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a map of all known parts."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Map} Map containing all parts.",
            "type": "Map",
            "description": " Map containing all parts."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    }
  },
  "descendants": []
}