{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/io/part/Part.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "construct",
    "name",
    "packages",
    "loader",
    "__name",
    "_readyState",
    "_packages",
    "_loader",
    "i",
    "length",
    "getReadyState",
    "members",
    "getName",
    "getPackages",
    "preload",
    "callback",
    "self",
    "window",
    "setTimeout",
    "call",
    "load",
    "_checkCompleteLoading",
    "_appendPartListener",
    "part",
    "onLoad",
    "pkg",
    "addPackageListener",
    "notifyPackageResult",
    "_markAsCompleted",
    "Error",
    "that",
    "addPartListener",
    "_signalStartup",
    "readyState",
    "notifyPartResult",
    "$$loader",
    "applicationHandlerReady",
    "signalStartup",
    "io",
    "Part"
  ],
  "mappings": "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",
  "file": "Part.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2009 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Fabian Jakobs (fjakobs)\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * Wrapper for a part as defined in the config file. This class knows about all\n * packages the part depends on and provides functionality to load the part.\n *\n * @internal\n */\nqx.Bootstrap.define(\"qx.io.part.Part\",\n{\n  /**\n   * @param name {String} Name of the part as defined in the config file at\n   *    compile time.\n   * @param packages {qx.io.part.Package[]} List of dependent packages\n   * @param loader {qx.Part} The loader of this part.\n   */\n  construct : function(name, packages, loader)\n  {\n    this.__name = name;\n    this._readyState = \"complete\";\n    this._packages = packages;\n    this._loader = loader;\n\n    for (var i=0; i<packages.length; i++)\n    {\n      if (packages[i].getReadyState() !== \"complete\")\n      {\n        this._readyState = \"initialized\";\n        break;\n      }\n    }\n  },\n\n\n  members :\n  {\n    _readyState : null,\n    _loader : null,\n    _packages : null,\n    __name : null,\n\n\n    /**\n     * Get the ready state of the part. The value is one of\n     * <ul>\n     * <li>\n     *   <b>initialized</b>: The part is initialized. The {@link #load}\n     *   method has not yet been called\n     * </li>\n     * <li><b>loading</b>: The part is still loading.</li>\n     * <li><b>complete</b>: The part has been loaded successfully</li>\n     * </li>\n     *\n     * @return {String} The ready state.\n     */\n    getReadyState : function() {\n      return this._readyState;\n    },\n\n\n    /**\n     * The part name as defined in the config file\n     *\n     * @return {String} The part name\n     */\n    getName : function() {\n      return this.__name;\n    },\n\n\n    /**\n     * Internal helper for testing purposes.\n     * @internal\n     * @return {qx.io.part.Package[]} All contained packages in an array.\n     */\n    getPackages : function()\n    {\n      return this._packages;\n    },\n\n\n    /**\n     * Method for preloading this part.\n     * Empty implementation! Regular parts can not be preloaded.\n     *\n     * @param callback {Function} Callback for the preload.\n     * @param self {Object?} The context of the callback.\n     */\n    preload : function(callback, self) {\n      // Just do nothing because you can not preload regular parts.\n      // Also, loading the part here is not a good idea because it could break\n      // the load order of the packages if someone uses preload right after\n      // loading another part. So we just invoke the callback async.\n      if (callback) {\n        window.setTimeout(function() {\n          callback.call(self, this);\n        }, 0);\n      }\n    },\n\n\n    /**\n     * Loads the part asynchronously. The callback is called after the part and\n     * its dependencies are fully loaded. If the part is already loaded the\n     * callback is called immediately.\n     *\n     * @internal\n     *\n     * @param callback {Function} Function to execute on completion\n     * @param self {Object?window} Context to execute the given function in\n     */\n    load : function(callback, self)\n    {\n       if (this._checkCompleteLoading(callback, self)) {\n         return;\n       };\n\n      this._readyState = \"loading\";\n\n      if (callback) {\n        this._appendPartListener(callback, self, this);\n      }\n\n      var part = this;\n      var onLoad = function() {\n        part.load();\n      };\n\n      for (var i=0; i<this._packages.length; i++)\n      {\n        var pkg = this._packages[i];\n        switch (pkg.getReadyState())\n        {\n          case \"initialized\":\n            this._loader.addPackageListener(pkg, onLoad);\n            pkg.load(this._loader.notifyPackageResult, this._loader);\n            return;\n\n          case \"loading\":\n            this._loader.addPackageListener(pkg, onLoad);\n            return;\n\n          case \"complete\":\n            break;\n\n          case \"error\":\n            this._markAsCompleted(\"error\");\n            return;\n\n          default:\n            throw new Error(\"Invalid case! \" + pkg.getReadyState());\n        }\n      }\n\n      this._markAsCompleted(\"complete\");\n    },\n\n\n    /**\n     * Helper for appending a listener for this part.\n     *\n     * @param callback {Function} The function to call when the part is loaded.\n     * @param self {Object?} The context of the callback.\n     * @param part {qx.io.part.Part|qx.io.part.ClosurePart} The part to listen\n     *   to.\n     */\n    _appendPartListener : function(callback, self, part)\n    {\n      var that = this;\n      this._loader.addPartListener(this, function() {\n        that._signalStartup();\n        callback.call(self, part._readyState);\n      });\n    },\n\n\n    /**\n     * Helper for marking the part as complete.\n     *\n     * @param readyState {String} The new ready state.\n     */\n    _markAsCompleted : function(readyState)\n    {\n      this._readyState = readyState;\n      this._loader.notifyPartResult(this);\n    },\n\n\n\n    /**\n     * Method used to start up the application in case not all parts\n     * necessary to initialize the application are in the boot part. [BUG #3793]\n     */\n    _signalStartup : function() {\n      // signal the application startup if not already done\n      if (!qx.$$loader.applicationHandlerReady) {\n        qx.$$loader.signalStartup();\n      }\n    },\n\n\n    /**\n     * Helper for checking if the part is loaded completely.\n     *\n     * @param callback {Function} The function to be called if the part has\n     *   been loaded completely.\n     * @param self {Object} The context of the callback function.\n     * @return {Boolean} true, if the part is loading, complete or has an error.\n     */\n    _checkCompleteLoading : function(callback, self)\n    {\n      // check if its already loaded\n      var readyState = this._readyState;\n      if (readyState == \"complete\" || readyState == \"error\") {\n        if (callback) {\n          var that = this;\n          setTimeout(function() {\n            that._signalStartup();\n            callback.call(self, readyState);\n          }, 0);\n        }\n        return true;\n      }\n      // add a listener if it is currently loading\n      else if (readyState == \"loading\" && callback)\n      {\n        this._appendPartListener(callback, self, this);\n        return true;\n      }\n    }\n  }\n});"
  ]
}