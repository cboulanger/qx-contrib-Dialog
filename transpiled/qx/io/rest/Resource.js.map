{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/io/rest/Resource.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "description",
    "__longPollHandlers",
    "__pollTimers",
    "__routes",
    "_resource",
    "_tailorResource",
    "_getResource",
    "Assert",
    "assertMap",
    "__mapFromDescription",
    "e",
    "dispose",
    "events",
    "statics",
    "POLL_THROTTLE_LIMIT",
    "POLL_THROTTLE_COUNT",
    "REQUIRED",
    "placeholdersFromUrl",
    "url",
    "bom",
    "rest",
    "Resource",
    "members",
    "resource",
    "setRequestFactory",
    "_getRequest",
    "setRequestHandler",
    "onsuccess",
    "callback",
    "req",
    "action",
    "props",
    "getResponse",
    "getPhase",
    "fireEvent",
    "event",
    "type",
    "Rest",
    "context",
    "onfail",
    "onloadend",
    "configureRequest",
    "io",
    "request",
    "Xhr",
    "map",
    "method",
    "check",
    "__addAction",
    "undefined",
    "Error",
    "__declareEvent",
    "lang",
    "Function",
    "bind",
    "Array",
    "prototype",
    "unshift",
    "call",
    "arguments",
    "invoke",
    "apply",
    "params",
    "data",
    "setBaseUrl",
    "baseUrl",
    "abort",
    "varargs",
    "refresh",
    "poll",
    "interval",
    "immediately",
    "intervalListener",
    "reqs",
    "getRequestsByAction",
    "isDone",
    "isDisposed",
    "timer",
    "Timer",
    "addListener",
    "start",
    "longPoll",
    "res",
    "lastResponse",
    "immediateResponseCount",
    "throttle",
    "isImmediateResponse",
    "Date",
    "_getThrottleLimit",
    "_getThrottleCount",
    "debug",
    "handlerId",
    "longPollHandler",
    "_getRequestConfig",
    "keys",
    "forEach",
    "route",
    "assertString",
    "constructor",
    "$$events",
    "destruct",
    "stop",
    "id",
    "removeListenerById"
  ],
  "mappings": "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",
  "file": "Resource.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n     * Richard Sternagel (rsternagel)\n\n************************************************************************ */\n\n/**\n * Client-side wrapper of a REST resource.\n *\n * Each instance represents a resource in terms of REST. A number of actions\n * (usually HTTP methods) unique to the resource can be defined and invoked.\n * A resource with its actions is configured declaratively by passing a resource\n * description to the constructor, or programmatically using {@link #map}.\n *\n * Each action is associated to a route. A route is a combination of method,\n * URL pattern and optional parameter constraints.\n *\n * An action is invoked by calling a method with the same name. When a URL\n * pattern of a route contains positional parameters, those parameters must be\n * passed when invoking the associated action. Also, constraints defined in the\n * route must be satisfied.\n *\n * When an action is invoked, a request is configured according to the associated\n * route, is passed the URL parameters, request body data, and finally send.\n * What kind of request is send can be configured by overwriting {@link #_getRequest}.\n *\n * No constraints on the action's name or the scope of the URLs are imposed. However,\n * if you want to follow RESTful design patterns it is recommended to name actions\n * the same as the HTTP action.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\" },\n *  \"put\": { method: \"PUT\", url: \"/photo/{id}\"},\n *  \"post\": { method: \"POST\", url: \"/photos/\"}\n * };\n * var photo = new qx.io.rest.Resource(description);\n * // Can also be written: photo.invoke(\"get\", {id: 1});\n * photo.get({id: 1});\n *\n * // Additionally sets request data (provide it as string or set the content type)\n * // In a RESTful environment this creates a new resource with the given 'id'\n * photo.configureRequest(function(req) {\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\n * });\n * photo.put({id: 1}, {title: \"Monkey\"});\n *\n * // Additionally sets request data (provide it as string or set the content type)\n * // In a RESTful environment this adds a new resource to the resource collection 'photos'\n * photo.configureRequest(function(req) {\n *  req.setRequestHeader(\"Content-Type\", \"application/json\");\n * });\n * photo.post(null, {title: \"Monkey\"});\n * </pre>\n *\n * To check for existence of URL parameters or constrain them to a certain format, you\n * can add a <code>check</code> property to the description. See {@link #map} for details.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photo/{id}\", check: { id: /\\d+/ } }\n * };\n * var photo = new qx.io.rest.Resource(description);\n * // photo.get({id: \"FAIL\"});\n * // -- Error: \"Parameter 'id' is invalid\"\n * </pre>\n *\n * If your description happens to use the same action more than once, consider\n * defining another resource.\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photos\"},\n * };\n * // Distinguish \"photo\" (singular) and \"photos\" (plural) resource\n * var photos = new qx.io.rest.Resource(description);\n * photos.get();\n * </pre>\n *\n * Basically, all routes of a resource should point to the same URL (resource in\n * terms of HTTP). One acceptable exception of this constraint are resources where\n * required parameters are part of the URL (<code>/photos/1/</code>) or filter\n * resources. For instance:\n *\n * <pre class=\"javascript\">\n * var description = {\n *  \"get\": { method: \"GET\", url: \"/photos/{tag}\" }\n * };\n * var photos = new qx.io.rest.Resource(description);\n * photos.get();\n * photos.get({tag: \"wildlife\"})\n * </pre>\n *\n * Strictly speaking, the <code>photos</code> instance represents two distinct resources\n * and could therefore just as well mapped to two distinct resources (for instance,\n * named photos and photosTagged). What style to choose depends on the kind of data\n * returned. For instance, it seems sensible to stick with one resource if the filter\n * only limits the result set (i.e. the individual results have the same properties).\n *\n * In order to respond to successful (or erroneous) invocations of actions,\n * either listen to the generic \"success\" or \"error\" event and get the action\n * from the event data, or listen to action specific events defined at runtime.\n * Action specific events follow the pattern \"&lt;action&gt;Success\" and\n * \"&lt;action&gt;Error\", e.g. \"indexSuccess\".\n * \n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.rest.Resource\",\n{\n  extend: qx.core.Object,\n  implement : [ qx.core.IDisposable ],\n\n  /**\n   * @param description {Map?} Each key of the map is interpreted as\n   *  <code>action</code> name. The value associated to the key must be a map\n   *  with the properties <code>method</code> and <code>url</code>.\n   *  <code>check</code> is optional. Also see {@link #map}.\n   *\n   * For example:\n   *\n   * <pre class=\"javascript\">\n   * { get: {method: \"GET\", url: \"/photos/{id}\", check: { id: /\\d+/ }} }\n   * </pre>\n   *\n   * @see qx.bom.rest\n   * @see qx.io.rest\n   */\n  construct: function(description)\n  {\n    this.base(arguments);\n\n    this.__longPollHandlers = {};\n    this.__pollTimers = {};\n    this.__routes = {};\n\n    this._resource = this._tailorResource(this._getResource());\n\n    try {\n      if (typeof description !== \"undefined\") {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertMap(description);\n        }\n        this.__mapFromDescription(description);\n      }\n    } catch(e) {\n      this.dispose();\n      throw e;\n    }\n  },\n\n  events:\n  {\n    /**\n     * Fired when any request was successful.\n     *\n     * The action the successful request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Success\", e.g. \"indexSuccess\".\n     */\n    \"success\": \"qx.event.type.Rest\",\n\n    /**\n     * Fired when request associated to action given in prefix was successful.\n     *\n     * For example, \"indexSuccess\" is fired when <code>index()</code> was\n     * successful.\n     */\n    \"actionSuccess\": \"qx.event.type.Rest\",\n\n    /**\n     * Fired when any request fails.\n     *\n     * The action the failed request is associated to, as well as the\n     * request itself, can be retrieved from the event’s properties.\n     * Additionally, an action specific event is fired that follows the pattern\n     * \"<action>Error\", e.g. \"indexError\".\n     */\n    \"error\": \"qx.event.type.Rest\",\n\n    /**\n     * Fired when any request associated to action given in prefix fails.\n     *\n     * For example, \"indexError\" is fired when <code>index()</code> failed.\n     */\n    \"actionError\": \"qx.event.type.Rest\"\n  },\n\n  statics:\n  {\n    /**\n     * Number of milliseconds below a long-poll request is considered immediate and\n     * subject to throttling checks.\n     */\n    POLL_THROTTLE_LIMIT: 100,\n\n    /**\n     * Number of immediate long-poll responses accepted before throttling takes place.\n     */\n    POLL_THROTTLE_COUNT: 30,\n\n    /**\n     * A symbol used in checks to declare required parameter.\n     */\n    REQUIRED: true,\n\n    /**\n     * Get placeholders from URL.\n     *\n     * @param url {String} The URL to parse for placeholders.\n     * @return {Array} Array of placeholders without the placeholder prefix.\n     */\n    placeholdersFromUrl: function(url) {\n      return qx.bom.rest.Resource.placeholdersFromUrl(url);\n    }\n  },\n\n  members:\n  {\n    _resource: null,\n    __longPollHandlers: null,\n    __pollTimers: null,\n    __routes: null,\n\n    /**\n     * Get resource.\n     *\n     * May be overridden to change type of resource.\n     * @param description {Map?} See construct.\n     * @return {qx.bom.rest.Resource} Resource implementation which does the heavy lifting.\n     */\n    _getResource: function(description) {\n      return new qx.bom.rest.Resource(description);\n    },\n\n    /**\n     * Tailors (apply dependency injection) the given resource to fit our needs.\n     *\n     * @param resource {qx.bom.rest.Resource} Resource.\n     * @return {qx.bom.rest.Resource} Tailored resource.\n     */\n    _tailorResource: function(resource) {\n      // inject different request implementation\n      resource.setRequestFactory(this._getRequest);\n\n      // inject different request handling\n      resource.setRequestHandler({\n          onsuccess: {\n            callback: function(req, action) {\n              return function() {\n                var props = [req.getResponse(), null, false, req, action, req.getPhase()];\n                this.fireEvent(action + \"Success\", qx.event.type.Rest, props);\n                this.fireEvent(\"success\", qx.event.type.Rest, props);\n              };\n            },\n            context: this\n          },\n          onfail: {\n            callback: function(req, action) {\n              return function() {\n                var props = [req.getResponse(), null, false, req, action, req.getPhase()];\n                this.fireEvent(action + \"Error\", qx.event.type.Rest, props);\n                this.fireEvent(\"error\", qx.event.type.Rest, props);\n              };\n            },\n            context: this\n          },\n          onloadend: {\n            callback: function(req, action) {\n              return function() {\n                req.dispose();\n              };\n            },\n            context: this\n          }\n      });\n\n      return resource;\n    },\n\n    //\n    // Request\n    //\n\n    /**\n     * Configure request.\n     *\n     * @param callback {Function} Function called before request is send.\n     *   Receives request, action, params and data.\n     *\n     * <pre class=\"javascript\">\n     * res.configureRequest(function(req, action, params, data) {\n     *   if (action === \"index\") {\n     *     req.setAccept(\"application/json\");\n     *   }\n     * });\n     * </pre>\n     */\n    configureRequest: function(callback) {\n      this._resource.configureRequest(callback);\n    },\n\n    /**\n     * Get request.\n     *\n     * May be overridden to change type of request.\n     * @return {qx.io.request.Xhr} Xhr object\n     */\n    _getRequest: function() {\n      return new qx.io.request.Xhr();\n    },\n\n    //\n    // Routes and actions\n    //\n\n    /**\n     * Map action to combination of method and URL pattern.\n     *\n     * <pre class=\"javascript\">\n     *   res.map(\"get\", \"GET\", \"/photos/{id}\", {id: /\\d+/});\n     *\n     *   // GET /photos/123\n     *   res.get({id: \"123\"});\n     * </pre>\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    map: function(action, method, url, check) {\n      // add dynamic methods also on ourself to allow 'invoke()' delegation\n      this.__addAction(action, method, url, check);\n\n      this._resource.map(action, method, url, check);\n    },\n\n    /**\n     * Map actions to members.\n     *\n     * @param action {String} Action to associate to request.\n     * @param method {String} Method to configure request with.\n     * @param url {String} URL to configure request with. May contain positional\n     *   parameters (<code>{param}</code>) that are replaced by values given when the action\n     *   is invoked. Parameters are optional, unless a check is defined. A default\n     *   value can be provided (<code>{param=default}</code>).\n     * @param check {Map?} Map defining parameter constraints, where the key is\n     *   the URL parameter and the value a regular expression (to match string) or\n     *   <code>qx.io.rest.Resource.REQUIRED</code> (to verify existence).\n     */\n    __addAction: function(action, method, url, check) {\n      this.__routes[action] = [method, url, check];\n\n      // Undefine generic getter when action is named \"get\"\n      if (action == \"get\") {\n        this[action] = undefined;\n      }\n\n      // Do not overwrite existing \"non-action\" methods unless the method is\n      // null (i.e. because it exists as a stub for documentation)\n      if (typeof this[action] !== \"undefined\" && this[action] !== null &&\n          this[action].action !== true)\n      {\n        throw new Error(\"Method with name of action (\"+action+\") already exists\");\n      }\n\n      this.__declareEvent(action + \"Success\");\n      this.__declareEvent(action + \"Error\");\n\n      this[action] = qx.lang.Function.bind(function() {\n        Array.prototype.unshift.call(arguments, action);\n        return this.invoke.apply(this, arguments);\n      }, this);\n\n      // Method is safe to overwrite\n      this[action].action = true;\n\n    },\n\n    /**\n     * Invoke action with parameters.\n     *\n     * Internally called by actions dynamically created.\n     *\n     * May be overridden to customize action and parameter handling.\n     *\n     * @lint ignoreUnused(successHandler, failHandler, loadEndHandler)\n     *\n     * @param action {String} Action to invoke.\n     * @param params {Map} Map of parameters inserted into URL when a matching\n     *  positional parameter is found.\n     * @param data {Map|String} Data to be send as part of the request.\n     *  See {@link qx.io.request.AbstractRequest#requestData}.\n     * @return {Number} Id of the action's invocation.\n     */\n    invoke: function(action, params, data) {\n      var params = (params == null) ? {} : params;\n\n      // Cache parameters\n      this.__routes[action].params = params;\n\n      return this._resource.invoke(action, params, data);\n    },\n\n    /**\n     * Set base URL.\n     *\n     * The base URL is prepended to the URLs given in the description.\n     * Changes affect all future invocations.\n     *\n     * @param baseUrl {String} Base URL.\n     */\n    setBaseUrl: function(baseUrl) {\n      this._resource.setBaseUrl(baseUrl);\n    },\n\n    /**\n     * Abort action.\n     *\n     * Example:\n     *\n     * <pre class=\"javascript\">\n     *   // Abort all invocations of action\n     *   res.get({id: 1});\n     *   res.get({id: 2});\n     *   res.abort(\"get\");\n     *\n     *   // Abort specific invocation of action (by id)\n     *   var actionId = res.get({id: 1});\n     *   res.abort(actionId);\n     * </pre>\n     *\n     * @param varargs {String|Number} Action of which all invocations to abort\n     *  (when string), or a single invocation of an action to abort (when number)\n     */\n    abort: function(varargs) {\n      this._resource.abort(varargs);\n    },\n\n    /**\n     * Resend request associated to action.\n     *\n     * Replays parameters given when action was invoked originally.\n     *\n     * @param action {String} Action to refresh.\n     */\n    refresh: function(action) {\n      this._resource.refresh(action);\n    },\n\n    /**\n     * Periodically invoke action.\n     *\n     * Replays parameters given when action was invoked originally. When the\n     * action was not yet invoked and requires parameters, parameters must be\n     * given.\n     *\n     * Please note that IE tends to cache overly aggressive. One work-around is\n     * to disable caching on the client side by configuring the request with\n     * <code>setCache(false)</code>. If you control the server, a better\n     * work-around is to include appropriate headers to explicitly control\n     * caching. This way you still avoid requests that can be correctly answered\n     * from cache (e.g. when nothing has changed since the last poll). Please\n     * refer to <a href=\"http://www.mnot.net/javascript/xmlhttprequest/cache.html\">\n     * XMLHttpRequest Caching Test</a> for available options.\n     *\n     * @lint ignoreUnused(intervalListener)\n     *\n     * @param action {String} Action to poll.\n     * @param interval {Number} Interval in ms.\n     * @param params {Map?} Map of parameters. See {@link #invoke}.\n     * @param immediately {Boolean?false} <code>true</code>, if the poll should\n     *   invoke a call immediately.\n     * @return {qx.event.Timer} Timer that periodically invokes action. Use to\n     *   stop or resume. Is automatically disposed on disposal of object.\n     */\n    poll: function(action, interval, params, immediately) {\n      // Dispose timer previously created for action\n      if (this.__pollTimers[action]) {\n        this.__pollTimers[action].dispose();\n      }\n\n      // Fallback to previous params\n      if (typeof params == \"undefined\") {\n        params = this.__routes[action].params;\n      }\n\n      // Invoke immediately\n      if (immediately) {\n        this.invoke(action, params);\n      }\n\n      var intervalListener = function() {\n        var reqs = this.getRequestsByAction(action),\n            req = (reqs) ? reqs[0] : null;\n\n        if (!immediately && !req) {\n          this.invoke(action, params);\n          return;\n        }\n        if (req && (req.isDone() || req.isDisposed())) {\n          this.refresh(action);\n        }\n      };\n\n      var timer = this.__pollTimers[action] = new qx.event.Timer(interval);\n      timer.addListener(\"interval\", intervalListener, this._resource);\n      timer.start();\n      return timer;\n    },\n\n    /**\n     * Long-poll action.\n     *\n     * Use Ajax long-polling to continuously fetch a resource as soon as the\n     * server signals new data. The server determines when new data is available,\n     * while the client keeps open a request. Requires configuration on the\n     * server side. Basically, the server must not close a connection until\n     * new data is available. For a high level introduction to long-polling,\n     * refer to <a href=\"http://en.wikipedia.org/wiki/Comet_(programming)#Ajax_with_long_polling\">\n     * Ajax with long polling</a>.\n     *\n     * Uses {@link #refresh} internally. Make sure you understand the\n     * implications of IE's tendency to cache overly aggressive.\n     *\n     * Note no interval is given on the client side.\n     *\n     * @lint ignoreUnused(longPollHandler)\n     *\n     * @param action {String} Action to poll.\n     * @return {String} Id of handler responsible for long-polling. To stop\n     *  polling, remove handler using {@link qx.core.Object#removeListenerById}.\n     */\n    longPoll: function(action) {\n      var res = this,\n          lastResponse,               // Keep track of last response\n          immediateResponseCount = 0; // Count immediate responses\n\n      // Throttle to prevent high load on server and client\n      function throttle() {\n        var isImmediateResponse =\n          lastResponse &&\n          ((new Date()) - lastResponse) < res._getThrottleLimit();\n\n        if (isImmediateResponse) {\n          immediateResponseCount += 1;\n          if (immediateResponseCount > res._getThrottleCount()) {\n            if (qx.core.Environment.get(\"qx.debug\")) {\n              res.debug(\"Received successful response more than \" +\n                res._getThrottleCount() + \" times subsequently, each within \" +\n                res._getThrottleLimit() + \" ms. Throttling.\");\n            }\n            return true;\n          }\n        }\n\n        // Reset counter on delayed response\n        if (!isImmediateResponse) {\n          immediateResponseCount = 0;\n        }\n\n        return false;\n      }\n\n      var handlerId = this.__longPollHandlers[action] =\n        this.addListener(action + \"Success\", function longPollHandler() {\n          if (res.isDisposed()) {\n            return;\n          }\n\n          if (!throttle()) {\n            lastResponse = new Date();\n            res.refresh(action);\n          }\n        });\n\n      this.invoke(action);\n      return handlerId;\n    },\n\n    /**\n     * Get request configuration for action and parameters.\n     *\n     * This is were placeholders are replaced with parameters.\n     *\n     * @param action {String} Action associated to request.\n     * @param params {Map} Parameters to embed in request.\n     * @return {Map} Map of configuration settings. Has the properties\n     *   <code>method</code>, <code>url</code> and <code>check</code>.\n     */\n    _getRequestConfig: function(action, params) {\n      return this._resource._getRequestConfig(action, params);\n    },\n\n    /**\n     * Override to adjust the throttle limit.\n     * @return {Integer} Throttle limit in milliseconds\n     */\n    _getThrottleLimit: function() {\n      return qx.io.rest.Resource.POLL_THROTTLE_LIMIT;\n    },\n\n    /**\n     * Override to adjust the throttle count.\n     * @return {Integer} Throttle count\n     */\n    _getThrottleCount: function() {\n      return qx.io.rest.Resource.POLL_THROTTLE_COUNT;\n    },\n\n    /**\n     * Map actions from description.\n     *\n     * Allows to decoratively define routes.\n     *\n     * @param description {Map} Map that defines the routes.\n     */\n    __mapFromDescription: function(description) {\n      Object.keys(description).forEach(function(action) {\n        var route = description[action],\n            method = route.method,\n            url = route.url,\n            check = route.check;\n\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          qx.core.Assert.assertString(method, \"Method must be string for route '\" + action + \"'\");\n          qx.core.Assert.assertString(url, \"URL must be string for route '\" + action + \"'\");\n        }\n\n        this.map(action, method, url, check);\n      }, this);\n    },\n\n    /**\n     * Declare event at runtime.\n     *\n     * @param type {String} Type of event.\n     */\n    __declareEvent: function(type) {\n      if (!this.constructor.$$events) {\n        this.constructor.$$events = {};\n      }\n\n      if (!this.constructor.$$events[type]) {\n        this.constructor.$$events[type] = \"qx.event.type.Rest\";\n      }\n    }\n  },\n\n  /**\n   * Destructs the Resource.\n   *\n   * All created requests, routes and pollTimers will be disposed.\n   */\n  destruct: function() {\n    var action;\n\n    if (this.__pollTimers) {\n      for (action in this.__pollTimers) {\n        var timer = this.__pollTimers[action];\n        timer.stop();\n        timer.dispose();\n      }\n    }\n\n    if (this.__longPollHandlers) {\n      for (action in this.__longPollHandlers) {\n        var id = this.__longPollHandlers[action];\n        this.removeListenerById(id);\n      }\n    }\n\n    this._resource.destruct();\n    this._resource = this.__routes = this.__pollTimers = this.__longPollHandlers = null;\n  }\n});\n"
  ]
}