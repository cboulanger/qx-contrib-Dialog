{
  "className": "qx.io.remote.Rpc",
  "packageName": "qx.io.remote",
  "name": "Rpc",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 83,
        "column": 0
      },
      "end": {
        "line": 1081,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2006 STZ-IDA, Germany, http://www.stz-ida.de\n2006 Derrell Lipman\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nAndreas Junghans (lucidcake)\nDerrell Lipman (derrell)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Provides a Remote Procedure Call (RPC) implementation.\n\nEach instance of this class represents a \"Service\". These services can\ncorrespond to various concepts on the server side (depending on the\nprogramming language/environment being used), but usually, a service means\na class on the server.\n\nIn case multiple instances of the same service are needed, they can be\ndistinguished by ids. If such an id is specified, the server routes all\ncalls to a service that have the same id to the same server-side instance.\n\nWhen calling a server-side method, the parameters and return values are\nconverted automatically. Supported types are int (and Integer), double\n(and Double), String, Date, Map, and JavaBeans. Beans must have a default\nconstructor on the server side and are represented by simple JavaScript\nobjects on the client side (used as associative arrays with keys matching\nthe server-side properties). Beans can also be nested, but be careful not to\ncreate circular references! There are no checks to detect these (which would\nbe expensive), so you as the user are responsible for avoiding them.\n\nA simple example:\n<pre class='javascript'>\nfunction callRpcServer ()\n{\nvar rpc = new qx.io.remote.Rpc();\nrpc.setTimeout(10000);\nrpc.setUrl(\"http://127.0.0.1:8007\");\nrpc.setServiceName(\"qooxdoo.admin\");\n\n// call a remote procedure -- takes no arguments, returns a string\nvar that = this;\nthis.RpcRunning = rpc.callAsync(\nfunction(result, ex, id)\n{\nthat.RpcRunning = null;\nif (ex == null) {\nalert(result);\n} else {\nalert(\"Async(\" + id + \") exception: \" + ex);\n}\n},\n\"fss.getBaseDir\");\n}\n</pre>\n__fss.getBaseDir__ is the remote procedure in this case, potential arguments\nwould be listed after the procedure name.\n<p>\nPassing data from the client (qooxdoo) side is demonstrated in the\nqooxdoo-contrib project RpcExample. There are three ways to issue a remote\nprocedure call: synchronously (qx.io.remote.Rpc.callSync -- dangerous\nbecause it blocks the whole browser, not just your application, so is\nhighly discouraged); async with results via a callback function\n(qx.io.remote.Rpc.callAsync) and async with results via an event listener\n(qx.io.remote.Rpc.callAsyncListeners).\n<p>\nYou may also find the server writer's guide helpful:\nhttp://manual.qooxdoo.org/${qxversion}/pages/communication/rpc_server_writer_guide.html"
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.core.ServerSettings.*"
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 113,
        "column": 2
      },
      "end": {
        "line": 131,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "url {String}            identifies the url where the service\nis found.  Note that if the url is to\na domain (server) other than where the\nqooxdoo script came from, i.e. it is\ncross-domain, then you must also call\nthe setCrossDomain(true) method to\nenable the ScriptTransport instead of\nthe XmlHttpTransport, since the latter\ncan not handle cross-domain requests.",
          "paramName": "url",
          "description": "            identifies the url where the service\nis found.  Note that if the url is to\na domain (server) other than where the\nqooxdoo script came from, i.e. it is\ncross-domain, then you must also call\nthe setCrossDomain(true) method to\nenable the ScriptTransport instead of\nthe XmlHttpTransport, since the latter\ncan not handle cross-domain requests.",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "serviceName {String}    identifies the service. For the Java\nimplementation, this is the fully\nqualified name of the class that offers\nthe service methods\n(e.g. \"my.pkg.MyService\").",
          "paramName": "serviceName",
          "description": "    identifies the service. For the Java\nimplementation, this is the fully\nqualified name of the class that offers\nthe service methods\n(e.g. \"my.pkg.MyService\").",
          "type": "String"
        }
      ]
    }
  },
  "events": {
    "completed": {
      "location": {
        "start": {
          "line": 147,
          "column": 4
        },
        "end": {
          "line": 147,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when call is completed."
          }
        ]
      },
      "name": "completed",
      "type": "qx.event.type.Event"
    },
    "aborted": {
      "location": {
        "start": {
          "line": 152,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when call aborted."
          }
        ]
      },
      "name": "aborted",
      "type": "qx.event.type.Event"
    },
    "failed": {
      "location": {
        "start": {
          "line": 157,
          "column": 4
        },
        "end": {
          "line": 157,
          "column": 36
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when call failed."
          }
        ]
      },
      "name": "failed",
      "type": "qx.event.type.Event"
    },
    "timeout": {
      "location": {
        "start": {
          "line": 162,
          "column": 4
        },
        "end": {
          "line": 162,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when call timed out."
          }
        ]
      },
      "name": "timeout",
      "type": "qx.event.type.Event"
    }
  },
  "statics": {
    "origin": {
      "location": {
        "start": {
          "line": 178,
          "column": 4
        },
        "end": {
          "line": 184,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Origins of errors"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "localError": {
      "location": {
        "start": {
          "line": 190,
          "column": 4
        },
        "end": {
          "line": 195,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Locally-detected errors"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "CONVERT_DATES": {
      "location": {
        "start": {
          "line": 220,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Boolean flag which controls the stringification of date objects.\n<code>null</code> for the default behavior, acts like false\n<code>true</code> for stringifying dates the old, qooxdoo specific way\n<code>false</code> using the native toJSON of date objects.\n\nWhen enabled, dates are converted to and parsed from\na literal that complies to the format\n\n<code>new Date(Date.UTC(year,month,day,hour,min,sec,ms))</code>\n\nThe server can fairly easily parse this in its JSON\nimplementation by stripping off \"new Date(Date.UTC(\"\nfrom the beginning of the string, and \"))\" from the\nend of the string. What remains is the set of\ncomma-separated date components, which are also very\neasy to parse.\n\nThe work-around compensates for the fact that while the\nDate object is a primitive type in Javascript, the\nspecification neglects to provide a literal form for it."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "RESPONSE_JSON": {
      "location": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 24
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Boolean flag which controls whether to expect and verify a JSON\nresponse.\n\nShould be <code>true</code> when backend returns valid JSON.\n\nDate literals are parsed when CONVERT_DATES is <code>true</code>\nand comply to the format\n\n<code>\"new Date(Date.UTC(year,month,day,hour,min,sec,ms))\"</code>\n\nNote the surrounding quotes that encode the literal as string.\n\nUsing valid JSON is recommended, because it allows to use\n{@link qx.lang.Json#parse} for parsing. {@link qx.lang.Json#parse}\nis preferred over the potentially insecure <code>eval</code>."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "makeServerURL": {
      "location": {
        "start": {
          "line": 259,
          "column": 4
        },
        "end": {
          "line": 277,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates an URL for talking to a local service. A local service is one that\nlives in the same application as the page calling the service. For backends\nthat don't support this auto-generation, this method returns null."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "instanceId {String ? null} an optional identifier for the\nserver side instance that should be\nused. All calls to the same service\nwith the same instance id are\nrouted to the same object instance\non the server. The instance id can\nalso be used to provide additional\ndata for the service instantiation\non the server.",
            "paramName": "instanceId",
            "description": " an optional identifier for the\nserver side instance that should be\nused. All calls to the same service\nwith the same instance id are\nrouted to the same object instance\non the server. The instance id can\nalso be used to provide additional\ndata for the service instantiation\non the server.",
            "optional": true,
            "defaultValue": "null",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the url.",
            "type": "String",
            "description": " the url."
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "timeout": {
      "location": {
        "start": {
          "line": 298,
          "column": 4
        },
        "end": {
          "line": 302,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPROPERTIES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "The timeout for asynchronous calls in milliseconds."
          }
        ]
      },
      "name": "timeout",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Integer"
    },
    "crossDomain": {
      "location": {
        "start": {
          "line": 314,
          "column": 4
        },
        "end": {
          "line": 318,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Indicate that the request is cross domain.\n\nA request is cross domain if the request's URL points to a host other\nthan the local host. This switches the concrete implementation that is\nused for sending the request from qx.io.remote.transport.XmlHttp to\nqx.io.remote.transport.Script because only the latter can handle cross\ndomain requests."
          }
        ]
      },
      "name": "crossDomain",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "url": {
      "location": {
        "start": {
          "line": 322,
          "column": 4
        },
        "end": {
          "line": 326,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The URL at which the service is located."
          }
        ]
      },
      "name": "url",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "serviceName": {
      "location": {
        "start": {
          "line": 330,
          "column": 4
        },
        "end": {
          "line": 334,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The service name."
          }
        ]
      },
      "name": "serviceName",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "serverData": {
      "location": {
        "start": {
          "line": 345,
          "column": 4
        },
        "end": {
          "line": 349,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Data sent as \"out of band\" data in the request to the server.  The\nformat of the data is opaque to RPC and may be recognized only by\nparticular servers It is up to the server to decide what to do with\nit: whether to ignore it, handle it locally before calling the\nspecified method, or pass it on to the method.  This server data is\nnot sent to the server if it has been set to 'null'."
          }
        ]
      },
      "name": "serverData",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Object"
    },
    "username": {
      "location": {
        "start": {
          "line": 356,
          "column": 4
        },
        "end": {
          "line": 360,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Username to use for HTTP authentication. Null if HTTP authentication\nis not used."
          }
        ]
      },
      "name": "username",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "password": {
      "location": {
        "start": {
          "line": 367,
          "column": 4
        },
        "end": {
          "line": 371,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Password to use for HTTP authentication. Null if HTTP authentication\nis not used."
          }
        ]
      },
      "name": "password",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "useBasicHttpAuth": {
      "location": {
        "start": {
          "line": 377,
          "column": 4
        },
        "end": {
          "line": 381,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Use Basic HTTP Authentication"
          }
        ]
      },
      "name": "useBasicHttpAuth",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Boolean"
    },
    "protocol": {
      "location": {
        "start": {
          "line": 392,
          "column": 4
        },
        "end": {
          "line": 396,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "EXPERIMENTAL\n\nWhether to use the original qooxdoo RPC protocol or the\nnow-standardized Version 2 protocol.  Defaults to the original qooxdoo\nprotocol for backward compatibility.\n\nValid values are \"qx1\" and \"2.0\"."
          }
        ]
      },
      "name": "protocol",
      "propertyType": "new",
      "init": "qx1",
      "defaultValue": "qx1"
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__previousServerSuffix": {
      "location": {
        "start": {
          "line": 410,
          "column": 4
        },
        "end": {
          "line": 410,
          "column": 33
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__currentServerSuffix": {
      "location": {
        "start": {
          "line": 411,
          "column": 4
        },
        "end": {
          "line": 411,
          "column": 32
        }
      },
      "type": "variable",
      "access": "private"
    },
    "createRequest": {
      "location": {
        "start": {
          "line": 421,
          "column": 4
        },
        "end": {
          "line": 426,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Factory method to create a request object. By default, a POST request\nwill be made, and the expected response type will be\n\"application/json\". Classes extending this one may override this method\nto obtain a Request object with different parameters."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.io.remote.Request}",
            "type": "qx.io.remote.Request",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createRpcData": {
      "location": {
        "start": {
          "line": 451,
          "column": 4
        },
        "end": {
          "line": 499,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Factory method to create the object containing the remote procedure\ncall data. By default, a qooxdoo-style RPC request is built, which\ncontains the following members: \"service\", \"method\", \"id\", and\n\"params\". If a different style of RPC request is desired, a class\nextending this one may override this method."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "id {Integer}\nThe unique sequence number of this request.",
            "paramName": "id",
            "description": "\nThe unique sequence number of this request.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "method {String}\nThe name of the method to be called",
            "paramName": "method",
            "description": "\nThe name of the method to be called",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "parameters {Array}\nAn array containing the arguments to the called method.",
            "paramName": "parameters",
            "description": "\nAn array containing the arguments to the called method.",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "serverData {var}\n\"Out-of-band\" data to be provided to the server.",
            "paramName": "serverData",
            "description": "\n\"Out-of-band\" data to be provided to the server.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}\nThe object to be converted to JSON and passed to the JSON-RPC\nserver.",
            "type": "Object",
            "description": "\nThe object to be converted to JSON and passed to the JSON-RPC\nserver."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_callInternal": {
      "location": {
        "start": {
          "line": 521,
          "column": 4
        },
        "end": {
          "line": 845,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Internal RPC call method"
          }
        ],
        "@lint": [
          {
            "name": "@lint",
            "body": "ignoreDeprecated(eval)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "args {Array}\narray of arguments",
            "paramName": "args",
            "description": "\narray of arguments",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "callType {Integer}\n0 = sync,\n1 = async with handler,\n2 = async event listeners",
            "paramName": "callType",
            "description": "\n0 = sync,\n1 = async with handler,\n2 = async event listeners",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "refreshSession {Boolean}\nwhether a new session should be requested",
            "paramName": "refreshSession",
            "description": "\nwhether a new session should be requested",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the method call reference.",
            "type": "var",
            "description": " the method call reference."
          }
        ],
        "@throws": [
          {
            "name": "@throws",
            "body": "{Error} An error.",
            "type": "Error",
            "description": " An error."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "fixUrl": {
      "location": {
        "start": {
          "line": 855,
          "column": 4
        },
        "end": {
          "line": 875,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Helper method to rewrite a URL with a stale session id (so that it includes\nthe correct session id afterwards)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "url {String} the URL to examine.",
            "paramName": "url",
            "description": " the URL to examine.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the (possibly re-written) URL.",
            "type": "String",
            "description": " the (possibly re-written) URL."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "callSync": {
      "location": {
        "start": {
          "line": 900,
          "column": 4
        },
        "end": {
          "line": 903,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Makes a synchronous server call. The method arguments (if any) follow\nafter the method name (as normal JavaScript arguments, separated by\ncommas, not as an array).\n\nIf a problem occurs when making the call, an exception is thrown.\n\n\nWARNING.  With some browsers, the synchronous interface\ncauses the browser to hang while awaiting a response!  If the server\ndecides to pause for a minute or two, your browser may do nothing\n(including refreshing following window changes) until the response is\nreceived.  Instead, use the asynchronous interface.\n\n\nYOU HAVE BEEN WARNED."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "methodName {String} the name of the method to call.",
            "paramName": "methodName",
            "description": " the name of the method to call.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Array} an array of values passed through to the backend.",
            "paramName": "args",
            "description": " an array of values passed through to the backend.",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the result returned by the server.",
            "type": "var",
            "description": " the result returned by the server."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "callAsync": {
      "location": {
        "start": {
          "line": 939,
          "column": 4
        },
        "end": {
          "line": 942,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Makes an asynchronous server call. The method arguments (if any) follow\nafter the method name (as normal JavaScript arguments, separated by\ncommas, not as an array).\n\nWhen an answer from the server arrives, the <code>handler</code>\nfunction is called with the result of the call as the first, an\nexception as the second parameter, and the id (aka sequence number) of\nthe invoking request as the third parameter. If the call was\nsuccessful, the second parameter is <code>null</code>. If there was a\nproblem, the second parameter contains an exception, and the first one\nis <code>null</code>.\n\n\nThe return value of this method is a call reference that you can store\nif you want to abort the request later on. This value should be treated\nas opaque and can change completely in the future! The only thing you\ncan rely on is that the <code>abort</code> method will accept this\nreference and that you can retrieve the sequence number of the request\nby invoking the getSequenceNumber() method (see below).\n\n\nIf a specific method is being called, asynchronously, a number of times\nin succession, the getSequenceNumber() method may be used to\ndisambiguate which request a response corresponds to.  The sequence\nnumber value is a value which increments with each request.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "handler {Function} the callback function.",
            "paramName": "handler",
            "description": " the callback function.",
            "type": "Function"
          },
          {
            "name": "@param",
            "body": "methodName {String} the name of the method to call.",
            "paramName": "methodName",
            "description": " the name of the method to call.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Array} an array of values passed through to the backend.",
            "paramName": "args",
            "description": " an array of values passed through to the backend.",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the method call reference.",
            "type": "var",
            "description": " the method call reference."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "callAsyncListeners": {
      "location": {
        "start": {
          "line": 994,
          "column": 4
        },
        "end": {
          "line": 997,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Makes an asynchronous server call and dispatches an event upon completion\nor failure. The method arguments (if any) follow after the method name\n(as normal JavaScript arguments, separated by commas, not as an array).\n\nWhen an answer from the server arrives (or fails to arrive on time), if\nan exception occurred, a \"failed\", \"timeout\" or \"aborted\" event, as\nappropriate, is dispatched to any waiting event listeners.  If no\nexception occurred, a \"completed\" event is dispatched.\n\n\nWhen a \"failed\", \"timeout\" or \"aborted\" event is dispatched, the event\ndata contains an object with the properties 'origin', 'code', 'message'\nand 'id'.  The object has a toString() function which may be called to\nconvert the exception to a string.\n\n\nWhen a \"completed\" event is dispatched, the event data contains a\nmap with the JSON-RPC sequence number and result:\n<p>\n{\nid: rpc_id,\nresult: json-rpc result\n}\n\n\nThe return value of this method is a call reference that you can store\nif you want to abort the request later on. This value should be treated\nas opaque and can change completely in the future! The only thing you\ncan rely on is that the <code>abort</code> method will accept this\nreference and that you can retrieve the sequence number of the request\nby invoking the getSequenceNumber() method (see below).\n\n\nIf a specific method is being called, asynchronously, a number of times\nin succession, the getSequenceNumber() method may be used to\ndisambiguate which request a response corresponds to.  The sequence\nnumber value is a value which increments with each request.)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "coalesce {Boolean} coalesce all failure types (\"failed\",\n\"timeout\", and \"aborted\") to \"failed\".\nThis is reasonable in many cases, as\nthe provided exception contains adequate\ndisambiguating information.",
            "paramName": "coalesce",
            "description": " coalesce all failure types (\"failed\",\n\"timeout\", and \"aborted\") to \"failed\".\nThis is reasonable in many cases, as\nthe provided exception contains adequate\ndisambiguating information.",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "methodName {String} the name of the method to call.",
            "paramName": "methodName",
            "description": " the name of the method to call.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {Array} an array of values passed through to the backend.",
            "paramName": "args",
            "description": " an array of values passed through to the backend.",
            "type": "Array"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} the method call reference.",
            "type": "var",
            "description": " the method call reference."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "refreshSession": {
      "location": {
        "start": {
          "line": 1016,
          "column": 4
        },
        "end": {
          "line": 1039,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Refreshes a server session by retrieving the session id again from the\nserver.\n\nThe specified handler function is called when the refresh is\ncomplete. The first parameter can be <code>true</code> (indicating that\na refresh either wasn't necessary at this time or it was successful) or\n<code>false</code> (indicating that a refresh would have been necessary\nbut can't be performed because the server backend doesn't support\nit). If there is a non-null second parameter, it's an exception\nindicating that there was an error when refreshing the session."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "handler {Function} a callback function that is called when the\nrefresh is complete (or failed).",
            "paramName": "handler",
            "description": " a callback function that is called when the\nrefresh is complete (or failed).",
            "type": "Function"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_isConvertDates": {
      "location": {
        "start": {
          "line": 1050,
          "column": 4
        },
        "end": {
          "line": 1052,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether to convert date objects to pseudo literals and\nparse with eval.\n\nControlled by {@link #CONVERT_DATES}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether to convert.",
            "type": "Boolean",
            "description": " Whether to convert."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_isResponseJson": {
      "location": {
        "start": {
          "line": 1062,
          "column": 4
        },
        "end": {
          "line": 1064,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether to expect and verify a JSON response.\n\nControlled by {@link #RESPONSE_JSON}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether to expect JSON.",
            "type": "Boolean",
            "description": " Whether to expect JSON."
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "abort": {
      "location": {
        "start": {
          "line": 1076,
          "column": 4
        },
        "end": {
          "line": 1079,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Aborts an asynchronous server call. Consequently, the callback function\nprovided to <code>callAsync</code> or <code>callAsyncListeners</code>\nwill be called with an exception."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "opaqueCallRef {var} the call reference as returned by\n<code>callAsync</code> or\n<code>callAsyncListeners</code>",
            "paramName": "opaqueCallRef",
            "description": " the call reference as returned by\n<code>callAsync</code> or\n<code>callAsyncListeners</code>",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getTimeout": {
      "type": "function",
      "name": "getTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for timeout"
          }
        ]
      }
    },
    "setTimeout": {
      "type": "function",
      "name": "setTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for timeout"
          }
        ]
      }
    },
    "resetTimeout": {
      "type": "function",
      "name": "resetTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>timeout</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ]
      }
    },
    "getCrossDomain": {
      "type": "function",
      "name": "getCrossDomain",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>crossDomain</code>.\n\nFor further details take a look at the property definition: {@link #crossDomain}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for crossDomain"
          }
        ]
      }
    },
    "isCrossDomain": {
      "type": "function",
      "name": "isCrossDomain",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>crossDomain</code>.\n\nFor further details take a look at the property definition: {@link #crossDomain}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for crossDomain"
          }
        ]
      }
    },
    "setCrossDomain": {
      "type": "function",
      "name": "setCrossDomain",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>crossDomain</code>.\n\nFor further details take a look at the property definition: {@link #crossDomain}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for crossDomain"
          }
        ]
      }
    },
    "resetCrossDomain": {
      "type": "function",
      "name": "resetCrossDomain",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>crossDomain</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #crossDomain}."
          }
        ]
      }
    },
    "getUrl": {
      "type": "function",
      "name": "getUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for url"
          }
        ]
      }
    },
    "setUrl": {
      "type": "function",
      "name": "setUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for url"
          }
        ]
      }
    },
    "resetUrl": {
      "type": "function",
      "name": "resetUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>url</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ]
      }
    },
    "getServiceName": {
      "type": "function",
      "name": "getServiceName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>serviceName</code>.\n\nFor further details take a look at the property definition: {@link #serviceName}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for serviceName"
          }
        ]
      }
    },
    "setServiceName": {
      "type": "function",
      "name": "setServiceName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>serviceName</code>.\n\nFor further details take a look at the property definition: {@link #serviceName}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for serviceName"
          }
        ]
      }
    },
    "resetServiceName": {
      "type": "function",
      "name": "resetServiceName",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>serviceName</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #serviceName}."
          }
        ]
      }
    },
    "getServerData": {
      "type": "function",
      "name": "getServerData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>serverData</code>.\n\nFor further details take a look at the property definition: {@link #serverData}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Object",
            "desc": "Returns the value for serverData"
          }
        ]
      }
    },
    "setServerData": {
      "type": "function",
      "name": "setServerData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>serverData</code>.\n\nFor further details take a look at the property definition: {@link #serverData}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Object",
            "paramName": "value",
            "desc": "Value for serverData"
          }
        ]
      }
    },
    "resetServerData": {
      "type": "function",
      "name": "resetServerData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>serverData</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #serverData}."
          }
        ]
      }
    },
    "getUsername": {
      "type": "function",
      "name": "getUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>username</code>.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for username"
          }
        ]
      }
    },
    "setUsername": {
      "type": "function",
      "name": "setUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>username</code>.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for username"
          }
        ]
      }
    },
    "resetUsername": {
      "type": "function",
      "name": "resetUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>username</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ]
      }
    },
    "getPassword": {
      "type": "function",
      "name": "getPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>password</code>.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for password"
          }
        ]
      }
    },
    "setPassword": {
      "type": "function",
      "name": "setPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>password</code>.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for password"
          }
        ]
      }
    },
    "resetPassword": {
      "type": "function",
      "name": "resetPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>password</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ]
      }
    },
    "getUseBasicHttpAuth": {
      "type": "function",
      "name": "getUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useBasicHttpAuth"
          }
        ]
      }
    },
    "isUseBasicHttpAuth": {
      "type": "function",
      "name": "isUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useBasicHttpAuth"
          }
        ]
      }
    },
    "setUseBasicHttpAuth": {
      "type": "function",
      "name": "setUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for useBasicHttpAuth"
          }
        ]
      }
    },
    "resetUseBasicHttpAuth": {
      "type": "function",
      "name": "resetUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>useBasicHttpAuth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ]
      }
    },
    "getProtocol": {
      "type": "function",
      "name": "getProtocol",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>protocol</code>.\n\nFor further details take a look at the property definition: {@link #protocol}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for protocol"
          }
        ]
      }
    },
    "setProtocol": {
      "type": "function",
      "name": "setProtocol",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>protocol</code>.\n\nFor further details take a look at the property definition: {@link #protocol}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for protocol"
          }
        ]
      }
    },
    "resetProtocol": {
      "type": "function",
      "name": "resetProtocol",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>protocol</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #protocol}."
          }
        ]
      }
    }
  },
  "descendants": []
}