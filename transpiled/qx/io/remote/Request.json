{
  "className": "qx.io.remote.Request",
  "packageName": "qx.io.remote",
  "name": "Request",
  "superClass": "qx.core.Object",
  "interfaces": [
    "qx.core.IDisposable"
  ],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 30,
        "column": 0
      },
      "end": {
        "line": 1023,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n2006 Derrell Lipman\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nDerrell Lipman (derrell)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "This class is used to send HTTP requests to the server.\n\nNOTE: Instances of this class must be disposed of after use\n\nNote: This class will be deprecated in a future release. Instead,\nplease use classes found in {@link qx.io.request}."
        }
      ]
    }
  },
  "type": "class",
  "construct": {
    "location": {
      "start": {
        "line": 55,
        "column": 2
      },
      "end": {
        "line": 80,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nCONSTRUCTOR\n****************************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "vUrl {String}\nTarget url to issue the request to.",
          "paramName": "vUrl",
          "description": "\nTarget url to issue the request to.",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "vMethod {String}\nDetermines http method (GET, POST, PUT, etc.) to use. See \"method\" property\nfor valid values and default value.",
          "paramName": "vMethod",
          "description": "\nDetermines http method (GET, POST, PUT, etc.) to use. See \"method\" property\nfor valid values and default value.",
          "type": "String"
        },
        {
          "name": "@param",
          "body": "vResponseType {String}\nThe mime type of the response. Default is text/plain.",
          "paramName": "vResponseType",
          "description": "\nThe mime type of the response. Default is text/plain.",
          "type": "String"
        }
      ]
    }
  },
  "events": {
    "created": {
      "location": {
        "start": {
          "line": 94,
          "column": 4
        },
        "end": {
          "line": 94,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the Request object changes its state to 'created'"
          }
        ]
      },
      "name": "created",
      "type": "qx.event.type.Event"
    },
    "configured": {
      "location": {
        "start": {
          "line": 97,
          "column": 4
        },
        "end": {
          "line": 97,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the Request object changes its state to 'configured'"
          }
        ]
      },
      "name": "configured",
      "type": "qx.event.type.Event"
    },
    "sending": {
      "location": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 100,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the Request object changes its state to 'sending'"
          }
        ]
      },
      "name": "sending",
      "type": "qx.event.type.Event"
    },
    "receiving": {
      "location": {
        "start": {
          "line": 103,
          "column": 4
        },
        "end": {
          "line": 103,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the Request object changes its state to 'receiving'"
          }
        ]
      },
      "name": "receiving",
      "type": "qx.event.type.Event"
    },
    "completed": {
      "location": {
        "start": {
          "line": 109,
          "column": 4
        },
        "end": {
          "line": 109,
          "column": 41
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired once the request has finished successfully. The event object\ncan be used to read the transferred data."
          }
        ]
      },
      "name": "completed",
      "type": "qx.io.remote.Response"
    },
    "aborted": {
      "location": {
        "start": {
          "line": 112,
          "column": 4
        },
        "end": {
          "line": 112,
          "column": 37
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the pending request has been aborted."
          }
        ]
      },
      "name": "aborted",
      "type": "qx.event.type.Event"
    },
    "failed": {
      "location": {
        "start": {
          "line": 115,
          "column": 4
        },
        "end": {
          "line": 115,
          "column": 38
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the pending request fails."
          }
        ]
      },
      "name": "failed",
      "type": "qx.io.remote.Response"
    },
    "timeout": {
      "location": {
        "start": {
          "line": 118,
          "column": 4
        },
        "end": {
          "line": 118,
          "column": 39
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Fired when the pending request times out."
          }
        ]
      },
      "name": "timeout",
      "type": "qx.io.remote.Response"
    }
  },
  "statics": {
    "__seqNum": {
      "location": {
        "start": {
          "line": 141,
          "column": 4
        },
        "end": {
          "line": 141,
          "column": 16
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSEQUENCE NUMBER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Sequence (id) number of a request, used to associate a response or error\nwith its initiating request."
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "methodAllowsRequestBody": {
      "location": {
        "start": {
          "line": 151,
          "column": 4
        },
        "end": {
          "line": 153,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns true if the given HTTP method allows a request body being transferred to the server.\nThis is currently POST and PUT. Other methods require their data being encoded into\nthe URL"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "httpMethod {String} one of the values of the method property",
            "paramName": "httpMethod",
            "description": " one of the values of the method property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean}",
            "type": "Boolean",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "properties": {
    "url": {
      "location": {
        "start": {
          "line": 171,
          "column": 4
        },
        "end": {
          "line": 175,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Target url to issue the request to."
          }
        ]
      },
      "name": "url",
      "propertyType": "new",
      "init": "",
      "check": "String",
      "defaultValue": ""
    },
    "method": {
      "location": {
        "start": {
          "line": 181,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determines what type of request to issue (GET, POST, PUT, HEAD, DELETE)."
          }
        ]
      },
      "name": "method",
      "propertyType": "new",
      "apply": "_applyMethod",
      "init": "GET",
      "possibleValues": [
        "GET",
        "POST",
        "PUT",
        "HEAD",
        "DELETE"
      ],
      "defaultValue": "GET"
    },
    "asynchronous": {
      "location": {
        "start": {
          "line": 192,
          "column": 4
        },
        "end": {
          "line": 196,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the request to asynchronous."
          }
        ]
      },
      "name": "asynchronous",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "data": {
      "location": {
        "start": {
          "line": 202,
          "column": 4
        },
        "end": {
          "line": 206,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Set the data to be sent via this request"
          }
        ]
      },
      "name": "data",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "username": {
      "location": {
        "start": {
          "line": 213,
          "column": 4
        },
        "end": {
          "line": 217,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Username to use for HTTP authentication.\nSet to NULL if HTTP authentication is not used."
          }
        ]
      },
      "name": "username",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "password": {
      "location": {
        "start": {
          "line": 224,
          "column": 4
        },
        "end": {
          "line": 228,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Password to use for HTTP authentication.\nSet to NULL if HTTP authentication is not used."
          }
        ]
      },
      "name": "password",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "String"
    },
    "state": {
      "location": {
        "start": {
          "line": 234,
          "column": 4
        },
        "end": {
          "line": 240,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The state that the request is in, while being processed."
          }
        ]
      },
      "name": "state",
      "propertyType": "new",
      "event": "changeState",
      "apply": "_applyState",
      "init": "configured",
      "possibleValues": [
        "configured",
        "queued",
        "sending",
        "receiving",
        "completed",
        "aborted",
        "timeout",
        "failed"
      ],
      "defaultValue": "configured"
    },
    "responseType": {
      "location": {
        "start": {
          "line": 250,
          "column": 4
        },
        "end": {
          "line": 255,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Response type of request.\n\nThe response type is a MIME type, default is text/plain. Other supported\nMIME types are text/javascript, text/html, application/json,\napplication/xml."
          }
        ]
      },
      "name": "responseType",
      "propertyType": "new",
      "apply": "_applyResponseType",
      "init": "text/plain",
      "possibleValues": [
        "text/plain",
        "text/javascript",
        "application/json",
        "application/xml",
        "text/html"
      ],
      "defaultValue": "text/plain"
    },
    "timeout": {
      "location": {
        "start": {
          "line": 264,
          "column": 4
        },
        "end": {
          "line": 268,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Number of milliseconds before the request is being timed out.\n\nIf this property is null, the timeout for the request comes is the\nqx.io.remote.RequestQueue's property defaultTimeout."
          }
        ]
      },
      "name": "timeout",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "Integer"
    },
    "prohibitCaching": {
      "location": {
        "start": {
          "line": 290,
          "column": 4
        },
        "end": {
          "line": 298,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Prohibit request from being cached.\n\nSetting the value to <i>true</i> adds a parameter \"nocache\" to the\nrequest URL with a value of the current time, as well as adding request\nheaders Pragma:no-cache and Cache-Control:no-cache.\n\nSetting the value to <i>false</i> removes the parameter and request\nheaders.\n\nAs a special case, this property may be set to the string value\n\"no-url-params-on-post\" which will prevent the nocache parameter from\nbeing added to the URL if the POST method is used but will still add\nthe Pragma and Cache-Control headers.  This is useful if your backend\ndoes nasty things like mixing parameters specified in the URL into\nform fields in the POST request.  (One example of this nasty behavior\nis known as \"mixed mode\" in Oracle, as described here:\nhttp://docs.oracle.com/cd/B32110_01/web.1013/b28963/concept.htm#i1005684)"
          }
        ]
      },
      "name": "prohibitCaching",
      "propertyType": "new",
      "apply": "_applyProhibitCaching",
      "init": true,
      "defaultValue": true
    },
    "crossDomain": {
      "location": {
        "start": {
          "line": 310,
          "column": 4
        },
        "end": {
          "line": 314,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Indicate that the request is cross domain.\n\nA request is cross domain if the request's URL points to a host other than\nthe local host. This switches the concrete implementation that is used for\nsending the request from qx.io.remote.transport.XmlHttp to\nqx.io.remote.transport.Script, because only the latter can handle cross\ndomain requests."
          }
        ]
      },
      "name": "crossDomain",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "fileUpload": {
      "location": {
        "start": {
          "line": 325,
          "column": 4
        },
        "end": {
          "line": 329,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Indicate that the request will be used for a file upload.\n\nThe request will be used for a file upload.  This switches the concrete\nimplementation that is used for sending the request from\nqx.io.remote.transport.XmlHttp to qx.io.remote.IFrameTransport, because only\nthe latter can handle file uploads."
          }
        ]
      },
      "name": "fileUpload",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "transport": {
      "location": {
        "start": {
          "line": 337,
          "column": 4
        },
        "end": {
          "line": 341,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "The transport instance used for the request.\n\nThis is necessary to be able to abort an asynchronous request."
          }
        ]
      },
      "name": "transport",
      "propertyType": "new",
      "nullable": true,
      "allowNull": true,
      "check": "qx.io.remote.Exchange"
    },
    "useBasicHttpAuth": {
      "location": {
        "start": {
          "line": 347,
          "column": 4
        },
        "end": {
          "line": 351,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Use Basic HTTP Authentication."
          }
        ]
      },
      "name": "useBasicHttpAuth",
      "propertyType": "new",
      "init": false,
      "check": "Boolean",
      "defaultValue": false
    },
    "parseJson": {
      "location": {
        "start": {
          "line": 364,
          "column": 4
        },
        "end": {
          "line": 368,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "If true and the responseType property is set to \"application/json\", getContent() will\nreturn a Javascript map containing the JSON contents, i. e. the result qx.lang.Json.parse().\nIf false, the raw string data will be returned and the parsing must be done manually.\nThis is useful for special JSON dialects / extensions which are not supported by\nqx.lang.Json.\n\nNote that this is currently only respected by qx.io.remote.transport.XmlHttp, i. e.\nif the transport used is the one using XMLHttpRequests. The other transports\ndo not support JSON parsing, so this property has no effect."
          }
        ]
      },
      "name": "parseJson",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "__requestHeaders": {
      "location": {
        "start": {
          "line": 383,
          "column": 4
        },
        "end": {
          "line": 383,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__urlParameters": {
      "location": {
        "start": {
          "line": 384,
          "column": 4
        },
        "end": {
          "line": 384,
          "column": 26
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__dataParameters": {
      "location": {
        "start": {
          "line": 385,
          "column": 4
        },
        "end": {
          "line": 385,
          "column": 27
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__formFields": {
      "location": {
        "start": {
          "line": 386,
          "column": 4
        },
        "end": {
          "line": 386,
          "column": 23
        }
      },
      "type": "variable",
      "access": "private"
    },
    "__seqNum": {
      "location": {
        "start": {
          "line": 387,
          "column": 4
        },
        "end": {
          "line": 387,
          "column": 19
        }
      },
      "type": "variable",
      "access": "private"
    },
    "send": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 404,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nCORE METHODS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Schedule this request for transport to server.\n\nThe request is added to the singleton class qx.io.remote.RequestQueue's\nlist of pending requests."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "abort": {
      "location": {
        "start": {
          "line": 415,
          "column": 4
        },
        "end": {
          "line": 417,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Abort sending this request.\n\nThe request is removed from the singleton class qx.io.remote.RequestQueue's\nlist of pending events. If the request haven't been scheduled this\nmethod is a noop."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "reset": {
      "location": {
        "start": {
          "line": 424,
          "column": 4
        },
        "end": {
          "line": 438,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Abort sending this request if it has not already been aborted."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "prop {String} Name of the property.",
            "paramName": "prop",
            "description": " Name of the property.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "appearsIn": [
        "qx.core.Object",
        "qx.core.MProperty"
      ]
    },
    "isConfigured": {
      "location": {
        "start": {
          "line": 454,
          "column": 4
        },
        "end": {
          "line": 456,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nSTATE ALIASES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Determine if this request is in the configured state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <true> if the request is in the configured state; <false> otherwise.",
            "type": "Boolean",
            "description": " <true> if the request is in the configured state; <false> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isQueued": {
      "location": {
        "start": {
          "line": 464,
          "column": 4
        },
        "end": {
          "line": 466,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine if this request is in the queued state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <true> if the request is in the queued state; <false> otherwise.",
            "type": "Boolean",
            "description": " <true> if the request is in the queued state; <false> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isSending": {
      "location": {
        "start": {
          "line": 474,
          "column": 4
        },
        "end": {
          "line": 476,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine if this request is in the sending state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <true> if the request is in the sending state; <false> otherwise.",
            "type": "Boolean",
            "description": " <true> if the request is in the sending state; <false> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isReceiving": {
      "location": {
        "start": {
          "line": 484,
          "column": 4
        },
        "end": {
          "line": 486,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine if this request is in the receiving state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <true> if the request is in the receiving state; <false> otherwise.",
            "type": "Boolean",
            "description": " <true> if the request is in the receiving state; <false> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isCompleted": {
      "location": {
        "start": {
          "line": 494,
          "column": 4
        },
        "end": {
          "line": 496,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine if this request is in the completed state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <true> if the request is in the completed state; <false> otherwise.",
            "type": "Boolean",
            "description": " <true> if the request is in the completed state; <false> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isAborted": {
      "location": {
        "start": {
          "line": 504,
          "column": 4
        },
        "end": {
          "line": 506,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine if this request is in the aborted state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <true> if the request is in the aborted state; <false> otherwise.",
            "type": "Boolean",
            "description": " <true> if the request is in the aborted state; <false> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isTimeout": {
      "location": {
        "start": {
          "line": 514,
          "column": 4
        },
        "end": {
          "line": 516,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine if this request is in the timeout state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <true> if the request is in the timeout state; <false> otherwise.",
            "type": "Boolean",
            "description": " <true> if the request is in the timeout state; <false> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "isFailed": {
      "location": {
        "start": {
          "line": 524,
          "column": 4
        },
        "end": {
          "line": 526,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Determine if this request is in the failed state."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} <true> if the request is in the failed state; <false> otherwise.",
            "type": "Boolean",
            "description": " <true> if the request is in the failed state; <false> otherwise."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__forwardEvent": {
      "location": {
        "start": {
          "line": 542,
          "column": 4
        },
        "end": {
          "line": 547,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nEVENT HANDLER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Dispatches a clone of the given event on this instance"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} The original event",
            "paramName": "e",
            "description": " The original event",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "_onqueued": {
      "location": {
        "start": {
          "line": 556,
          "column": 4
        },
        "end": {
          "line": 563,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler called when the request enters the queued state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Event indicating state change",
            "paramName": "e",
            "description": " Event indicating state change",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onsending": {
      "location": {
        "start": {
          "line": 571,
          "column": 4
        },
        "end": {
          "line": 578,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler called when the request enters the sending state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Event indicating state change",
            "paramName": "e",
            "description": " Event indicating state change",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onreceiving": {
      "location": {
        "start": {
          "line": 586,
          "column": 4
        },
        "end": {
          "line": 593,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler called when the request enters the receiving state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Event indicating state change",
            "paramName": "e",
            "description": " Event indicating state change",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_oncompleted": {
      "location": {
        "start": {
          "line": 601,
          "column": 4
        },
        "end": {
          "line": 611,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler called when the request enters the completed state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Event indicating state change",
            "paramName": "e",
            "description": " Event indicating state change",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onaborted": {
      "location": {
        "start": {
          "line": 619,
          "column": 4
        },
        "end": {
          "line": 629,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler called when the request enters the aborted state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Event indicating state change",
            "paramName": "e",
            "description": " Event indicating state change",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_ontimeout": {
      "location": {
        "start": {
          "line": 637,
          "column": 4
        },
        "end": {
          "line": 661,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler called when the request enters the timeout state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Event indicating state change",
            "paramName": "e",
            "description": " Event indicating state change",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_onfailed": {
      "location": {
        "start": {
          "line": 669,
          "column": 4
        },
        "end": {
          "line": 679,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler called when the request enters the failed state."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "e {qx.event.type.Event} Event indicating state change",
            "paramName": "e",
            "description": " Event indicating state change",
            "type": "qx.event.type.Event"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_applyState": {
      "location": {
        "start": {
          "line": 691,
          "column": 4
        },
        "end": {
          "line": 699,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nAPPLY ROUTINES\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "state"
      ]
    },
    "_applyProhibitCaching": {
      "location": {
        "start": {
          "line": 703,
          "column": 4
        },
        "end": {
          "line": 734,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "prohibitCaching"
      ]
    },
    "_applyMethod": {
      "location": {
        "start": {
          "line": 738,
          "column": 4
        },
        "end": {
          "line": 752,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "method"
      ]
    },
    "_applyResponseType": {
      "location": {
        "start": {
          "line": 756,
          "column": 4
        },
        "end": {
          "line": 758,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "property apply"
          }
        ]
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "responseType"
      ]
    },
    "setRequestHeader": {
      "location": {
        "start": {
          "line": 784,
          "column": 4
        },
        "end": {
          "line": 786,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nREQUEST HEADER\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Add a request header to the request.\n\nExample: request.setRequestHeader(\"Content-Type\", \"text/html\")\n\nPlease note: Some browsers, such as Safari 3 and 4, will capitalize\nheader field names. This is in accordance with RFC 2616[1], which states\nthat HTTP 1.1 header names are case-insensitive, so your server backend\nshould be case-agnostic when dealing with request headers.\n\n[1]<a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC 2616: HTTP Message Headers</a>"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String} The identifier to use for this added header",
            "paramName": "vId",
            "description": " The identifier to use for this added header",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "vValue {String} The value to use for this added header",
            "paramName": "vValue",
            "description": " The value to use for this added header",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeRequestHeader": {
      "location": {
        "start": {
          "line": 794,
          "column": 4
        },
        "end": {
          "line": 796,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove a previously-added request header"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String} The id of the header to be removed",
            "paramName": "vId",
            "description": " The id of the header to be removed",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRequestHeader": {
      "location": {
        "start": {
          "line": 805,
          "column": 4
        },
        "end": {
          "line": 807,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Retrieve the value of a header which was previously set"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String} The id of the header value being requested",
            "paramName": "vId",
            "description": " The id of the header value being requested",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} The value of the header with the specified id",
            "type": "String",
            "description": " The value of the header with the specified id"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getRequestHeaders": {
      "location": {
        "start": {
          "line": 817,
          "column": 4
        },
        "end": {
          "line": 819,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Return the object containing all of the headers which have been added."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The returned object has as its property names each of the ids of headers\nwhich have been added, and as each property value, the value of the\nproperty corresponding to that id.",
            "type": "Object",
            "description": " The returned object has as its property names each of the ids of headers\nwhich have been added, and as each property value, the value of the\nproperty corresponding to that id."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setParameter": {
      "location": {
        "start": {
          "line": 854,
          "column": 4
        },
        "end": {
          "line": 864,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nPARAMETERS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Add a parameter to the request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String}\nString identifier of the parameter to add.",
            "paramName": "vId",
            "description": "\nString identifier of the parameter to add.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "vValue {var}\nValue of parameter. May be a string (for one parameter) or an array\nof strings (for setting multiple parameter values with the same\nparameter name).",
            "paramName": "vValue",
            "description": "\nValue of parameter. May be a string (for one parameter) or an array\nof strings (for setting multiple parameter values with the same\nparameter name).",
            "type": "var"
          },
          {
            "name": "@param",
            "body": "bAsData {Boolean}\nIf <i>false</i>, add the parameter to the URL.  If <i>true</i> then\ninstead the parameters added by calls to this method will be combined\ninto a string added as the request data, as if the entire set of\nparameters had been pre-build and passed to setData().\n\nNote: Parameters requested to be sent as data will be silently dropped\nif data is manually added via a call to setData().\n\nNote: Some transports, e.g. Script, do not support passing parameters\nas data.",
            "paramName": "bAsData",
            "description": "\nIf <i>false</i>, add the parameter to the URL.  If <i>true</i> then\ninstead the parameters added by calls to this method will be combined\ninto a string added as the request data, as if the entire set of\nparameters had been pre-build and passed to setData().\n\nNote: Parameters requested to be sent as data will be silently dropped\nif data is manually added via a call to setData().\n\nNote: Some transports, e.g. Script, do not support passing parameters\nas data.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeParameter": {
      "location": {
        "start": {
          "line": 879,
          "column": 4
        },
        "end": {
          "line": 889,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove a parameter from the request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String}\nIdentifier of the parameter to remove.",
            "paramName": "vId",
            "description": "\nIdentifier of the parameter to remove.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "bFromData {Boolean}\nIf <i>false</i> then remove the parameter of the URL parameter list.\nIf <i>true</i> then remove it from the list of parameters to be sent\nas request data.",
            "paramName": "bFromData",
            "description": "\nIf <i>false</i> then remove the parameter of the URL parameter list.\nIf <i>true</i> then remove it from the list of parameters to be sent\nas request data.",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getParameter": {
      "location": {
        "start": {
          "line": 907,
          "column": 4
        },
        "end": {
          "line": 917,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get a parameter in the request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String}\nIdentifier of the parameter to get.",
            "paramName": "vId",
            "description": "\nIdentifier of the parameter to get.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "bFromData {Boolean}\nIf <i>false</i> then retrieve the parameter from the URL parameter\nlist. If <i>true</i> then retrieve it from the list of parameters to\nbe sent as request data.",
            "paramName": "bFromData",
            "description": "\nIf <i>false</i> then retrieve the parameter from the URL parameter\nlist. If <i>true</i> then retrieve it from the list of parameters to\nbe sent as request data.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var}\nThe requested parameter value",
            "type": "var",
            "description": "\nThe requested parameter value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getParameters": {
      "location": {
        "start": {
          "line": 932,
          "column": 4
        },
        "end": {
          "line": 935,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the object containing all parameters for the request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "bFromData {Boolean}\nIf <i>false</i> then retrieve the URL parameter list.\nIf <i>true</i> then retrieve the data parameter list.",
            "paramName": "bFromData",
            "description": "\nIf <i>false</i> then retrieve the URL parameter list.\nIf <i>true</i> then retrieve the data parameter list.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object}\nThe returned object has as its property names each of the ids of\nparameters which have been added, and as each property value, the\nvalue of the property corresponding to that id.",
            "type": "Object",
            "description": "\nThe returned object has as its property names each of the ids of\nparameters which have been added, and as each property value, the\nvalue of the property corresponding to that id."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setFormField": {
      "location": {
        "start": {
          "line": 959,
          "column": 4
        },
        "end": {
          "line": 961,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "---------------------------------------------------------------------------\nFORM FIELDS\n---------------------------------------------------------------------------"
          },
          {
            "name": "@description",
            "body": "Add a form field to the POST request.\n\nNOTE: Adding any programmatic form fields using this method will switch the\nTransport implementation to IframeTransport.\n\nNOTE: Use of these programmatic form fields disallow use of synchronous\nrequests and cross-domain requests.  Be sure that you do not need\nthose features when setting these programmatic form fields."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String} String identifier of the form field to add.",
            "paramName": "vId",
            "description": " String identifier of the form field to add.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "vValue {String} Value of form field",
            "paramName": "vValue",
            "description": " Value of form field",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "removeFormField": {
      "location": {
        "start": {
          "line": 969,
          "column": 4
        },
        "end": {
          "line": 971,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Remove a form field from the POST request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String} Identifier of the form field to remove.",
            "paramName": "vId",
            "description": " Identifier of the form field to remove.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFormField": {
      "location": {
        "start": {
          "line": 981,
          "column": 4
        },
        "end": {
          "line": 983,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get a form field in the POST request."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "vId {String} Identifier of the form field to get.",
            "paramName": "vId",
            "description": " Identifier of the form field to get.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String|null} Value of form field or <code>null</code> if no value\nexists for the passed identifier.",
            "type": "String|null",
            "description": " Value of form field or <code>null</code> if no value\nexists for the passed identifier."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getFormFields": {
      "location": {
        "start": {
          "line": 993,
          "column": 4
        },
        "end": {
          "line": 995,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the object containing all form fields for the POST request."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} The returned object has as its property names each of the ids of\nform fields which have been added, and as each property value, the value\nof the property corresponding to that id.",
            "type": "Object",
            "description": " The returned object has as its property names each of the ids of\nform fields which have been added, and as each property value, the value\nof the property corresponding to that id."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getSequenceNumber": {
      "location": {
        "start": {
          "line": 1003,
          "column": 4
        },
        "end": {
          "line": 1005,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Obtain the sequence (id) number used for this request"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Integer} The sequence number of this request",
            "type": "Integer",
            "description": " The sequence number of this request"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getUrl": {
      "type": "function",
      "name": "getUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for url"
          }
        ]
      }
    },
    "setUrl": {
      "type": "function",
      "name": "setUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>url</code>.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for url"
          }
        ]
      }
    },
    "resetUrl": {
      "type": "function",
      "name": "resetUrl",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>url</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #url}."
          }
        ]
      }
    },
    "getMethod": {
      "type": "function",
      "name": "getMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>method</code>.\n\nFor further details take a look at the property definition: {@link #method}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for method"
          }
        ]
      }
    },
    "setMethod": {
      "type": "function",
      "name": "setMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>method</code>.\n\nFor further details take a look at the property definition: {@link #method}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for method"
          }
        ]
      }
    },
    "resetMethod": {
      "type": "function",
      "name": "resetMethod",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>method</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #method}."
          }
        ]
      }
    },
    "getAsynchronous": {
      "type": "function",
      "name": "getAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for asynchronous"
          }
        ]
      }
    },
    "isAsynchronous": {
      "type": "function",
      "name": "isAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for asynchronous"
          }
        ]
      }
    },
    "setAsynchronous": {
      "type": "function",
      "name": "setAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>asynchronous</code>.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for asynchronous"
          }
        ]
      }
    },
    "resetAsynchronous": {
      "type": "function",
      "name": "resetAsynchronous",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>asynchronous</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #asynchronous}."
          }
        ]
      }
    },
    "getData": {
      "type": "function",
      "name": "getData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>data</code>.\n\nFor further details take a look at the property definition: {@link #data}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for data"
          }
        ]
      }
    },
    "setData": {
      "type": "function",
      "name": "setData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>data</code>.\n\nFor further details take a look at the property definition: {@link #data}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for data"
          }
        ]
      }
    },
    "resetData": {
      "type": "function",
      "name": "resetData",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>data</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #data}."
          }
        ]
      }
    },
    "getUsername": {
      "type": "function",
      "name": "getUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>username</code>.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for username"
          }
        ]
      }
    },
    "setUsername": {
      "type": "function",
      "name": "setUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>username</code>.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for username"
          }
        ]
      }
    },
    "resetUsername": {
      "type": "function",
      "name": "resetUsername",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>username</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #username}."
          }
        ]
      }
    },
    "getPassword": {
      "type": "function",
      "name": "getPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>password</code>.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "String",
            "desc": "Returns the value for password"
          }
        ]
      }
    },
    "setPassword": {
      "type": "function",
      "name": "setPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>password</code>.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "String",
            "paramName": "value",
            "desc": "Value for password"
          }
        ]
      }
    },
    "resetPassword": {
      "type": "function",
      "name": "resetPassword",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>password</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #password}."
          }
        ]
      }
    },
    "getState": {
      "type": "function",
      "name": "getState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for state"
          }
        ]
      }
    },
    "setState": {
      "type": "function",
      "name": "setState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>state</code>.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for state"
          }
        ]
      }
    },
    "resetState": {
      "type": "function",
      "name": "resetState",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>state</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #state}."
          }
        ]
      }
    },
    "getResponseType": {
      "type": "function",
      "name": "getResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>responseType</code>.\n\nFor further details take a look at the property definition: {@link #responseType}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for responseType"
          }
        ]
      }
    },
    "setResponseType": {
      "type": "function",
      "name": "setResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>responseType</code>.\n\nFor further details take a look at the property definition: {@link #responseType}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for responseType"
          }
        ]
      }
    },
    "resetResponseType": {
      "type": "function",
      "name": "resetResponseType",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>responseType</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #responseType}."
          }
        ]
      }
    },
    "getTimeout": {
      "type": "function",
      "name": "getTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Integer",
            "desc": "Returns the value for timeout"
          }
        ]
      }
    },
    "setTimeout": {
      "type": "function",
      "name": "setTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>timeout</code>.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Integer",
            "paramName": "value",
            "desc": "Value for timeout"
          }
        ]
      }
    },
    "resetTimeout": {
      "type": "function",
      "name": "resetTimeout",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>timeout</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #timeout}."
          }
        ]
      }
    },
    "getProhibitCaching": {
      "type": "function",
      "name": "getProhibitCaching",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>prohibitCaching</code>.\n\nFor further details take a look at the property definition: {@link #prohibitCaching}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for prohibitCaching"
          }
        ]
      }
    },
    "setProhibitCaching": {
      "type": "function",
      "name": "setProhibitCaching",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>prohibitCaching</code>.\n\nFor further details take a look at the property definition: {@link #prohibitCaching}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for prohibitCaching"
          }
        ]
      }
    },
    "resetProhibitCaching": {
      "type": "function",
      "name": "resetProhibitCaching",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>prohibitCaching</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #prohibitCaching}."
          }
        ]
      }
    },
    "getCrossDomain": {
      "type": "function",
      "name": "getCrossDomain",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>crossDomain</code>.\n\nFor further details take a look at the property definition: {@link #crossDomain}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for crossDomain"
          }
        ]
      }
    },
    "isCrossDomain": {
      "type": "function",
      "name": "isCrossDomain",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>crossDomain</code>.\n\nFor further details take a look at the property definition: {@link #crossDomain}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for crossDomain"
          }
        ]
      }
    },
    "setCrossDomain": {
      "type": "function",
      "name": "setCrossDomain",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>crossDomain</code>.\n\nFor further details take a look at the property definition: {@link #crossDomain}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for crossDomain"
          }
        ]
      }
    },
    "resetCrossDomain": {
      "type": "function",
      "name": "resetCrossDomain",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>crossDomain</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #crossDomain}."
          }
        ]
      }
    },
    "getFileUpload": {
      "type": "function",
      "name": "getFileUpload",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>fileUpload</code>.\n\nFor further details take a look at the property definition: {@link #fileUpload}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for fileUpload"
          }
        ]
      }
    },
    "isFileUpload": {
      "type": "function",
      "name": "isFileUpload",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>fileUpload</code>.\n\nFor further details take a look at the property definition: {@link #fileUpload}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for fileUpload"
          }
        ]
      }
    },
    "setFileUpload": {
      "type": "function",
      "name": "setFileUpload",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>fileUpload</code>.\n\nFor further details take a look at the property definition: {@link #fileUpload}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for fileUpload"
          }
        ]
      }
    },
    "resetFileUpload": {
      "type": "function",
      "name": "resetFileUpload",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>fileUpload</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #fileUpload}."
          }
        ]
      }
    },
    "getTransport": {
      "type": "function",
      "name": "getTransport",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>transport</code>.\n\nFor further details take a look at the property definition: {@link #transport}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.io.remote.Exchange",
            "desc": "Returns the value for transport"
          }
        ]
      }
    },
    "setTransport": {
      "type": "function",
      "name": "setTransport",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>transport</code>.\n\nFor further details take a look at the property definition: {@link #transport}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.io.remote.Exchange",
            "paramName": "value",
            "desc": "Value for transport"
          }
        ]
      }
    },
    "resetTransport": {
      "type": "function",
      "name": "resetTransport",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>transport</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #transport}."
          }
        ]
      }
    },
    "getUseBasicHttpAuth": {
      "type": "function",
      "name": "getUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useBasicHttpAuth"
          }
        ]
      }
    },
    "isUseBasicHttpAuth": {
      "type": "function",
      "name": "isUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for useBasicHttpAuth"
          }
        ]
      }
    },
    "setUseBasicHttpAuth": {
      "type": "function",
      "name": "setUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>useBasicHttpAuth</code>.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for useBasicHttpAuth"
          }
        ]
      }
    },
    "resetUseBasicHttpAuth": {
      "type": "function",
      "name": "resetUseBasicHttpAuth",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>useBasicHttpAuth</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #useBasicHttpAuth}."
          }
        ]
      }
    },
    "getParseJson": {
      "type": "function",
      "name": "getParseJson",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>parseJson</code>.\n\nFor further details take a look at the property definition: {@link #parseJson}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for parseJson"
          }
        ]
      }
    },
    "isParseJson": {
      "type": "function",
      "name": "isParseJson",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>parseJson</code>.\n\nFor further details take a look at the property definition: {@link #parseJson}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for parseJson"
          }
        ]
      }
    },
    "setParseJson": {
      "type": "function",
      "name": "setParseJson",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>parseJson</code>.\n\nFor further details take a look at the property definition: {@link #parseJson}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for parseJson"
          }
        ]
      }
    },
    "resetParseJson": {
      "type": "function",
      "name": "resetParseJson",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>parseJson</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #parseJson}."
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 1017,
        "column": 2
      },
      "end": {
        "line": 1022,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "descendants": []
}