{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/core/MObjectId.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "properties",
    "qxOwner",
    "init",
    "check",
    "nullable",
    "apply",
    "qxObjectId",
    "value",
    "indexOf",
    "members",
    "__ownedQxObjects",
    "__changingQxOwner",
    "_applyQxOwner",
    "oldValue",
    "Error",
    "_applyQxObjectId",
    "owner",
    "getQxOwner",
    "__onOwnedObjectIdChange",
    "_cascadeQxObjectIdChanges",
    "obj",
    "newId",
    "oldId",
    "getContentElement",
    "contentElement",
    "updateObjectId",
    "name",
    "getQxObject",
    "id",
    "undefined",
    "controlId",
    "pos",
    "substring",
    "result",
    "segs",
    "split",
    "target",
    "found",
    "every",
    "seg",
    "length",
    "tmp",
    "_createQxObject",
    "childControl",
    "getChildControl",
    "_createQxObjectImpl",
    "addOwnedQxObject",
    "thatOwner",
    "__removeOwnedQxObjectImpl",
    "getQxObjectId",
    "setQxOwner",
    "setQxObjectId",
    "removeOwnedQxObject",
    "args",
    "getOwnedQxObjects",
    "Object",
    "values",
    "core",
    "MObjectId"
  ],
  "mappings": "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",
  "file": "MObjectId.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (john.spackman@zenesis.com, @johnspackman)\n\n************************************************************************ */\n\n/**\n * A mixin providing objects by ID and owners.\n * \n * The typical use of IDs is to override the `_createQxObjectImpl` method and create\n * new instances on demand; all code should access these instances by calling\n * `getQxObject`.\n */\nqx.Mixin.define(\"qx.core.MObjectId\", {\n  \n  /*\n   * ****************************************************************************\n   * PROPERTIES\n   * ****************************************************************************\n   */\n\n  properties: {\n\n    /** The owning object */\n    qxOwner : {\n      init : null,\n      check : \"qx.core.Object\",\n      nullable : true,\n      apply : \"_applyQxOwner\"\n    },\n\n\n    /** {String} The ID of the object.  */\n    qxObjectId : {\n      init: null,\n      check : function(value) { return value === null || (typeof value == \"string\" && value.indexOf('/') < 0); },\n      nullable : true,\n      apply : \"_applyQxObjectId\"\n    }\n  },\n\n  /*\n   * ****************************************************************************\n   * MEMBERS\n   * ****************************************************************************\n   */\n\n  members: {\n    \n    __ownedQxObjects: null,\n    __changingQxOwner: false,\n\n    /**\n     * Apply owner\n     */\n    _applyQxOwner : function(value, oldValue) {\n      if (!this.__changingQxOwner) {\n        throw new Error(\"Please use API methods to change owner, not the property\");\n      }\n    },\n    \n    /**\n     * Apply objectId\n     */\n    _applyQxObjectId : function(value, oldValue) {\n      if (!this.__changingQxOwner) {\n        var owner = this.getQxOwner();\n        if (owner) {\n          owner.__onOwnedObjectIdChange(this, value, oldValue);\n        }\n        this._cascadeQxObjectIdChanges();\n      }\n    },\n    \n    /**\n     * Called when a child's objectId changes\n     */\n    __onOwnedObjectIdChange: function(obj, newId, oldId) {\n      delete this.__ownedQxObjects[oldId];\n      this.__ownedQxObjects[newId] = obj;\n    },\n    \n    /**\n     * Reflect changes to IDs or owners\n     */\n    _cascadeQxObjectIdChanges: function() {\n      if (typeof this.getContentElement == \"function\") {\n        var contentElement = this.getContentElement();\n        if (contentElement) {\n          contentElement.updateObjectId();\n        }\n      }\n      if (this.__ownedQxObjects) {\n        for (var name in this.__ownedQxObjects) {\n          this.__ownedQxObjects[name]._cascadeQxObjectIdChanges();\n        }\n      }\n    },\n    \n    /**\n     * Returns the object with the specified ID\n     * \n     * @param id\n     *          {String} ID of the object\n     * @return {qx.core.Object?} the found object\n     */\n    getQxObject: function(id) {\n      if (this.__ownedQxObjects) {\n        var obj = this.__ownedQxObjects[id];\n        if (obj !== undefined) {\n          return obj;\n        }\n      }\n      \n      // Separate out the child control ID\n      var controlId = null;\n      var pos = id.indexOf('#');\n      if (pos > -1) {\n        controlId = id.substring(pos + 1);\n        id = id.substring(0, pos);\n      }\n      \n      var result = undefined;\n      \n      // Handle paths\n      if (id.indexOf('/') > -1) {\n        var segs = id.split('/');\n        var target = this;\n        var found = segs.every(function(seg) {\n          if (!seg.length) {\n            return true;\n          }\n          if (!target) {\n            return false;\n          }\n          var tmp = target.getQxObject(seg);\n          if (tmp !== undefined) {\n            target = tmp;\n            return true;\n          }\n        });\n        if (found) {\n          result = target;\n        }\n        \n      } else {\n        // No object, creating the object\n        result = this._createQxObject(id);\n      }\n      \n      if (result && controlId) {\n        var childControl = result.getChildControl(controlId);\n        return childControl;\n      }\n      \n      return result;\n    },\n    \n    /**\n     * Creates the object and adds it to a list; most classes are expected to\n     * override `_createQxObjectImpl` NOT this method.\n     * \n     * @param id {String} ID of the object\n     * @return {qx.core.Object?} the created object\n     */\n    _createQxObject: function(id) {\n      var result = this._createQxObjectImpl(id);\n      if (result !== undefined) {\n        this.addOwnedQxObject(result, id);\n      }\n      return result;\n    },\n    \n    /**\n     * Creates the object, intended to be overridden. Null is a valid return\n     * value and will be cached by `getQxObject`, however `undefined` is NOT a\n     * valid value and so will not be cached meaning that `_createQxObjectImpl`\n     * will be called multiple times until a valid value is returned.\n     * \n     * @param id {String} ID of the object\n     * @return {qx.core.Object?} the created object\n     */\n    _createQxObjectImpl: function(id) {\n      return undefined;\n    },\n    \n    /**\n     * Adds an object as owned by this object\n     * \n     * @param obj {qx.core.Object} the object to register\n     * @param id {String?} the id to set when registering the object\n     */\n    addOwnedQxObject: function(obj, id) {\n      if (!this.__ownedQxObjects) {\n        this.__ownedQxObjects = {};\n      }\n      var thatOwner = obj.getQxOwner();\n      if (thatOwner === this) {\n        return;\n      }\n      obj.__changingQxOwner = true;\n      try {\n        if (thatOwner) {\n          thatOwner.__removeOwnedQxObjectImpl(obj);\n        }\n        if (id === undefined) {\n          id = obj.getQxObjectId();\n        }\n        if (!id) {\n          throw new Error(\"Cannot register an object that has no ID, obj=\" + obj);\n        }\n        if (this.__ownedQxObjects[id]) {\n          throw new Error(\"Cannot register an object with ID '\" + id + \"' because that ID is already in use, this=\" + this + \", obj=\" + obj);\n        }\n        if (obj.getQxOwner() != null) {\n          throw new Error(\"Cannot register an object with ID '\" + id + \"' because it is already owned by another object this=\" + this + \", obj=\" + obj);\n        }\n        obj.setQxOwner(this);\n        obj.setQxObjectId(id);\n        obj._cascadeQxObjectIdChanges();\n      } finally {\n        obj.__changingQxOwner = false;\n      }\n      this.__ownedQxObjects[id] = obj;\n    },\n\n    /**\n     * Discards an object from the list of owned objects; note that this does\n     * not dispose of the object, simply forgets it if it exists.\n     * \n     * @param args {String|Object} the ID of the object to discard, or the object itself\n     */\n    removeOwnedQxObject: function(args) {\n      if (!this.__ownedQxObjects) {\n        throw new Error(\"Cannot discard object because it is not owned by this, this=\" + this + \", object=\" + obj);\n      }\n      \n      var id;\n      var obj;\n      if (typeof args === \"string\") {\n        if (args.indexOf('/') > -1) {\n          throw new Error(\"Cannot discard owned objects based on a path\");\n        }\n        id = args;\n        obj = this.__ownedQxObjects[id];\n        if (obj === undefined) {\n          return;\n        }\n      } else {\n        obj = args;\n        id = obj.getQxObjectId();\n        if (this.__ownedQxObjects[id] !== obj) {\n          throw new Error(\"Cannot discard object because it is not owned by this, this=\" + this + \", object=\" + obj);\n        }\n      }\n\n      if (obj !== null) {\n        obj.__changingQxOwner = true;\n        try {\n          this.__removeOwnedQxObjectImpl(obj);\n          obj._cascadeQxObjectIdChanges();\n        } finally {\n          obj.__changingQxOwner = false;\n        }\n      }\n    },\n    \n    /**\n     * Removes an owned object\n     * \n     * @param obj {qx.core.Object} the object\n     */\n    __removeOwnedQxObjectImpl: function(obj) {\n      if (obj !== null) {\n        var id = obj.getQxObjectId();\n        obj.setQxOwner(null);\n        delete this.__ownedQxObjects[id];\n      }\n    },\n\n    /**\n     * Returns an array of objects that are owned by this object, or an empty\n     * array if none exists.\n     * \n     * @return {Array}\n     */    \n    getOwnedQxObjects : function(){\n      return this.__ownedQxObjects ? Object.values(this.__ownedQxObjects) : [];\n    }\n  }\n});"
  ]
}