{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/core/MLogging.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Mixin",
    "define",
    "members",
    "__Logger",
    "log",
    "Logger",
    "debug",
    "varargs",
    "__logMessage",
    "arguments",
    "info",
    "warn",
    "error",
    "trace",
    "level",
    "argumentsArray",
    "lang",
    "Array",
    "fromArguments",
    "unshift",
    "apply",
    "core",
    "MLogging"
  ],
  "mappings": ";;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAqBAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,kBAAhB,EACA;AACEC,aACA;AACE;AACAC,gBAAWP,GAAGQ,GAAH,CAAOC,MAFpB;;AAKE;;;;;;;AAOAC,aAAQ,eAASC,OAAT,EAAkB;AACxB,aAAKC,YAAL,CAAkB,OAAlB,EAA2BC,SAA3B;AACD,OAdH;;AAiBE;;;;;;;AAOAC,YAAO,cAASH,OAAT,EAAkB;AACvB,aAAKC,YAAL,CAAkB,MAAlB,EAA0BC,SAA1B;AACD,OA1BH;;AA6BE;;;;;;;AAOAE,YAAO,cAASJ,OAAT,EAAkB;AACvB,aAAKC,YAAL,CAAkB,MAAlB,EAA0BC,SAA1B;AACD,OAtCH;;AAyCE;;;;;;;AAOAG,aAAQ,eAASL,OAAT,EAAkB;AACxB,aAAKC,YAAL,CAAkB,OAAlB,EAA2BC,SAA3B;AACD,OAlDH;;AAqDE;;;;;;;AAOAI,aAAQ,eAASN,OAAT,EAAkB;AACxB,aAAKC,YAAL,CAAkB,OAAlB,EAA2BC,SAA3B;AACD,OA9DH;;AAiEE;;;;;;;AAOAD,oBAAe,sBAASM,KAAT,EAAgBP,OAAhB,EACf;AACE,YAAIQ,iBAAiBnB,GAAGoB,IAAH,CAAQC,KAAR,CAAcC,aAAd,CAA4BX,OAA5B,CAArB;AACAQ,uBAAeI,OAAf,CAAuB,IAAvB;AACA,aAAKhB,QAAL,CAAcW,KAAd,EAAqBM,KAArB,CAA2B,KAAKjB,QAAhC,EAA0CY,cAA1C;AACD;AA7EH;AAFF,GADA,C;AArBAnB,KAAGyB,IAAH,CAAQC,QAAR,CAAiBvB,aAAjB,GAAiCA,aAAjC",
  "file": "MLogging.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (martinwittemann)\n\n************************************************************************ */\n\n/**\n * This mixin offers the basic logging features offered by {@link qx.log.Logger}.\n */\nqx.Mixin.define(\"qx.core.MLogging\",\n{\n  members :\n  {\n    /** @type {Class} Pointer to the regular logger class */\n    __Logger : qx.log.Logger,\n\n\n    /**\n     * Logs a debug message.\n     *\n     * @param varargs {var} The item(s) to log. Any number of arguments is\n     * supported. If an argument is not a string, the object dump will be\n     * logged.\n     */\n    debug : function(varargs) {\n      this.__logMessage(\"debug\", arguments);\n    },\n\n\n    /**\n     * Logs an info message.\n     *\n     * @param varargs {var} The item(s) to log. Any number of arguments is\n     * supported. If an argument is not a string, the object dump will be\n     * logged.\n     */\n    info : function(varargs) {\n      this.__logMessage(\"info\", arguments);\n    },\n\n\n    /**\n     * Logs a warning message.\n     *\n     * @param varargs {var} The item(s) to log. Any number of arguments is\n     * supported. If an argument is not a string, the object dump will be\n     * logged.\n     */\n    warn : function(varargs) {\n      this.__logMessage(\"warn\", arguments);\n    },\n\n\n    /**\n     * Logs an error message.\n     *\n     * @param varargs {var} The item(s) to log. Any number of arguments is\n     * supported. If an argument is not a string, the object dump will be\n     * logged.\n     */\n    error : function(varargs) {\n      this.__logMessage(\"error\", arguments);\n    },\n\n\n    /**\n     * Logs an error message with the current stack trace\n     *\n     * @param varargs {var} The item(s) to log. Any number of arguments is\n     * supported. If an argument is not a string, the object dump will be\n     * logged.\n     */\n    trace : function(varargs) {\n      this.__logMessage(\"trace\", arguments);\n    },\n\n\n    /**\n     * Helper that calls the appropriate logger function with the current object\n     * and any number of items.\n     *\n     * @param level {String} The log level of the message\n     * @param varargs {arguments} Arguments list to be logged\n     */\n    __logMessage : function(level, varargs)\n    {\n      var argumentsArray = qx.lang.Array.fromArguments(varargs);\n      argumentsArray.unshift(this);\n      this.__Logger[level].apply(this.__Logger, argumentsArray);\n    }\n  }\n});\n"
  ]
}