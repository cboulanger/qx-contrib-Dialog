{
  "className": "qx.core.Property",
  "packageName": "qx.core",
  "name": "Property",
  "superClass": null,
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 170,
        "column": 0
      },
      "end": {
        "line": 1905,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nMartin Wittemann (martinwittemann)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": "Internal class for handling of dynamic properties. Should only be used\nthrough the methods provided by {@link qx.Class}.\n\nFor a complete documentation of properties take a look at\nhttp://manual.qooxdoo.org/${qxversion}/pages/core.html#properties.\n\n\n*Normal properties*\n\nThe <code>properties</code> key in the class definition map of {@link qx.Class#define}\nis used to generate the properties.\n\nValid keys of a property definition are:\n\n<table>\n<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n<tr><th>check</th><td>Array, String, Function</td><td>\nThe check is used to check the type the incoming value of a property. This will only\nbe executed in the source version. The build version will not contain the checks.\nThe check can be:\n<ul>\n<li>a custom check function. The function takes the incoming value as a parameter and must\nreturn a boolean value to indicate whether the values is valid.\n</li>\n<li>inline check code as a string e.g. <code>\"value &gt; 0 && value &lt; 100\"</code></li>\n<li>a class name e.g. <code>qx.ui.form.Button</code></li>\n<li>a name of an interface the value must implement</li>\n<li>an array of all valid values</li>\n<li>one of the predefined checks: Boolean, String, Number, Integer, Float, Double,\nObject, Array, Map, Class, Mixin, Interface, Theme, Error, RegExp, Function,\nDate, Node, Element, Document, Window, Event\n</li>\n<ul>\n</td></tr>\n<tr><th>init</th><td>var</td><td>\nSets the default/initial value of the property. If no property value is set or the property\ngets reset, the getter will return the <code>init</code> value.\n</td></tr>\n<tr><th>apply</th><td>String</td><td>\nOn change of the property value the method of the specified name will be called. The signature of\nthe method is <code>function(newValue, oldValue, propertyName)</code>. It is conventional to name\nthe callback <code>_apply</code> + <i>PropertyName</i>, with the property name camel-cased (e.g.\n\"<i>_applyFooBar</i>\" for a property <i>fooBar</i>).\n</td></tr>\n<tr><th>event</th><td>String</td><td>\nOn change of the property value an event with the given name will be dispatched. The event type is\n{@link qx.event.type.Data}.\n</td></tr>\n<tr><th>themeable</th><td>Boolean</td><td>\nWhether this property can be set using themes.\n</td></tr>\n<tr><th>inheritable</th><td>Boolean</td><td>\nWhether the property value should be inheritable. If the property does not have an user defined or an\ninit value, the property will try to get the value from the parent of the current object.\n</td></tr>\n<tr><th>nullable</th><td>Boolean</td><td>\nWhether <code>null</code> is an allowed value of the property. This is complementary to the check\ndefined using the <code>check</code> key.\n</td></tr>\n<tr><th>refine</th><td>Boolean</td><td>\nWhether the property definition is a refinement of a property in one of the super classes of the class.\nOnly the <code>init</code> value can be changed using refine.\n</td></tr>\n<tr><th>transform</th><td>String</td><td>\nOn setting of the property value the method of the specified name will\nbe called. The signature of the method is <code>function(value, oldValue)</code>.\nThe parameter <code>value</code> is the value passed to the setter, the\nparameter <code>oldValue</code> is the current value, or undefined if no value\nhas been set previously.\nThe function must return the modified or unmodified value.\nTransformation occurs before the check function, so both may be\nspecified if desired.  Alternatively, the transform function may throw\nan error if the value passed to it is invalid.\n</td></tr>\n<tr><th>validate</th><td>Function, String</td><td>\nOn setting of the property value the method of the specified name will\nbe called. The signature of the method is <code>function(value)</code>.\nThe parameter <code>value</code> is the value passed to the setter.\nIf the validation fails, an <code>qx.core.ValidationError</code> should\nbe thrown by the validation function. Otherwise, just do nothing in the\nfunction.<br>\nIf a string is given, the string should hold a reference to a member\nmethod.<br>\n<code>\"<i>methodname</i>\"</code> for example\n<code>\"__validateProperty\"</code><br>\nThere are some default validators in the {@link qx.util.Validate} class.\nSee this documentation for usage examples.\n</td></tr>\n<tr><th>dereference</th><td>Boolean</td><td>\nBy default, the references to the values (current, init, ...) of the\nproperty will be stored as references on the object. When disposing\nthis object, the references will not be deleted. Setting the\ndereference key to true tells the property system to delete all\nconnections made by this property on dispose. This can be necessary for\ndisconnecting DOM objects to allow the garbage collector to work\nproperly.\n</td></tr>\n<tr><th>deferredInit</th><td>Boolean</td><td>\nAllow for a deferred initialization for reference types. Defaults to false.\n</td></tr>\n<tr><th>isEqual</th><td>Function, String</td><td>\nOn setting of the property value the method of the specified name will\nbe called to test if two values are equal. These checks for equality are\nperformed by the Property-System to decide whether further actions (like\ne.g. calling applier methods or firing of events) are needed.\nThe signature of the method is <code>function(valueA, valueB)</code>.\n<br/>\nThe <i>isEqual</i>-value can be:\n<ul>\n<li>a custom check function.\nThe function takes two values as parameter and must return a\nboolean value to indicate whether the values are considered\nequal e.g. <code>function (a, b) { return Object.is(a, b); }</code>.</li>\n<li>inline check code as a string\nwhich will be invoked with two parameters <code>a</code> and\n<code>b</code> and results in a boolean value to indicate whether\nthe values are equal e.g. <code>\"a.length() == b.length()\"</code>.</li>\n<li>reference to a member method as string\n<code>\"<i>methodname</i>\"</code> which will be invoked with two\nparameters and returns a boolean value indicating whether the two\nvalues are considered equal for example <code>\"__areTheSame\"</code>.</li>\n</ul>\nThe default implementation (if this key is undefined) will check the\nequality by using the <i>identity</i> operator (===) as if defined like\n<code>\"a===b\"</code>.\n</td></tr>\n</table>\n\n*Property groups*\n\nProperty groups are defined in a similar way but support a different set of keys:\n\n<table>\n<tr><th>Name</th><th>Type</th><th>Description</th></tr>\n<tr><th>group</th><td>String[]</td><td>\nA list of property names which should be set using the property group.\n</td></tr>\n<tr><th>mode</th><td>String</td><td>\nIf mode is set to <code>\"shorthand\"</code>, the properties can be set using a CSS like shorthand mode.\n</td></tr>\n<tr><th>themeable</th><td>Boolean</td><td>\nWhether this property can be set using themes.\n</td></tr>\n</table>"
        }
      ],
      "@internal": [
        {
          "name": "@internal",
          "body": ""
        }
      ],
      "@ignore": [
        {
          "name": "@ignore",
          "body": "qx.Interface"
        }
      ]
    }
  },
  "type": "class",
  "statics": {
    "__gatherDependency": {
      "location": {
        "start": {
          "line": 178,
          "column": 4
        },
        "end": {
          "line": 186,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "This is a method which does nothing than gathering dependencies for the\nmodule system. Calling this method is useless because it does nothing."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__checks": {
      "location": {
        "start": {
          "line": 193,
          "column": 4
        },
        "end": {
          "line": 226,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Built-in checks\nThe keys could be used in the check of the properties"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "__dereference": {
      "location": {
        "start": {
          "line": 232,
          "column": 4
        },
        "end": {
          "line": 239,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Contains types from {@link #__checks} list which need to be dereferenced"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "$$inherit": {
      "location": {
        "start": {
          "line": 248,
          "column": 4
        },
        "end": {
          "line": 248,
          "column": 25
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Inherit value, used to override defaults etc. to force inheritance\neven if property value is not undefined (through multi-values)"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "$$store": {
      "location": {
        "start": {
          "line": 256,
          "column": 4
        },
        "end": {
          "line": 264,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Caching field names for each property created"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "$$method": {
      "location": {
        "start": {
          "line": 272,
          "column": 4
        },
        "end": {
          "line": 286,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Caching function names for each property created"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "$$allowedKeys": {
      "location": {
        "start": {
          "line": 294,
          "column": 4
        },
        "end": {
          "line": 312,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Supported keys for property definitions"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "$$allowedGroupKeys": {
      "location": {
        "start": {
          "line": 320,
          "column": 4
        },
        "end": {
          "line": 327,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Supported keys for property group definitions"
          }
        ],
        "@internal": [
          {
            "name": "@internal",
            "body": ""
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "$$inheritable": {
      "location": {
        "start": {
          "line": 331,
          "column": 4
        },
        "end": {
          "line": 331,
          "column": 22
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Contains names of inheritable properties, filled by {@link qx.Class.define}"
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "__executeOptimizedRefresh": {
      "location": {
        "start": {
          "line": 339,
          "column": 4
        },
        "end": {
          "line": 350,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Generate optimized refresh method and  attach it to the class' prototype"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} clazz to which the refresher should be added",
            "paramName": "clazz",
            "description": " clazz to which the refresher should be added",
            "type": "Class"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getInheritablesOfClass": {
      "location": {
        "start": {
          "line": 359,
          "column": 4
        },
        "end": {
          "line": 384,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the names of all inheritable properties of the given class"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} class to get the inheritable properties of",
            "paramName": "clazz",
            "description": " class to get the inheritable properties of",
            "type": "Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} List of property names",
            "type": "String[]",
            "description": " List of property names"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__createRefresher": {
      "location": {
        "start": {
          "line": 393,
          "column": 4
        },
        "end": {
          "line": 415,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Assemble the refresher code and return the generated function"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "inheritables {String[]} list of inheritable properties",
            "paramName": "inheritables",
            "description": " list of inheritable properties",
            "type": "String[]"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Function} refresher function",
            "type": "Function",
            "description": " refresher function"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "attachRefreshInheritables": {
      "location": {
        "start": {
          "line": 423,
          "column": 4
        },
        "end": {
          "line": 430,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Attach $$refreshInheritables method stub to the given class"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} clazz to which the refresher should be added",
            "paramName": "clazz",
            "description": " clazz to which the refresher should be added",
            "type": "Class"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "attachMethods": {
      "location": {
        "start": {
          "line": 440,
          "column": 4
        },
        "end": {
          "line": 446,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Attach one property to class"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Class to attach properties to",
            "paramName": "clazz",
            "description": " Class to attach properties to",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} Name of property",
            "paramName": "name",
            "description": " Name of property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "config {Map} Configuration map of property",
            "paramName": "config",
            "description": " Configuration map of property",
            "type": "Map"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__attachGroupMethods": {
      "location": {
        "start": {
          "line": 456,
          "column": 4
        },
        "end": {
          "line": 540,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Attach group methods"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Class to attach properties to",
            "paramName": "clazz",
            "description": " Class to attach properties to",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "config {Map} Property configuration",
            "paramName": "config",
            "description": " Property configuration",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "name {String} Name of the property",
            "paramName": "name",
            "description": " Name of the property",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__attachPropertyMethods": {
      "location": {
        "start": {
          "line": 550,
          "column": 4
        },
        "end": {
          "line": 756,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Attach property methods"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Class to attach properties to",
            "paramName": "clazz",
            "description": " Class to attach properties to",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "config {Map} Property configuration",
            "paramName": "config",
            "description": " Property configuration",
            "type": "Map"
          },
          {
            "name": "@param",
            "body": "name {String} Name of the property",
            "paramName": "name",
            "description": " Name of the property",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__shouldBeDereferenced": {
      "location": {
        "start": {
          "line": 766,
          "column": 4
        },
        "end": {
          "line": 768,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns if the reference for the given property check should be removed\non dispose."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "check {var} The check of the property definition.",
            "paramName": "check",
            "description": " The check of the property definition.",
            "type": "var"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} If the dereference key should be set.",
            "type": "Boolean",
            "description": " If the dereference key should be set."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__errors": {
      "location": {
        "start": {
          "line": 772,
          "column": 4
        },
        "end": {
          "line": 780,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": ""
          }
        ],
        "@type": [
          {
            "name": "@type",
            "body": "{Map} Internal data field for error messages used by {@link #error}"
          }
        ]
      },
      "type": "variable",
      "access": "private"
    },
    "error": {
      "location": {
        "start": {
          "line": 792,
          "column": 4
        },
        "end": {
          "line": 799,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Error method used by the property system to report errors."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "obj {qx.core.Object} Any qooxdoo object",
            "paramName": "obj",
            "description": " Any qooxdoo object",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "id {Integer} Numeric error identifier",
            "paramName": "id",
            "description": " Numeric error identifier",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "property {String} Name of the property",
            "paramName": "property",
            "description": " Name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Name of the method variant e.g. \"set\", \"reset\", ...",
            "paramName": "variant",
            "description": " Name of the method variant e.g. \"set\", \"reset\", ...",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "value {var} Incoming value",
            "paramName": "value",
            "description": " Incoming value",
            "type": "var"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__unwrapFunctionFromCode": {
      "location": {
        "start": {
          "line": 814,
          "column": 4
        },
        "end": {
          "line": 826,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Compiles a string builder object to a function, executes the function and\nreturns the return value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "instance {Object} Instance which have called the original method",
            "paramName": "instance",
            "description": " Instance which have called the original method",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "members {Object} Prototype members map where the new function should be stored",
            "paramName": "members",
            "description": " Prototype members map where the new function should be stored",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} Name of the property",
            "paramName": "name",
            "description": " Name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Function variant e.g. get, set, reset, ...",
            "paramName": "variant",
            "description": " Function variant e.g. get, set, reset, ...",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "code {Array} Array which contains the code",
            "paramName": "code",
            "description": " Array which contains the code",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "args {arguments} Incoming arguments of wrapper method",
            "paramName": "args",
            "description": " Incoming arguments of wrapper method",
            "type": "arguments"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Return value of the generated function",
            "type": "var",
            "description": " Return value of the generated function"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__installFunctionFromCode": {
      "location": {
        "start": {
          "line": 840,
          "column": 4
        },
        "end": {
          "line": 870,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Takes a string builder object, converts it into a function, and installs it as\na property accessor"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} Class to install the method into",
            "paramName": "clazz",
            "description": " Class to install the method into",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} Name of the property",
            "paramName": "name",
            "description": " Name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Function variant e.g. get, set, reset, ...",
            "paramName": "variant",
            "description": " Function variant e.g. get, set, reset, ...",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "code {Array} Array which contains the code",
            "paramName": "code",
            "description": " Array which contains the code",
            "type": "Array"
          },
          {
            "name": "@param",
            "body": "args {arguments} Incoming arguments of wrapper method",
            "paramName": "args",
            "description": " Incoming arguments of wrapper method",
            "type": "arguments"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Return value of the generated function",
            "type": "var",
            "description": " Return value of the generated function"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "executeOptimizedGetter": {
      "location": {
        "start": {
          "line": 883,
          "column": 4
        },
        "end": {
          "line": 888,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Generates the optimized getter, installs it into the class prototype, and executes it\nSupported variants: get"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "instance {Object} the instance which calls the method",
            "paramName": "instance",
            "description": " the instance which calls the method",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Execute return value of apply generated function, generally the incoming value",
            "type": "var",
            "description": " Execute return value of apply generated function, generally the incoming value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__installOptimizedGetter": {
      "location": {
        "start": {
          "line": 899,
          "column": 4
        },
        "end": {
          "line": 903,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Installs a getter into the class prototype, without executing it\nSupported variants: get"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__compileGetter": {
      "location": {
        "start": {
          "line": 915,
          "column": 4
        },
        "end": {
          "line": 977,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Compiles a getter into a string builder array\nSupported variants: get"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} the string builder array",
            "type": "String[]",
            "description": " the string builder array"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "executeOptimizedSetter": {
      "location": {
        "start": {
          "line": 991,
          "column": 4
        },
        "end": {
          "line": 996,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Generates the optimized setter\nSupported variants: set, reset, init, refresh, style, unstyle"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "instance {Object} the instance which calls the method",
            "paramName": "instance",
            "description": " the instance which calls the method",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "args {arguments} Incoming arguments of wrapper method",
            "paramName": "args",
            "description": " Incoming arguments of wrapper method",
            "type": "arguments"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Execute return value of apply generated function, generally the incoming value",
            "type": "var",
            "description": " Execute return value of apply generated function, generally the incoming value"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__installOptimizedSetter": {
      "location": {
        "start": {
          "line": 1008,
          "column": 4
        },
        "end": {
          "line": 1012,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Installs a setter into the class prototype, without executing it\nSupported variants: set"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{var} Return value of the generated function",
            "type": "var",
            "description": " Return value of the generated function"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__compileSetter": {
      "location": {
        "start": {
          "line": 1025,
          "column": 4
        },
        "end": {
          "line": 1122,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Compiles a setter into a string builder array\nSupported variants: set, setThemed, setRuntime, init"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "instance {Object} the instance which calls the method",
            "paramName": "instance",
            "description": " the instance which calls the method",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String[]} the string builder array",
            "type": "String[]",
            "description": " the string builder array"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__getStore": {
      "location": {
        "start": {
          "line": 1133,
          "column": 4
        },
        "end": {
          "line": 1146,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the object to store the value for the given variant"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Object} the value store",
            "type": "qx.core.Object",
            "description": " the value store"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitIsEqualFunction": {
      "location": {
        "start": {
          "line": 1157,
          "column": 4
        },
        "end": {
          "line": 1188,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code for the equality check evaluation"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitSetterPreConditions": {
      "location": {
        "start": {
          "line": 1200,
          "column": 4
        },
        "end": {
          "line": 1241,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code to check the arguments preconditions"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "incomingValue {Boolean} Whether the setter has an incoming value",
            "paramName": "incomingValue",
            "description": " Whether the setter has an incoming value",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitIncomingValueTransformation": {
      "location": {
        "start": {
          "line": 1252,
          "column": 4
        },
        "end": {
          "line": 1272,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code to apply the \"validate\" and \"transform\" config keys."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitOldNewComparison": {
      "location": {
        "start": {
          "line": 1283,
          "column": 4
        },
        "end": {
          "line": 1296,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code, which returns if the incoming value equals the current value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "incomingValue {Boolean} Whether the setter has an incoming value",
            "paramName": "incomingValue",
            "description": " Whether the setter has an incoming value",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "store {Object} The data store to use for the incoming value",
            "paramName": "store",
            "description": " The data store to use for the incoming value",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitIncomingValueValidation": {
      "location": {
        "start": {
          "line": 1310,
          "column": 4
        },
        "end": {
          "line": 1371,
          "column": 6
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code, which performs validation of the incoming value according to\nthe \"nullable\", \"check\" and \"inheritable\" config keys."
          }
        ],
        "@signature": [
          {
            "name": "@signature",
            "body": "function(code, config, clazz, name, variant)"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "clazz {Class} the class which originally defined the property",
            "paramName": "clazz",
            "description": " the class which originally defined the property",
            "type": "Class"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitStoreValue": {
      "location": {
        "start": {
          "line": 1382,
          "column": 4
        },
        "end": {
          "line": 1415,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code to store the incoming value"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "incomingValue {Boolean} Whether the setter has an incoming value",
            "paramName": "incomingValue",
            "description": " Whether the setter has an incoming value",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitStoreComputedValue": {
      "location": {
        "start": {
          "line": 1428,
          "column": 4
        },
        "end": {
          "line": 1670,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code to store the incoming value and compute the \"old\" and \"computed\"\nvalues."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "incomingValue {Boolean} Whether the setter has an incoming value",
            "paramName": "incomingValue",
            "description": " Whether the setter has an incoming value",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitOldValue": {
      "location": {
        "start": {
          "line": 1680,
          "column": 4
        },
        "end": {
          "line": 1711,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code to compute the \"old\" value."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitStoreInheritedPropertyValue": {
      "location": {
        "start": {
          "line": 1722,
          "column": 4
        },
        "end": {
          "line": 1770,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code to store the value of an inheritable property"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitNormalizeUndefinedValues": {
      "location": {
        "start": {
          "line": 1782,
          "column": 4
        },
        "end": {
          "line": 1799,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code to normalize the old and incoming values from undefined to\n<code>null</code>."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} Method variant.",
            "paramName": "variant",
            "description": " Method variant.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "__emitCallCallback": {
      "location": {
        "start": {
          "line": 1811,
          "column": 4
        },
        "end": {
          "line": 1903,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Emit code to call the apply method and fire the change event"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "code {String[]} String array to append the code to",
            "paramName": "code",
            "description": " String array to append the code to",
            "type": "String[]"
          },
          {
            "name": "@param",
            "body": "config {Object} The property configuration map",
            "paramName": "config",
            "description": " The property configuration map",
            "type": "qx.core.Object"
          },
          {
            "name": "@param",
            "body": "name {String} name of the property",
            "paramName": "name",
            "description": " name of the property",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "variant {String} variant of the method e.g. setThemed",
            "paramName": "variant",
            "description": " variant of the method e.g. setThemed",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "refresh {Boolean} if true, emit code to update the inherited values of child objects",
            "paramName": "refresh",
            "description": " if true, emit code to update the inherited values of child objects",
            "type": "Boolean"
          }
        ]
      },
      "type": "function",
      "access": "private"
    }
  },
  "descendants": []
}