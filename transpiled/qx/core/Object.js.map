{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/core/Object.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "Object",
    "include",
    "core",
    "Environment",
    "filter",
    "data",
    "MBinding",
    "MLogging",
    "MEvent",
    "MProperty",
    "MObjectId",
    "MAssert",
    "construct",
    "hasInterface",
    "constructor",
    "IDisposable",
    "ObjectRegistry",
    "register",
    "toHashCode",
    "statics",
    "$$type",
    "members",
    "__Property",
    "Property",
    "$$hash",
    "toString",
    "classname",
    "base",
    "args",
    "varargs",
    "isFunction",
    "callee",
    "Error",
    "displayName",
    "arguments",
    "length",
    "call",
    "apply",
    "Array",
    "prototype",
    "slice",
    "self",
    "clone",
    "clazz",
    "props",
    "getProperties",
    "user",
    "$$store",
    "setter",
    "$$method",
    "set",
    "name",
    "i",
    "l",
    "hasOwnProperty",
    "__userData",
    "setUserData",
    "key",
    "value",
    "getUserData",
    "undefined",
    "isDisposed",
    "$$disposed",
    "isDisposing",
    "$$disposing",
    "dispose",
    "$$instance",
    "$$allowconstruct",
    "get",
    "debug",
    "mixins",
    "superclass",
    "$$destructor",
    "$$includes",
    "$$flatIncludes",
    "isString",
    "warn",
    "_disposeObjects",
    "util",
    "DisposeUtil",
    "disposeObjects",
    "_disposeSingletonObjects",
    "_disposeArray",
    "field",
    "disposeArray",
    "_disposeMap",
    "disposeMap",
    "environment",
    "destruct",
    "inShutDown",
    "event",
    "Registration",
    "removeAllListeners",
    "deleteAllListeners",
    "unregister",
    "properties",
    "store",
    "storeUser",
    "storeTheme",
    "theme",
    "storeInherit",
    "inherit",
    "storeUseinit",
    "useinit",
    "storeInit",
    "init",
    "$$properties",
    "dereference"
  ],
  "mappings": "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",
  "file": "Object.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * The qooxdoo root class. All other classes are direct or indirect subclasses of this one.\n *\n * This class contains methods for:\n *\n * * object management (creation and destruction)\n * * interfaces for event system\n * * generic setter/getter support\n * * interfaces for logging console\n * * user friendly OO interfaces like {@link #self} or {@link #base}\n *\n * @require(qx.core.ObjectRegistry)\n */\nqx.Class.define(\"qx.core.Object\",\n{\n  extend : Object,\n  include : qx.core.Environment.filter({\n    \"module.databinding\" : qx.data.MBinding,\n    \"module.logger\" : qx.core.MLogging,\n    \"module.events\" : qx.core.MEvent,\n    \"module.property\" : qx.core.MProperty,\n    \"module.objectid\" : qx.core.MObjectId,\n    \"qx.debug\" : qx.core.MAssert\n  }),\n\n\n  /*\n  *****************************************************************************\n     CONSTRUCTOR\n  *****************************************************************************\n  */\n\n  /**\n   * Create a new instance\n   */\n  construct : function() {\n    \tif (!qx.core.Environment.get(\"qx.automaticMemoryManagement\") || qx.Class.hasInterface(this.constructor, qx.core.IDisposable)) {\n    \t\tqx.core.ObjectRegistry.register(this);\n    \t} else {\n    \t\tqx.core.ObjectRegistry.toHashCode(this);\n    \t}\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics :\n  {\n    /** Internal type */\n    $$type : \"Object\"\n  },\n\n\n\n\n\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members :\n  {\n    __Property : qx.core.Environment.get(\"module.property\") ? qx.core.Property : null,\n\n\n    /*\n    ---------------------------------------------------------------------------\n      BASICS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Return unique hash code of object\n     *\n     * @return {Integer} unique hash code of the object\n     */\n    toHashCode : function() {\n      return this.$$hash;\n    },\n\n\n    /**\n     * Returns a string representation of the qooxdoo object.\n     *\n     * @return {String} string representation of the object\n     */\n    toString : function() {\n      return this.classname + \"[\" + this.$$hash + \"]\";\n    },\n\n\n    /**\n     * Call the same method of the super class.\n     *\n     * @param args {IArguments} the arguments variable of the calling method\n     * @param varargs {var?} variable number of arguments passed to the overwritten function\n     * @return {var} the return value of the method of the base class.\n     */\n    base : function(args, varargs)\n    {\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (!qx.Bootstrap.isFunction(args.callee.base)) {\n          throw new Error(\n            \"Cannot call super class. Method is not derived: \" +\n            args.callee.displayName\n          );\n        }\n      }\n\n      if (arguments.length === 1) {\n        return args.callee.base.call(this);\n      } else {\n        return args.callee.base.apply(this, Array.prototype.slice.call(arguments, 1));\n      }\n    },\n\n\n    /**\n     * Returns the static class (to access static members of this class)\n     *\n     * @param args {arguments} the arguments variable of the calling method\n     * @return {var} the return value of the method of the base class.\n     */\n    self : function(args) {\n      return args.callee.self;\n    },\n\n\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      CLONE SUPPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * EXPERIMENTAL - NOT READY FOR PRODUCTION\n     *\n     * Returns a clone of this object. Copies over all user configured\n     * property values. Do not configure a parent nor apply the appearance\n     * styles directly.\n     *\n     * @return {qx.core.Object} The clone\n     */\n    clone : function()\n    {\n      if (!qx.core.Environment.get(\"module.property\")) {\n        throw new Error(\"Cloning only possible with properties.\");\n      }\n\n      var clazz = this.constructor;\n      var clone = new clazz;\n      var props = qx.Class.getProperties(clazz);\n      var user = this.__Property.$$store.user;\n      var setter = this.__Property.$$method.set;\n      var name;\n\n      // Iterate through properties\n      for (var i=0, l=props.length; i<l; i++)\n      {\n        name = props[i];\n        if (this.hasOwnProperty(user[name])) {\n          clone[setter[name]](this[user[name]]);\n        }\n      }\n\n      // Return clone\n      return clone;\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      USER DATA\n    ---------------------------------------------------------------------------\n    */\n\n    /** @type {Map} stored user data */\n    __userData : null,\n\n\n    /**\n     * Store user defined data inside the object.\n     *\n     * @param key {String} the key\n     * @param value {Object} the value of the user data\n     */\n    setUserData : function(key, value)\n    {\n      if (!this.__userData) {\n        this.__userData = {};\n      }\n\n      this.__userData[key] = value;\n    },\n\n\n    /**\n     * Load user defined data from the object\n     *\n     * @param key {String} the key\n     * @return {Object} the user data\n     */\n    getUserData : function(key)\n    {\n      if (!this.__userData) {\n        return null;\n      }\n      var data = this.__userData[key];\n      return data === undefined ? null : data;\n    },\n\n\n\n    /*\n    ---------------------------------------------------------------------------\n      DISPOSER\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Returns true if the object is disposed.\n     *\n     * @return {Boolean} Whether the object has been disposed\n     */\n    isDisposed : function() {\n      return this.$$disposed || false;\n    },\n\n\n    /**\n     * Returns true if the object is being disposed, ie this.dispose() has started but \n     * not finished\n     *\n     * @return {Boolean} Whether the object is being disposed\n     */\n    isDisposing : function() {\n      return this.$$disposing || false;\n    },\n\n\n    /**\n     * Dispose this object\n     *\n     */\n    dispose : function()\n    {\n      // Check first\n      if (this.$$disposed) {\n        return;\n      }\n\n      // Mark as disposed (directly, not at end, to omit recursions)\n      this.$$disposed = true;\n      this.$$disposing = true;\n      this.$$instance = null;\n      this.$$allowconstruct = null;\n\n      // Debug output\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 2) {\n          qx.Bootstrap.debug(this, \"Disposing \" + this.classname + \"[\" + this.toHashCode() + \"]\");\n        }\n      }\n\n      // Deconstructor support for classes\n      var clazz = this.constructor;\n      var mixins;\n\n      while (clazz.superclass)\n      {\n        // Processing this class...\n        if (clazz.$$destructor) {\n          clazz.$$destructor.call(this);\n        }\n\n        // Destructor support for mixins\n        if (clazz.$$includes)\n        {\n          mixins = clazz.$$flatIncludes;\n\n          for (var i=0, l=mixins.length; i<l; i++)\n          {\n            if (mixins[i].$$destructor) {\n              mixins[i].$$destructor.call(this);\n            }\n          }\n        }\n\n        // Jump up to next super class\n        clazz = clazz.superclass;\n      }\n\n      this.$$disposing = false;\n      \n      // Additional checks\n      if (qx.core.Environment.get(\"qx.debug\"))\n      {\n        if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 0)\n        {\n          var key, value;\n          for (key in this)\n          {\n            value = this[key];\n\n            // Check for Objects but respect values attached to the prototype itself\n            if (value !== null && typeof value === \"object\" && !(qx.Bootstrap.isString(value)))\n            {\n              // Check prototype value\n              // undefined is the best, but null may be used as a placeholder for\n              // private variables (hint: checks in qx.Class.define). We accept both.\n              if (this.constructor.prototype[key] != null) {\n                continue;\n              }\n\n              if (qx.core.Environment.get(\"qx.debug.dispose.level\") > 1) {\n                qx.Bootstrap.warn(this, \"Missing destruct definition for '\" + key + \"' in \" + this.classname + \"[\" + this.toHashCode() + \"]: \" + value);\n                delete this[key];\n              }\n            }\n          }\n        }\n      }\n    },\n\n\n    /*\n    ---------------------------------------------------------------------------\n      DISPOSER UTILITIES\n    ---------------------------------------------------------------------------\n    */\n\n\n    /**\n     * Disconnects and disposes given objects from instance.\n     * Only works with qx.core.Object based objects e.g. Widgets.\n     *\n     * @param varargs {arguments} Names of fields (which store objects) to dispose\n     */\n    _disposeObjects : function(varargs) {\n      qx.util.DisposeUtil.disposeObjects(this, arguments);\n    },\n\n\n    /**\n     * Disconnects and disposes given singleton objects from instance.\n     * Only works with qx.core.Object based objects e.g. Widgets.\n     *\n     * @param varargs {arguments} Names of fields (which store objects) to dispose\n     */\n    _disposeSingletonObjects : function(varargs) {\n      qx.util.DisposeUtil.disposeObjects(this, arguments, true);\n    },\n\n\n    /**\n     * Disposes all members of the given array and deletes\n     * the field which refers to the array afterwards.\n     *\n     * @param field {String} Name of the field which refers to the array\n     */\n    _disposeArray : function(field) {\n      qx.util.DisposeUtil.disposeArray(this, field);\n    },\n\n\n    /**\n     * Disposes all members of the given map and deletes\n     * the field which refers to the map afterwards.\n     *\n     * @param field {String} Name of the field which refers to the map\n     */\n    _disposeMap : function(field) {\n      qx.util.DisposeUtil.disposeMap(this, field);\n    }\n  },\n\n\n\n\n  /*\n  *****************************************************************************\n     ENVIRONMENT SETTINGS\n  *****************************************************************************\n  */\n\n  environment : {\n    \"qx.debug.dispose.level\" : 0\n  },\n\n\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct : function()\n  {\n    if (qx.core.Environment.get(\"module.events\")) {\n      if (!qx.core.ObjectRegistry.inShutDown) {\n        // Cleanup event listeners\n        qx.event.Registration.removeAllListeners(this);\n      } else {\n        // on shutdown, just clear the internal listener map\n        qx.event.Registration.deleteAllListeners(this);\n      }\n    }\n\n    // Cleanup object registry\n    qx.core.ObjectRegistry.unregister(this);\n\n    // Cleanup user data\n    this.__userData = null;\n\n    // only of properties are available\n    if (qx.core.Environment.get(\"module.property\")) {\n      // Cleanup properties\n      var clazz = this.constructor;\n      var properties;\n      var store = this.__Property.$$store;\n      var storeUser = store.user;\n      var storeTheme = store.theme;\n      var storeInherit = store.inherit;\n      var storeUseinit = store.useinit;\n      var storeInit = store.init;\n\n      while(clazz)\n      {\n        properties = clazz.$$properties;\n        if (properties)\n        {\n          for (var name in properties)\n          {\n            if (properties[name].dereference) {\n              this[storeUser[name]] = this[storeTheme[name]] = this[storeInherit[name]] = this[storeUseinit[name]] = this[storeInit[name]] = undefined;\n            }\n          }\n        }\n\n        clazz = clazz.superclass;\n      }\n    }\n  }\n});\n"
  ]
}