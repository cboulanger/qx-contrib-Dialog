{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qx/xml/Element.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "statics",
    "__xpe",
    "XML_SERIALIZER",
    "serialize",
    "element",
    "dom",
    "Node",
    "isDocument",
    "documentElement",
    "XMLSerializer",
    "serializeToString",
    "xml",
    "outerHTML",
    "selectSingleNode",
    "query",
    "namespaces",
    "core",
    "Environment",
    "get",
    "XPathEvaluator",
    "xpe",
    "resolver",
    "prefix",
    "createNSResolver",
    "evaluate",
    "XPathResult",
    "FIRST_ORDERED_NODE_TYPE",
    "singleNodeValue",
    "err",
    "Error",
    "namespaceString",
    "ownerDocument",
    "setProperty",
    "selectNodes",
    "result",
    "ORDERED_NODE_SNAPSHOT_TYPE",
    "nodes",
    "i",
    "snapshotLength",
    "snapshotItem",
    "getElementsByTagNameNS",
    "namespaceURI",
    "tagname",
    "doc",
    "Element",
    "getSingleNodeText",
    "node",
    "getText",
    "setAttributeNS",
    "document",
    "namespaceUri",
    "name",
    "value",
    "attr",
    "createNode",
    "nodeValue",
    "setAttributeNode",
    "getAttributeNS",
    "attributes",
    "attribute",
    "getQualifiedItem",
    "createSubElementNS",
    "parent",
    "createElementNS",
    "appendChild",
    "defer",
    "window"
  ],
  "mappings": "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",
  "file": "Element.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Cross browser XML Element API\n *\n * API to select, query and serialize XML elements.\n *\n * Further information:\n *\n * * <a href=\"https://developer.mozilla.org/en-US/docs/Parsing_and_serializing_XML\">MDN Parsing and Serializing XML</a>\n *\n * Please note that nodes selected using the <code>selectSingleNode()</code> and\n * <code>selectNodes()</code> methods remain in their document context so\n * <code>qx.xml.Element.selectNodes(foo, \"//bar\");</code>\n * will search the entire document for any nodes named \"bar\", not just the\n * <code>foo</code> node.\n */\nqx.Class.define(\"qx.xml.Element\",\n{\n  statics :\n  {\n    __xpe : null,\n\n    /**\n     * @type {Boolean} <code>true</code> if the native XMLSerializer should be used,\n     * <code>false</code> otherwise.\n     */\n    XML_SERIALIZER : false,\n\n    /**\n     * The subtree rooted by the specified element or document is serialized to a string.\n     *\n     * @param element {Element | Document} The root of the subtree to be serialized. This could be any node, including a Document.\n     * @return {String} Serialized subtree\n     */\n    serialize : function(element)\n    {\n      if (qx.dom.Node.isDocument(element)) {\n        element = element.documentElement;\n      }\n\n      if (this.XML_SERIALIZER) {\n        return (new XMLSerializer()).serializeToString(element);\n      } else {\n        return element.xml || element.outerHTML;\n      }\n    },\n\n\n    /**\n     * Selects the first XmlNode that matches the XPath expression.\n     *\n     * @param element {Element | Document} root element for the search\n     * @param query {String} XPath query\n     * @param namespaces {Map} optional map of prefixes and their namespace URIs\n     * @return {Element} first matching element\n     */\n    selectSingleNode : function(element, query, namespaces)\n    {\n      if (qx.core.Environment.get(\"html.xpath\")) {\n        if(!this.__xpe) {\n          this.__xpe = new XPathEvaluator();\n        }\n\n        var xpe = this.__xpe;\n\n        var resolver;\n\n        if(namespaces) {\n          resolver = function(prefix){\n            return namespaces[prefix] || null;\n          };\n        }\n        else {\n          resolver = xpe.createNSResolver(element);\n        }\n\n        try {\n          return xpe.evaluate(query, element, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n        } catch(err) {\n          throw new Error(\"selectSingleNode: query: \" + query + \", element: \" + element + \", error: \" + err);\n        }\n      }\n\n      if (qx.core.Environment.get(\"xml.selectsinglenode\")) {\n        if (namespaces) {\n          var namespaceString = \"\";\n          for (var prefix in namespaces) {\n            namespaceString += \"xmlns:\" + prefix + \"='\" + namespaces[prefix] + \"' \";\n          }\n\n          // If the element is a node, set the selection namespace on its parent document.\n          if (element.ownerDocument) {\n            element.ownerDocument.setProperty(\"SelectionNamespaces\", namespaceString);\n          }\n          // element is a document\n          else {\n            element.setProperty(\"SelectionNamespaces\", namespaceString);\n          }\n\n        }\n\n        return element.selectSingleNode(query);\n      }\n\n      throw new Error(\"No XPath implementation available!\");\n    },\n\n\n    /**\n     * Selects a list of nodes matching the XPath expression.\n     *\n     * @param element {Element | Document} root element for the search\n     * @param query {String} XPath query\n     * @param namespaces {Map} optional map of prefixes and their namespace URIs\n     * @return {Element[]} List of matching elements\n     */\n    selectNodes : function(element, query, namespaces)\n    {\n      if (qx.core.Environment.get(\"html.xpath\")) {\n        var xpe = this.__xpe;\n\n        if(!xpe) {\n          this.__xpe = xpe = new XPathEvaluator();\n        }\n\n        var resolver;\n\n        if(namespaces) {\n          resolver = function(prefix){\n            return namespaces[prefix] || null;\n          };\n        }\n        else {\n          resolver = xpe.createNSResolver(element);\n        }\n\n        try {\n          var result = xpe.evaluate(query, element, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n        } catch(err) {\n          throw new Error(\"selectNodes: query: \" + query + \", element: \" + element + \", error: \" + err);\n        }\n\n        var nodes = [];\n        for (var i=0; i<result.snapshotLength; i++) {\n          nodes[i] = result.snapshotItem(i);\n        }\n\n        return nodes;\n      }\n\n      if (qx.core.Environment.get(\"xml.selectnodes\")) {\n        if (namespaces) {\n          var namespaceString = \"\";\n          for (var prefix in namespaces) {\n            namespaceString += \"xmlns:\" + prefix + \"='\" + namespaces[prefix] + \"' \";\n          }\n\n          // If the element is a node, set the selection namespace on its parent document.\n          if (element.ownerDocument) {\n            element.ownerDocument.setProperty(\"SelectionNamespaces\", namespaceString);\n          }\n          // element is a document\n          else {\n            element.setProperty(\"SelectionNamespaces\", namespaceString);\n          }\n\n        }\n\n        return element.selectNodes(query);\n      }\n\n      throw new Error(\"No XPath implementation available!\");\n    },\n\n\n    /**\n     * Returns a list of elements with the given tag name belonging to the given namespace\n     *\n     * (See\n     * <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.getElementsByTagNameNS\">MDN\n     * Reference</a>).\n     *\n     * @param element {Element | Document} the element from where the search should start.\n     *       Note that only the descendants of this element are included in the search, not the node itself.\n     * @param namespaceURI {var} is the namespace URI of elements to look for . For example, if you need to look\n     *       for XHTML elements, use the XHTML namespace URI, <tt>http://www.w3.org/1999/xhtml/</tt>.\n     * @param tagname {String} the tagname to look for\n     * @return {Element[]} a list of found elements in the order they appear in the tree.\n     */\n    getElementsByTagNameNS : function(element, namespaceURI, tagname)\n    {\n      if (qx.core.Environment.get(\"xml.getelementsbytagnamens\")) {\n        return element.getElementsByTagNameNS(namespaceURI, tagname);\n      }\n\n      if (qx.core.Environment.get(\"xml.domproperties\")) {\n        var doc = element.ownerDocument || element;\n\n        doc.setProperty(\"SelectionLanguage\", \"XPath\");\n        doc.setProperty(\"SelectionNamespaces\", \"xmlns:ns='\" + namespaceURI + \"'\");\n\n        return qx.xml.Element.selectNodes(element, 'descendant-or-self::ns:' + tagname);\n      }\n\n      throw new Error(\"The client does not support this operation!\");\n    },\n\n\n    /**\n     * Selects the first XmlNode that matches the XPath expression and returns the text content of the element\n     *\n     * @param element {Element|Document} root element for the search\n     * @param query {String}  XPath query\n     * @return {String} the joined text content of the found element or null if not appropriate.\n     */\n    getSingleNodeText : function(element, query)\n    {\n      var node = this.selectSingleNode(element, query);\n      return qx.dom.Node.getText(node);\n    },\n\n\n    /**\n     * Adds or sets an attribute with the given namespace on a node\n     *\n     * @param document {Document} The node's parent document, created e.g. by\n     * {@link qx.xml.Document#create}\n     * @param element {Element} XML/DOM element to modify\n     * @param namespaceUri {String} Namespace URI\n     * @param name {String} Attribute name\n     * @param value {String} Attribute value\n     */\n    setAttributeNS : function(document, element, namespaceUri, name, value)\n    {\n      if (qx.core.Environment.get(\"xml.attributens\")) {\n        element.setAttributeNS(namespaceUri, name, value);\n      }\n\n      else if (qx.core.Environment.get(\"xml.createnode\")) {\n        var attr = document.createNode(2, name, namespaceUri);\n        attr.nodeValue = value;\n        element.setAttributeNode(attr);\n      }\n\n      else {\n        throw new Error(\"The client does not support this operation!\");\n      }\n    },\n\n    /**\n     * Get the value of the attribute with the given namespace and name\n     *\n     * @param element {Element} XML/DOM element to modify\n     * @param namespaceUri {String} Namespace URI\n     * @param name {String} Attribute name\n     * @return {String} the value of the attribute, empty string if not found\n     */\n    getAttributeNS : function(element, namespaceUri, name)\n    {\n      if (qx.core.Environment.get(\"xml.attributens\")) {\n        var value = element.getAttributeNS(namespaceUri, name);\n        return value === null ? '' : value;\n      }\n\n      if (qx.core.Environment.get(\"xml.getqualifieditem\")) {\n        var attributes = element.attributes;\n        var value = null;\n        if(attributes)\n        {\n          var attribute = attributes.getQualifiedItem(name,namespaceUri);\n          if(attribute)\n          {\n            value = attribute.nodeValue;\n          }\n        }\n        return value === null ? '' : value;\n      }\n\n      throw new Error(\"The client does not support this operation!\");\n    },\n\n\n    /**\n     * Creates an element with the given namespace and appends it to an existing\n     * element\n     *\n     * @param document {Document} The node's parent document, created e.g. by\n     * {@link qx.xml.Document#create}\n     * @param parent {Element} The parent element for the new sub-element\n     * @param name {String} The new element's name\n     * @param namespaceUri {String} Namespace URI for the new element\n     *\n     * @return {Element} The newly created sub-element\n     */\n    createSubElementNS : function(document, parent, name, namespaceUri) {\n      if (qx.core.Environment.get(\"xml.createelementns\")) {\n        // the \"x\" prefix has no importance. when there's a conflict,\n        // mozilla engine assigns an alternative prefix automatically.\n        // not putting a prefix means to assign default namespace prefix\n        // to the given namespace uri.\n        var node = document.createElementNS(namespaceUri, \"x:\" + name);\n        parent.appendChild(node);\n        return node;\n      }\n\n      if (qx.core.Environment.get(\"xml.createnode\")) {\n        var node = document.createNode(1, name, namespaceUri);\n        parent.appendChild(node);\n        return node;\n      }\n\n      throw new Error(\"The client does not support this operation!\");\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DEFER\n  *****************************************************************************\n  */\n\n  defer : function(statics)\n  {\n    statics.XML_SERIALIZER = (window.XMLSerializer &&\n     !( qx.core.Environment.get(\"engine.name\") == \"mshtml\" &&\n     qx.core.Environment.get(\"engine.version\") >= 9 &&\n     qx.core.Environment.get(\"browser.documentmode\") >= 9));\n  }\n});\n"
  ]
}