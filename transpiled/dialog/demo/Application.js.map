{
  "version": 3,
  "sources": [
    "source/class/dialog/demo/Application.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "application",
    "Standalone",
    "members",
    "main",
    "log",
    "appender",
    "Native",
    "buttons",
    "label",
    "id",
    "method",
    "button_panel",
    "ui",
    "container",
    "Composite",
    "setLayout",
    "layout",
    "VBox",
    "setQxObjectId",
    "core",
    "Id",
    "getInstance",
    "register",
    "title",
    "basic",
    "Label",
    "setRich",
    "add",
    "blockerCheckBox",
    "form",
    "CheckBox",
    "addListener",
    "e",
    "dialog",
    "Dialog",
    "useBlocker",
    "getData",
    "labelHBox",
    "radioButtonGroupHBox",
    "RadioButtonGroup",
    "HBox",
    "theme",
    "getModel",
    "manager",
    "Icon",
    "setTheme",
    "metathemes",
    "iconthemes",
    "themes",
    "Theme",
    "getAll",
    "Object",
    "getOwnPropertyNames",
    "key",
    "type",
    "name",
    "indexOf",
    "button",
    "RadioButton",
    "setModel",
    "forEach",
    "button_data",
    "Button",
    "addOwnedQxObject",
    "enabled",
    "undefined",
    "setEnabled",
    "getRoot",
    "left",
    "top",
    "_replaceOwnedObject",
    "owner",
    "obj",
    "removeOwnedQxObject",
    "createAlert",
    "caption",
    "dlg",
    "alert",
    "set",
    "createWarning",
    "warning",
    "createError",
    "error",
    "createConfirm",
    "confirm",
    "promise",
    "then",
    "dlg2",
    "result",
    "createPrompt",
    "prompt",
    "createDialogChain",
    "dlg1",
    "dlg3",
    "dlg4",
    "createSelect",
    "select",
    "options",
    "value",
    "createForm",
    "formData",
    "util",
    "format",
    "DateFormat",
    "Date",
    "min",
    "max",
    "debug",
    "Serializer",
    "toJson",
    "createWizard",
    "pageData",
    "Validate",
    "email",
    "wizard",
    "Wizard",
    "width",
    "maxWidth",
    "allowCancel",
    "callback",
    "map",
    "start",
    "createLogin",
    "loginWidget",
    "Login",
    "image",
    "text",
    "checkCredentials",
    "finalCallback",
    "bind",
    "showForgotPassword",
    "forgotPasswordHandler",
    "window",
    "show",
    "__loginWidget",
    "username",
    "password",
    "err",
    "data",
    "loginError",
    "loginSuccess",
    "createProgress",
    "progressWidget",
    "Progress",
    "console",
    "counter",
    "incrementProgress",
    "progress",
    "message",
    "lang",
    "Function",
    "delay",
    "createProgressWithLog",
    "cancelled",
    "showLog",
    "okButtonText",
    "hideWhenCancelled",
    "abortMessage",
    "textProgress",
    "setNewLogText",
    "msg",
    "newLogText",
    "demo",
    "Application"
  ],
  "mappings": "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",
  "file": "Application.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo dialog library\n   https://github.com/cboulanger/qx-contrib-Dialog\n\n   Copyright:\n     2007-2017 Christian Boulanger and others\n\n   License:\n     LGPL: http://www.gnu.org/licenses/lgpl.html\n     EPL: http://www.eclipse.org/org/documents/epl-v10.php\n     See the LICENSE file in the project's top-level directory for details.\n\n************************************************************************ */\n/*global qx dialog*/\n\n/**\n * This is the main application class of your custom application \"dialog\"\n * @asset(dialog/*)\n * @require(dialog.Dialog)\n */\nqx.Class.define(\"dialog.demo.Application\",\n  {\n    extend: qx.application.Standalone,\n\n    /*\n    *****************************************************************************\n       MEMBERS\n    *****************************************************************************\n    */\n\n    members:\n      {\n        /**\n         * This method contains the initial application code and gets called\n         * during startup of the application\n         */\n        main: function () {\n\n          this.base(arguments);\n          qx.log.appender.Native;\n\n          /*\n           * button data\n           */\n          let buttons = [\n            {\n              label: \"Alert\",\n              id: \"alert\",\n              method: \"createAlert\"\n            },\n            {\n              label: \"Warning\",\n              id: \"warning\",\n              method: \"createWarning\"\n            },\n            {\n              label: \"Error\",\n              id: \"error\",\n              method: \"createError\"\n            },\n            {\n              label: \"Confirm\",\n              id: \"confirm\",\n              method: \"createConfirm\"\n            },\n            {\n              label: \"Prompt\",\n              id: \"prompt\",\n              method: \"createPrompt\"\n            },\n            {\n              label: \"Dialog Chain\",\n              id: \"dialog\",\n              method: \"createDialogChain\"\n            },\n            {\n              label: \"Select among choices\",\n              id: \"select\",\n              method: \"createSelect\"\n            },\n            {\n              label: \"Form\",\n              id: \"form\",\n              method: \"createForm\"\n            },\n            {\n              label: \"Wizard\",\n              id: \"wizard\",\n              method: \"createWizard\"\n            },\n            {\n              label: \"Login\",\n              id: \"login\",\n              method: \"createLogin\"\n            },\n            {\n              label: \"Progress\",\n              id: \"progress\",\n              method: \"createProgress\"\n            },\n            {\n              label: \"Progress with Log\",\n              id: \"progress_with_log\",\n              method: \"createProgressWithLog\"\n            }\n          ];\n\n          /*\n           * dialog button panel\n           */\n          let button_panel = new qx.ui.container.Composite();\n          button_panel.setLayout(new qx.ui.layout.VBox(5));\n          button_panel.setQxObjectId(\"buttons\");\n          qx.core.Id.getInstance().register(button_panel);\n\n          let title = new qx.ui.basic.Label(\"<h2>Dialog Demo</h2>\");\n          title.setRich(true);\n          button_panel.add(title);\n\n          // check box\n          let blockerCheckBox = new qx.ui.form.CheckBox(\"Use coloured blocker (like < v.1.3)\");\n          blockerCheckBox.addListener(\"changeValue\", function (e) {\n            dialog.Dialog.useBlocker(e.getData());\n          });\n          button_panel.add(blockerCheckBox);\n\n          // icon theme switcher\n          let labelHBox = new qx.ui.basic.Label(\"<strong>Icon Theme</strong>\");\n          labelHBox.setRich(true);\n          button_panel.add(labelHBox);\n          let radioButtonGroupHBox = new qx.ui.form.RadioButtonGroup();\n          radioButtonGroupHBox.setLayout(new qx.ui.layout.HBox(5));\n          button_panel.add(radioButtonGroupHBox);\n          radioButtonGroupHBox.addListener(\"changeSelection\", function (e) {\n            let theme = e.getData()[0].getModel();\n            qx.theme.manager.Icon.getInstance().setTheme(theme);\n          });\n\n          // icon theme\n          let metathemes = [];\n          let iconthemes = [];\n          let themes = qx.Theme.getAll();\n          for (let key of Object.getOwnPropertyNames(themes)) {\n            let theme = themes[key];\n            if (theme.type === \"meta\") {\n              //\n            }\n            if (theme.name.indexOf(\"dialog.theme.icon\") !== -1) {\n              let button = new qx.ui.form.RadioButton(theme.title);\n              button.setModel(theme);\n              radioButtonGroupHBox.add(button);\n            }\n          }\n\n          // buttons\n          button_panel.add(new qx.ui.basic.Label(\"Try out the following dialog widgets:\"));\n          buttons.forEach(function (button_data) {\n            let button = new qx.ui.form.Button(button_data.label);\n            button.setQxObjectId(button_data.id);\n            button_panel.addOwnedQxObject(button);\n            button.addListener(\"execute\", function () {\n              this[button_data.method](button_data.label, button);\n            }, this);\n            if (button_data.enabled !== undefined) {\n              button.setEnabled(button_data.enabled);\n            }\n            button_panel.add(button);\n          }, this);\n          this.getRoot().add(button_panel, {left: 100, top: 100});\n        },\n\n\n        _replaceOwnedObject: function(owner, obj, id='dialog'){\n          try {\n            owner.removeOwnedQxObject(id);\n          } catch (e) {} // ignore error\n          obj.setQxObjectId(id);\n          owner.addOwnedQxObject(obj);\n        },\n\n        createAlert: function (caption, button) {\n          let dlg = dialog.Dialog\n            .alert(\"Hello World!\")\n            .set({caption});\n\n//    old style:\n//      dialog.Dialog.alert(  \"Hello World!\", null, null, caption );\n//    or:\n//      (new dialog.Alert({\n//        message: \"Hello World!\",\n//        caption: caption\n//      })).show();\n\n          // next line is for automated UI tests only, not needed for \"normal\" usage\n          this._replaceOwnedObject(button, dlg, \"dialog\");\n        },\n\n        createWarning: function (caption, button) {\n          let dlg = dialog.Dialog\n            .warning(\"I warned you!\")\n            .set({caption});\n          this._replaceOwnedObject(button, dlg, \"dialog\");\n        },\n\n        createError: function (caption, button) {\n          let dlg = dialog.Dialog\n            .error(\"Error, error, error, errr....!\")\n            .set({caption});\n          this._replaceOwnedObject(button, dlg, \"dialog\");\n        },\n\n        createConfirm: function (caption, button) {\n          let dlg = dialog.Dialog\n            .confirm(\"Do you really want to erase your hard drive?\")\n            .set({caption});\n          this._replaceOwnedObject(button, dlg, \"dialog1\");\n\n          dlg.promise()\n            .then(result => {\n              let dlg2 = dialog.Dialog.alert(\"Your answer was: \" + result)\n                  .set({caption: caption + \" 2\"});\n              this._replaceOwnedObject(button, dlg, \"dialog2\");\n            });\n//    old style:\n//      dialog.Dialog.confirm(\"Do you really want to erase your hard drive?\", function(result){\n//        dialog.Dialog.alert(\"Your answer was: \" + result, null, null, caption );\n//      }, this, caption);\n//    or:\n//      (new dialog.Confirm({\n//        message: \"Do you really want to erase your hard drive?\",\n//        callback: function(result)\n//        {\n//          (new dialog.Alert({\n//            message: \"Your answer was:\" + result,\n//            caption: caption\n//          })).show();\n//        },\n//        caption: caption\n//      })).show();\n        },\n\n        createPrompt: function (caption, button) {\n          let dlg = dialog.Dialog\n            .prompt(\"Please enter the root password for your server\")\n            .set({caption});\n          this._replaceOwnedObject(button, dlg, \"dialog1\");\n          dlg.promise()\n            .then(result => {\n              let dlg2 = dialog.Dialog.alert(\"Your answer was: \" + result)\n                .set({caption: caption + \" 2\"});\n              this._replaceOwnedObject(button, dlg2, \"dialog2\");\n            });\n        },\n\n        /**\n         * Example for nested callbacks\n         */\n        createDialogChain: function (caption, button) {\n          let dlg1 = dialog.Dialog\n            .alert(\"This demostrates a series of 'nested' dialogs \")\n            .set({caption});\n          this._replaceOwnedObject(button, dlg1, \"dialog1\");\n          dlg1.promise()\n            .then(() => {\n              let dlg2 = dialog.Dialog\n                .confirm(\"Do you believe in the Loch Ness monster?\")\n                .set({caption: caption + \" 2\"});\n              this._replaceOwnedObject(button, dlg2, \"dialog2\");\n              return dlg2.promise();\n            })\n            .then(result => {\n              let dlg3 = dialog.Dialog\n                .confirm(\"You really \" + (result ? \"\" : \"don't \") + \"believe in the Loch Ness monster?\")\n                .set({caption: caption + \" 3\",});\n              this._replaceOwnedObject(button, dlg3, \"dialog3\");\n              return dlg3.promise();\n            })\n            .then(result => {\n              let dlg4 = dialog.Dialog\n                .alert(result ? \"I tell you a secret: It doesn't exist.\" : \"Good to know.\")\n                .set({caption: caption + \" 4\"});\n              this._replaceOwnedObject(button, dlg4, \"dialog4\");\n              return dlg4.promise();\n            });\n        },\n\n        /**\n         * Offer a selection of choices to the user\n         */\n        createSelect: function (caption, button) {\n          let dlg1 = dialog.Dialog\n            .select(\"Select the type of record to create:\")\n            .set({\n              caption: caption,\n              options: [\n                {label: \"Database record\", value: \"database\"},\n                {label: \"World record\", value: \"world\"},\n                {label: \"Pop record\", value: \"pop\"}\n              ]\n            });\n          this._replaceOwnedObject(button, dlg1, \"dialog1\");\n          dlg1.promise()\n            .then(result => {\n              let dlg2 = dialog.Dialog\n                .alert(\"You selected: '\" + result + \"'\")\n                .set({caption: caption + \" 2\"});\n              this._replaceOwnedObject(button, dlg2, \"dialog2\");\n              return dlg2.promise();\n            });\n\n//    old style:\n//      (new dialog.Select({\n//        message: \"Select the type of record to create:\",\n//        options: [\n//          { label:\"Database record\", value:\"database\" },\n//          { label:\"World record\", value:\"world\" },\n//          { label:\"Pop record\", value:\"pop\" }\n//        ],\n//        allowCancel: true,\n//        caption: caption,\n//        callback: function(result){\n//          (new dialog.Alert({\n//            message: \"You selected: '\" + result + \"'\"\n//          })).show();\n//        }\n//      })).show();\n\n        },\n\n        createForm: function (caption, button) {\n          let formData =\n            {\n              'username':\n                {\n                  'type': \"TextField\",\n                  'label': \"User Name\",\n                  'value': \"\",\n                  \"validation\": {\n                    \"required\": true\n                  }\n                },\n              'address':\n                {\n                  'type': \"TextArea\",\n                  'label': \"Address\",\n                  'lines': 3,\n                  'value': \"\"\n                },\n              'domain':\n                {\n                  'type': \"SelectBox\",\n                  'label': \"Domain\",\n                  'value': 1,\n                  'options': [\n                    {'label': \"Company\", 'value': 0},\n                    {'label': \"Home\", 'value': 1}\n                  ]\n                },\n              'commands':\n                {\n                  'type': \"ComboBox\",\n                  'label': \"Shell command to execute\",\n                  'value': \"\",\n                  'options': [\n                    {'label': \"ln -s *\"},\n                    {'label': \"rm -Rf /\"}\n                  ]\n                },\n              'save_details': {\n                'type': \"Checkbox\",\n                'label': \"Save form details\",\n                'value': true\n              },\n              \"executeDate\": {\n                \"type\": \"datefield\",\n                \"dateFormat\": new qx.util.format.DateFormat(\"dd.MM.yyyy HH:mm\"),\n                \"value\": new Date(),\n                \"label\": \"Execute At\"\n              },\n              \"area\": {\n                \"type\": \"spinner\",\n                \"label\": \"Area\",\n                \"value\": 25.5,\n                \"min\": -10,\n                \"max\": 100,\n                \"step\": 0.5,\n                \"fractionsDigits\": {min: 1, max: 7}\n              }\n            };\n\n          let form = dialog.Dialog.form(\"Please fill in the form\", formData).set({caption});\n          form.setQxObjectId(\"dialog\");\n          button.addOwnedQxObject(form);\n          form.promise()\n          .then(result => {\n            this.debug(qx.util.Serializer.toJson(result));\n            return dialog.Dialog\n              .alert(\"Thank you for your input. See log for result.\")\n              .set({caption: caption + \" 2\"})\n              .promise();\n          });\n\n//    same as:\n//    (new dialog.Form({\n//      message: \"Please fill in the form\",\n//      formData: formData,\n//      allowCancel: true,\n//      caption: caption,\n//      callback: function( result )\n//      {\n//        dialog.alert(\"Thank you for your input:\" + qx.util.Json.stringify(result).replace(/\\\\/g,\"\") );\n//      }\n//    })).show();\n        },\n\n        createWizard: function (caption) {\n          /*\n           * wizard widget\n           */\n          let pageData =\n            [\n              {\n                \"message\": \"<p style='font-weight:bold'>Create new account</p><p>Please create a new mail account.</p><p>Select the type of account you wish to create</p>\",\n                \"formData\": {\n                  \"accountTypeLabel\": {\n                    \"type\": \"label\",\n                    \"label\": \"Please select the type of account you wish to create.\"\n                  },\n                  \"accountType\": {\n                    \"type\": \"radiogroup\",\n                    \"label\": \"Account Type\",\n                    \"options\":\n                      [\n                        {\"label\": \"E-Mail\", \"value\": \"email\"},\n                        {\"label\": \".mac\", \"value\": \".mac\"},\n                        {\"label\": \"RSS-Account\", \"value\": \"rss\"},\n                        {\"label\": \"Google Mail\", \"value\": \"google\"},\n                        {\"label\": \"Newsgroup Account\", \"value\": \"news\"}\n                      ]\n                  }\n                }\n              },\n              {\n                \"message\": \"<p style='font-weight:bold'>Identity</p><p>This information will be sent to the receiver of your messages.</p>\",\n                \"formData\": {\n                  \"label1\": {\n                    \"type\": \"label\",\n                    \"label\": \"Please enter your name as it should appear in the 'From' field of the sent message. \"\n                  },\n                  \"fullName\": {\n                    \"type\": \"textfield\",\n                    \"label\": \"Your Name\",\n                    \"validation\": {\n                      \"required\": true\n                    }\n                  },\n                  \"label2\": {\n                    \"type\": \"label\",\n                    \"label\": \"Please enter your email address. This is the address used by others to send you messages.\"\n                  },\n                  \"email\": {\n                    \"type\": \"textfield\",\n                    \"label\": \"E-Mail Address\",\n                    \"validation\": {\n                      \"required\": true,\n                      \"validator\": qx.util.Validate.email()\n                    }\n                  },\n                  \"birthday\": {\n                    \"type\": \"datefield\",\n                    \"label\": \"Birthday\"\n                  }\n                }\n              },\n              {\n                \"message\": \"<p style='font-weight:bold'>Account</p><p>Bla bla bla.</p>\",\n                \"formData\": {\n                  \"serverType\": {\n                    \"type\": \"radiogroup\",\n                    \"orientation\": \"horizontal\",\n                    \"label\": \"Select the type of email server\",\n                    \"options\":\n                      [\n                        {\"label\": \"POP\", \"value\": \"pop\"},\n                        {\"label\": \"IMAP\", \"value\": \"imap\"}\n                      ]\n                  },\n                  \"serverAddressLabel\": {\n                    \"type\": \"label\",\n                    \"label\": \"Please enter the server for the account.\"\n                  },\n                  \"serverAddress\": {\n                    \"type\": \"textfield\",\n                    \"label\": \"E-Mail Server\",\n                    \"validation\": {\n                      \"required\": true\n                    }\n                  }\n                }\n              },\n              {\n                \"message\": \"<p style='font-weight:bold'>Username</p><p>Bla bla bla.</p>\",\n                \"formData\": {\n                  \"emailUserName\": {\n                    \"type\": \"textfield\",\n                    \"label\": \"Inbox server user name:\"\n                  }\n                }\n              }\n            ];\n          let wizard = new dialog.Wizard({\n            width: 500,\n            maxWidth: 500,\n            pageData: pageData,\n            allowCancel: true,\n            callback: map => {\n              dialog.Dialog.alert(\"Thank you for your input. See log for result.\");\n              this.debug(qx.util.Serializer.toJson(map));\n            },\n            caption: caption\n          });\n          wizard.start();\n        },\n\n        /**\n         * Creates a sample login widget\n         */\n        createLogin: function (caption, button) {\n          let loginWidget = new dialog.Login({\n            image: \"dialog/logo.gif\",\n            text: \"Please log in, using 'demo'/'demo'\",\n            checkCredentials: this.checkCredentials,\n            callback: this.finalCallback.bind(this),\n            showForgotPassword: true,\n            caption: caption,\n            forgotPasswordHandler: function () {\n              window.alert(\"Too bad. I cannot remember it either.\");\n            }\n          });\n          this._replaceOwnedObject(button,loginWidget,\"window\");\n\n          // you can optionally attach event listeners, for example to\n          // do some animation (for example, an Mac OS-like \"shake\" effect)\n          loginWidget.addListener(\"loginSuccess\", function (e) {\n            // do something to indicated that the user has logged in!\n          });\n          loginWidget.addListener(\"loginFailure\", function (e) {\n            // User rejected! Shake your login widget!\n          });\n          loginWidget.show();\n          this.__loginWidget = loginWidget;\n        },\n\n        /**\n         * Sample asyncronous function for checking credentials that takes the\n         * username, password and a callback function as parameters. After performing\n         * the authentication, the callback is called with the result, which should\n         * be undefined or null if successful, and the error message if the\n         * authentication failed. If the problem was not the authentication, but some\n         * other exception, you could pass an error object.\n         * @param username {String}\n         * @param password {String}\n         * @param callback {Function} The callback function that needs to be called with\n         * (err, data) as arguments\n         */\n        checkCredentials: function (username, password, callback) {\n          if (username === \"demo\" && password === \"demo\") {\n            callback(null, username);\n          } else {\n            callback(\"Wrong username or password!\");\n          }\n        },\n\n        /**\n         * Sample final callback to react on the result of the authentication\n         * @param err {String|Error|undefined|null}\n         * @param data\n         */\n        finalCallback: function (err, data) {\n          if (err) {\n            let loginError = dialog.Dialog\n              .alert(err)\n              .set({ caption: \"Login Error\" });\n            this._replaceOwnedObject(this.__loginWidget,loginError,\"error\");\n          } else {\n            let loginSuccess = dialog.Dialog\n              .alert(\"User '\" + data + \"' is now logged in.\")\n              .set({ caption: \"Login Success\" });\n            this._replaceOwnedObject(this.__loginWidget,loginSuccess,\"success\");\n          }\n        },\n\n        createProgress: function (caption) {\n          let progressWidget = new dialog.Progress({\n            caption: caption,\n            allowCancel: true\n          });\n          progressWidget.show()\n            .promise()\n            .then(function (result) {\n              console.log(\"Progress widget returned: \" + result);\n            });\n\n          let counter = 0;\n          (function incrementProgress() {\n            progressWidget.set({\n              progress: counter,\n              message: counter + \"% completed\",\n              allowCancel: true\n            });\n            if (counter++ === 100) return;\n            qx.lang.Function.delay(incrementProgress, 100);\n          })();\n        },\n\n        createProgressWithLog: function (caption) {\n          let cancelled = false; // used in closures\n          let progressWidget = new dialog.Progress({\n            showLog: true,\n            caption: caption,\n            okButtonText: \"Continue\",\n            allowCancel: true,\n            hideWhenCancelled: false\n          });\n          progressWidget.show()\n            .promise()\n            .then(function (result) {\n              if (!result) {\n                // user clicked on \"cancel\" button, can also be intercepted by listening\n                // to the \"cancel event\"\n                cancelled = true;\n              }\n              console.log(\"Progress widget returned: \" + result);\n            });\n          let counter = 0;\n          let abortMessage = false;\n          (function textProgress() {\n            if (cancelled) {\n              progressWidget.set({\n                progress: counter,\n                message: \"Aborting...\"\n              });\n              if (!abortMessage) {\n                progressWidget.setNewLogText(\"Aborting...\");\n                abortMessage = true;\n              }\n\n            } else {\n              progressWidget.set({\n                progress: counter,\n                message: counter + \"% completed\"\n              });\n              if (counter % 10 === 0) {\n                progressWidget.setNewLogText(counter + \"% completed\");\n              }\n            }\n\n            if (counter++ === 100) {\n              let msg = cancelled ? \"Cancelled.\" : \"Completed.\";\n              progressWidget.set({\n                newLogText: msg,\n                message: msg\n              });\n              return;\n            }\n            if (cancelled) {\n              qx.lang.Function.delay(textProgress, 5);\n            } else {\n              qx.lang.Function.delay(textProgress, 100);\n            }\n          })();\n        }\n      }\n  });\n"
  ]
}