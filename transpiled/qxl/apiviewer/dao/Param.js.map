{
  "version": 3,
  "sources": [
    "contrib/qooxdoo_qxl.apiviewer_v0.1.12/source/class/qxl/apiviewer/dao/Param.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "meta",
    "method",
    "_meta",
    "_method",
    "_types",
    "type",
    "lang",
    "Array",
    "toNativeArray",
    "map",
    "arrayDimensions",
    "dimensions",
    "m",
    "match",
    "length",
    "members",
    "_arrayDimensions",
    "getMethod",
    "getClass",
    "getName",
    "paramName",
    "getDescription",
    "desc",
    "getTypes",
    "getArrayDimensions",
    "getDefaultValue",
    "defaultValue",
    "isOptional",
    "optional",
    "qxl",
    "apiviewer",
    "dao",
    "Param"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EA6CAH,GAAGI,KAAH,CAASC,MAAT,CAAgB,yBAAhB,EAA2C;AACzCC,YAASN,GAAGO,IAAH,CAAQC,MADwB;;AAGzCC,eAAY,mBAASC,IAAT,EAAeC,MAAf,EAAuB;AACjC;AACA,WAAKC,KAAL,GAAaF,IAAb;AACA,WAAKG,OAAL,GAAeF,MAAf;AACA,WAAKG,MAAL,GAAc,CAAE,EAAEC,MAAM,KAAR,EAAF,CAAd;AACA,UAAIL,KAAKK,IAAT,EAAe;AACb,aAAKD,MAAL,GAAcd,GAAGgB,IAAH,CAAQC,KAAR,CAAcC,aAAd,CAA4BR,KAAKK,IAAjC,EACXI,GADW,CACP,gBAAQ;AACX,cAAI,QAAOJ,IAAP,yCAAOA,IAAP,OAAiB,QAArB,EAA+B;AAC7B,mBAAO,EAAEA,MAAMA,KAAKA,IAAb,EAAmBK,iBAAiBL,KAAKM,UAAzC,EAAP;AACD;AACD,cAAIC,IAAIP,KAAKQ,KAAL,CAAW,qBAAX,CAAR;AACA,cAAID,KAAKA,EAAE,CAAF,CAAT,EAAe;AACb,mBAAO,EAAEP,MAAMO,EAAE,CAAF,CAAR,EAAcF,iBAAiBE,EAAE,CAAF,EAAKE,MAAL,GAAc,CAA7C,EAAP;AACD;AACD,iBAAO,EAAET,MAAMA,IAAR,EAAP;AACD,SAVW,CAAd;AAWD;AACF,KArBwC;;AAuBzCU,aAAU;AACRZ,eAAS,IADD;AAERD,aAAO,IAFC;AAGRE,cAAQ,IAHA;AAIRY,wBAAkB,CAJV;;AAMRC,iBAAW,qBAAW;AACpB,eAAO,KAAKd,OAAZ;AACD,OARO;;AAURe,gBAAU,oBAAW;AACnB,eAAO,KAAKf,OAAL,CAAae,QAAb,EAAP;AACD,OAZO;;AAcRC,eAAS,mBAAW;AAClB,eAAO,KAAKjB,KAAL,CAAWkB,SAAlB;AACD,OAhBO;;AAkBRC,sBAAgB,0BAAW;AACzB,eAAO,KAAKnB,KAAL,CAAWoB,IAAlB;AACD,OApBO;;AAsBRC,gBAAU,oBAAW;AACnB,eAAO,KAAKnB,MAAZ;AACD,OAxBO;;AA0BRoB,0BAAqB,8BAAW;AAC9B,eAAO,KAAKR,gBAAZ;AACD,OA5BO;;AA8BRS,uBAAkB,2BAAW;AAC3B,eAAO,KAAKvB,KAAL,CAAWwB,YAAlB;AACD,OAhCO;;AAkCRC,kBAAa,sBAAW;AACtB,eAAO,CAAC,CAAC,KAAKzB,KAAL,CAAW0B,QAApB;AACD;;AApCO;;AAvB+B,GAA3C,C;AA7CAC,MAAIC,SAAJ,CAAcC,GAAd,CAAkBC,KAAlB,CAAwBvC,aAAxB,GAAwCA,aAAxC",
  "file": "Param.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n     2018 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (johnspackman)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Represents a parameter or return type, taken from JSDoc meta data\n * \n * Example data:\n * \n        \"@param\": [\n          {\n            \"name\": \"@param\",\n            \"body\": \"options {Map?null} Optional layout data for widget.\",\n            \"paramName\": \"options\",\n            \"description\": \" Optional layout data for widget.\",\n            \"optional\": true,\n            \"defaultValue\": \"null\",\n            \"type\": \"Map\"\n          }\n        ],\n        \"@return\": [\n          {\n            \"name\": \"@return\",\n            \"body\": \"{Integer} The index position or <code>-1</code> when\\nthe given widget is no child of this layout.\",\n            \"type\": \"Integer\",\n            \"desc\": \" The index position or <code>-1</code> when\\nthe given widget is no child of this layout.\"\n          }\n        ]\n */\nqx.Class.define(\"qxl.apiviewer.dao.Param\", {\n  extend : qx.core.Object,\n\n  construct : function(meta, method) {\n    this.base(arguments);\n    this._meta = meta;\n    this._method = method;\n    this._types = [ { type: \"var\" } ];\n    if (meta.type) {\n      this._types = qx.lang.Array.toNativeArray(meta.type)\n        .map(type => {\n          if (typeof(type) === \"object\") {\n            return { type: type.type, arrayDimensions: type.dimensions };\n          }  \n          var m = type.match(/^([^[]+)((\\[\\])+)?$/);\n          if (m && m[2]) {\n            return { type: m[1], arrayDimensions: m[2].length / 2 };\n          }\n          return { type: type };\n        });\n    } \n  },\n\n  members : {\n    _method: null,\n    _meta: null,\n    _types: null,\n    _arrayDimensions: 0,\n    \n    getMethod: function() {\n      return this._method;\n    },\n    \n    getClass: function() {\n      return this._method.getClass();\n    },\n    \n    getName: function() {\n      return this._meta.paramName;\n    },\n    \n    getDescription: function() {\n      return this._meta.desc;\n    },\n    \n    getTypes: function() {\n      return this._types;\n    },\n\n    getArrayDimensions : function() {\n      return this._arrayDimensions;\n    },\n\n    getDefaultValue : function() {\n      return this._meta.defaultValue;\n    },\n\n    isOptional : function() {\n      return !!this._meta.optional;\n    }\n\n  }\n\n});\n"
  ]
}