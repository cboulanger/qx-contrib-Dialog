{
  "version": 3,
  "sources": [
    "contrib/qooxdoo_qxl.apiviewer_v0.1.12/source/class/qxl/apiviewer/dao/ClassItem.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "qxl",
    "apiviewer",
    "dao",
    "Node",
    "construct",
    "meta",
    "parentClass",
    "name",
    "_class",
    "_name",
    "members",
    "getClass",
    "getName",
    "getFullName",
    "getTypes",
    "result",
    "arr",
    "_jsdoc",
    "map",
    "type",
    "item",
    "dims",
    "match",
    "dimensions",
    "length",
    "getSee",
    "body",
    "getOverriddenFrom",
    "_meta",
    "overriddenFrom",
    "getClassByName",
    "isRequiredByInterface",
    "ifaceNode",
    "Error",
    "classname",
    "getRequiredBy",
    "_requiredBy",
    "requiredBy",
    "interfaces",
    "getAllInterfaces",
    "j",
    "push",
    "destruct",
    "_itemDocNode",
    "_see",
    "_types",
    "ClassItem"
  ],
  "mappings": "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",
  "file": "ClassItem.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n     2018 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (johnspackman)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * This Class wraps the access to the documentation data of a class item.\n */\nqx.Class.define(\"qxl.apiviewer.dao.ClassItem\",\n{\n  extend : qxl.apiviewer.dao.Node,\n\n  /**\n   * @param classDocNode {Map} class documentation node\n   * @param parentClass {qxl.apiviewer.dao.Class} reference to the class this item belongs to\n   * @param name {String} name of the list in the JSON structure of the class\n   */\n  construct : function(meta, parentClass, name)\n  {\n    this.base(arguments, meta);\n    this._class = parentClass;\n    this._name = name;\n  },\n\n  members :\n  {\n    _class: null,\n    _name: null,\n\n    /**\n     * Get the class, this item belongs to\n     *\n     * @return {qxl.apiviewer.dao.Class} the class this item belongs to\n     */\n    getClass : function()\n    {\n      return this._class;\n    },\n\n\n    /**\n     * Get the name of the item.\n     *\n     * @return {String} name of the item\n     */\n    getName : function()\n    {\n      return this._name;\n    },\n    \n    getFullName: function() {\n      return this.getClass().getFullName() + \"#\" + this._name;\n    },\n\n\n    /**\n     * Get the types of the item.\n     *\n     * @return {Map[]} Array of types of the item. A type has the keys 'type' and 'dimensions', where\n     * dimensions is the number of array dimensions (eg \"Integer[][]\" has a type of \"Integer\" and \n     * dimensions of 2, and \"Integer\" has type if \"Integer\" but dimensions is undefined\n     */\n    getTypes : function()\n    {\n      var result = [];\n      var arr = this._jsdoc[\"@param\"];\n      if (arr) {\n        arr.map(item => {\n          var result = {\n              type: item.type\n          };\n          if (result.type) {\n            var dims = result.type.match(/\\[\\]/g);\n            if (dims)\n              result.dimensions = dims.length;\n          }\n          return result;\n        });\n      }\n      return result;\n    },\n\n\n    /**\n     * Get all references declared using the \"see\" attribute.\n     *\n     * @return {String[]} A list of all references declared using the \"see\" attribute.\n     */\n    getSee : function()\n    {\n      return (this._jsdoc[\"@see\"]||[]).map(item => item.body);\n    },\n\n\n    /**\n     * If the item is overwridden from one of the super classes, get the item, which is overwridden.\n     *\n     * @return {ClassItem} the overwridden class item\n     */\n    getOverriddenFrom : function()\n    {\n      return this._meta.overriddenFrom ? qxl.apiviewer.dao.Class.getClassByName(this._meta.overriddenFrom) : null;\n    },\n\n\n    /**\n     * Checks whether the node is required by the given interface.\n     *\n     * @param ifaceNode {qxl.apiviewer.dao.Class} interface to check for\n     * @return {Boolean} whether the item is required by the interface.\n     */\n    isRequiredByInterface : function(ifaceNode) {\n      throw new Error(\"No implementation for \" + this.classname + \".isRequiredByInterface\");\n    },\n\n\n    /**\n     * Get the interface this item is required by.\n     *\n     * @return {qxl.apiviewer.dao.Class} The interface this item is required by.\n     */\n    getRequiredBy : function()\n    {\n      if (this._requiredBy) {\n        return this._requiredBy;\n      }\n\n      var requiredBy = [];\n      var interfaces = this.getClass().getAllInterfaces(true);\n\n      for (var j=0; j<interfaces.length; j++) {\n        if (this.isRequiredByInterface(interfaces[j])) {\n          requiredBy.push(interfaces[j]);\n        }\n      }\n      this._requiredBy = requiredBy;\n      return requiredBy;\n    }\n  },\n\n\n  /*\n   *****************************************************************************\n      DESTRUCTOR\n   *****************************************************************************\n   */\n\n  destruct : function()\n  {\n    this._class = this._itemDocNode = this._requiredBy = this._see =\n      this._types = null;\n  }\n});\n"
  ]
}