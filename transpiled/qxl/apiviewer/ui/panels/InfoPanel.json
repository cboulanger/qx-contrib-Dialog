{
  "className": "qxl.apiviewer.ui.panels.InfoPanel",
  "packageName": "qxl.apiviewer.ui.panels",
  "name": "InfoPanel",
  "superClass": "qx.core.Object",
  "interfaces": [],
  "mixins": [],
  "functionName": null,
  "clazz": {
    "location": {
      "start": {
        "line": 29,
        "column": 0
      },
      "end": {
        "line": 1233,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "***********************************************************************\n\nqooxdoo - the new era of web development\n\nhttp://qooxdoo.org\n\nCopyright:\n2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n2018 Zenesis Limited, http://www.zenesis.com\n\nLicense:\nMIT: https://opensource.org/licenses/MIT\nSee the LICENSE file in the project's top-level directory for details.\n\nAuthors:\nTil Schneider (til132)\nSebastian Werner (wpbasti)\nAndreas Ecker (ecker)\nFabian Jakobs (fjakobs)\nJohn Spackman (johnspackman) of Zenesis Ltd (http://www.zenesis.com)\n\n***********************************************************************"
        },
        {
          "name": "@description",
          "body": ""
        }
      ],
      "@require": [
        {
          "name": "@require",
          "body": "qx.module.event.GestureHandler"
        },
        {
          "name": "@require",
          "body": "qx.module.Attribute"
        },
        {
          "name": "@require",
          "body": "qx.module.event.Native"
        }
      ]
    }
  },
  "type": "class",
  "isAbstract": false,
  "isStatic": false,
  "isSingleton": false,
  "construct": {
    "location": {
      "start": {
        "line": 42,
        "column": 2
      },
      "end": {
        "line": 47,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "Creates an info panel. An info panel shows the information about one item\ntype (e.g. for public methods)."
        }
      ],
      "@param": [
        {
          "name": "@param",
          "body": "labelText\n{String} the label text describing the node type.",
          "paramName": "labelText",
          "description": " the label text describing the node type.",
          "type": "String"
        }
      ]
    }
  },
  "properties": {
    "element": {
      "location": {
        "start": {
          "line": 52,
          "column": 4
        },
        "end": {
          "line": 57,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "top level DOM node of the panel"
          }
        ]
      },
      "name": "element",
      "propertyType": "new",
      "apply": "_applyElement",
      "nullable": true,
      "allowNull": true,
      "check": "Element"
    },
    "isOpen": {
      "location": {
        "start": {
          "line": 60,
          "column": 4
        },
        "end": {
          "line": 63,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "whether the info panel is open"
          }
        ]
      },
      "name": "isOpen",
      "propertyType": "new",
      "init": true,
      "check": "Boolean",
      "defaultValue": true
    },
    "docNode": {
      "location": {
        "start": {
          "line": 65,
          "column": 4
        },
        "end": {
          "line": 68,
          "column": 5
        }
      },
      "name": "docNode",
      "propertyType": "new",
      "async": true,
      "nullable": true,
      "allowNull": true
    },
    "qxOwner": {
      "type": "property",
      "name": "qxOwner",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    },
    "qxObjectId": {
      "type": "property",
      "name": "qxObjectId",
      "abstract": false,
      "mixin": true,
      "access": "public",
      "overriddenFrom": "qx.core.MObjectId"
    }
  },
  "members": {
    "_labelText": {
      "location": {
        "start": {
          "line": 73,
          "column": 4
        },
        "end": {
          "line": 73,
          "column": 20
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "_icon": {
      "location": {
        "start": {
          "line": 74,
          "column": 4
        },
        "end": {
          "line": 74,
          "column": 15
        }
      },
      "type": "variable",
      "access": "protected"
    },
    "getPanelTitle": {
      "location": {
        "start": {
          "line": 81,
          "column": 4
        },
        "end": {
          "line": 83,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the title of the panel"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getPanelIcon": {
      "location": {
        "start": {
          "line": 90,
          "column": 4
        },
        "end": {
          "line": 92,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns the icon for the panel"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String}",
            "type": "String",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "canDisplayItem": {
      "location": {
        "start": {
          "line": 99,
          "column": 4
        },
        "end": {
          "line": 101,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Whether the panel can display the given item node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} Whether the panel can display the given item node",
            "type": "Boolean",
            "description": " Whether the panel can display the given item node"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemTypeHtml": {
      "location": {
        "start": {
          "line": 114,
          "column": 4
        },
        "end": {
          "line": 116,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the type HTML string of an item."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{qxl.apiviewer.dao.Class} the doc node of the currently displayed\nclass",
            "paramName": "currentClassDocNode",
            "description": " the doc node of the currently displayed\nclass",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML showing the information about the method.",
            "type": "String",
            "description": " the HTML showing the information about the method."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemTitleHtml": {
      "location": {
        "start": {
          "line": 129,
          "column": 4
        },
        "end": {
          "line": 131,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the title HTML string of an item."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{qxl.apiviewer.dao.Class} the doc node of the currently displayed\nclass",
            "paramName": "currentClassDocNode",
            "description": " the doc node of the currently displayed\nclass",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML showing the information about the method.",
            "type": "String",
            "description": " the HTML showing the information about the method."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemTextHtml": {
      "location": {
        "start": {
          "line": 146,
          "column": 4
        },
        "end": {
          "line": 148,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the description text HTML string of an item."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{qxl.apiviewer.dao.Class} the doc node of the currently displayed\nclass",
            "paramName": "currentClassDocNode",
            "description": " the doc node of the currently displayed\nclass",
            "type": "qxl.apiviewer.dao.Class"
          },
          {
            "name": "@param",
            "body": "showDetails\n{Boolean} whether to show the details.",
            "paramName": "showDetails",
            "description": " whether to show the details.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML showing the information about the method.",
            "type": "String",
            "description": " the HTML showing the information about the method."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemTooltip": {
      "location": {
        "start": {
          "line": 150,
          "column": 4
        },
        "end": {
          "line": 152,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "getItemHtml": {
      "location": {
        "start": {
          "line": 165,
          "column": 4
        },
        "end": {
          "line": 222,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing the information about a class item. The root\nHTML element must be a table row (&lt;tr&gt;)."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "showDetails\n{Boolean} whether to show the details.",
            "paramName": "showDetails",
            "description": " whether to show the details.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML showing the information about the method.",
            "type": "String",
            "description": " the HTML showing the information about the method."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "itemHasDetails": {
      "location": {
        "start": {
          "line": 236,
          "column": 4
        },
        "end": {
          "line": 238,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Checks whether a class item has details. This method is abstract. Sub\nclasses must override it."
          }
        ],
        "@abstract": [
          {
            "name": "@abstract",
            "body": ""
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{qxl.apiviewer.dao.Class} the doc node of the currently displayed\nclass",
            "paramName": "currentClassDocNode",
            "description": " the doc node of the currently displayed\nclass",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the class item has details.",
            "type": "Boolean",
            "description": " whether the class item has details."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__encodeObject": {
      "location": {
        "start": {
          "line": 240,
          "column": 4
        },
        "end": {
          "line": 242,
          "column": 5
        }
      },
      "type": "function",
      "access": "private"
    },
    "getPanelHtml": {
      "location": {
        "start": {
          "line": 249,
          "column": 4
        },
        "end": {
          "line": 261,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Get the HTML fragment of the info panel"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HTML fragment of the info panel",
            "type": "String",
            "description": " HTML fragment of the info panel"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_getPanelItems": {
      "location": {
        "start": {
          "line": 273,
          "column": 4
        },
        "end": {
          "line": 305,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a list of all items to display in the panel"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "showInherited\n{Boolean} whether to show inherited items",
            "paramName": "showInherited",
            "description": " whether to show inherited items",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{qxl.apiviewer.dao.Class} the currently displayed class",
            "paramName": "currentClassDocNode",
            "description": " the currently displayed class",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxl.apiviewer.dao.ClassItem[]} list of all items to display in the\npanel",
            "type": "qxl.apiviewer.dao.ClassItem[]",
            "description": " list of all items to display in the\npanel"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "_canShowInherited": {
      "location": {
        "start": {
          "line": 307,
          "column": 4
        },
        "end": {
          "line": 309,
          "column": 5
        }
      },
      "type": "function",
      "access": "protected"
    },
    "getPanelItemObjects": {
      "location": {
        "start": {
          "line": 311,
          "column": 4
        },
        "end": {
          "line": 313,
          "column": 5
        }
      },
      "type": "function",
      "access": "public"
    },
    "__filterItems": {
      "location": {
        "start": {
          "line": 328,
          "column": 4
        },
        "end": {
          "line": 344,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Filter the item list to display only the desired items."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "nodeArr\n{qxl.apiviewer.dao.ClassItem[]} array of class items",
            "paramName": "nodeArr",
            "description": " array of class items",
            "type": "qxl.apiviewer.dao.ClassItem[]"
          },
          {
            "name": "@param",
            "body": "showProtected\n{Boolean} whether to show protected items",
            "paramName": "showProtected",
            "description": " whether to show protected items",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "showPrivate\n{Boolean} whether to show private items",
            "paramName": "showPrivate",
            "description": " whether to show private items",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "showInternal\n{Boolean} whether to show internal items",
            "paramName": "showInternal",
            "description": " whether to show internal items",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxl.apiviewer.dao.ClassItem[]} filtered list of items",
            "type": "qxl.apiviewer.dao.ClassItem[]",
            "description": " filtered list of items"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "_displayNodes": {
      "location": {
        "start": {
          "line": 346,
          "column": 4
        },
        "end": {
          "line": 366,
          "column": 5
        }
      },
      "type": "function",
      "access": "protected"
    },
    "update": {
      "location": {
        "start": {
          "line": 377,
          "column": 4
        },
        "end": {
          "line": 400,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Updates an info panel."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "classViewer\n{qxl.apiviewer.ui.ClassViewer} parent class viewer widget.",
            "paramName": "classViewer",
            "description": " parent class viewer widget.",
            "type": "qxl.apiviewer.ui.ClassViewer"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{qxl.apiviewer.dao.Class} the currently displayed class",
            "paramName": "currentClassDocNode",
            "description": " the currently displayed class",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qx.Promise}",
            "type": "qx.Promise",
            "description": ""
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_applyElement": {
      "location": {
        "start": {
          "line": 402,
          "column": 4
        },
        "end": {
          "line": 405,
          "column": 5
        }
      },
      "type": "function",
      "access": "protected",
      "applyFor": [
        "element"
      ]
    },
    "getTitleElement": {
      "location": {
        "start": {
          "line": 408,
          "column": 4
        },
        "end": {
          "line": 410,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "DOM node of the title of the panel"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getBodyElement": {
      "location": {
        "start": {
          "line": 413,
          "column": 4
        },
        "end": {
          "line": 415,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "DOM node of the body of the panel"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemElement": {
      "location": {
        "start": {
          "line": 427,
          "column": 4
        },
        "end": {
          "line": 438,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the HTML element showing the details of an item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "panel\n{InfoPanel} the info panel of the item.",
            "paramName": "panel",
            "description": " the info panel of the item.",
            "type": "qxl.apiviewer.ui.panels.InfoPanel"
          },
          {
            "name": "@param",
            "body": "name\n{String} the item's name.",
            "paramName": "name",
            "description": " the item's name.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Element} the HTML element showing the details of the item.",
            "type": "Element",
            "description": " the HTML element showing the details of the item."
          }
        ],
        "@ignore": [
          {
            "name": "@ignore",
            "body": "getElementsByTagName"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "toggleShowItemDetails": {
      "location": {
        "start": {
          "line": 451,
          "column": 4
        },
        "end": {
          "line": 486,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Event handler. Called when the user clicked a button for showing/hiding\nthe details of an item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "panelHashCode\n{Integer} hash code of the panel object.",
            "paramName": "panelHashCode",
            "description": " hash code of the panel object.",
            "type": "Integer"
          },
          {
            "name": "@param",
            "body": "name\n{String} the name of the item.",
            "paramName": "name",
            "description": " the name of the item.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "fromClassName\n{String} the name of the class the item the item was defined in.",
            "paramName": "fromClassName",
            "description": " the name of the class the item the item was defined in.",
            "type": "String"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "_postProcessLinks": {
      "location": {
        "start": {
          "line": 494,
          "column": 4
        },
        "end": {
          "line": 531,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Convert mouseup and click listener attached to tap / pointerup listener."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "el\n{Element} The element containing the links.",
            "paramName": "el",
            "description": " The element containing the links.",
            "type": "Element"
          }
        ]
      },
      "type": "function",
      "access": "protected"
    },
    "getQxOwner": {
      "type": "function",
      "name": "getQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "qx.core.Object",
            "desc": "Returns the value for qxOwner"
          }
        ]
      }
    },
    "setQxOwner": {
      "type": "function",
      "name": "setQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxOwner</code>.\n\nFor further details take a look at the property definition: {@link #qxOwner}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "qx.core.Object",
            "paramName": "value",
            "desc": "Value for qxOwner"
          }
        ]
      }
    },
    "resetQxOwner": {
      "type": "function",
      "name": "resetQxOwner",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getQxObjectId": {
      "type": "function",
      "name": "getQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "desc": "Returns the value for qxObjectId"
          }
        ]
      }
    },
    "setQxObjectId": {
      "type": "function",
      "name": "setQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>qxObjectId</code>.\n\nFor further details take a look at the property definition: {@link #qxObjectId}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "paramName": "value",
            "desc": "Value for qxObjectId"
          }
        ]
      }
    },
    "resetQxObjectId": {
      "type": "function",
      "name": "resetQxObjectId",
      "abstract": false,
      "mixin": false,
      "inherited": true,
      "access": "public",
      "overriddenFrom": "qx.core.Object",
      "property": "reset"
    },
    "getElement": {
      "type": "function",
      "name": "getElement",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>element</code>.\n\nFor further details take a look at the property definition: {@link #element}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Element",
            "desc": "Returns the value for element"
          }
        ]
      }
    },
    "setElement": {
      "type": "function",
      "name": "setElement",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>element</code>.\n\nFor further details take a look at the property definition: {@link #element}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Element",
            "paramName": "value",
            "desc": "Value for element"
          }
        ]
      }
    },
    "resetElement": {
      "type": "function",
      "name": "resetElement",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>element</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #element}."
          }
        ]
      }
    },
    "getIsOpen": {
      "type": "function",
      "name": "getIsOpen",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>isOpen</code>.\n\nFor further details take a look at the property definition: {@link #isOpen}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for isOpen"
          }
        ]
      }
    },
    "isIsOpen": {
      "type": "function",
      "name": "isIsOpen",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "is",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>isOpen</code>.\n\nFor further details take a look at the property definition: {@link #isOpen}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Boolean",
            "desc": "Returns the value for isOpen"
          }
        ]
      }
    },
    "setIsOpen": {
      "type": "function",
      "name": "setIsOpen",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>isOpen</code>.\n\nFor further details take a look at the property definition: {@link #isOpen}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "Boolean",
            "paramName": "value",
            "desc": "Value for isOpen"
          }
        ]
      }
    },
    "resetIsOpen": {
      "type": "function",
      "name": "resetIsOpen",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>isOpen</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #isOpen}."
          }
        ]
      }
    },
    "getDocNode": {
      "type": "function",
      "name": "getDocNode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "get",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets the (computed) value of the property <code>docNode</code>.\n\nFor further details take a look at the property definition: {@link #docNode}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "any",
            "desc": "Returns the value for docNode"
          }
        ]
      }
    },
    "setDocNode": {
      "type": "function",
      "name": "setDocNode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "set",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>docNode</code>.\n\nFor further details take a look at the property definition: {@link #docNode}."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for docNode"
          }
        ]
      }
    },
    "resetDocNode": {
      "type": "function",
      "name": "resetDocNode",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "reset",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Resets the user value of the property <code>docNode</code>.\n\nThe computed value falls back to the next available value e.g. appearance, init or inheritance value depending on the property configuration and value availability.\n\nFor further details take a look at the property definition: {@link #docNode}."
          }
        ]
      }
    },
    "getDocNodeAsync": {
      "type": "function",
      "name": "getDocNodeAsync",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "getAsync",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns a {@link qx.Promise} which resolves to the (computed) value of the property <code>docNode</code>.\nFor further details take a look at the property definition: {@link #docNode}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Promise",
            "desc": "Returns the value for docNode"
          }
        ]
      }
    },
    "setDocNodeAsync": {
      "type": "function",
      "name": "setDocNodeAsync",
      "abstract": false,
      "mixin": false,
      "inherited": false,
      "access": "public",
      "property": "setAsync",
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Sets the user value of the property <code>docNode</code>, returns a {@link qx.Promise} which resolves when the value change has fully completed (in the case where there are asynchronous apply methods or events).\n\nFor further details take a look at the property definition: {@link #docNode}."
          }
        ],
        "@return": [
          {
            "name": "@return",
            "type": "Promise",
            "desc": "Returns the value for docNode"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "type": "any",
            "paramName": "value",
            "desc": "Value for docNode"
          }
        ]
      }
    }
  },
  "destruct": {
    "location": {
      "start": {
        "line": 540,
        "column": 2
      },
      "end": {
        "line": 542,
        "column": 3
      }
    },
    "jsdoc": {
      "@description": [
        {
          "name": "@description",
          "body": "****************************************************************************\nDESTRUCTOR\n****************************************************************************"
        }
      ]
    }
  },
  "statics": {
    "ITEM_SPEC_REGEX": {
      "location": {
        "start": {
          "line": 550,
          "column": 4
        },
        "end": {
          "line": 550,
          "column": 67
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "{regexp} The regexp for parsing a item name (e.g.\n\"mypackage.MyClass#MY_CONSTANT alternative text\")."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "SENTENCE_END_REGEX": {
      "location": {
        "start": {
          "line": 553,
          "column": 4
        },
        "end": {
          "line": 553,
          "column": 40
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "{regexp} The regexp that finds the end of a sentence."
          }
        ]
      },
      "type": "variable",
      "access": "public"
    },
    "resolveLinkAttributes": {
      "location": {
        "start": {
          "line": 565,
          "column": 4
        },
        "end": {
          "line": 583,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates HTML that replaces all &#64;link-attributes with links."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "description\n{String} the description.",
            "paramName": "description",
            "description": " the description.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "packageBaseClass\n{qxl.apiviewer.dao.Class?null} the doc node of the class to use for\nauto-adding packages.",
            "paramName": "packageBaseClass",
            "description": " the doc node of the class to use for\nauto-adding packages.",
            "optional": true,
            "defaultValue": "null",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HTML fragment",
            "type": "String",
            "description": " HTML fragment"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createItemLinkHtml": {
      "location": {
        "start": {
          "line": 601,
          "column": 4
        },
        "end": {
          "line": 763,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML for a link to an item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "linkText\n{String} the link text (e.g. \"mypackage.MyClass#myMethod alt\ntext\")",
            "paramName": "linkText",
            "description": " the link text (e.g. \"mypackage.MyClass#myMethod alt\ntext\")",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "packageBaseClass\n{qxl.apiviewer.dao.Class?null} the doc node of the class to use when\nauto-adding the package to a class name having no package\nspecified. If null, no automatic package addition is done.",
            "paramName": "packageBaseClass",
            "description": " the doc node of the class to use when\nauto-adding the package to a class name having no package\nspecified. If null, no automatic package addition is done.",
            "optional": true,
            "defaultValue": "null",
            "type": "qxl.apiviewer.dao.Class"
          },
          {
            "name": "@param",
            "body": "useIcon\n{Boolean?true} whether to add an icon to the link.",
            "paramName": "useIcon",
            "description": " whether to add an icon to the link.",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          },
          {
            "name": "@param",
            "body": "useShortName\n{Boolean?false} whether to use the short name.",
            "paramName": "useShortName",
            "description": " whether to use the short name.",
            "optional": true,
            "defaultValue": "false",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HTML fragment of the link",
            "type": "String",
            "description": " HTML fragment of the link"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createSeeAlsoHtml": {
      "location": {
        "start": {
          "line": 772,
          "column": 4
        },
        "end": {
          "line": 799,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing the &#64;see attributes of an item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML showing the &#64;see attributes.",
            "type": "String",
            "description": " the HTML showing the &#64;see attributes."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createInheritedFromHtml": {
      "location": {
        "start": {
          "line": 811,
          "column": 4
        },
        "end": {
          "line": 820,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing information about inheritance"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} item to get the information from",
            "paramName": "node",
            "description": " item to get the information from",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{qxl.apiviewer.dao.Class} the current class shown in the class\nviewer",
            "paramName": "currentClassDocNode",
            "description": " the current class shown in the class\nviewer",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HTML fragment",
            "type": "String",
            "description": " HTML fragment"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createOverwriddenFromHtml": {
      "location": {
        "start": {
          "line": 829,
          "column": 4
        },
        "end": {
          "line": 839,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing whether the item is overridden"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} item to get the the information from",
            "paramName": "node",
            "description": " item to get the the information from",
            "type": "qxl.apiviewer.dao.ClassItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HTML fragment",
            "type": "String",
            "description": " HTML fragment"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createIncludedFromHtml": {
      "location": {
        "start": {
          "line": 851,
          "column": 4
        },
        "end": {
          "line": 862,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing whether the item is included from a mixin"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} item to get the the information from",
            "paramName": "node",
            "description": " item to get the the information from",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{qxl.apiviewer.dao.Class} the current class shown in the class\nviewer",
            "paramName": "currentClassDocNode",
            "description": " the current class shown in the class\nviewer",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HTML fragment",
            "type": "String",
            "description": " HTML fragment"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__getItemFromClassHierarchy": {
      "location": {
        "start": {
          "line": 875,
          "column": 4
        },
        "end": {
          "line": 890,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets a class item from baseClassNode. if it is not found there, the\nclass' hierarchy is searched until the item is found."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "itemName\n{String} the name of the item.",
            "paramName": "itemName",
            "description": " the name of the item.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "baseClassNode\n{qxl.apiviewer.dao.Class} class doc node",
            "paramName": "baseClassNode",
            "description": " class doc node",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{qxl.apiviewer.dao.ClassItem} the classItem",
            "type": "qxl.apiviewer.dao.ClassItem",
            "description": " the classItem"
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "createDescriptionHtml": {
      "location": {
        "start": {
          "line": 905,
          "column": 4
        },
        "end": {
          "line": 916,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing the description of an item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.Node} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.Node"
          },
          {
            "name": "@param",
            "body": "packageBaseClass\n{qxl.apiviewer.dao.Class|qxl.apiviewer.dao.Package?null} the doc node of\nthe class to use for auto-adding packages.",
            "paramName": "packageBaseClass",
            "description": " the doc node of\nthe class to use for auto-adding packages.",
            "optional": true,
            "defaultValue": "null",
            "type": [
              "qxl.apiviewer.dao.Class",
              "qxl.apiviewer.dao.Package"
            ]
          },
          {
            "name": "@param",
            "body": "showDetails\n{Boolean} whether to show details. If <code>false</code> only\nthe first sentence of the description will be shown.",
            "paramName": "showDetails",
            "description": " whether to show details. If <code>false</code> only\nthe first sentence of the description will be shown.",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML showing the description.",
            "type": "String",
            "description": " the HTML showing the description."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "__extractFirstSentence": {
      "location": {
        "start": {
          "line": 925,
          "column": 4
        },
        "end": {
          "line": 942,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Extracts the first sentence from a text."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "text\n{String} the text.",
            "paramName": "text",
            "description": " the text.",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the first sentence from the text.",
            "type": "String",
            "description": " the first sentence from the text."
          }
        ]
      },
      "type": "function",
      "access": "private"
    },
    "descriptionHasDetails": {
      "location": {
        "start": {
          "line": 952,
          "column": 4
        },
        "end": {
          "line": 959,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Returns whether the description of an item has details (has more than one\nsentence)."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.Node} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.Node"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{Boolean} whether the description of an item has details.",
            "type": "Boolean",
            "description": " whether the description of an item has details."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createTypeHtml": {
      "location": {
        "start": {
          "line": 974,
          "column": 4
        },
        "end": {
          "line": 1036,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing the type of a doc node."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "typeNode\n{qxl.apiviewer.dao.ClassItem} the doc node to show the type for.",
            "paramName": "typeNode",
            "description": " the doc node to show the type for.",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "defaultType\n{String} the type name to use if <code>typeNode</code> is\n<code>null</code> or defines no type.",
            "paramName": "defaultType",
            "description": " the type name to use if <code>typeNode</code> is\n<code>null</code> or defines no type.",
            "type": "String"
          },
          {
            "name": "@param",
            "body": "useShortName\n{Boolean?true} whether to use short class names (without\npackage).",
            "paramName": "useShortName",
            "description": " whether to use short class names (without\npackage).",
            "optional": true,
            "defaultValue": "true",
            "type": "Boolean"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML showing the type.",
            "type": "String",
            "description": " the HTML showing the type."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createErrorHtml": {
      "location": {
        "start": {
          "line": 1047,
          "column": 4
        },
        "end": {
          "line": 1078,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing the documentation errors of an item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.Node} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.Node"
          },
          {
            "name": "@param",
            "body": "currentClassDocNode\n{Map} the doc node of the currently displayed class",
            "paramName": "currentClassDocNode",
            "description": " the doc node of the currently displayed class",
            "type": "Map"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML showing the documentation errors.",
            "type": "String",
            "description": " the HTML showing the documentation errors."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createDeprecationHtml": {
      "location": {
        "start": {
          "line": 1090,
          "column": 4
        },
        "end": {
          "line": 1107,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing whether the item is deprecated"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          },
          {
            "name": "@param",
            "body": "itemName\n{String} type of the item, e.g. \"method\", \"property\",\n\"constant\", ...",
            "paramName": "itemName",
            "description": " type of the item, e.g. \"method\", \"property\",\n\"constant\", ...",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML fragment.",
            "type": "String",
            "description": " the HTML fragment."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createAccessHtml": {
      "location": {
        "start": {
          "line": 1116,
          "column": 4
        },
        "end": {
          "line": 1137,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing the access protection for a class item."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML fragment.",
            "type": "String",
            "description": " the HTML fragment."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createInfoRequiredByHtml": {
      "location": {
        "start": {
          "line": 1146,
          "column": 4
        },
        "end": {
          "line": 1157,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the HTML showing interfaces requiring this node"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML.",
            "type": "String",
            "description": " the HTML."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "createSourceLinkHtml": {
      "location": {
        "start": {
          "line": 1166,
          "column": 4
        },
        "end": {
          "line": 1188,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Creates the link to the source file that definen an item"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.ClassItem} the doc node of the item.",
            "paramName": "node",
            "description": " the doc node of the item.",
            "type": "qxl.apiviewer.dao.ClassItem"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} the HTML.",
            "type": "String",
            "description": " the HTML."
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "setTitleClass": {
      "location": {
        "start": {
          "line": 1200,
          "column": 4
        },
        "end": {
          "line": 1204,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Wraps a HTML fragment with a \"span\" element with CSS classes for the\nitem."
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.Class} class doc node",
            "paramName": "node",
            "description": " class doc node",
            "type": "qxl.apiviewer.dao.Class"
          },
          {
            "name": "@param",
            "body": "title\n{String} original title",
            "paramName": "title",
            "description": " original title",
            "type": "String"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} HMTL fragment",
            "type": "String",
            "description": " HMTL fragment"
          }
        ]
      },
      "type": "function",
      "access": "public"
    },
    "getItemCssClasses": {
      "location": {
        "start": {
          "line": 1213,
          "column": 4
        },
        "end": {
          "line": 1230,
          "column": 5
        }
      },
      "jsdoc": {
        "@description": [
          {
            "name": "@description",
            "body": "Gets CSS classes for a class item"
          }
        ],
        "@param": [
          {
            "name": "@param",
            "body": "node\n{qxl.apiviewer.dao.Class} class doc node",
            "paramName": "node",
            "description": " class doc node",
            "type": "qxl.apiviewer.dao.Class"
          }
        ],
        "@return": [
          {
            "name": "@return",
            "body": "{String} CSS classes separated by \" \"",
            "type": "String",
            "description": " CSS classes separated by \" \""
          }
        ]
      },
      "type": "function",
      "access": "public"
    }
  },
  "descendants": [
    "qxl.apiviewer.ui.panels.ClassPanel",
    "qxl.apiviewer.ui.panels.PackagePanel",
    "qxl.apiviewer.ui.panels.EventPanel",
    "qxl.apiviewer.ui.panels.ConstantPanel",
    "qxl.apiviewer.ui.panels.PropertyPanel",
    "qxl.apiviewer.ui.panels.ChildControlsPanel",
    "qxl.apiviewer.ui.panels.AbstractMethodPanel"
  ]
}