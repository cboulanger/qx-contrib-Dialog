{
  "version": 3,
  "sources": [
    "contrib/qooxdoo_qxl.apiviewer_v0.1.12/source/class/qxl/apiviewer/ui/PackageTree.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "ui",
    "tree",
    "Tree",
    "construct",
    "setDecorator",
    "setPadding",
    "__root",
    "TreeFolder",
    "setOpen",
    "setRoot",
    "setSelection",
    "_classTreeNodeHash",
    "members",
    "setTreeData",
    "docTree",
    "_docTree",
    "__fillPackageNode",
    "_wantedClassName",
    "selectTreeNodeByClassName",
    "className",
    "Promise",
    "resolve",
    "scrollChildIntoView",
    "nameParts",
    "split",
    "name",
    "nameIndex",
    "next",
    "treeNode",
    "loading",
    "then",
    "length",
    "__getPackageNodeOpener",
    "packageTreeNode",
    "packageDoc",
    "depth",
    "self",
    "loaded",
    "setOpenSymbolMode",
    "docNode",
    "PackageTree",
    "qxl",
    "apiviewer",
    "packagesDoc",
    "getPackages",
    "sort",
    "l",
    "r",
    "getFullName",
    "forEach",
    "iconUrl",
    "TreeUtil",
    "getIconUrl",
    "segs",
    "getName",
    "setIcon",
    "setUserData",
    "add",
    "addListener",
    "loadDependedClasses",
    "classes",
    "console",
    "log",
    "classname",
    "classDoc",
    "classTreeNode",
    "treeType",
    "PACKAGE_TREE",
    "destruct",
    "_disposeObjects"
  ],
  "mappings": "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",
  "file": "PackageTree.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n     2018 Zenesis Limited, http://www.zenesis.com\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n     * Jonathan WeiÃŸ (jonathan_rass)\n     * John Spackman (johnspackman)\n\n************************************************************************ */\n\n\n/**\n * The package tree.\n */\nqx.Class.define(\"qxl.apiviewer.ui.PackageTree\",\n{\n  extend : qx.ui.tree.Tree,\n\n\n  construct : function()\n  {\n    this.base(arguments, \"Documentation\");\n\n    this.setDecorator(null);\n    this.setPadding(0);\n\n    this.__root = new qx.ui.tree.TreeFolder(\"Packages\");\n    this.__root.setOpen(true);\n    this.setRoot(this.__root);\n    this.setSelection([this.__root]);\n\n    // TODO: Is this workaround still needed?\n    // Workaround: Since navigating in qx.ui.tree.Tree doesn't work, we've to\n    // maintain a hash that keeps the tree nodes for class names\n    this._classTreeNodeHash = {};\n  },\n\n\n  /*\n   * ****************************************************************************\n   * MEMBERS\n   * ****************************************************************************\n   */\n\n  members :\n  {\n\n    __root : null,\n\n    /**\n     * Updates the tree on the left.\n     * \n     * @param docTree\n     *          {qxl.apiviewer.dao.Package} the documentation tree to use for\n     *          updating.\n     * @return {void}\n     */\n    setTreeData : function(docTree)\n    {\n      this._docTree = docTree;\n\n      // Fill the packages tree\n      this.__fillPackageNode(this.__root, docTree, 0);\n\n      if (this._wantedClassName) {\n        this.selectTreeNodeByClassName(this._wantedClassName);\n        this._wantedClassName = null;\n      }\n    },\n\n\n    /**\n     * Selects a certain class.\n     * \n     * @param className {String} the name of the class to show.\n     * @async\n     * @return {Boolean} Whether the class name was valid and could be selected.\n     */\n    selectTreeNodeByClassName : function(className) {\n      if (this._docTree == null) {\n        // The doc tree has not been loaded yet\n        // -> Remember the wanted class and show when loading is done\n        this._wantedClassName = className;\n        return qx.Promise.resolve(true);\n      }\n      \n      if (!className) {\n        this.__root.setOpen(true);\n        this.setSelection([this.__root]);\n        this.scrollChildIntoView(this.__root);\n        return qx.Promise.resolve(true);\n      }\n      \n      var nameParts = className.split(\".\");\n      var name = \"\";\n      var nameIndex = 0;\n      \n      let next = () => {\n        if (nameIndex > 0)\n          name += \".\";\n        name += nameParts[nameIndex];\n        var treeNode = this._classTreeNodeHash[name];\n        if (!treeNode)\n          return qx.Promise.resolve(false);\n        treeNode.setOpen(true);\n        return treeNode.loading\n          .then(() => {\n            nameIndex++;\n            if (nameIndex < nameParts.length)\n              return next();\n            return treeNode;\n          });\n      }\n      \n      return next()\n        .then(treeNode => {\n          if (treeNode) {\n            this.setSelection([treeNode]);\n            this.scrollChildIntoView(treeNode);\n            return true;\n          } else {\n            this.setSelection([]);\n            return false;\n          }\n        });\n    },\n\n\n    /**\n     * Create a callback which loads the child nodes of a tree folder\n     * \n     * @param packageTreeNode\n     *          {qx.ui.tree.TreeFolder} the package tree folder.\n     * @param packageDoc\n     *          {qxl.apiviewer.dao.Package} the documentation node of the package.\n     * @param depth\n     *          {var} current depth in the tree\n     * @return {Function} the opener callback function\n     */\n    __getPackageNodeOpener : function (packageTreeNode, packageDoc, depth) {\n      var self = this;\n      return function() {\n        if (!packageTreeNode.loaded)\n        {\n          self.__fillPackageNode(packageTreeNode, packageDoc, depth + 1);\n          packageTreeNode.setOpenSymbolMode(\"always\");\n        }\n      }\n    },\n\n\n    /**\n     * Fills a package tree node with tree nodes for the sub packages and\n     * classes.\n     * \n     * @param treeNode\n     *          {qx.ui.tree.TreeFolder} the package tree node.\n     * @param docNode\n     *          {qxl.apiviewer.dao.Package} the documentation node of the package.\n     * @param depth\n     *          {var} current depth in the tree\n     */\n    __fillPackageNode : function(treeNode, docNode, depth)\n    {\n      var PackageTree = qxl.apiviewer.ui.PackageTree;\n\n      var packagesDoc = docNode.getPackages();\n      packagesDoc.sort((l, r) => {\n        l = l.getFullName();\n        r = r.getFullName();\n        return l < r ? -1 : l > r ? 1 : 0;\n      });\n      packagesDoc.forEach(packageDoc => {\n        var iconUrl = qxl.apiviewer.TreeUtil.getIconUrl(packageDoc);\n        var segs = packageDoc.getName().split('.');\n        var packageTreeNode = new qx.ui.tree.TreeFolder(segs[segs.length - 1]);\n        packageTreeNode.setIcon(iconUrl);\n        packageTreeNode.setOpenSymbolMode(\"always\");\n        packageTreeNode.setUserData(\"nodeName\", packageDoc.getFullName());\n        treeNode.add(packageTreeNode);\n\n        // defer adding of child nodes\n        packageTreeNode.addListener(\"changeOpen\", this.__getPackageNodeOpener(packageTreeNode, packageDoc, depth + 1), this);\n\n        // Register the tree node\n        this._classTreeNodeHash[packageDoc.getFullName()] = packageTreeNode;\n      });\n\n      treeNode.loading = docNode.loadDependedClasses().then(classes => {\n        classes.sort((l, r) => {\n          l = l.getFullName();\n          r = r.getFullName();\n          return l < r ? -1 : l > r ? 1 : 0;\n        });\n        console.log(\"docNode=\" + docNode.classname);\n        classes.forEach(classDoc => {\n          var iconUrl = qxl.apiviewer.TreeUtil.getIconUrl(classDoc);\n          var segs = classDoc.getName().split('.');\n          var classTreeNode = new qx.ui.tree.TreeFolder(segs[segs.length - 1]);\n          classTreeNode.setIcon(iconUrl);\n          classTreeNode.setUserData(\"nodeName\", classDoc.getFullName());\n          classTreeNode.treeType = PackageTree.PACKAGE_TREE;\n          treeNode.add(classTreeNode);\n          classTreeNode.loading = qx.Promise.resolve();\n          classTreeNode.loaded = true;\n\n          // Register the tree node\n          this._classTreeNodeHash[classDoc.getFullName()] = classTreeNode;\n          treeNode.loaded = true;\n        });\n        return null;\n      });\n    }\n\n  },\n\n\n  /*\n   * ****************************************************************************\n   * DESTRUCTOR\n   * ****************************************************************************\n   */\n\n  destruct : function()\n  {\n    this._docTree = this._classTreeNodeHash = null;\n    this._disposeObjects(\"__root\")\n  }\n});\n"
  ]
}