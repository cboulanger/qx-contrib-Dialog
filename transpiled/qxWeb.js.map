{
  "version": 3,
  "sources": [
    "/home/travis/build/cboulanger/qx-contrib-Dialog/node_modules/qxcompiler/node_modules/qooxdoo-sdk/framework/source/class/qxWeb.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "extend",
    "type",
    "BaseArray",
    "statics",
    "__init",
    "$$qx",
    "$init",
    "arg",
    "clazz",
    "length",
    "$widget",
    "qxWeb",
    "clean",
    "i",
    "isNode",
    "nodeType",
    "push",
    "isWindow",
    "history",
    "location",
    "document",
    "getAttribute",
    "getByName",
    "col",
    "lang",
    "Array",
    "cast",
    "call",
    "$attach",
    "module",
    "override",
    "name",
    "prototype",
    "undefined",
    "Error",
    "$attachStatic",
    "$attachAll",
    "staticsNamespace",
    "members",
    "indexOf",
    "destination",
    "toUpperCase",
    "$attachInit",
    "init",
    "config",
    "construct",
    "selector",
    "context",
    "isString",
    "bom",
    "Selector",
    "query",
    "filter",
    "Type",
    "isFunction",
    "constructor",
    "matches",
    "unique",
    "slice",
    "begin",
    "end",
    "splice",
    "index",
    "howMany",
    "varargs",
    "apply",
    "arguments",
    "map",
    "callback",
    "thisarg",
    "concat",
    "clone",
    "elem",
    "fromIndex",
    "isArray",
    "l",
    "debug",
    "logThis",
    "elements",
    "forEach",
    "item",
    "console",
    "group",
    "info",
    "groupEnd",
    "_forEachElement",
    "func",
    "ctx",
    "_forEachElementWrapped",
    "idx",
    "arr",
    "defer",
    "window",
    "q"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAAA,KAAGC,SAAH,CAAaC,oBAAb,CAAkCC,aAAlC,EAuCAH,GAAGC,SAAH,CAAaG,MAAb,CAAoB,OAApB,EAA6B;AAC3BC,YAASL,GAAGM,IAAH,CAAQC,SADU;AAE3BC,aAAU;AACR;AACAC,cAAS,EAFD;;AAIR;AACAC,YAAOV,EALC;;AAOR;;;;;;;;;;AAUAW,aAAQ,eAASC,GAAT,EAAcC,KAAd,EAAqB;AAC3B;AACA,YAAID,IAAIE,MAAJ,IAAcF,IAAIE,MAAJ,IAAc,CAA5B,IAAiCF,IAAI,CAAJ,CAAjC,IAA2CA,IAAI,CAAJ,EAAOG,OAAP,YAA0BC,KAAzE,EAAgF;AAC9E,iBAAOJ,IAAI,CAAJ,EAAOG,OAAd;AACD;;AAED,YAAIE,QAAQ,EAAZ;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,IAAIE,MAAxB,EAAgCI,GAAhC,EAAqC;AACnC;AACA,cAAIC,SAAS,CAAC,EAAEP,IAAIM,CAAJ,MAAWN,IAAIM,CAAJ,EAAOE,QAAP,KAAoB,CAApB,IACzBR,IAAIM,CAAJ,EAAOE,QAAP,KAAoB,CADK,IACAR,IAAIM,CAAJ,EAAOE,QAAP,KAAoB,EAD/B,CAAF,CAAd;AAEA,cAAID,MAAJ,EAAY;AACVF,kBAAMI,IAAN,CAAWT,IAAIM,CAAJ,CAAX;AACA;AACD;AACD,cAAII,WAAW,CAAC,EAAEV,IAAIM,CAAJ,KAAUN,IAAIM,CAAJ,EAAOK,OAAjB,IAA4BX,IAAIM,CAAJ,EAAOM,QAAnC,IAA+CZ,IAAIM,CAAJ,EAAOO,QAAxD,CAAhB;AACA,cAAIH,QAAJ,EAAc;AACZL,kBAAMI,IAAN,CAAWT,IAAIM,CAAJ,CAAX;AACD;AACF;;AAED,YAAIN,IAAI,CAAJ,KAAUA,IAAI,CAAJ,EAAOc,YAAjB,IAAiCd,IAAI,CAAJ,EAAOc,YAAP,CAAoB,eAApB,CAAjC,IAAyET,MAAMH,MAAN,GAAe,CAA5F,EAA+F;AAC7FD,kBAAQb,GAAGC,SAAH,CAAa0B,SAAb,CAAuBf,IAAI,CAAJ,EAAOc,YAAP,CAAoB,eAApB,CAAvB,KAAgEb,KAAxE;AACD;;AAED,YAAIe,MAAM5B,GAAG6B,IAAH,CAAQC,KAAR,CAAcC,IAAd,CAAmBd,KAAnB,EAA0BJ,KAA1B,CAAV;AACA,aAAK,IAAIK,IAAE,CAAX,EAAcA,IAAIF,MAAMP,MAAN,CAAaK,MAA/B,EAAuCI,GAAvC,EAA4C;AAC1CF,gBAAMP,MAAN,CAAaS,CAAb,EAAgBc,IAAhB,CAAqBJ,GAArB;AACD;;AAED,eAAOA,GAAP;AACD,OAhDO;;AAmDR;;;;;;;AAOAK,eAAU,iBAASC,MAAT,EAAiBC,QAAjB,EAA2B;AACnC,aAAK,IAAIC,IAAT,IAAiBF,MAAjB,EAAyB;AACvB,cAAIlB,MAAMqB,SAAN,CAAgBD,IAAhB,KAAyBE,SAAzB,IAAsCR,MAAMO,SAAN,CAAgBD,IAAhB,KAAyBE,SAA/D,IAA4EH,aAAa,IAA7F,EAAmG;AACxD;AACvC,oBAAM,IAAII,KAAJ,CAAU,aAAaH,IAAb,GAAoB,sBAA9B,CAAN;AACD;AACF,WAJD,MAIO;AACLpB,kBAAMqB,SAAN,CAAgBD,IAAhB,IAAwBF,OAAOE,IAAP,CAAxB;AACD;AACF;AACF,OApEO;;AAuER;;;;;;;AAOAI,qBAAgB,uBAASN,MAAT,EAAiBC,QAAjB,EAA2B;AACzC,aAAK,IAAIC,IAAT,IAAiBF,MAAjB,EAAyB;AACkB;AACvC,gBAAIlB,MAAMoB,IAAN,KAAeE,SAAf,IAA4BH,aAAa,IAA7C,EAAmD;AACjD,oBAAM,IAAII,KAAJ,CAAU,aAAaH,IAAb,GAAoB,uCAA9B,CAAN;AACD;AACF;AACDpB,gBAAMoB,IAAN,IAAcF,OAAOE,IAAP,CAAd;AACD;AACF,OAvFO;;AAyFR;;;;;;;;;;;;;;;;;;AAkBAK,kBAAa,oBAAS5B,KAAT,EAAgB6B,gBAAhB,EAAkC;AAC7C;AACA,aAAK,IAAIN,IAAT,IAAiBvB,MAAM8B,OAAvB,EAAgC;AAC9B,cAAIP,KAAKQ,OAAL,CAAa,GAAb,MAAsB,CAAtB,IAA2BR,KAAKQ,OAAL,CAAa,GAAb,MAAsB,CAArD,EACA5B,MAAMqB,SAAN,CAAgBD,IAAhB,IAAwBvB,MAAM8B,OAAN,CAAcP,IAAd,CAAxB;AACD;;AAED;AACA,YAAIS,WAAJ;AACA,YAAIH,oBAAoB,IAAxB,EAA8B;AAC5B1B,gBAAM0B,gBAAN,IAA0B1B,MAAM0B,gBAAN,KAA2B,EAArD;AACAG,wBAAc7B,MAAM0B,gBAAN,CAAd;AACD,SAHD,MAGO;AACLG,wBAAc7B,KAAd;AACD;;AAED,aAAK,IAAIoB,IAAT,IAAiBvB,MAAML,OAAvB,EAAgC;AAC9B,cAAI4B,KAAKQ,OAAL,CAAa,GAAb,MAAsB,CAAtB,IAA2BR,KAAKQ,OAAL,CAAa,GAAb,MAAsB,CAAjD,IAAsDR,SAAS,MAA/D,IAAyEA,SAAS,UAAlF,IACAA,SAAS,WADT,IACwBA,SAAS,UADjC,IAC+CA,SAASA,KAAKU,WAAL,EAD5D,EAEAD,YAAYT,IAAZ,IAAoBvB,MAAML,OAAN,CAAc4B,IAAd,CAApB;AACD;AACF,OAhIO;;AAmIR;;;;;;;AAOAW,mBAAc,qBAASC,IAAT,EAAe;AAC3B,aAAKvC,MAAL,CAAYY,IAAZ,CAAiB2B,IAAjB;AACD,OA5IO;;AA+IR;;;;;;;;;;;;;;;;;;;;;;;;AAwBA5C,cAAS,gBAASgC,IAAT,EAAea,MAAf,EAAuB;AAC9B,YAAIA,UAAUX,SAAd,EAAyB;AACvBW,mBAASb,IAAT;AACAA,iBAAO,IAAP;AACD;AACD,eAAOpC,GAAGC,SAAH,CAAaG,MAAb,CAAoB4B,IAApB,CAAyBhC,GAAGC,SAA5B,EAAuCmC,IAAvC,EAA6Ca,MAA7C,CAAP;AACD;AA7KO,KAFiB;;AAmL3B;;;;;;;;;;;;;;;;;;;AAmBAC,eAAY,mBAASC,QAAT,EAAmBC,OAAnB,EAA4B;AACtC,UAAI,CAACD,QAAD,IAAa,gBAAgBnC,KAAjC,EAAwC;AACtC,eAAO,IAAP;AACD;;AAED,UAAI,CAACmC,QAAL,EAAe;AACbA,mBAAW,EAAX;AACD,OAFD,MAGK,IAAInD,GAAGC,SAAH,CAAaoD,QAAb,CAAsBF,QAAtB,CAAJ,EAAqC;AACxC,YAAIC,mBAAmBpC,KAAnB,IAA4BoC,QAAQtC,MAAR,IAAkB,CAAlD,EAAqD;AACnDsC,oBAAUA,QAAQ,CAAR,CAAV;AACD;AACD,YAAIA,mBAAmBpC,KAAvB,EAA8B;AAC5BmC,qBAAW,EAAX;AACD,SAFD,MAEO;AACLA,qBAAWnD,GAAGsD,GAAH,CAAOC,QAAP,CAAgBC,KAAhB,CAAsBL,QAAtB,EAAgCC,OAAhC,CAAX;AACD;AACF,OATI,MAUA,IAAKD,SAAS/B,QAAT,KAAsB,CAAtB,IAA2B+B,SAAS/B,QAAT,KAAsB,CAAjD,IACR+B,SAAS/B,QAAT,KAAsB,EADf,IAEN+B,SAAS5B,OAAT,IAAoB4B,SAAS3B,QAA7B,IAAyC2B,SAAS1B,QAFhD,EAGL;AACE0B,mBAAW,CAACA,QAAD,CAAX;AACD;AACD,aAAOnC,MAAML,KAAN,CAAYwC,QAAZ,EAAsBnC,KAAtB,CAAP;AACD,KA/N0B;;AAkO3B2B,aAAU;AACR;;;;;;;;AAQAc,cAAS,gBAASN,QAAT,EAAmB;AAC1B,YAAInD,GAAG6B,IAAH,CAAQ6B,IAAR,CAAaC,UAAb,CAAwBR,QAAxB,CAAJ,EAAuC;AACrC,iBAAOnC,MAAML,KAAN,CAAYmB,MAAMO,SAAN,CAAgBoB,MAAhB,CAAuBzB,IAAvB,CAA4B,IAA5B,EAAkCmB,QAAlC,CAAZ,EAAyD,KAAKS,WAA9D,CAAP;AACD;AACD,eAAO5C,MAAML,KAAN,CAAYX,GAAGsD,GAAH,CAAOC,QAAP,CAAgBM,OAAhB,CAAwBV,QAAxB,EAAkC,IAAlC,CAAZ,EAAqD,KAAKS,WAA1D,CAAP;AACD,OAdO;;AAiBR;;;;;AAKAE,cAAS,kBAAW;AAClB,YAAIA,SAAS9D,GAAG6B,IAAH,CAAQC,KAAR,CAAcgC,MAAd,CAAqB,IAArB,CAAb;AACA,eAAO9C,MAAML,KAAN,CAAYmD,MAAZ,EAAoB,KAAKF,WAAzB,CAAP;AACD,OAzBO;;AA4BR;;;;;;;AAOAG,aAAQ,eAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAC3B;AACA;AACA,YAAIA,QAAQ3B,SAAZ,EAAuB;AACrB,iBAAOtB,MAAML,KAAN,CAAYmB,MAAMO,SAAN,CAAgB0B,KAAhB,CAAsB/B,IAAtB,CAA2B,IAA3B,EAAiCgC,KAAjC,EAAwCC,GAAxC,CAAZ,EAA0D,KAAKL,WAA/D,CAAP;AACD;AACD,eAAO5C,MAAML,KAAN,CAAYmB,MAAMO,SAAN,CAAgB0B,KAAhB,CAAsB/B,IAAtB,CAA2B,IAA3B,EAAiCgC,KAAjC,CAAZ,EAAqD,KAAKJ,WAA1D,CAAP;AACD,OA1CO;;AA6CR;;;;;;;;;;AAUAM,cAAS,gBAASC,KAAT,EAAiBC,OAAjB,EAA0BC,OAA1B,EAAmC;AAC1C,eAAOrD,MAAML,KAAN,CAAYmB,MAAMO,SAAN,CAAgB6B,MAAhB,CAAuBI,KAAvB,CAA6B,IAA7B,EAAmCC,SAAnC,CAAZ,EAA2D,KAAKX,WAAhE,CAAP;AACD,OAzDO;;AA4DR;;;;;;;;AAQAY,WAAM,aAASC,QAAT,EAAmBC,OAAnB,EAA4B;AAChC,eAAO1D,MAAML,KAAN,CAAYmB,MAAMO,SAAN,CAAgBmC,GAAhB,CAAoBF,KAApB,CAA0B,IAA1B,EAAgCC,SAAhC,CAAZ,EAAwDvD,KAAxD,CAAP;AACD,OAtEO;;AAyER;;;;;;AAMA2D,cAAS,gBAASN,OAAT,EAAkB;AACzB,YAAIO,QAAQ9C,MAAMO,SAAN,CAAgB0B,KAAhB,CAAsB/B,IAAtB,CAA2B,IAA3B,EAAiC,CAAjC,CAAZ;AACA,aAAK,IAAId,IAAE,CAAX,EAAcA,IAAIqD,UAAUzD,MAA5B,EAAoCI,GAApC,EAAyC;AACvC,cAAIqD,UAAUrD,CAAV,aAAwBF,KAA5B,EAAmC;AACjC4D,oBAAQA,MAAMD,MAAN,CAAa7C,MAAMO,SAAN,CAAgB0B,KAAhB,CAAsB/B,IAAtB,CAA2BuC,UAAUrD,CAAV,CAA3B,EAAyC,CAAzC,CAAb,CAAR;AACD,WAFD,MAEO;AACL0D,kBAAMvD,IAAN,CAAWkD,UAAUrD,CAAV,CAAX;AACD;AACF;AACD,eAAOF,MAAML,KAAN,CAAYiE,KAAZ,EAAmB,KAAKhB,WAAxB,CAAP;AACD,OAzFO;;AA4FR;;;;;;;AAOAhB,eAAU,iBAASiC,IAAT,EAAeC,SAAf,EAA0B;AAClC,YAAI,CAACD,IAAL,EAAW;AACT,iBAAO,CAAC,CAAR;AACD;;AAED,YAAI,CAACC,SAAL,EAAgB;AACdA,sBAAY,CAAZ;AACD;;AAED,YAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,iBAAO,CAAC,CAAR;AACD;;AAED,YAAIA,YAAY,CAAhB,EAAmB;AACjBA,sBAAY,KAAKhE,MAAL,GAAcgE,SAA1B;AACA,cAAIA,YAAY,CAAhB,EAAmB;AACjBA,wBAAY,CAAZ;AACD;AACF;;AAED,YAAI9E,GAAG6B,IAAH,CAAQ6B,IAAR,CAAaqB,OAAb,CAAqBF,IAArB,CAAJ,EAAgC;AAC9BA,iBAAOA,KAAK,CAAL,CAAP;AACD;;AAED,aAAK,IAAI3D,IAAI4D,SAAR,EAAmBE,IAAI,KAAKlE,MAAjC,EAAyCI,IAAE8D,CAA3C,EAA8C9D,GAA9C,EAAmD;AACjD,cAAI,KAAKA,CAAL,MAAY2D,IAAhB,EAAsB;AACpB,mBAAO3D,CAAP;AACD;AACF;;AAED,eAAO,CAAC,CAAR;AACD,OAlIO;;AAqIR;;;;;;;;;AASA+D,aAAQ,iBAAW;AACwB;AACvC;AACD;AACD,eAAO,IAAP;AACD,OAnJO;;AAsJR;;;;;;;;;;AAUAC,eAAU,mBAAW;AACsB;;AAEvC;AACA;AACA;AACA,cAAIC,WAAW,EAAf;AACA,eAAKC,OAAL,CAAa,UAASC,IAAT,EAAe;AAC1BF,qBAAS9D,IAAT,CAAcgE,IAAd;AACD,WAFD;;AAIA,cAAIvE,SAAS,KAAKA,MAAlB;;AAEAwE,kBAAQC,KAAR,CAAc,0BAAd;AACAD,kBAAQE,IAAR,CAAa,SAAb,EAAwB1E,MAAxB;AACAwE,kBAAQE,IAAR,CAAa,WAAb,EAA0BL,QAA1B;AACAG,kBAAQE,IAAR,CAAa,WAAb,EAA0B,IAA1B;AACAF,kBAAQG,QAAR;AACD;;AAED,eAAO,IAAP;AACD,OArLO;;AAwLR;;;;;;;;;;AAUAC,uBAAkB,yBAASC,IAAT,EAAeC,GAAf,EAAoB;AACpC,aAAK,IAAI1E,IAAE,CAAN,EAAS8D,IAAE,KAAKlE,MAArB,EAA6BI,IAAE8D,CAA/B,EAAkC9D,GAAlC,EAAuC;AACrC,cAAI,KAAKA,CAAL,MAAY,KAAKA,CAAL,EAAQE,QAAR,KAAqB,CAArB,IAA0B,KAAKF,CAAL,EAAQE,QAAR,KAAqB,EAA3D,CAAJ,EAAoE;AAClEuE,iBAAKrB,KAAL,CAAWsB,OAAO,IAAlB,EAAwB,CAAC,KAAK1E,CAAL,CAAD,EAAUA,CAAV,EAAa,IAAb,CAAxB;AACD;AACF;AACD,eAAO,IAAP;AACD,OAzMO;;AA4MR;;;;;;;;;;AAUA2E,8BAAyB,gCAASF,IAAT,EAAeC,GAAf,EAAoB;AAC3C,aAAKF,eAAL,CAAqB,UAASL,IAAT,EAAeS,GAAf,EAAoBC,GAApB,EAAyB;AAC5CJ,eAAKrB,KAAL,CAAW,IAAX,EAAiB,CAACtD,MAAMqE,IAAN,CAAD,EAAcS,GAAd,EAAmBC,GAAnB,CAAjB;AACD,SAFD,EAEGH,GAFH;AAGA,eAAO,IAAP;AACD;AA3NO,KAlOiB;;AAgc3B;;;AAGAI,WAAQ,eAASxF,OAAT,EAAkB;AACxB,UAAIyF,OAAOC,CAAP,IAAY5D,SAAhB,EAA2B;AACzB2D,eAAOC,CAAP,GAAW1F,OAAX;AACD;AACF;AAvc0B,GAA7B,C;AAvCAQ,QAAMb,aAAN,GAAsBA,aAAtB",
  "file": "qxWeb.js",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2012 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Martin Wittemann (wittemann)\n\n************************************************************************ */\n\n/**\n * The Core module's responsibility is to query the DOM for elements and offer\n * these elements as a collection. The Core module itself does not offer any methods to\n * work with the collection. These methods are added by the other included modules,\n * such as Manipulating or Attributes.\n *\n * Core also provides the plugin API which allows modules to attach either\n * static functions to the global <code>q</code> object or define methods on the\n * collection it returns.\n *\n * By default, the core module is assigned to a global module named <code>q</code>.\n * In case <code>q</code> is already defined, the name <code>qxWeb</code>\n * is used instead.\n *\n * For further details, take a look at the documentation in the\n * <a href='http://manual.qooxdoo.org/${qxversion}/pages/website.html' target='_blank'>user manual</a>.\n *\n * @ignore(q)\n *\n * @group (Core)\n */\nqx.Bootstrap.define(\"qxWeb\", {\n  extend : qx.type.BaseArray,\n  statics : {\n    // internal storage for all initializers\n    __init : [],\n\n    // internal reference to the used qx namespace\n    $$qx : qx,\n\n    /**\n     * Internal helper to initialize collections.\n     *\n     * @param arg {var} An array of Elements which will\n     *   be initialized as {@link q}. All items in the array which are not\n     *   either a window object, a DOM element node or a DOM document node will\n     *   be ignored.\n     * @param clazz {Class} The class of the new collection.\n     * @return {q} A new initialized collection.\n     */\n    $init : function(arg, clazz) {\n      // restore widget instance\n      if (arg.length && arg.length == 1 && arg[0] && arg[0].$widget instanceof qxWeb) {\n        return arg[0].$widget;\n      }\n\n      var clean = [];\n      for (var i = 0; i < arg.length; i++) {\n        // check for node or window object\n        var isNode = !!(arg[i] && (arg[i].nodeType === 1 ||\n          arg[i].nodeType === 9 || arg[i].nodeType === 11));\n        if (isNode) {\n          clean.push(arg[i]);\n          continue;\n        }\n        var isWindow = !!(arg[i] && arg[i].history && arg[i].location && arg[i].document);\n        if (isWindow) {\n          clean.push(arg[i]);\n        }\n      }\n\n      if (arg[0] && arg[0].getAttribute && arg[0].getAttribute(\"data-qx-class\") && clean.length < 2) {\n        clazz = qx.Bootstrap.getByName(arg[0].getAttribute(\"data-qx-class\")) || clazz;\n      }\n\n      var col = qx.lang.Array.cast(clean, clazz);\n      for (var i=0; i < qxWeb.__init.length; i++) {\n        qxWeb.__init[i].call(col);\n      }\n\n      return col;\n    },\n\n\n    /**\n     * This is an API for module development and can be used to attach new methods\n     * to {@link q}.\n     *\n     * @param module {Map} A map containing the methods to attach.\n     * @param override {Boolean?false} Force to override\n     */\n    $attach : function(module, override) {\n      for (var name in module) {\n        if (qxWeb.prototype[name] != undefined && Array.prototype[name] == undefined && override !== true) {\n          if (qx.core.Environment.get(\"qx.debug\")) {\n            throw new Error(\"Method '\" + name + \"' already available.\");\n          }\n        } else {\n          qxWeb.prototype[name] = module[name];\n        }\n      }\n    },\n\n\n    /**\n     * This is an API for module development and can be used to attach new methods\n     * to {@link q}.\n     *\n     * @param module {Map} A map containing the methods to attach.\n     * @param override {Boolean?false} Force to override\n     */\n    $attachStatic : function(module, override) {\n      for (var name in module) {\n        if (qx.core.Environment.get(\"qx.debug\")) {\n          if (qxWeb[name] != undefined && override !== true) {\n            throw new Error(\"Method '\" + name + \"' already available as static method.\");\n          }\n        }\n        qxWeb[name] = module[name];\n      }\n    },\n\n    /**\n     * This is an API for module development and can be used to attach new methods\n     * to {@link q} during runtime according to the following conventions:\n     *\n     * Public members of the module are attached to the collection similar to\n     * <code>qxWeb.$attach</code>. Members beginning with '$' or '_' are ignored.\n     *\n     * Statics of the module are attached to {@link q} similar to\n     * <code>qxWeb.$attachStatic</code>. Statics beginning with '$' or '_', as well as constants\n     * (all upper case) and some qooxdoo-internal statics of the module are ignored.\n     *\n     *\n     * If more fine-grained control outside if these conventions is needed,\n     * simply use <code>qxWeb.$attach</code> or <code>qxWeb$attachStatic</code>.\n     *\n     * @param clazz {Object} the qooxdoo class definition calling this method.\n     * @param staticsNamespace {String?undefined} Specifies the namespace under which statics are attached to {@link q}.\n     */\n    $attachAll : function(clazz, staticsNamespace) {\n      // members\n      for (var name in clazz.members) {\n        if (name.indexOf(\"$\") !== 0 && name.indexOf(\"_\") !== 0)\n        qxWeb.prototype[name] = clazz.members[name];\n      }\n\n      // statics\n      var destination;\n      if (staticsNamespace != null) {\n        qxWeb[staticsNamespace] = qxWeb[staticsNamespace] || {};\n        destination = qxWeb[staticsNamespace];\n      } else {\n        destination = qxWeb;\n      }\n\n      for (var name in clazz.statics) {\n        if (name.indexOf(\"$\") !== 0 && name.indexOf(\"_\") !== 0 && name !== \"name\" && name !== \"basename\" &&\n            name !== \"classname\" && name !== \"toString\" && name !== name.toUpperCase())\n        destination[name] = clazz.statics[name];\n      }\n    },\n\n\n    /**\n     * This is an API for module development and can be used to attach new initialization\n     * methods to {@link q} which will be called when a new collection is\n     * created.\n     *\n     * @param init {Function} The initialization method for a module.\n     */\n    $attachInit : function(init) {\n      this.__init.push(init);\n    },\n\n\n    /**\n     * Define a new class using the qooxdoo class system.\n     *\n     * @param name {String?} Name of the class. If null, the class will not be\n     *   attached to a namespace.\n     * @param config {Map ? null} Class definition structure. The configuration map has the following keys:\n     *     <table>\n     *       <thead>\n     *         <tr><th>Name</th><th>Type</th><th>Description</th></tr>\n     *       </thead>\n     *       <tr><td>extend</td><td>Class</td><td>The super class the current class inherits from.</td></tr>\n     *       <tr><td>construct</td><td>Function</td><td>The constructor of the class.</td></tr>\n     *       <tr><td>statics</td><td>Map</td><td>Map of static values / functions of the class.</td></tr>\n     *       <tr><td>members</td><td>Map</td><td>Map of instance members of the class.</td></tr>\n     *       <tr><td>defer</td><td>Function</td><td>Function that is called at the end of\n     *          processing the class declaration.</td></tr>\n     *     </table>\n     *\n     * <strong>Important hint:</strong> Please do not initialize reference types\n     * (<code>Object</code> or <code>Array</code>) directly inside the <strong>members</strong> section.\n     * Only list and initialize it with <code>null</code>. Initialize your reference type inside the\n     * <code>construct</code>. Check out one of the samples below to get the idea.\n     * @return {Function} The defined class.\n     */\n    define : function(name, config) {\n      if (config == undefined) {\n        config = name;\n        name = null;\n      }\n      return qx.Bootstrap.define.call(qx.Bootstrap, name, config);\n    }\n  },\n\n\n  /**\n   * Primary usage:\n   * Accepts a selector string and returns a collection of found items. The optional context\n   * element can be used to reduce the amount of found elements to children of the\n   * context element. If the context object is a collection, its first item is used.\n   *\n   * Secondary usage:\n   * Creates a collection from an existing DOM element, document node or window object\n   * (or an Array containing any such objects)\n   *\n   * <a href=\"http://sizzlejs.com/\" target=\"_blank\">Sizzle</a> is used as selector engine.\n   * Check out the <a href=\"https://github.com/jquery/sizzle/wiki/Sizzle-Home\" target=\"_blank\">documentation</a>\n   * for more details.\n   *\n   * @param selector {String|Element|Document|Window|Array} Valid selector (CSS3 + extensions),\n   *   window object, DOM element/document or Array of DOM Elements.\n   * @param context {Element|q} Only the children of this element are considered.\n   * @return {q} A collection of DOM elements.\n   */\n  construct : function(selector, context) {\n    if (!selector && this instanceof qxWeb) {\n      return this;\n    }\n\n    if (!selector) {\n      selector = [];\n    }\n    else if (qx.Bootstrap.isString(selector)) {\n      if (context instanceof qxWeb && context.length != 0) {\n        context = context[0];\n      }\n      if (context instanceof qxWeb) {\n        selector = [];\n      } else {\n        selector = qx.bom.Selector.query(selector, context);\n      }\n    }\n    else if ((selector.nodeType === 1 || selector.nodeType === 9 ||\n      selector.nodeType === 11) ||\n      (selector.history && selector.location && selector.document))\n    {\n      selector = [selector];\n    }\n    return qxWeb.$init(selector, qxWeb);\n  },\n\n\n  members : {\n    /**\n     * Gets a new collection containing only those elements that passed the\n     * given filter. This can be either a selector expression or a filter\n     * function.\n     *\n     * @param selector {String|Function} Selector expression or filter function\n     * @return {q} New collection containing the elements that passed the filter\n     */\n    filter : function(selector) {\n      if (qx.lang.Type.isFunction(selector)) {\n        return qxWeb.$init(Array.prototype.filter.call(this, selector), this.constructor);\n      }\n      return qxWeb.$init(qx.bom.Selector.matches(selector, this), this.constructor);\n    },\n\n\n    /**\n     * Recreates a collection which is free of all duplicate elements from the original.\n     *\n     * @return {q} Returns a copy with no duplicates\n     */\n    unique : function() {\n      var unique = qx.lang.Array.unique(this);\n      return qxWeb.$init(unique, this.constructor);\n    },\n\n\n    /**\n     * Returns a copy of the collection within the given range.\n     *\n     * @param begin {Number} The index to begin.\n     * @param end {Number?} The index to end.\n     * @return {q} A new collection containing a slice of the original collection.\n     */\n    slice : function(begin, end) {\n      // Old IEs return an empty array if the second argument is undefined\n      // check 'end' explicit for \"undefined\" [BUG #7322]\n      if (end !== undefined) {\n        return qxWeb.$init(Array.prototype.slice.call(this, begin, end), this.constructor);\n      }\n      return qxWeb.$init(Array.prototype.slice.call(this, begin), this.constructor);\n    },\n\n\n    /**\n     * Removes the given number of items and returns the removed items as a new collection.\n     * This method can also add items. Take a look at the\n     * <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice' target='_blank'>documentation of MDN</a> for more details.\n     *\n     * @param index {Number} The index to begin.\n     * @param howMany {Number} the amount of items to remove.\n     * @param varargs {var} As many items as you want to add.\n     * @return {q} A new collection containing the removed items.\n     */\n    splice : function(index , howMany, varargs) {\n      return qxWeb.$init(Array.prototype.splice.apply(this, arguments), this.constructor);\n    },\n\n\n    /**\n     * Returns a new collection containing the modified elements. For more details, check out the\n     * <a href='https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map' target='_blank'>MDN documentation</a>.\n     *\n     * @param callback {Function} Function which produces the new element.\n     * @param thisarg {var} Context of the callback.\n     * @return {q} New collection containing the elements that passed the filter\n     */\n    map : function(callback, thisarg) {\n      return qxWeb.$init(Array.prototype.map.apply(this, arguments), qxWeb);\n    },\n\n\n    /**\n     * Returns a copy of the collection including the given elements.\n     *\n     * @param varargs {var} As many items as you want to add.\n     * @return {q} A new collection containing all items.\n     */\n    concat : function(varargs) {\n      var clone = Array.prototype.slice.call(this, 0);\n      for (var i=0; i < arguments.length; i++) {\n        if (arguments[i] instanceof qxWeb) {\n          clone = clone.concat(Array.prototype.slice.call(arguments[i], 0));\n        } else {\n          clone.push(arguments[i]);\n        }\n      }\n      return qxWeb.$init(clone, this.constructor);\n    },\n\n\n    /**\n     * Returns the index of the given element within the current\n     * collection or -1 if the element is not in the collection\n     * @param elem {Element|Element[]|qxWeb} Element or collection of elements\n     * @param fromIndex {Integer} The index to start the search at\n     * @return {Number} The element's index\n     */\n    indexOf : function(elem, fromIndex) {\n      if (!elem) {\n        return -1;\n      }\n\n      if (!fromIndex) {\n        fromIndex = 0;\n      }\n\n      if (typeof fromIndex !== \"number\") {\n        return -1;\n      }\n\n      if (fromIndex < 0) {\n        fromIndex = this.length + fromIndex;\n        if (fromIndex < 0) {\n          fromIndex = 0;\n        }\n      }\n\n      if (qx.lang.Type.isArray(elem)) {\n        elem = elem[0];\n      }\n\n      for (var i = fromIndex, l = this.length; i<l; i++) {\n        if (this[i] === elem) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n\n    /**\n     * Calls the browser's native debugger to easily allow debugging within\n     * chained calls.\n     *\n     * Unlike the <a href=\"#.logThis\">logThis</a> method this implementation blocks the further processing.\n     *\n     * @return {q} The collection for chaining\n     * @ignore(debugger)\n     */\n    debug : function() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        debugger;\n      }\n      return this;\n    },\n\n\n    /**\n     * Logs information about the current collection, its DOM elements and the\n     * length. Very useful during development to easily check the current state of\n     * your collection and avoid common pitfalls like an empty collection.\n     *\n     * Unlike the <a href=\"#.debug\">debug</a> method this implementation works non-blocking.\n     *\n     * @return {q} The collection for chaining\n     *\n     */\n    logThis : function() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n\n        // loop over the collection elements to make sure we get the current content\n        // of the collection and not the reference values later (they might change depending on\n        // manipulation of the collection)\n        var elements = [];\n        this.forEach(function(item) {\n          elements.push(item);\n        });\n\n        var length = this.length;\n\n        console.group(\"*** Collection infos ***\");\n        console.info(\"Length:\", length);\n        console.info(\"Elements:\", elements);\n        console.info(\"Instance:\", this);\n        console.groupEnd();\n      }\n\n      return this;\n    },\n\n\n    /**\n     * Calls a function for each DOM element  or document fragment in the\n     * collection. This is used for DOM manipulations which can't be\n     * applied to document nodes or window objects.\n     *\n     * @param func {Function} Callback function. Will be called with three arguments:\n     * The element, the element's index within the collection and the collection itself.\n     * @param ctx {Object} The context for the callback function (default: The collection)\n     * @return {q} The collection for chaining\n     */\n    _forEachElement : function(func, ctx) {\n      for (var i=0, l=this.length; i<l; i++) {\n        if (this[i] && (this[i].nodeType === 1 || this[i].nodeType === 11)) {\n          func.apply(ctx || this, [this[i], i, this]);\n        }\n      }\n      return this;\n    },\n\n\n    /**\n     * Calls a function for each DOM element node in the collection. Each node is wrapped\n     * in a collection before the function is called.\n     *\n     * @param func {Function} Callback function. Will be called with three arguments:\n     * The element wrappend in a collection, the element's index within the collection and\n     * the collection itself.\n     * @param ctx {Object} The context for the callback function (default: The collection)\n     * @return {q} The collection for chaining\n     */\n    _forEachElementWrapped : function(func, ctx) {\n      this._forEachElement(function(item, idx, arr) {\n        func.apply(this, [qxWeb(item), idx, arr]);\n      }, ctx);\n      return this;\n    }\n  },\n\n  /**\n   * @ignore(q)\n   */\n  defer : function(statics) {\n    if (window.q == undefined) {\n      window.q = statics;\n    }\n  }\n});\n"
  ]
}